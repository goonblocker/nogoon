function _mergeNamespaces(r, e) {
  for (var t = 0; t < e.length; t++) {
    const n = e[t];
    if (typeof n != "string" && !Array.isArray(n)) {
      for (const s in n)
        if (s !== "default" && !(s in r)) {
          const a = Object.getOwnPropertyDescriptor(n, s);
          a && Object.defineProperty(r, s, a.get ? a : {
            enumerable: !0,
            get: () => n[s]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(r, Symbol.toStringTag, { value: "Module" }));
}
var commonjsGlobal = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function getDefaultExportFromCjs$1(r) {
  return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r;
}
var browserPolyfill$1 = { exports: {} }, browserPolyfill = browserPolyfill$1.exports, hasRequiredBrowserPolyfill;
function requireBrowserPolyfill() {
  return hasRequiredBrowserPolyfill || (hasRequiredBrowserPolyfill = 1, function(r, e) {
    (function(t, n) {
      n(r);
    })(typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : browserPolyfill, function(t) {
      if (!(globalThis.chrome && globalThis.chrome.runtime && globalThis.chrome.runtime.id))
        throw new Error("This script should only be loaded in a browser extension.");
      if (globalThis.browser && globalThis.browser.runtime && globalThis.browser.runtime.id)
        t.exports = globalThis.browser;
      else {
        const n = "The message port closed before a response was received.", s = (a) => {
          const o = {
            alarms: {
              clear: {
                minArgs: 0,
                maxArgs: 1
              },
              clearAll: {
                minArgs: 0,
                maxArgs: 0
              },
              get: {
                minArgs: 0,
                maxArgs: 1
              },
              getAll: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            bookmarks: {
              create: {
                minArgs: 1,
                maxArgs: 1
              },
              get: {
                minArgs: 1,
                maxArgs: 1
              },
              getChildren: {
                minArgs: 1,
                maxArgs: 1
              },
              getRecent: {
                minArgs: 1,
                maxArgs: 1
              },
              getSubTree: {
                minArgs: 1,
                maxArgs: 1
              },
              getTree: {
                minArgs: 0,
                maxArgs: 0
              },
              move: {
                minArgs: 2,
                maxArgs: 2
              },
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              removeTree: {
                minArgs: 1,
                maxArgs: 1
              },
              search: {
                minArgs: 1,
                maxArgs: 1
              },
              update: {
                minArgs: 2,
                maxArgs: 2
              }
            },
            browserAction: {
              disable: {
                minArgs: 0,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              enable: {
                minArgs: 0,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              getBadgeBackgroundColor: {
                minArgs: 1,
                maxArgs: 1
              },
              getBadgeText: {
                minArgs: 1,
                maxArgs: 1
              },
              getPopup: {
                minArgs: 1,
                maxArgs: 1
              },
              getTitle: {
                minArgs: 1,
                maxArgs: 1
              },
              openPopup: {
                minArgs: 0,
                maxArgs: 0
              },
              setBadgeBackgroundColor: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              setBadgeText: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              setIcon: {
                minArgs: 1,
                maxArgs: 1
              },
              setPopup: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              setTitle: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              }
            },
            browsingData: {
              remove: {
                minArgs: 2,
                maxArgs: 2
              },
              removeCache: {
                minArgs: 1,
                maxArgs: 1
              },
              removeCookies: {
                minArgs: 1,
                maxArgs: 1
              },
              removeDownloads: {
                minArgs: 1,
                maxArgs: 1
              },
              removeFormData: {
                minArgs: 1,
                maxArgs: 1
              },
              removeHistory: {
                minArgs: 1,
                maxArgs: 1
              },
              removeLocalStorage: {
                minArgs: 1,
                maxArgs: 1
              },
              removePasswords: {
                minArgs: 1,
                maxArgs: 1
              },
              removePluginData: {
                minArgs: 1,
                maxArgs: 1
              },
              settings: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            commands: {
              getAll: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            contextMenus: {
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              removeAll: {
                minArgs: 0,
                maxArgs: 0
              },
              update: {
                minArgs: 2,
                maxArgs: 2
              }
            },
            cookies: {
              get: {
                minArgs: 1,
                maxArgs: 1
              },
              getAll: {
                minArgs: 1,
                maxArgs: 1
              },
              getAllCookieStores: {
                minArgs: 0,
                maxArgs: 0
              },
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              set: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            devtools: {
              inspectedWindow: {
                eval: {
                  minArgs: 1,
                  maxArgs: 2,
                  singleCallbackArg: !1
                }
              },
              panels: {
                create: {
                  minArgs: 3,
                  maxArgs: 3,
                  singleCallbackArg: !0
                },
                elements: {
                  createSidebarPane: {
                    minArgs: 1,
                    maxArgs: 1
                  }
                }
              }
            },
            downloads: {
              cancel: {
                minArgs: 1,
                maxArgs: 1
              },
              download: {
                minArgs: 1,
                maxArgs: 1
              },
              erase: {
                minArgs: 1,
                maxArgs: 1
              },
              getFileIcon: {
                minArgs: 1,
                maxArgs: 2
              },
              open: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              pause: {
                minArgs: 1,
                maxArgs: 1
              },
              removeFile: {
                minArgs: 1,
                maxArgs: 1
              },
              resume: {
                minArgs: 1,
                maxArgs: 1
              },
              search: {
                minArgs: 1,
                maxArgs: 1
              },
              show: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              }
            },
            extension: {
              isAllowedFileSchemeAccess: {
                minArgs: 0,
                maxArgs: 0
              },
              isAllowedIncognitoAccess: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            history: {
              addUrl: {
                minArgs: 1,
                maxArgs: 1
              },
              deleteAll: {
                minArgs: 0,
                maxArgs: 0
              },
              deleteRange: {
                minArgs: 1,
                maxArgs: 1
              },
              deleteUrl: {
                minArgs: 1,
                maxArgs: 1
              },
              getVisits: {
                minArgs: 1,
                maxArgs: 1
              },
              search: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            i18n: {
              detectLanguage: {
                minArgs: 1,
                maxArgs: 1
              },
              getAcceptLanguages: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            identity: {
              launchWebAuthFlow: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            idle: {
              queryState: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            management: {
              get: {
                minArgs: 1,
                maxArgs: 1
              },
              getAll: {
                minArgs: 0,
                maxArgs: 0
              },
              getSelf: {
                minArgs: 0,
                maxArgs: 0
              },
              setEnabled: {
                minArgs: 2,
                maxArgs: 2
              },
              uninstallSelf: {
                minArgs: 0,
                maxArgs: 1
              }
            },
            notifications: {
              clear: {
                minArgs: 1,
                maxArgs: 1
              },
              create: {
                minArgs: 1,
                maxArgs: 2
              },
              getAll: {
                minArgs: 0,
                maxArgs: 0
              },
              getPermissionLevel: {
                minArgs: 0,
                maxArgs: 0
              },
              update: {
                minArgs: 2,
                maxArgs: 2
              }
            },
            pageAction: {
              getPopup: {
                minArgs: 1,
                maxArgs: 1
              },
              getTitle: {
                minArgs: 1,
                maxArgs: 1
              },
              hide: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              setIcon: {
                minArgs: 1,
                maxArgs: 1
              },
              setPopup: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              setTitle: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              show: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              }
            },
            permissions: {
              contains: {
                minArgs: 1,
                maxArgs: 1
              },
              getAll: {
                minArgs: 0,
                maxArgs: 0
              },
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              request: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            runtime: {
              getBackgroundPage: {
                minArgs: 0,
                maxArgs: 0
              },
              getPlatformInfo: {
                minArgs: 0,
                maxArgs: 0
              },
              openOptionsPage: {
                minArgs: 0,
                maxArgs: 0
              },
              requestUpdateCheck: {
                minArgs: 0,
                maxArgs: 0
              },
              sendMessage: {
                minArgs: 1,
                maxArgs: 3
              },
              sendNativeMessage: {
                minArgs: 2,
                maxArgs: 2
              },
              setUninstallURL: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            sessions: {
              getDevices: {
                minArgs: 0,
                maxArgs: 1
              },
              getRecentlyClosed: {
                minArgs: 0,
                maxArgs: 1
              },
              restore: {
                minArgs: 0,
                maxArgs: 1
              }
            },
            storage: {
              local: {
                clear: {
                  minArgs: 0,
                  maxArgs: 0
                },
                get: {
                  minArgs: 0,
                  maxArgs: 1
                },
                getBytesInUse: {
                  minArgs: 0,
                  maxArgs: 1
                },
                remove: {
                  minArgs: 1,
                  maxArgs: 1
                },
                set: {
                  minArgs: 1,
                  maxArgs: 1
                }
              },
              managed: {
                get: {
                  minArgs: 0,
                  maxArgs: 1
                },
                getBytesInUse: {
                  minArgs: 0,
                  maxArgs: 1
                }
              },
              sync: {
                clear: {
                  minArgs: 0,
                  maxArgs: 0
                },
                get: {
                  minArgs: 0,
                  maxArgs: 1
                },
                getBytesInUse: {
                  minArgs: 0,
                  maxArgs: 1
                },
                remove: {
                  minArgs: 1,
                  maxArgs: 1
                },
                set: {
                  minArgs: 1,
                  maxArgs: 1
                }
              }
            },
            tabs: {
              captureVisibleTab: {
                minArgs: 0,
                maxArgs: 2
              },
              create: {
                minArgs: 1,
                maxArgs: 1
              },
              detectLanguage: {
                minArgs: 0,
                maxArgs: 1
              },
              discard: {
                minArgs: 0,
                maxArgs: 1
              },
              duplicate: {
                minArgs: 1,
                maxArgs: 1
              },
              executeScript: {
                minArgs: 1,
                maxArgs: 2
              },
              get: {
                minArgs: 1,
                maxArgs: 1
              },
              getCurrent: {
                minArgs: 0,
                maxArgs: 0
              },
              getZoom: {
                minArgs: 0,
                maxArgs: 1
              },
              getZoomSettings: {
                minArgs: 0,
                maxArgs: 1
              },
              goBack: {
                minArgs: 0,
                maxArgs: 1
              },
              goForward: {
                minArgs: 0,
                maxArgs: 1
              },
              highlight: {
                minArgs: 1,
                maxArgs: 1
              },
              insertCSS: {
                minArgs: 1,
                maxArgs: 2
              },
              move: {
                minArgs: 2,
                maxArgs: 2
              },
              query: {
                minArgs: 1,
                maxArgs: 1
              },
              reload: {
                minArgs: 0,
                maxArgs: 2
              },
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              removeCSS: {
                minArgs: 1,
                maxArgs: 2
              },
              sendMessage: {
                minArgs: 2,
                maxArgs: 3
              },
              setZoom: {
                minArgs: 1,
                maxArgs: 2
              },
              setZoomSettings: {
                minArgs: 1,
                maxArgs: 2
              },
              update: {
                minArgs: 1,
                maxArgs: 2
              }
            },
            topSites: {
              get: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            webNavigation: {
              getAllFrames: {
                minArgs: 1,
                maxArgs: 1
              },
              getFrame: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            webRequest: {
              handlerBehaviorChanged: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            windows: {
              create: {
                minArgs: 0,
                maxArgs: 1
              },
              get: {
                minArgs: 1,
                maxArgs: 2
              },
              getAll: {
                minArgs: 0,
                maxArgs: 1
              },
              getCurrent: {
                minArgs: 0,
                maxArgs: 1
              },
              getLastFocused: {
                minArgs: 0,
                maxArgs: 1
              },
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              update: {
                minArgs: 2,
                maxArgs: 2
              }
            }
          };
          if (Object.keys(o).length === 0)
            throw new Error("api-metadata.json has not been included in browser-polyfill");
          class u extends WeakMap {
            constructor(O, q = void 0) {
              super(q), this.createItem = O;
            }
            get(O) {
              return this.has(O) || this.set(O, this.createItem(O)), super.get(O);
            }
          }
          const l = (F) => F && typeof F == "object" && typeof F.then == "function", f = (F, O) => (...q) => {
            a.runtime.lastError ? F.reject(new Error(a.runtime.lastError.message)) : O.singleCallbackArg || q.length <= 1 && O.singleCallbackArg !== !1 ? F.resolve(q[0]) : F.resolve(q);
          }, c = (F) => F == 1 ? "argument" : "arguments", h = (F, O) => function(V, ...H) {
            if (H.length < O.minArgs)
              throw new Error(`Expected at least ${O.minArgs} ${c(O.minArgs)} for ${F}(), got ${H.length}`);
            if (H.length > O.maxArgs)
              throw new Error(`Expected at most ${O.maxArgs} ${c(O.maxArgs)} for ${F}(), got ${H.length}`);
            return new Promise((R, $) => {
              if (O.fallbackToNoCallback)
                try {
                  V[F](...H, f({
                    resolve: R,
                    reject: $
                  }, O));
                } catch (S) {
                  console.warn(`${F} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `, S), V[F](...H), O.fallbackToNoCallback = !1, O.noCallback = !0, R();
                }
              else O.noCallback ? (V[F](...H), R()) : V[F](...H, f({
                resolve: R,
                reject: $
              }, O));
            });
          }, d = (F, O, q) => new Proxy(O, {
            apply(V, H, R) {
              return q.call(H, F, ...R);
            }
          });
          let m = Function.call.bind(Object.prototype.hasOwnProperty);
          const g = (F, O = {}, q = {}) => {
            let V = /* @__PURE__ */ Object.create(null), H = {
              has($, S) {
                return S in F || S in V;
              },
              get($, S, x) {
                if (S in V)
                  return V[S];
                if (!(S in F))
                  return;
                let C = F[S];
                if (typeof C == "function")
                  if (typeof O[S] == "function")
                    C = d(F, F[S], O[S]);
                  else if (m(q, S)) {
                    let A = h(S, q[S]);
                    C = d(F, F[S], A);
                  } else
                    C = C.bind(F);
                else if (typeof C == "object" && C !== null && (m(O, S) || m(q, S)))
                  C = g(C, O[S], q[S]);
                else if (m(q, "*"))
                  C = g(C, O[S], q["*"]);
                else
                  return Object.defineProperty(V, S, {
                    configurable: !0,
                    enumerable: !0,
                    get() {
                      return F[S];
                    },
                    set(A) {
                      F[S] = A;
                    }
                  }), C;
                return V[S] = C, C;
              },
              set($, S, x, C) {
                return S in V ? V[S] = x : F[S] = x, !0;
              },
              defineProperty($, S, x) {
                return Reflect.defineProperty(V, S, x);
              },
              deleteProperty($, S) {
                return Reflect.deleteProperty(V, S);
              }
            }, R = Object.create(F);
            return new Proxy(R, H);
          }, y = (F) => ({
            addListener(O, q, ...V) {
              O.addListener(F.get(q), ...V);
            },
            hasListener(O, q) {
              return O.hasListener(F.get(q));
            },
            removeListener(O, q) {
              O.removeListener(F.get(q));
            }
          }), b = new u((F) => typeof F != "function" ? F : function(q) {
            const V = g(q, {}, {
              getContent: {
                minArgs: 0,
                maxArgs: 0
              }
            });
            F(V);
          }), v = new u((F) => typeof F != "function" ? F : function(q, V, H) {
            let R = !1, $, S = new Promise((N) => {
              $ = function(k) {
                R = !0, N(k);
              };
            }), x;
            try {
              x = F(q, V, $);
            } catch (N) {
              x = Promise.reject(N);
            }
            const C = x !== !0 && l(x);
            if (x !== !0 && !C && !R)
              return !1;
            const A = (N) => {
              N.then((k) => {
                H(k);
              }, (k) => {
                let D;
                k && (k instanceof Error || typeof k.message == "string") ? D = k.message : D = "An unexpected error occurred", H({
                  __mozWebExtensionPolyfillReject__: !0,
                  message: D
                });
              }).catch((k) => {
                console.error("Failed to send onMessage rejected reply", k);
              });
            };
            return A(C ? x : S), !0;
          }), w = ({
            reject: F,
            resolve: O
          }, q) => {
            a.runtime.lastError ? a.runtime.lastError.message === n ? O() : F(new Error(a.runtime.lastError.message)) : q && q.__mozWebExtensionPolyfillReject__ ? F(new Error(q.message)) : O(q);
          }, I = (F, O, q, ...V) => {
            if (V.length < O.minArgs)
              throw new Error(`Expected at least ${O.minArgs} ${c(O.minArgs)} for ${F}(), got ${V.length}`);
            if (V.length > O.maxArgs)
              throw new Error(`Expected at most ${O.maxArgs} ${c(O.maxArgs)} for ${F}(), got ${V.length}`);
            return new Promise((H, R) => {
              const $ = w.bind(null, {
                resolve: H,
                reject: R
              });
              V.push($), q.sendMessage(...V);
            });
          }, T = {
            devtools: {
              network: {
                onRequestFinished: y(b)
              }
            },
            runtime: {
              onMessage: y(v),
              onMessageExternal: y(v),
              sendMessage: I.bind(null, "sendMessage", {
                minArgs: 1,
                maxArgs: 3
              })
            },
            tabs: {
              sendMessage: I.bind(null, "sendMessage", {
                minArgs: 2,
                maxArgs: 3
              })
            }
          }, _ = {
            clear: {
              minArgs: 1,
              maxArgs: 1
            },
            get: {
              minArgs: 1,
              maxArgs: 1
            },
            set: {
              minArgs: 1,
              maxArgs: 1
            }
          };
          return o.privacy = {
            network: {
              "*": _
            },
            services: {
              "*": _
            },
            websites: {
              "*": _
            }
          }, g(a, T, o);
        };
        t.exports = s(chrome);
      }
    });
  }(browserPolyfill$1)), browserPolyfill$1.exports;
}
requireBrowserPolyfill();
const global$1 = globalThis || void 0 || self;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EPSILON_FLOAT32$1 = 1e-7, EPSILON_FLOAT16$1 = 1e-4;
class DataStorage {
  constructor(e, t) {
    this.backend = e, this.dataMover = t, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(e) {
    return this.data.has(e) || this.dataMover.moveData(this.backend, e), this.data.get(e);
  }
  set(e, t) {
    this.dataIdsCount++, this.data.set(e, t);
  }
  has(e) {
    return this.data.has(e);
  }
  delete(e) {
    return this.dataIdsCount--, this.data.delete(e);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
}
class KernelBackend {
  refCount(e) {
    return notYetImplemented("refCount");
  }
  incRef(e) {
    return notYetImplemented("incRef");
  }
  timerAvailable() {
    return !0;
  }
  time(e) {
    return notYetImplemented("time");
  }
  read(e) {
    return notYetImplemented("read");
  }
  readSync(e) {
    return notYetImplemented("readSync");
  }
  readToGPU(e, t) {
    return notYetImplemented("readToGPU");
  }
  numDataIds() {
    return notYetImplemented("numDataIds");
  }
  disposeData(e, t) {
    return notYetImplemented("disposeData");
  }
  write(e, t, n) {
    return notYetImplemented("write");
  }
  move(e, t, n, s, a) {
    return notYetImplemented("move");
  }
  createTensorFromGPUData(e, t, n) {
    return notYetImplemented("createTensorFromGPUData");
  }
  memory() {
    return notYetImplemented("memory");
  }
  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */
  floatPrecision() {
    return notYetImplemented("floatPrecision");
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return this.floatPrecision() === 32 ? EPSILON_FLOAT32$1 : EPSILON_FLOAT16$1;
  }
  dispose() {
    return notYetImplemented("dispose");
  }
}
function notYetImplemented(r) {
  throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function shuffle(r) {
  let e = r.length, t = 0;
  for (; e > 0; )
    t = Math.random() * e | 0, e--, swap(r, e, t);
}
function shuffleCombo(r, e) {
  if (r.length !== e.length)
    throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${e.length}`);
  let t = r.length, n = 0;
  for (; t > 0; )
    n = Math.random() * t | 0, t--, swap(r, t, n), swap(e, t, n);
}
function clamp(r, e, t) {
  return Math.max(r, Math.min(e, t));
}
function nearestLargerEven(r) {
  return r % 2 === 0 ? r : r + 1;
}
function swap(r, e, t) {
  const n = r[e];
  r[e] = r[t], r[t] = n;
}
function sum$3(r) {
  let e = 0;
  for (let t = 0; t < r.length; t++)
    e += r[t];
  return e;
}
function randUniform(r, e) {
  const t = Math.random();
  return e * t + (1 - t) * r;
}
function distSquared(r, e) {
  let t = 0;
  for (let n = 0; n < r.length; n++) {
    const s = Number(r[n]) - Number(e[n]);
    t += s * s;
  }
  return t;
}
function assert$1(r, e) {
  if (!r)
    throw new Error(typeof e == "string" ? e : e());
}
function assertShapesMatch(r, e, t = "") {
  assert$1(arraysEqual(r, e), () => t + ` Shapes ${r} and ${e} must match`);
}
function assertNonNull(r) {
  assert$1(r != null, () => "The input to the tensor constructor must be a non-null value.");
}
function sizeFromShape(r) {
  if (r.length === 0)
    return 1;
  let e = r[0];
  for (let t = 1; t < r.length; t++)
    e *= r[t];
  return e;
}
function isScalarShape(r) {
  return r.length === 0;
}
function arraysEqualWithNull(r, e) {
  if (r === e)
    return !0;
  if (r == null || e == null || r.length !== e.length)
    return !1;
  for (let t = 0; t < r.length; t++)
    if (r[t] !== null && e[t] !== null && r[t] !== e[t])
      return !1;
  return !0;
}
function arraysEqual(r, e) {
  if (r === e)
    return !0;
  if (r == null || e == null || r.length !== e.length)
    return !1;
  for (let t = 0; t < r.length; t++)
    if (r[t] !== e[t])
      return !1;
  return !0;
}
function isInt(r) {
  return r % 1 === 0;
}
function tanh$3(r) {
  if (Math.tanh != null)
    return Math.tanh(r);
  if (r === 1 / 0)
    return 1;
  if (r === -1 / 0)
    return -1;
  {
    const e = Math.exp(2 * r);
    return (e - 1) / (e + 1);
  }
}
function sizeToSquarishShape(r) {
  const e = Math.ceil(Math.sqrt(r));
  return [e, Math.ceil(r / e)];
}
function createShuffledIndices(r) {
  const e = new Uint32Array(r);
  for (let t = 0; t < r; ++t)
    e[t] = t;
  return shuffle(e), e;
}
function rightPad(r, e) {
  return e <= r.length ? r : r + " ".repeat(e - r.length);
}
function repeatedTry(r, e = (s) => 0, t, n) {
  return new Promise((s, a) => {
    let o = 0;
    const u = () => {
      if (r()) {
        s();
        return;
      }
      o++;
      const l = e(o);
      if (t != null && o >= t) {
        a();
        return;
      }
      n != null ? n(u, l) : setTimeout(u, l);
    };
    u();
  });
}
function inferFromImplicitShape(r, e) {
  let t = 1, n = -1;
  for (let a = 0; a < r.length; ++a)
    if (r[a] >= 0)
      t *= r[a];
    else if (r[a] === -1) {
      if (n !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${n} and dim ${a}`);
      n = a;
    } else if (r[a] < 0)
      throw Error(`Shapes can not be < 0. Found ${r[a]} at dim ${a}`);
  if (n === -1) {
    if (e > 0 && e !== t)
      throw Error(`Size(${e}) must match the product of shape ${r}`);
    return r;
  }
  if (t === 0)
    throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);
  if (e % t !== 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t}`);
  const s = r.slice();
  return s[n] = e / t, s;
}
function parseAxisParam(r, e) {
  const t = e.length;
  return r = r == null ? e.map((n, s) => s) : [].concat(r), assert$1(r.every((n) => n >= -t && n < t), () => `All values in axis param must be in range [-${t}, ${t}) but got axis ${r}`), assert$1(r.every((n) => isInt(n)), () => `All values in axis param must be integers but got axis ${r}`), r.map((n) => n < 0 ? t + n : n);
}
function squeezeShape(r, e) {
  const t = [], n = [], s = e != null && Array.isArray(e) && e.length === 0, a = e == null || s ? null : parseAxisParam(e, r).sort();
  let o = 0;
  for (let u = 0; u < r.length; ++u) {
    if (a != null) {
      if (a[o] === u && r[u] !== 1)
        throw new Error(`Can't squeeze axis ${u} since its dim '${r[u]}' is not 1`);
      (a[o] == null || a[o] > u) && r[u] === 1 && (t.push(r[u]), n.push(u)), a[o] <= u && o++;
    }
    r[u] !== 1 && (t.push(r[u]), n.push(u));
  }
  return { newShape: t, keptDims: n };
}
function getTypedArrayFromDType(r, e) {
  return getArrayFromDType(r, e);
}
function getArrayFromDType(r, e) {
  let t = null;
  if (r == null || r === "float32")
    t = new Float32Array(e);
  else if (r === "int32")
    t = new Int32Array(e);
  else if (r === "bool")
    t = new Uint8Array(e);
  else if (r === "string")
    t = new Array(e);
  else
    throw new Error(`Unknown data type ${r}`);
  return t;
}
function checkConversionForErrors(r, e) {
  for (let t = 0; t < r.length; t++) {
    const n = r[t];
    if (isNaN(n) || !isFinite(n))
      throw Error(`A tensor of type ${e} being uploaded contains ${n}.`);
  }
}
function isValidDtype(r) {
  return r === "bool" || r === "complex64" || r === "float32" || r === "int32" || r === "string";
}
function hasEncodingLoss(r, e) {
  return !(e === "complex64" || e === "float32" && r !== "complex64" || e === "int32" && r !== "float32" && r !== "complex64" || e === "bool" && r === "bool");
}
function bytesPerElement(r) {
  if (r === "float32" || r === "int32")
    return 4;
  if (r === "complex64")
    return 8;
  if (r === "bool")
    return 1;
  throw new Error(`Unknown dtype ${r}`);
}
function bytesFromStringArray(r) {
  if (r == null)
    return 0;
  let e = 0;
  return r.forEach((t) => e += t.length), e;
}
function isString(r) {
  return typeof r == "string" || r instanceof String;
}
function isBoolean(r) {
  return typeof r == "boolean";
}
function isNumber(r) {
  return typeof r == "number";
}
function inferDtype(r) {
  return Array.isArray(r) ? inferDtype(r[0]) : r instanceof Float32Array ? "float32" : r instanceof Int32Array || r instanceof Uint8Array || r instanceof Uint8ClampedArray ? "int32" : isNumber(r) ? "float32" : isString(r) ? "string" : isBoolean(r) ? "bool" : "float32";
}
function isFunction(r) {
  return !!(r && r.constructor && r.call && r.apply);
}
function nearestDivisor(r, e) {
  for (let t = e; t < r; ++t)
    if (r % t === 0)
      return t;
  return r;
}
function computeStrides(r) {
  const e = r.length;
  if (e < 2)
    return [];
  const t = new Array(e - 1);
  t[e - 2] = r[e - 1];
  for (let n = e - 3; n >= 0; --n)
    t[n] = t[n + 1] * r[n + 1];
  return t;
}
function createNestedArray(r, e, t, n = !1) {
  const s = new Array();
  if (e.length === 1) {
    const a = e[0] * (n ? 2 : 1);
    for (let o = 0; o < a; o++)
      s[o] = t[r + o];
  } else {
    const a = e[0], o = e.slice(1), u = o.reduce((l, f) => l * f) * (n ? 2 : 1);
    for (let l = 0; l < a; l++)
      s[l] = createNestedArray(r + l * u, o, t, n);
  }
  return s;
}
function toNestedArray(r, e, t = !1) {
  if (r.length === 0)
    return e[0];
  const n = r.reduce((s, a) => s * a) * (t ? 2 : 1);
  if (n === 0)
    return [];
  if (n !== e.length)
    throw new Error(`[${r}] does not match the input size ${e.length}${t ? " for a complex tensor" : ""}.`);
  return createNestedArray(0, r, e, t);
}
function convertBackendValuesAndArrayBuffer(r, e) {
  if (Array.isArray(r))
    return r;
  if (e === "float32")
    return r instanceof Float32Array ? r : new Float32Array(r);
  if (e === "int32")
    return r instanceof Int32Array ? r : new Int32Array(r);
  if (e === "bool" || e === "string")
    return Uint8Array.from(new Int32Array(r));
  throw new Error(`Unknown dtype ${e}`);
}
function makeOnesTypedArray(r, e) {
  const t = makeZerosTypedArray(r, e);
  for (let n = 0; n < t.length; n++)
    t[n] = 1;
  return t;
}
function makeZerosTypedArray(r, e) {
  if (e == null || e === "float32" || e === "complex64")
    return new Float32Array(r);
  if (e === "int32")
    return new Int32Array(r);
  if (e === "bool")
    return new Uint8Array(r);
  throw new Error(`Unknown data type ${e}`);
}
function makeZerosNestedTypedArray(r, e) {
  const t = r.reduce((n, s) => n * s, 1);
  if (e == null || e === "float32")
    return toNestedArray(r, new Float32Array(t));
  if (e === "int32")
    return toNestedArray(r, new Int32Array(t));
  if (e === "bool")
    return toNestedArray(r, new Uint8Array(t));
  throw new Error(`Unknown data type ${e}`);
}
function assertNonNegativeIntegerDimensions(r) {
  r.forEach((e) => {
    assert$1(Number.isInteger(e) && e >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${r}].`);
  });
}
function locToIndex(r, e, t) {
  if (e === 0)
    return 0;
  if (e === 1)
    return r[0];
  let n = r[r.length - 1];
  for (let s = 0; s < r.length - 1; ++s)
    n += t[s] * r[s];
  return n;
}
function indexToLoc(r, e, t) {
  if (e === 0)
    return [];
  if (e === 1)
    return [r];
  const n = new Array(e);
  for (let s = 0; s < n.length - 1; ++s)
    n[s] = Math.floor(r / t[s]), r -= n[s] * t[s];
  return n[n.length - 1] = r, n;
}
function isPromise(r) {
  return r && r.then && typeof r.then == "function";
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TENSORFLOWJS_FLAGS_PREFIX = "tfjsflags";
class Environment {
  // tslint:disable-next-line: no-any
  constructor(e) {
    this.global = e, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = getQueryParams, this.populateURLFlags();
  }
  setPlatform(e, t) {
    this.platform != null && (env().getBool("IS_TEST") || env().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)), this.platformName = e, this.platform = t;
  }
  registerFlag(e, t, n) {
    if (this.flagRegistry[e] = { evaluationFn: t, setHook: n }, this.urlFlags[e] != null) {
      const s = this.urlFlags[e];
      env().getBool("IS_TEST") || env().getBool("PROD") || console.warn(`Setting feature override from URL ${e}: ${s}.`), this.set(e, s);
    }
  }
  async getAsync(e) {
    return e in this.flags ? this.flags[e] : (this.flags[e] = await this.evaluateFlag(e), this.flags[e]);
  }
  get(e) {
    if (e in this.flags)
      return this.flags[e];
    const t = this.evaluateFlag(e);
    if (isPromise(t))
      throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[e] = t, this.flags[e];
  }
  getNumber(e) {
    return this.get(e);
  }
  getBool(e) {
    return this.get(e);
  }
  getString(e) {
    return this.get(e);
  }
  getFlags() {
    return this.flags;
  }
  // For backwards compatibility.
  get features() {
    return this.flags;
  }
  set(e, t) {
    if (this.flagRegistry[e] == null)
      throw new Error(`Cannot set flag ${e} as it has not been registered.`);
    this.flags[e] = t, this.flagRegistry[e].setHook != null && this.flagRegistry[e].setHook(t);
  }
  evaluateFlag(e) {
    if (this.flagRegistry[e] == null)
      throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);
    return this.flagRegistry[e].evaluationFn();
  }
  setFlags(e) {
    this.flags = Object.assign({}, e);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global > "u" || typeof this.global.location > "u" || typeof this.global.location.search > "u")
      return;
    const e = this.getQueryParams(this.global.location.search);
    TENSORFLOWJS_FLAGS_PREFIX in e && e[TENSORFLOWJS_FLAGS_PREFIX].split(",").forEach((n) => {
      const [s, a] = n.split(":");
      this.urlFlags[s] = parseValue(s, a);
    });
  }
}
function getQueryParams(r) {
  const e = {};
  return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (t, ...n) => (decodeParam(e, n[0], n[1]), n.join("="))), e;
}
function decodeParam(r, e, t) {
  r[decodeURIComponent(e)] = decodeURIComponent(t || "");
}
function parseValue(r, e) {
  const t = e.toLowerCase();
  return t === "true" || t === "false" ? t === "true" : `${+t}` === t ? +t : e;
}
function env() {
  return ENV$4;
}
let ENV$4 = null;
function setEnvironmentGlobal(r) {
  ENV$4 = r;
}
function getDefaultExportFromCjs(r) {
  return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r;
}
var browser$d = { exports: {} }, process = browser$d.exports = {}, cachedSetTimeout, cachedClearTimeout;
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
(function() {
  try {
    typeof setTimeout == "function" ? cachedSetTimeout = setTimeout : cachedSetTimeout = defaultSetTimout;
  } catch {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    typeof clearTimeout == "function" ? cachedClearTimeout = clearTimeout : cachedClearTimeout = defaultClearTimeout;
  } catch {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(r) {
  if (cachedSetTimeout === setTimeout)
    return setTimeout(r, 0);
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout)
    return cachedSetTimeout = setTimeout, setTimeout(r, 0);
  try {
    return cachedSetTimeout(r, 0);
  } catch {
    try {
      return cachedSetTimeout.call(null, r, 0);
    } catch {
      return cachedSetTimeout.call(this, r, 0);
    }
  }
}
function runClearTimeout(r) {
  if (cachedClearTimeout === clearTimeout)
    return clearTimeout(r);
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout)
    return cachedClearTimeout = clearTimeout, clearTimeout(r);
  try {
    return cachedClearTimeout(r);
  } catch {
    try {
      return cachedClearTimeout.call(null, r);
    } catch {
      return cachedClearTimeout.call(this, r);
    }
  }
}
var queue = [], draining = !1, currentQueue, queueIndex = -1;
function cleanUpNextTick() {
  !draining || !currentQueue || (draining = !1, currentQueue.length ? queue = currentQueue.concat(queue) : queueIndex = -1, queue.length && drainQueue());
}
function drainQueue() {
  if (!draining) {
    var r = runTimeout(cleanUpNextTick);
    draining = !0;
    for (var e = queue.length; e; ) {
      for (currentQueue = queue, queue = []; ++queueIndex < e; )
        currentQueue && currentQueue[queueIndex].run();
      queueIndex = -1, e = queue.length;
    }
    currentQueue = null, draining = !1, runClearTimeout(r);
  }
}
process.nextTick = function(r) {
  var e = new Array(arguments.length - 1);
  if (arguments.length > 1)
    for (var t = 1; t < arguments.length; t++)
      e[t - 1] = arguments[t];
  queue.push(new Item(r, e)), queue.length === 1 && !draining && runTimeout(drainQueue);
};
function Item(r, e) {
  this.fun = r, this.array = e;
}
Item.prototype.run = function() {
  this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = !0;
process.env = {};
process.argv = [];
process.version = "";
process.versions = {};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(r) {
  return [];
};
process.binding = function(r) {
  throw new Error("process.binding is not supported");
};
process.cwd = function() {
  return "/";
};
process.chdir = function(r) {
  throw new Error("process.chdir is not supported");
};
process.umask = function() {
  return 0;
};
var browserExports = browser$d.exports;
const process$1 = /* @__PURE__ */ getDefaultExportFromCjs(browserExports);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let globalNameSpace;
function getGlobalNamespace() {
  if (globalNameSpace == null) {
    let r;
    if (typeof window < "u")
      r = window;
    else if (typeof global$1 < "u")
      r = global$1;
    else if (typeof process$1 < "u")
      r = process$1;
    else if (typeof self < "u")
      r = self;
    else
      throw new Error("Could not find a global object");
    globalNameSpace = r;
  }
  return globalNameSpace;
}
function getGlobalMap() {
  const r = getGlobalNamespace();
  return r._tfGlobals == null && (r._tfGlobals = /* @__PURE__ */ new Map()), r._tfGlobals;
}
function getGlobal$1(r, e) {
  const t = getGlobalMap();
  if (t.has(r))
    return t.get(r);
  {
    const n = e();
    return t.set(r, n), t.get(r);
  }
}
const Abs = "Abs", Acos = "Acos", Acosh = "Acosh", Add$1 = "Add", AddN = "AddN", All = "All", Any = "Any", ArgMax = "ArgMax", ArgMin = "ArgMin", Asin = "Asin", Asinh = "Asinh", Atan = "Atan", Atanh = "Atanh", Atan2 = "Atan2", AvgPool = "AvgPool", AvgPoolGrad = "AvgPoolGrad", AvgPool3D = "AvgPool3D", AvgPool3DGrad = "AvgPool3DGrad", BatchMatMul = "BatchMatMul", BatchToSpaceND = "BatchToSpaceND", Bincount = "Bincount", BitwiseAnd = "BitwiseAnd", BroadcastTo = "BroadcastTo", BroadcastArgs = "BroadcastArgs", Cast = "Cast", Ceil = "Ceil", ClipByValue = "ClipByValue", Complex = "Complex", ComplexAbs = "ComplexAbs", Concat = "Concat", Conv2D$1 = "Conv2D", Conv2DBackpropFilter = "Conv2DBackpropFilter", Conv2DBackpropInput = "Conv2DBackpropInput", Conv3D$1 = "Conv3D", Conv3DBackpropFilterV2 = "Conv3DBackpropFilterV2", Conv3DBackpropInputV2 = "Conv3DBackpropInputV2", Cos = "Cos", Cosh = "Cosh", Cumprod = "Cumprod", Cumsum = "Cumsum", CropAndResize = "CropAndResize", DenseBincount = "DenseBincount", DepthToSpace = "DepthToSpace", DepthwiseConv2dNative = "DepthwiseConv2dNative", DepthwiseConv2dNativeBackpropFilter = "DepthwiseConv2dNativeBackpropFilter", DepthwiseConv2dNativeBackpropInput = "DepthwiseConv2dNativeBackpropInput", Diag = "Diag", Dilation2D = "Dilation2D", Dilation2DBackpropInput = "Dilation2DBackpropInput", Dilation2DBackpropFilter = "Dilation2DBackpropFilter", Draw = "Draw", RealDiv = "RealDiv", Einsum = "Einsum", Elu$1 = "Elu", EluGrad = "EluGrad", Erf = "Erf", Equal = "Equal", Exp = "Exp", ExpandDims = "ExpandDims", Expm1 = "Expm1", FFT = "FFT", Fill = "Fill", FlipLeftRight = "FlipLeftRight", Floor = "Floor", FloorDiv = "FloorDiv", FusedBatchNorm = "FusedBatchNorm", GatherV2 = "GatherV2", GatherNd = "GatherNd", Greater = "Greater", GreaterEqual = "GreaterEqual", Identity$1 = "Identity", IFFT = "IFFT", Imag = "Imag", IsFinite = "IsFinite", IsInf = "IsInf", IsNan = "IsNan", LeakyRelu = "LeakyRelu", Less = "Less", LessEqual = "LessEqual", LinSpace = "LinSpace", Log = "Log", Log1p = "Log1p", LogicalAnd = "LogicalAnd", LogicalNot = "LogicalNot", LogicalOr = "LogicalOr", LogicalXor = "LogicalXor", LogSoftmax$1 = "LogSoftmax", LowerBound = "LowerBound", LRN = "LRN", LRNGrad = "LRNGrad", MatrixBandPart = "MatrixBandPart", Max = "Max", Maximum$1 = "Maximum", MaxPool = "MaxPool", MaxPoolGrad = "MaxPoolGrad", MaxPool3D = "MaxPool3D", MaxPool3DGrad = "MaxPool3DGrad", MaxPoolWithArgmax = "MaxPoolWithArgmax", Mean = "Mean", Min = "Min", Minimum$1 = "Minimum", MirrorPad = "MirrorPad", Mod = "Mod", Multinomial = "Multinomial", Multiply$1 = "Multiply", Neg = "Neg", NotEqual = "NotEqual", NonMaxSuppressionV3 = "NonMaxSuppressionV3", NonMaxSuppressionV4 = "NonMaxSuppressionV4", NonMaxSuppressionV5 = "NonMaxSuppressionV5", OnesLike = "OnesLike", OneHot = "OneHot", Pack = "Pack", PadV2 = "PadV2", Pool = "Pool", Pow = "Pow", Prelu = "Prelu", Prod = "Prod", RaggedGather = "RaggedGather", RaggedRange = "RaggedRange", RaggedTensorToTensor = "RaggedTensorToTensor", Range = "Range", Real = "Real", Reciprocal = "Reciprocal", Relu$1 = "Relu", Reshape$1 = "Reshape", ResizeNearestNeighbor = "ResizeNearestNeighbor", ResizeNearestNeighborGrad = "ResizeNearestNeighborGrad", ResizeBilinear = "ResizeBilinear", ResizeBilinearGrad = "ResizeBilinearGrad", Relu6$1 = "Relu6", Reverse = "Reverse", Round = "Round", Rsqrt = "Rsqrt", ScatterNd = "ScatterNd", TensorScatterUpdate = "TensorScatterUpdate", SearchSorted = "SearchSorted", Select = "Select", Selu$1 = "Selu", Slice = "Slice", Sin = "Sin", Sinh = "Sinh", Sign = "Sign", Sigmoid$1 = "Sigmoid", Softplus$1 = "Softplus", Sqrt = "Sqrt", Sum = "Sum", SpaceToBatchND = "SpaceToBatchND", SplitV = "SplitV", Softmax$2 = "Softmax", SparseFillEmptyRows = "SparseFillEmptyRows", SparseReshape = "SparseReshape", SparseSegmentMean = "SparseSegmentMean", SparseSegmentSum = "SparseSegmentSum", SparseToDense = "SparseToDense", SquaredDifference = "SquaredDifference", Square = "Square", StaticRegexReplace = "StaticRegexReplace", StridedSlice = "StridedSlice", StringNGrams = "StringNGrams", StringSplit = "StringSplit", StringToHashBucketFast = "StringToHashBucketFast", Sub = "Sub", Tan = "Tan", Tanh$1 = "Tanh", Tile = "Tile", TopK = "TopK", Transform = "Transform", Transpose = "Transpose", Unique = "Unique", Unpack = "Unpack", UnsortedSegmentSum = "UnsortedSegmentSum", UpperBound = "UpperBound", ZerosLike = "ZerosLike", Step = "Step", FromPixels = "FromPixels", RotateWithOffset = "RotateWithOffset", _FusedMatMul = "_FusedMatMul", FusedConv2D = "FusedConv2D", FusedDepthwiseConv2D = "FusedDepthwiseConv2D";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function warn(...r) {
  env().getBool("IS_TEST") || env().getBool("PROD") || console.warn(...r);
}
function log$3(...r) {
  env().getBool("IS_TEST") || env().getBool("PROD") || console.log(...r);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kernelRegistry = getGlobal$1("kernelRegistry", () => /* @__PURE__ */ new Map()), gradRegistry = getGlobal$1("gradRegistry", () => /* @__PURE__ */ new Map());
function getKernel(r, e) {
  const t = makeKey(r, e);
  return kernelRegistry.get(t);
}
function getGradient(r) {
  return gradRegistry.get(r);
}
function getKernelsForBackend(r) {
  const e = kernelRegistry.entries(), t = [];
  for (; ; ) {
    const { done: n, value: s } = e.next();
    if (n)
      break;
    const [a, o] = s, [u] = a.split("_");
    u === r && t.push(o);
  }
  return t;
}
function registerKernel(r) {
  const { kernelName: e, backendName: t } = r, n = makeKey(e, t);
  kernelRegistry.has(n) && warn(`The kernel '${e}' for backend '${t}' is already registered`), kernelRegistry.set(n, r);
}
function registerGradient(r) {
  const { kernelName: e } = r;
  gradRegistry.has(e) && env().getBool("DEBUG") && warn(`Overriding the gradient for '${e}'`), gradRegistry.set(e, r);
}
function unregisterKernel(r, e) {
  const t = makeKey(r, e);
  if (!kernelRegistry.has(t))
    throw new Error(`The kernel '${r}' for backend '${e}' is not registered`);
  kernelRegistry.delete(t);
}
function unregisterGradient(r) {
  if (!gradRegistry.has(r))
    throw new Error(`The gradient '${r}' for backend is not registered`);
  gradRegistry.delete(r);
}
function copyRegisteredKernels(r, e) {
  getKernelsForBackend(r).forEach((n) => {
    const s = Object.assign({}, n, { backendName: e });
    registerKernel(s);
  });
}
function makeKey(r, e) {
  return `${e}_${r}`;
}
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function isTypedArrayBrowser(r) {
  return r instanceof Float32Array || r instanceof Int32Array || r instanceof Uint8Array || r instanceof Uint8ClampedArray;
}
var long$1, hasRequiredLong;
function requireLong() {
  if (hasRequiredLong) return long$1;
  hasRequiredLong = 1, long$1 = e;
  var r = null;
  try {
    r = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
      0,
      97,
      115,
      109,
      1,
      0,
      0,
      0,
      1,
      13,
      2,
      96,
      0,
      1,
      127,
      96,
      4,
      127,
      127,
      127,
      127,
      1,
      127,
      3,
      7,
      6,
      0,
      1,
      1,
      1,
      1,
      1,
      6,
      6,
      1,
      127,
      1,
      65,
      0,
      11,
      7,
      50,
      6,
      3,
      109,
      117,
      108,
      0,
      1,
      5,
      100,
      105,
      118,
      95,
      115,
      0,
      2,
      5,
      100,
      105,
      118,
      95,
      117,
      0,
      3,
      5,
      114,
      101,
      109,
      95,
      115,
      0,
      4,
      5,
      114,
      101,
      109,
      95,
      117,
      0,
      5,
      8,
      103,
      101,
      116,
      95,
      104,
      105,
      103,
      104,
      0,
      0,
      10,
      191,
      1,
      6,
      4,
      0,
      35,
      0,
      11,
      36,
      1,
      1,
      126,
      32,
      0,
      173,
      32,
      1,
      173,
      66,
      32,
      134,
      132,
      32,
      2,
      173,
      32,
      3,
      173,
      66,
      32,
      134,
      132,
      126,
      34,
      4,
      66,
      32,
      135,
      167,
      36,
      0,
      32,
      4,
      167,
      11,
      36,
      1,
      1,
      126,
      32,
      0,
      173,
      32,
      1,
      173,
      66,
      32,
      134,
      132,
      32,
      2,
      173,
      32,
      3,
      173,
      66,
      32,
      134,
      132,
      127,
      34,
      4,
      66,
      32,
      135,
      167,
      36,
      0,
      32,
      4,
      167,
      11,
      36,
      1,
      1,
      126,
      32,
      0,
      173,
      32,
      1,
      173,
      66,
      32,
      134,
      132,
      32,
      2,
      173,
      32,
      3,
      173,
      66,
      32,
      134,
      132,
      128,
      34,
      4,
      66,
      32,
      135,
      167,
      36,
      0,
      32,
      4,
      167,
      11,
      36,
      1,
      1,
      126,
      32,
      0,
      173,
      32,
      1,
      173,
      66,
      32,
      134,
      132,
      32,
      2,
      173,
      32,
      3,
      173,
      66,
      32,
      134,
      132,
      129,
      34,
      4,
      66,
      32,
      135,
      167,
      36,
      0,
      32,
      4,
      167,
      11,
      36,
      1,
      1,
      126,
      32,
      0,
      173,
      32,
      1,
      173,
      66,
      32,
      134,
      132,
      32,
      2,
      173,
      32,
      3,
      173,
      66,
      32,
      134,
      132,
      130,
      34,
      4,
      66,
      32,
      135,
      167,
      36,
      0,
      32,
      4,
      167,
      11
    ])), {}).exports;
  } catch {
  }
  function e(H, R, $) {
    this.low = H | 0, this.high = R | 0, this.unsigned = !!$;
  }
  e.prototype.__isLong__, Object.defineProperty(e.prototype, "__isLong__", { value: !0 });
  function t(H) {
    return (H && H.__isLong__) === !0;
  }
  e.isLong = t;
  var n = {}, s = {};
  function a(H, R) {
    var $, S, x;
    return R ? (H >>>= 0, (x = 0 <= H && H < 256) && (S = s[H], S) ? S : ($ = u(H, (H | 0) < 0 ? -1 : 0, !0), x && (s[H] = $), $)) : (H |= 0, (x = -128 <= H && H < 128) && (S = n[H], S) ? S : ($ = u(H, H < 0 ? -1 : 0, !1), x && (n[H] = $), $));
  }
  e.fromInt = a;
  function o(H, R) {
    if (isNaN(H))
      return R ? w : v;
    if (R) {
      if (H < 0)
        return w;
      if (H >= g)
        return O;
    } else {
      if (H <= -9223372036854776e3)
        return q;
      if (H + 1 >= y)
        return F;
    }
    return H < 0 ? o(-H, R).neg() : u(H % m | 0, H / m | 0, R);
  }
  e.fromNumber = o;
  function u(H, R, $) {
    return new e(H, R, $);
  }
  e.fromBits = u;
  var l = Math.pow;
  function f(H, R, $) {
    if (H.length === 0)
      throw Error("empty string");
    if (H === "NaN" || H === "Infinity" || H === "+Infinity" || H === "-Infinity")
      return v;
    if (typeof R == "number" ? ($ = R, R = !1) : R = !!R, $ = $ || 10, $ < 2 || 36 < $)
      throw RangeError("radix");
    var S;
    if ((S = H.indexOf("-")) > 0)
      throw Error("interior hyphen");
    if (S === 0)
      return f(H.substring(1), R, $).neg();
    for (var x = o(l($, 8)), C = v, A = 0; A < H.length; A += 8) {
      var N = Math.min(8, H.length - A), k = parseInt(H.substring(A, A + N), $);
      if (N < 8) {
        var D = o(l($, N));
        C = C.mul(D).add(o(k));
      } else
        C = C.mul(x), C = C.add(o(k));
    }
    return C.unsigned = R, C;
  }
  e.fromString = f;
  function c(H, R) {
    return typeof H == "number" ? o(H, R) : typeof H == "string" ? f(H, R) : u(H.low, H.high, typeof R == "boolean" ? R : H.unsigned);
  }
  e.fromValue = c;
  var h = 65536, d = 1 << 24, m = h * h, g = m * m, y = g / 2, b = a(d), v = a(0);
  e.ZERO = v;
  var w = a(0, !0);
  e.UZERO = w;
  var I = a(1);
  e.ONE = I;
  var T = a(1, !0);
  e.UONE = T;
  var _ = a(-1);
  e.NEG_ONE = _;
  var F = u(-1, 2147483647, !1);
  e.MAX_VALUE = F;
  var O = u(-1, -1, !0);
  e.MAX_UNSIGNED_VALUE = O;
  var q = u(0, -2147483648, !1);
  e.MIN_VALUE = q;
  var V = e.prototype;
  return V.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  }, V.toNumber = function() {
    return this.unsigned ? (this.high >>> 0) * m + (this.low >>> 0) : this.high * m + (this.low >>> 0);
  }, V.toString = function(R) {
    if (R = R || 10, R < 2 || 36 < R)
      throw RangeError("radix");
    if (this.isZero())
      return "0";
    if (this.isNegative())
      if (this.eq(q)) {
        var $ = o(R), S = this.div($), x = S.mul($).sub(this);
        return S.toString(R) + x.toInt().toString(R);
      } else
        return "-" + this.neg().toString(R);
    for (var C = o(l(R, 6), this.unsigned), A = this, N = ""; ; ) {
      var k = A.div(C), D = A.sub(k.mul(C)).toInt() >>> 0, E = D.toString(R);
      if (A = k, A.isZero())
        return E + N;
      for (; E.length < 6; )
        E = "0" + E;
      N = "" + E + N;
    }
  }, V.getHighBits = function() {
    return this.high;
  }, V.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  }, V.getLowBits = function() {
    return this.low;
  }, V.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  }, V.getNumBitsAbs = function() {
    if (this.isNegative())
      return this.eq(q) ? 64 : this.neg().getNumBitsAbs();
    for (var R = this.high != 0 ? this.high : this.low, $ = 31; $ > 0 && !(R & 1 << $); $--)
      ;
    return this.high != 0 ? $ + 33 : $ + 1;
  }, V.isZero = function() {
    return this.high === 0 && this.low === 0;
  }, V.eqz = V.isZero, V.isNegative = function() {
    return !this.unsigned && this.high < 0;
  }, V.isPositive = function() {
    return this.unsigned || this.high >= 0;
  }, V.isOdd = function() {
    return (this.low & 1) === 1;
  }, V.isEven = function() {
    return (this.low & 1) === 0;
  }, V.equals = function(R) {
    return t(R) || (R = c(R)), this.unsigned !== R.unsigned && this.high >>> 31 === 1 && R.high >>> 31 === 1 ? !1 : this.high === R.high && this.low === R.low;
  }, V.eq = V.equals, V.notEquals = function(R) {
    return !this.eq(
      /* validates */
      R
    );
  }, V.neq = V.notEquals, V.ne = V.notEquals, V.lessThan = function(R) {
    return this.comp(
      /* validates */
      R
    ) < 0;
  }, V.lt = V.lessThan, V.lessThanOrEqual = function(R) {
    return this.comp(
      /* validates */
      R
    ) <= 0;
  }, V.lte = V.lessThanOrEqual, V.le = V.lessThanOrEqual, V.greaterThan = function(R) {
    return this.comp(
      /* validates */
      R
    ) > 0;
  }, V.gt = V.greaterThan, V.greaterThanOrEqual = function(R) {
    return this.comp(
      /* validates */
      R
    ) >= 0;
  }, V.gte = V.greaterThanOrEqual, V.ge = V.greaterThanOrEqual, V.compare = function(R) {
    if (t(R) || (R = c(R)), this.eq(R))
      return 0;
    var $ = this.isNegative(), S = R.isNegative();
    return $ && !S ? -1 : !$ && S ? 1 : this.unsigned ? R.high >>> 0 > this.high >>> 0 || R.high === this.high && R.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(R).isNegative() ? -1 : 1;
  }, V.comp = V.compare, V.negate = function() {
    return !this.unsigned && this.eq(q) ? q : this.not().add(I);
  }, V.neg = V.negate, V.add = function(R) {
    t(R) || (R = c(R));
    var $ = this.high >>> 16, S = this.high & 65535, x = this.low >>> 16, C = this.low & 65535, A = R.high >>> 16, N = R.high & 65535, k = R.low >>> 16, D = R.low & 65535, E = 0, M = 0, P = 0, z = 0;
    return z += C + D, P += z >>> 16, z &= 65535, P += x + k, M += P >>> 16, P &= 65535, M += S + N, E += M >>> 16, M &= 65535, E += $ + A, E &= 65535, u(P << 16 | z, E << 16 | M, this.unsigned);
  }, V.subtract = function(R) {
    return t(R) || (R = c(R)), this.add(R.neg());
  }, V.sub = V.subtract, V.multiply = function(R) {
    if (this.isZero())
      return v;
    if (t(R) || (R = c(R)), r) {
      var $ = r.mul(
        this.low,
        this.high,
        R.low,
        R.high
      );
      return u($, r.get_high(), this.unsigned);
    }
    if (R.isZero())
      return v;
    if (this.eq(q))
      return R.isOdd() ? q : v;
    if (R.eq(q))
      return this.isOdd() ? q : v;
    if (this.isNegative())
      return R.isNegative() ? this.neg().mul(R.neg()) : this.neg().mul(R).neg();
    if (R.isNegative())
      return this.mul(R.neg()).neg();
    if (this.lt(b) && R.lt(b))
      return o(this.toNumber() * R.toNumber(), this.unsigned);
    var S = this.high >>> 16, x = this.high & 65535, C = this.low >>> 16, A = this.low & 65535, N = R.high >>> 16, k = R.high & 65535, D = R.low >>> 16, E = R.low & 65535, M = 0, P = 0, z = 0, J = 0;
    return J += A * E, z += J >>> 16, J &= 65535, z += C * E, P += z >>> 16, z &= 65535, z += A * D, P += z >>> 16, z &= 65535, P += x * E, M += P >>> 16, P &= 65535, P += C * D, M += P >>> 16, P &= 65535, P += A * k, M += P >>> 16, P &= 65535, M += S * E + x * D + C * k + A * N, M &= 65535, u(z << 16 | J, M << 16 | P, this.unsigned);
  }, V.mul = V.multiply, V.divide = function(R) {
    if (t(R) || (R = c(R)), R.isZero())
      throw Error("division by zero");
    if (r) {
      if (!this.unsigned && this.high === -2147483648 && R.low === -1 && R.high === -1)
        return this;
      var $ = (this.unsigned ? r.div_u : r.div_s)(
        this.low,
        this.high,
        R.low,
        R.high
      );
      return u($, r.get_high(), this.unsigned);
    }
    if (this.isZero())
      return this.unsigned ? w : v;
    var S, x, C;
    if (this.unsigned) {
      if (R.unsigned || (R = R.toUnsigned()), R.gt(this))
        return w;
      if (R.gt(this.shru(1)))
        return T;
      C = w;
    } else {
      if (this.eq(q)) {
        if (R.eq(I) || R.eq(_))
          return q;
        if (R.eq(q))
          return I;
        var A = this.shr(1);
        return S = A.div(R).shl(1), S.eq(v) ? R.isNegative() ? I : _ : (x = this.sub(R.mul(S)), C = S.add(x.div(R)), C);
      } else if (R.eq(q))
        return this.unsigned ? w : v;
      if (this.isNegative())
        return R.isNegative() ? this.neg().div(R.neg()) : this.neg().div(R).neg();
      if (R.isNegative())
        return this.div(R.neg()).neg();
      C = v;
    }
    for (x = this; x.gte(R); ) {
      S = Math.max(1, Math.floor(x.toNumber() / R.toNumber()));
      for (var N = Math.ceil(Math.log(S) / Math.LN2), k = N <= 48 ? 1 : l(2, N - 48), D = o(S), E = D.mul(R); E.isNegative() || E.gt(x); )
        S -= k, D = o(S, this.unsigned), E = D.mul(R);
      D.isZero() && (D = I), C = C.add(D), x = x.sub(E);
    }
    return C;
  }, V.div = V.divide, V.modulo = function(R) {
    if (t(R) || (R = c(R)), r) {
      var $ = (this.unsigned ? r.rem_u : r.rem_s)(
        this.low,
        this.high,
        R.low,
        R.high
      );
      return u($, r.get_high(), this.unsigned);
    }
    return this.sub(this.div(R).mul(R));
  }, V.mod = V.modulo, V.rem = V.modulo, V.not = function() {
    return u(~this.low, ~this.high, this.unsigned);
  }, V.and = function(R) {
    return t(R) || (R = c(R)), u(this.low & R.low, this.high & R.high, this.unsigned);
  }, V.or = function(R) {
    return t(R) || (R = c(R)), u(this.low | R.low, this.high | R.high, this.unsigned);
  }, V.xor = function(R) {
    return t(R) || (R = c(R)), u(this.low ^ R.low, this.high ^ R.high, this.unsigned);
  }, V.shiftLeft = function(R) {
    return t(R) && (R = R.toInt()), (R &= 63) === 0 ? this : R < 32 ? u(this.low << R, this.high << R | this.low >>> 32 - R, this.unsigned) : u(0, this.low << R - 32, this.unsigned);
  }, V.shl = V.shiftLeft, V.shiftRight = function(R) {
    return t(R) && (R = R.toInt()), (R &= 63) === 0 ? this : R < 32 ? u(this.low >>> R | this.high << 32 - R, this.high >> R, this.unsigned) : u(this.high >> R - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  }, V.shr = V.shiftRight, V.shiftRightUnsigned = function(R) {
    if (t(R) && (R = R.toInt()), R &= 63, R === 0)
      return this;
    var $ = this.high;
    if (R < 32) {
      var S = this.low;
      return u(S >>> R | $ << 32 - R, $ >>> R, this.unsigned);
    } else return R === 32 ? u($, 0, this.unsigned) : u($ >>> R - 32, 0, this.unsigned);
  }, V.shru = V.shiftRightUnsigned, V.shr_u = V.shiftRightUnsigned, V.toSigned = function() {
    return this.unsigned ? u(this.low, this.high, !1) : this;
  }, V.toUnsigned = function() {
    return this.unsigned ? this : u(this.low, this.high, !0);
  }, V.toBytes = function(R) {
    return R ? this.toBytesLE() : this.toBytesBE();
  }, V.toBytesLE = function() {
    var R = this.high, $ = this.low;
    return [
      $ & 255,
      $ >>> 8 & 255,
      $ >>> 16 & 255,
      $ >>> 24,
      R & 255,
      R >>> 8 & 255,
      R >>> 16 & 255,
      R >>> 24
    ];
  }, V.toBytesBE = function() {
    var R = this.high, $ = this.low;
    return [
      R >>> 24,
      R >>> 16 & 255,
      R >>> 8 & 255,
      R & 255,
      $ >>> 24,
      $ >>> 16 & 255,
      $ >>> 8 & 255,
      $ & 255
    ];
  }, e.fromBytes = function(R, $, S) {
    return S ? e.fromBytesLE(R, $) : e.fromBytesBE(R, $);
  }, e.fromBytesLE = function(R, $) {
    return new e(
      R[0] | R[1] << 8 | R[2] << 16 | R[3] << 24,
      R[4] | R[5] << 8 | R[6] << 16 | R[7] << 24,
      $
    );
  }, e.fromBytesBE = function(R, $) {
    return new e(
      R[4] << 24 | R[5] << 16 | R[6] << 8 | R[7],
      R[0] << 24 | R[1] << 16 | R[2] << 8 | R[3],
      $
    );
  }, long$1;
}
var longExports = requireLong();
const long = /* @__PURE__ */ getDefaultExportFromCjs$1(longExports), LongExports = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: long
}, [longExports]);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Long = (
  // tslint:disable-next-line
  long || LongExports
);
function hexToLong(r) {
  return Long.fromString(r, !0, 16);
}
const k0 = hexToLong("c3a5c85c97cb3127"), k1 = hexToLong("b492b66fbe98f273"), k2 = hexToLong("9ae16a3b2f90404f");
function shiftMix(r) {
  return r.xor(r.shru(47));
}
function fetch$2(r, e, t) {
  const n = r.slice(e, e + t);
  return Long.fromBytes(Array.from(n), !0, !0);
}
function fetch64(r, e) {
  return fetch$2(r, e, 8);
}
function fetch32(r, e) {
  return fetch$2(r, e, 4);
}
function rotate64(r, e) {
  return e === 0 ? r : r.shru(e).or(r.shl(64 - e));
}
function hashLen16(r, e, t = hexToLong("9ddfea08eb382d69")) {
  let n = r.xor(e).mul(t);
  n = n.xor(n.shru(47));
  let s = e.xor(n).mul(t);
  return s = s.xor(s.shru(47)), s = s.mul(t), s;
}
function weakHashLen32WithSeeds(r, e, t, n, s, a) {
  s = s.add(r), a = rotate64(a.add(s).add(n), 21);
  const o = s;
  return s = s.add(e), s = s.add(t), a = a.add(rotate64(s, 44)), [s.add(n), a.add(o)];
}
function weakHashLen32WithSeedsStr(r, e, t, n) {
  return weakHashLen32WithSeeds(fetch64(r, e), fetch64(r, e + 8), fetch64(r, e + 16), fetch64(r, e + 24), t, n);
}
function hashLen0to16(r, e = r.length) {
  if (e >= 8) {
    const t = k2.add(e * 2), n = fetch64(r, 0).add(k2), s = fetch64(r, e - 8), a = rotate64(s, 37).mul(t).add(n), o = rotate64(n, 25).add(s).mul(t);
    return hashLen16(a, o, t);
  }
  if (e >= 4) {
    const t = k2.add(e * 2), n = fetch32(r, 0);
    return hashLen16(n.shl(3).add(e), fetch32(r, e - 4), t);
  }
  if (e > 0) {
    const t = r[0], n = r[e >> 1], s = r[e - 1], a = t + (n << 8), o = e + (s << 2);
    return shiftMix(k2.mul(a).xor(k0.mul(o))).mul(k2);
  }
  return k2;
}
function hashLen17to32(r, e = r.length) {
  const t = k2.add(e * 2), n = fetch64(r, 0).mul(k1), s = fetch64(r, 8), a = fetch64(r, e - 8).mul(t), o = fetch64(r, e - 16).mul(k2);
  return hashLen16(rotate64(n.add(s), 43).add(rotate64(a, 30)).add(o), n.add(rotate64(s.add(k2), 18)).add(a), t);
}
function hashLen33to64(r, e = r.length) {
  const t = k2.add(e * 2), n = fetch64(r, 0).mul(k2), s = fetch64(r, 8), a = fetch64(r, e - 8).mul(t), o = fetch64(r, e - 16).mul(k2), u = rotate64(n.add(s), 43).add(rotate64(a, 30)).add(o), l = hashLen16(u, n.add(rotate64(s.add(k2), 18)).add(a), t), f = fetch64(r, 16).mul(t), c = fetch64(r, 24), h = u.add(fetch64(r, e - 32)).mul(t), d = l.add(fetch64(r, e - 24)).mul(t);
  return hashLen16(rotate64(f.add(c), 43).add(rotate64(h, 30)).add(d), f.add(rotate64(c.add(n), 18)).add(h), t);
}
function fingerPrint64(r, e = r.length) {
  const t = Long.fromNumber(81, !0);
  if (e <= 32)
    return e <= 16 ? hashLen0to16(r, e) : hashLen17to32(r, e);
  if (e <= 64)
    return hashLen33to64(r, e);
  let n = t, s = t.mul(k1).add(113), a = shiftMix(s.mul(k2).add(113)).mul(k2), o = [Long.UZERO, Long.UZERO], u = [Long.UZERO, Long.UZERO];
  n = n.mul(k2).add(fetch64(r, 0));
  let l = 0;
  const f = (e - 1 >> 6) * 64, c = f + (e - 1 & 63) - 63;
  do
    n = rotate64(n.add(s).add(o[0]).add(fetch64(r, l + 8)), 37).mul(k1), s = rotate64(s.add(o[1]).add(fetch64(r, l + 48)), 42).mul(k1), n = n.xor(u[1]), s = s.add(o[0]).add(fetch64(r, l + 40)), a = rotate64(a.add(u[0]), 33).mul(k1), o = weakHashLen32WithSeedsStr(r, l, o[1].mul(k1), n.add(u[0])), u = weakHashLen32WithSeedsStr(r, l + 32, a.add(u[1]), s.add(fetch64(r, l + 16))), [a, n] = [n, a], l += 64;
  while (l !== f);
  const h = k1.add(a.and(255).shl(1));
  return l = c, u[0] = u[0].add(e - 1 & 63), o[0] = o[0].add(u[0]), u[0] = u[0].add(o[0]), n = rotate64(n.add(s).add(o[0]).add(fetch64(r, l + 8)), 37).mul(h), s = rotate64(s.add(o[1]).add(fetch64(r, l + 48)), 42).mul(h), n = n.xor(u[1].mul(9)), s = s.add(o[0].mul(9).add(fetch64(r, l + 40))), a = rotate64(a.add(u[0]), 33).mul(h), o = weakHashLen32WithSeedsStr(r, l, o[1].mul(h), n.add(u[0])), u = weakHashLen32WithSeedsStr(r, l + 32, a.add(u[1]), s.add(fetch64(r, l + 16))), [a, n] = [n, a], hashLen16(hashLen16(o[0], u[0], h).add(shiftMix(s).mul(k0)).add(a), hashLen16(o[1], u[1], h).add(n), h);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function createScalarValue(r, e) {
  return e === "string" ? encodeString(r) : toTypedArray([r], e);
}
function noConversionNeeded(r, e) {
  return r instanceof Float32Array && e === "float32" || r instanceof Int32Array && e === "int32" || r instanceof Uint8Array && e === "bool";
}
function toTypedArray(r, e) {
  if (e === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(r) && (r = flatten$2(r)), env().getBool("DEBUG") && checkConversionForErrors(r, e), noConversionNeeded(r, e))
    return r;
  if (e == null || e === "float32" || e === "complex64")
    return new Float32Array(r);
  if (e === "int32")
    return new Int32Array(r);
  if (e === "bool") {
    const t = new Uint8Array(r.length);
    for (let n = 0; n < t.length; ++n)
      Math.round(r[n]) !== 0 && (t[n] = 1);
    return t;
  } else
    throw new Error(`Unknown data type ${e}`);
}
function now() {
  return env().platform.now();
}
function fetch$1(r, e) {
  return env().platform.fetch(r, e);
}
function encodeString(r, e = "utf-8") {
  return e = e || "utf-8", env().platform.encode(r, e);
}
function decodeString(r, e = "utf-8") {
  return e = e || "utf-8", env().platform.decode(r, e);
}
function isTypedArray$1(r) {
  return env().platform.isTypedArray != null ? env().platform.isTypedArray(r) : isTypedArrayBrowser(r);
}
function flatten$2(r, e = [], t = !1) {
  if (e == null && (e = []), typeof r == "boolean" || typeof r == "number" || typeof r == "string" || isPromise(r) || r == null || isTypedArray$1(r) && t)
    e.push(r);
  else if (Array.isArray(r) || isTypedArray$1(r))
    for (let n = 0; n < r.length; ++n)
      flatten$2(r[n], e, t);
  else {
    let n = -1;
    for (const s of Object.keys(r))
      /^([1-9]+[0-9]*|0)$/.test(s) && (n = Math.max(n, Number(s)));
    for (let s = 0; s <= n; s++)
      flatten$2(r[s], e, t);
  }
  return e;
}
const util$2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  arraysEqual,
  arraysEqualWithNull,
  assert: assert$1,
  assertNonNegativeIntegerDimensions,
  assertNonNull,
  assertShapesMatch,
  bytesFromStringArray,
  bytesPerElement,
  checkConversionForErrors,
  clamp,
  computeStrides,
  convertBackendValuesAndArrayBuffer,
  createScalarValue,
  createShuffledIndices,
  decodeString,
  distSquared,
  encodeString,
  fetch: fetch$1,
  fingerPrint64,
  flatten: flatten$2,
  getArrayFromDType,
  getTypedArrayFromDType,
  hasEncodingLoss,
  hexToLong,
  indexToLoc,
  inferDtype,
  inferFromImplicitShape,
  isBoolean,
  isFunction,
  isInt,
  isNumber,
  isPromise,
  isScalarShape,
  isString,
  isTypedArray: isTypedArray$1,
  isValidDtype,
  locToIndex,
  makeOnesTypedArray,
  makeZerosNestedTypedArray,
  makeZerosTypedArray,
  nearestDivisor,
  nearestLargerEven,
  now,
  parseAxisParam,
  randUniform,
  repeatedTry,
  rightPad,
  shuffle,
  shuffleCombo,
  sizeFromShape,
  sizeToSquarishShape,
  squeezeShape,
  sum: sum$3,
  swap,
  tanh: tanh$3,
  toNestedArray,
  toTypedArray
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Profiler {
  constructor(e, t) {
    this.backendTimer = e, this.logger = t, t == null && (this.logger = new Logger());
  }
  profileKernel(e, t, n) {
    let s;
    const a = () => {
      s = n();
    };
    let o;
    const u = now();
    if (this.backendTimer.timerAvailable())
      o = this.backendTimer.time(a);
    else {
      a();
      for (const f of s)
        f.dataSync();
      o = Promise.resolve({ kernelMs: now() - u });
    }
    if (env().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let f = 0; f < s.length; f++) {
        const c = s[f];
        c.data().then((h) => {
          checkComputationForErrors(h, c.dtype, e);
        });
      }
    return {
      kernelName: e,
      outputs: s,
      inputs: t,
      timeMs: o.then((f) => f.kernelMs),
      extraInfo: o.then((f) => f.getExtraProfileInfo != null ? f.getExtraProfileInfo() : "")
    };
  }
  logKernelProfile(e) {
    const { kernelName: t, outputs: n, timeMs: s, inputs: a, extraInfo: o } = e;
    n.forEach((u) => {
      Promise.all([u.data(), s, o]).then((l) => {
        this.logger.logKernelProfile(t, u, l[0], l[1], a, l[2]);
      });
    });
  }
}
function checkComputationForErrors(r, e, t) {
  if (e !== "float32")
    return !1;
  for (let n = 0; n < r.length; n++) {
    const s = r[n];
    if (isNaN(s) || !isFinite(s))
      return console.warn(`Found ${s} in the result of '${t}'`), !0;
  }
  return !1;
}
class Logger {
  logKernelProfile(e, t, n, s, a, o) {
    const u = typeof s == "number" ? rightPad(`${s}ms`, 9) : s.error, l = rightPad(e, 25), f = t.rank, c = t.size, h = rightPad(t.shape.toString(), 14);
    let d = "";
    for (const m in a) {
      const g = a[m];
      if (g != null) {
        const y = g.shape || t.shape, b = y.length;
        d += `${m}: ${b}D ${b > 0 ? y : ""} `;
      }
    }
    console.log(`%c${l}	%c${u}	%c${f}D ${h}	%c${c}	%c${d}	%c${o}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getFilteredNodesXToY(r, e, t) {
  const n = {}, s = {};
  for (let l = 0; l < e.length; l++)
    n[e[l].id] = !0;
  for (let l = 0; l < r.length; l++) {
    const f = r[l], c = f.inputs;
    for (const h in c) {
      const d = c[h];
      let m = !1;
      for (let g = 0; g < e.length; g++)
        if (n[d.id]) {
          f.outputs.forEach((y) => n[y.id] = !0), m = !0, s[f.id] = !0;
          break;
        }
      if (m)
        break;
    }
  }
  const a = {};
  a[t.id] = !0;
  const o = {};
  for (let l = r.length - 1; l >= 0; l--) {
    const f = r[l], c = f.inputs;
    for (let h = 0; h < f.outputs.length; h++)
      if (a[f.outputs[h].id]) {
        for (const d in c)
          a[c[d].id] = !0, o[f.id] = !0;
        break;
      }
  }
  const u = [];
  for (let l = 0; l < r.length; l++) {
    const f = r[l];
    if (s[f.id] && o[f.id]) {
      const c = {};
      for (const d in f.inputs) {
        const m = f.inputs[d];
        n[m.id] && (c[d] = m);
      }
      const h = Object.assign({}, f);
      h.inputs = c, h.outputs = f.outputs, u.push(h);
    }
  }
  return u;
}
function backpropagateGradients(r, e, t, n) {
  for (let s = e.length - 1; s >= 0; s--) {
    const a = e[s], o = [];
    if (a.outputs.forEach((l) => {
      const f = r[l.id];
      f != null ? o.push(f) : o.push(null);
    }), a.gradient == null)
      throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);
    const u = a.gradient(o);
    for (const l in a.inputs) {
      if (!(l in u))
        throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(u)}.`);
      const f = t(() => u[l]());
      if (f.dtype !== "float32")
        throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${f.dtype}'`);
      const c = a.inputs[l];
      if (!arraysEqual(f.shape, c.shape))
        throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${l}' has shape '${f.shape}', which does not match the shape of the input '${c.shape}'`);
      if (r[c.id] == null)
        r[c.id] = f;
      else {
        const h = r[c.id];
        r[c.id] = n(h, f), h.dispose();
      }
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FORMAT_LIMIT_NUM_VALS = 20, FORMAT_NUM_FIRST_LAST_VALS = 3, FORMAT_NUM_SIG_DIGITS = 7;
function tensorToString(r, e, t, n) {
  const s = computeStrides(e), a = computeMaxSizePerColumn(r, e, t, s), o = e.length, u = subTensorToString(r, e, t, s, a), l = ["Tensor"];
  return n && (l.push(`  dtype: ${t}`), l.push(`  rank: ${o}`), l.push(`  shape: [${e}]`), l.push("  values:")), l.push(u.map((f) => "    " + f).join(`
`)), l.join(`
`);
}
function computeMaxSizePerColumn(r, e, t, n) {
  const s = sizeFromShape(e), a = n[n.length - 1], o = new Array(a).fill(0), u = e.length, l = t === "complex64" ? createComplexTuples(r) : r;
  if (u > 1)
    for (let f = 0; f < s / a; f++) {
      const c = f * a;
      for (let h = 0; h < a; h++)
        o[h] = Math.max(o[h], valToString(l[c + h], 0, t).length);
    }
  return o;
}
function valToString(r, e, t) {
  let n;
  return Array.isArray(r) ? n = `${parseFloat(r[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ${parseFloat(r[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j` : isString(r) ? n = `'${r}'` : t === "bool" ? n = boolNumToString(r) : n = parseFloat(r.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(), rightPad(n, e);
}
function boolNumToString(r) {
  return r === 0 ? "false" : "true";
}
function subTensorToString(r, e, t, n, s, a = !0) {
  const o = t === "complex64" ? 2 : 1, u = e[0], l = e.length;
  if (l === 0) {
    if (t === "complex64") {
      const y = createComplexTuples(r);
      return [valToString(y[0], 0, t)];
    }
    return t === "bool" ? [boolNumToString(r[0])] : [r[0].toString()];
  }
  if (l === 1) {
    if (u > FORMAT_LIMIT_NUM_VALS) {
      const b = FORMAT_NUM_FIRST_LAST_VALS * o;
      let v = Array.from(r.slice(0, b)), w = Array.from(r.slice((u - FORMAT_NUM_FIRST_LAST_VALS) * o, u * o));
      return t === "complex64" && (v = createComplexTuples(v), w = createComplexTuples(w)), [
        "[" + v.map((I, T) => valToString(I, s[T], t)).join(", ") + ", ..., " + w.map((I, T) => valToString(I, s[u - FORMAT_NUM_FIRST_LAST_VALS + T], t)).join(", ") + "]"
      ];
    }
    return [
      "[" + (t === "complex64" ? createComplexTuples(r) : Array.from(r)).map((b, v) => valToString(b, s[v], t)).join(", ") + "]"
    ];
  }
  const f = e.slice(1), c = n.slice(1), h = n[0] * o, d = [];
  if (u > FORMAT_LIMIT_NUM_VALS) {
    for (let y = 0; y < FORMAT_NUM_FIRST_LAST_VALS; y++) {
      const b = y * h, v = b + h;
      d.push(...subTensorToString(
        r.slice(b, v),
        f,
        t,
        c,
        s,
        !1
        /* isLast */
      ));
    }
    d.push("...");
    for (let y = u - FORMAT_NUM_FIRST_LAST_VALS; y < u; y++) {
      const b = y * h, v = b + h;
      d.push(...subTensorToString(
        r.slice(b, v),
        f,
        t,
        c,
        s,
        y === u - 1
        /* isLast */
      ));
    }
  } else
    for (let y = 0; y < u; y++) {
      const b = y * h, v = b + h;
      d.push(...subTensorToString(
        r.slice(b, v),
        f,
        t,
        c,
        s,
        y === u - 1
        /* isLast */
      ));
    }
  const m = l === 2 ? "," : "";
  d[0] = "[" + (u > 0 ? d[0] + m : "");
  for (let y = 1; y < d.length - 1; y++)
    d[y] = " " + d[y] + m;
  let g = `,
`;
  for (let y = 2; y < l; y++)
    g += `
`;
  return d[d.length - 1] = " " + d[d.length - 1] + "]" + (a ? "" : g), d;
}
function createComplexTuples(r) {
  const e = [];
  for (let t = 0; t < r.length; t += 2)
    e.push([r[t], r[t + 1]]);
  return e;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TensorBuffer {
  constructor(e, t, n) {
    if (this.dtype = t, this.shape = e.slice(), this.size = sizeFromShape(e), n != null) {
      const s = n.length;
      assert$1(s === this.size, () => `Length of values '${s}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (t === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = n || getArrayFromDType(t, this.size), this.strides = computeStrides(e);
  }
  /**
   * Sets a value in the buffer at a given location.
   *
   * @param value The value to set.
   * @param locs  The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  set(e, ...t) {
    t.length === 0 && (t = [0]), assert$1(t.length === this.rank, () => `The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);
    const n = this.locToIndex(t);
    this.values[n] = e;
  }
  /**
   * Returns the value in the buffer at the provided location.
   *
   * @param locs The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  get(...e) {
    e.length === 0 && (e = [0]);
    let t = 0;
    for (const s of e) {
      if (s < 0 || s >= this.shape[t]) {
        const a = `Requested out of range element at ${e}.   Buffer shape=${this.shape}`;
        throw new Error(a);
      }
      t++;
    }
    let n = e[e.length - 1];
    for (let s = 0; s < e.length - 1; ++s)
      n += this.strides[s] * e[s];
    return this.values[n];
  }
  locToIndex(e) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return e[0];
    let t = e[e.length - 1];
    for (let n = 0; n < e.length - 1; ++n)
      t += this.strides[n] * e[n];
    return t;
  }
  indexToLoc(e) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [e];
    const t = new Array(this.shape.length);
    for (let n = 0; n < t.length - 1; ++n)
      t[n] = Math.floor(e / this.strides[n]), e -= t[n] * this.strides[n];
    return t[t.length - 1] = e, t;
  }
  get rank() {
    return this.shape.length;
  }
  /**
   * Creates an immutable `tf.Tensor` object from the buffer.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  toTensor() {
    return trackerFn().makeTensor(this.values, this.shape, this.dtype);
  }
}
let trackerFn = null, opHandler$1 = null;
function setTensorTracker(r) {
  trackerFn = r;
}
function setOpHandler(r) {
  opHandler$1 = r;
}
class Tensor {
  constructor(e, t, n, s) {
    this.kept = !1, this.isDisposedInternal = !1, this.shape = e.slice(), this.dtype = t || "float32", this.size = sizeFromShape(e), this.strides = computeStrides(e), this.dataId = n, this.id = s, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  /**
   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async buffer() {
    const e = await this.data();
    return opHandler$1.buffer(this.shape, this.dtype, e);
  }
  /**
   * Returns a `tf.TensorBuffer` that holds the underlying data.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  bufferSync() {
    return opHandler$1.buffer(this.shape, this.dtype, this.dataSync());
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * asynchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async array() {
    const e = await this.data();
    return toNestedArray(this.shape, e, this.dtype === "complex64");
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * synchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  arraySync() {
    return toNestedArray(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  /**
   * Asynchronously downloads the values from the `tf.Tensor`. Returns a
   * promise of `TypedArray` that resolves when the computation has finished.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async data() {
    this.throwIfDisposed();
    const e = trackerFn().read(this.dataId);
    if (this.dtype === "string") {
      const t = await e;
      try {
        return t.map((n) => decodeString(n));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return e;
  }
  /**
   * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`
   * and `data()`, this method prevents data from being downloaded to CPU.
   *
   * For WebGL backend, the data will be stored on a densely packed texture.
   * This means that the texture will use the RGBA channels to store value.
   *
   * For WebGPU backend, the data will be stored on a buffer. There is no
   * parameter, so can not use a user-defined size to create the buffer.
   *
   * @param options:
   *     For WebGL,
   *         - customTexShape: Optional. If set, will use the user defined
   *     texture shape to create the texture.
   *
   * @returns For WebGL backend, a GPUData contains the new texture and
   *     its information.
   *     {
   *        tensorRef: The tensor that is associated with this texture,
   *        texture: WebGLTexture,
   *        texShape: [number, number] // [height, width]
   *     }
   *
   *     For WebGPU backend, a GPUData contains the new buffer.
   *     {
   *        tensorRef: The tensor that is associated with this buffer,
   *        buffer: GPUBuffer,
   *     }
   *
   *     Remember to dispose the GPUData after it is used by
   *     `res.tensorRef.dispose()`.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dataToGPU(e) {
    return this.throwIfDisposed(), trackerFn().readToGPU(this.dataId, e);
  }
  /**
   * Synchronously downloads the values from the `tf.Tensor`. This blocks the
   * UI thread until the values are ready, which can cause performance issues.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dataSync() {
    this.throwIfDisposed();
    const e = trackerFn().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return e.map((t) => decodeString(t));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return e;
  }
  /** Returns the underlying bytes of the tensor's data. */
  async bytes() {
    this.throwIfDisposed();
    const e = await trackerFn().read(this.dataId);
    return this.dtype === "string" ? e : new Uint8Array(e.buffer);
  }
  /**
   * Disposes `tf.Tensor` from memory.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dispose() {
    this.isDisposed || (this.kerasMask && this.kerasMask.dispose(), trackerFn().disposeTensor(this), this.isDisposedInternal = !0);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  /**
   * Prints the `tf.Tensor`. See `tf.print` for details.
   *
   * @param verbose Whether to print verbose information about the tensor,
   *    including dtype and size.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  print(e = !1) {
    return opHandler$1.print(this, e);
  }
  /**
   * Returns a copy of the tensor. See `tf.clone` for details.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  clone() {
    return this.throwIfDisposed(), opHandler$1.clone(this);
  }
  /**
   * Returns a human-readable description of the tensor. Useful for logging.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  toString(e = !1) {
    const t = this.dataSync();
    return tensorToString(t, this.shape, this.dtype, e);
  }
  cast(e) {
    return this.throwIfDisposed(), opHandler$1.cast(this, e);
  }
  variable(e = !0, t, n) {
    return this.throwIfDisposed(), trackerFn().makeVariable(this, e, t, n);
  }
}
Object.defineProperty(Tensor, Symbol.hasInstance, {
  value: (r) => !!r && r.data != null && r.dataSync != null && r.throwIfDisposed != null
});
function getGlobalTensorClass() {
  return getGlobal$1("Tensor", () => Tensor);
}
getGlobalTensorClass();
class Variable extends Tensor {
  constructor(e, t, n, s) {
    super(e.shape, e.dtype, e.dataId, s), this.trainable = t, this.name = n;
  }
  /**
   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
   * the same shape and dtype as the old `tf.Tensor`.
   *
   * @param newValue New tensor to be assigned to this variable.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  assign(e) {
    if (e.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);
    if (!arraysEqual(e.shape, this.shape))
      throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);
    trackerFn().disposeTensor(this), this.dataId = e.dataId, trackerFn().incRef(
      this,
      null
      /* backend */
    );
  }
  dispose() {
    trackerFn().disposeVariable(this), this.isDisposedInternal = !0;
  }
}
Object.defineProperty(Variable, Symbol.hasInstance, {
  value: (r) => r instanceof Tensor && r.assign != null && r.assign instanceof Function
});
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Rank;
(function(r) {
  r.R0 = "R0", r.R1 = "R1", r.R2 = "R2", r.R3 = "R3", r.R4 = "R4", r.R5 = "R5", r.R6 = "R6";
})(Rank || (Rank = {}));
var UpcastInt32AndMap;
(function(r) {
  r.float32 = "float32", r.int32 = "int32", r.bool = "int32", r.complex64 = "complex64";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));
var UpcastBoolAndMap;
(function(r) {
  r.float32 = "float32", r.int32 = "int32", r.bool = "bool", r.complex64 = "complex64";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));
var UpcastFloat32AndMap;
(function(r) {
  r.float32 = "float32", r.int32 = "float32", r.bool = "float32", r.complex64 = "complex64";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));
var UpcastComplex64AndMap;
(function(r) {
  r.float32 = "complex64", r.int32 = "complex64", r.bool = "complex64", r.complex64 = "complex64";
})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));
const upcastTypeMap = {
  float32: UpcastFloat32AndMap,
  int32: UpcastInt32AndMap,
  bool: UpcastBoolAndMap,
  complex64: UpcastComplex64AndMap
};
function upcastType(r, e) {
  if (r === "string" || e === "string") {
    if (r === "string" && e === "string")
      return "string";
    throw new Error(`Can not upcast ${r} with ${e}`);
  }
  return upcastTypeMap[r][e];
}
function sumOutType(r) {
  return upcastType(r, "int32");
}
function isWebGLData(r) {
  return r != null && typeof r == "object" && "texture" in r && r.texture instanceof WebGLTexture;
}
function isWebGPUData(r) {
  return typeof GPUBuffer < "u" && r != null && typeof r == "object" && "buffer" in r && r.buffer instanceof GPUBuffer;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function makeTypesMatch(r, e) {
  if (r.dtype === e.dtype)
    return [r, e];
  const t = upcastType(r.dtype, e.dtype);
  return [r.cast(t), e.cast(t)];
}
function assertTypesMatch(r, e) {
  assert$1(r.dtype === e.dtype, () => `The dtypes of the first(${r.dtype}) and second(${e.dtype}) input must match`);
}
function isTensorInList(r, e) {
  return e.some((t) => t.id === r.id);
}
function getTensorsInContainer(r) {
  const e = [];
  return walkTensorContainer(r, e, /* @__PURE__ */ new Set()), e;
}
function walkTensorContainer(r, e, t) {
  if (r == null)
    return;
  if (r instanceof Tensor) {
    e.push(r);
    return;
  }
  if (!isIterable$1(r))
    return;
  const n = r;
  for (const s in n) {
    const a = n[s];
    t.has(a) || (t.add(a), walkTensorContainer(a, e, t));
  }
}
function isIterable$1(r) {
  return Array.isArray(r) || typeof r == "object";
}
const tensor_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertTypesMatch,
  getTensorsInContainer,
  isTensorInList,
  makeTypesMatch
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function isRegisteredKernelInvocation(r) {
  return r.kernelName != null;
}
class EngineState {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = !1, this.activeProfile = {
      newBytes: 0,
      newTensors: 0,
      peakBytes: 0,
      kernels: [],
      result: null,
      get kernelNames() {
        return Array.from(new Set(this.kernels.map((e) => e.name)));
      }
    };
  }
  dispose() {
    for (const e in this.registeredVariables)
      this.registeredVariables[e].dispose();
  }
}
class Engine {
  constructor(e) {
    this.ENV = e, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new EngineState();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    const e = this.getSortedBackends();
    for (let t = 0; t < e.length; t++) {
      const n = e[t];
      if (await this.initializeBackend(n).success) {
        await this.setBackend(n);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      const { name: e, asyncInit: t } = this.initializeBackendsAndReturnBest();
      if (t)
        throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(e);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(e) {
    if (!(e in this.registry))
      if (e in this.registryFactory) {
        const { asyncInit: t } = this.initializeBackend(e);
        if (t)
          return null;
      } else
        return null;
    return this.registry[e];
  }
  findBackendFactory(e) {
    return e in this.registryFactory ? this.registryFactory[e].factory : null;
  }
  registerBackend(e, t, n = 1) {
    return e in this.registryFactory ? (warn(`${e} backend was already registered. Reusing existing backend factory.`), !1) : (this.registryFactory[e] = { factory: t, priority: n }, !0);
  }
  async setBackend(e) {
    if (this.registryFactory[e] == null)
      throw new Error(`Backend name '${e}' not found in registry`);
    if (this.backendName = e, this.registry[e] == null) {
      this.backendInstance = null;
      const { success: t, asyncInit: n } = this.initializeBackend(e);
      if (!(n ? await t : t))
        return !1;
    }
    return this.backendInstance = this.registry[e], this.setupRegisteredKernels(), this.profiler = new Profiler(this.backendInstance), !0;
  }
  setupRegisteredKernels() {
    getKernelsForBackend(this.backendName).forEach((t) => {
      t.setupFunc != null && t.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(e) {
    getKernelsForBackend(e).forEach((n) => {
      n.disposeFunc != null && n.disposeFunc(this.registry[e]);
    });
  }
  /**
   * Initializes a backend by looking up the backend name in the factory
   * registry and calling the factory method. Returns a boolean representing
   * whether the initialization of the backend succeeded. Throws an error if
   * there is no backend in the factory registry.
   */
  initializeBackend(e) {
    const t = this.registryFactory[e];
    if (t == null)
      throw new Error(`Cannot initialize backend ${e}, no registration found.`);
    try {
      const n = t.factory();
      if (n && !(n instanceof KernelBackend) && typeof n.then == "function") {
        const s = ++this.pendingBackendInitId, a = n.then((o) => s < this.pendingBackendInitId ? !1 : (this.registry[e] = o, this.pendingBackendInit = null, !0)).catch((o) => (s < this.pendingBackendInitId || (this.pendingBackendInit = null, warn(`Initialization of backend ${e} failed`), warn(o.stack || o.message)), !1));
        return this.pendingBackendInit = a, { success: a, asyncInit: !0 };
      } else
        return this.registry[e] = n, { success: !0, asyncInit: !1 };
    } catch (n) {
      return warn(`Initialization of backend ${e} failed`), warn(n.stack || n.message), { success: !1, asyncInit: !1 };
    }
  }
  removeBackend(e) {
    if (!(e in this.registryFactory))
      throw new Error(`${e} backend not found in registry`);
    this.backendName === e && this.pendingBackendInit != null && this.pendingBackendInitId++, e in this.registry && (this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e]), delete this.registryFactory[e], this.backendName === e && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((e, t) => this.registryFactory[t].priority - this.registryFactory[e].priority);
  }
  initializeBackendsAndReturnBest() {
    const e = this.getSortedBackends();
    for (let t = 0; t < e.length; t++) {
      const n = e[t], { success: s, asyncInit: a } = this.initializeBackend(n);
      if (a || s)
        return { name: n, asyncInit: a };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(e, t) {
    const n = this.state.tensorInfo.get(t), s = n.backend, a = this.readSync(t), o = s.refCount(t);
    s.disposeData(t, !0), n.backend = e, e.move(t, a, n.shape, n.dtype, o), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(e, t) {
    let n = null;
    if (t == null) {
      if (typeof e != "function")
        throw new Error("Please provide a function to tidy()");
      t = e;
    } else {
      if (typeof e != "string" && !(e instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof t != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      n = e;
    }
    let s;
    return this.scopedRun(() => this.startScope(n), () => this.endScope(s), () => (s = t(), s instanceof Promise && console.error("Cannot return a Promise inside of tidy."), s));
  }
  scopedRun(e, t, n) {
    e();
    try {
      const s = n();
      return t(), s;
    } catch (s) {
      throw t(), s;
    }
  }
  nextTensorId() {
    return Engine.nextTensorId++;
  }
  nextVariableId() {
    return Engine.nextVariableId++;
  }
  /**
   * This method is called instead of the public-facing tensor.clone() when
   * saving a tensor for backwards pass. It makes sure to add the clone
   * operation to the tape regardless of being called inside a kernel
   * execution.
   */
  clone(e) {
    const t = ENGINE.runKernel(Identity$1, { x: e }), n = { x: e }, s = (o) => ({
      x: () => {
        const u = "float32", l = { x: o }, f = { dtype: u };
        return ENGINE.runKernel(
          Cast,
          l,
          // tslint:disable-next-line: no-unnecessary-type-assertion
          f
        );
      }
    }), a = [];
    return this.addTapeNode(this.state.activeScope.name, n, [t], s, a, {}), t;
  }
  /**
   * Execute a kernel with the given name and return the output tensor.
   *
   * @param kernelName The name of the kernel to execute.
   * @param inputs A map of input names to tensors.
   * @param attrs A map of attribute names to their values. An attribute is a
   *     primitive (non-tensor) input to the kernel.
   * @param inputsToSave A list of tensors, inputs to save for the backprop
   *     computation.
   * @param outputsToSave A list of booleans, specifying which output to save
   *     for the backprop computation. These are booleans since the output
   * tensors are not visible to the user.
   */
  runKernel(e, t, n) {
    if (this.backendName == null && this.backend, !(getKernel(e, this.backendName) != null))
      throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: e, inputs: t, attrs: n });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(e, t, n) {
    const s = this.backend.numDataIds();
    let a = 0;
    n.forEach((l) => {
      a += l.dtype === "complex64" ? 3 : 1;
    });
    const o = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], u = s - t - a - o;
    if (u > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${u} data ids) after running '${e}'`);
  }
  /**
   * Internal helper method to execute a kernel Func
   *
   * Use `runKernel` to execute kernels from outside of engine.
   */
  runKernelFunc(e) {
    let t, n = [];
    const s = this.isTapeOn(), a = this.state.numBytes, o = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let u;
    this.backendName == null && this.backend;
    let l;
    const f = isRegisteredKernelInvocation(e) ? e.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (isRegisteredKernelInvocation(e)) {
      const { kernelName: g, inputs: y, attrs: b } = e;
      this.backendName == null && this.backend;
      const v = getKernel(g, this.backendName);
      assert$1(v != null, () => `Cannot find registered kernel '${g}' for backend '${this.backendName}'`), u = () => {
        const w = this.backend.numDataIds();
        l = v.kernelFunc({ inputs: y, attrs: b, backend: this.backend });
        const I = Array.isArray(l) ? l : [l];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(g, w, I);
        const T = I.map((_) => _.rank != null ? _ : this.makeTensorFromTensorInfo(_));
        if (s) {
          const _ = this.getTensorsForGradient(g, y, T);
          n = this.saveTensorsForBackwardMode(_);
        }
        return T;
      };
    } else {
      const { forwardFunc: g } = e, y = (b) => {
        s && (n = b.map((v) => this.keep(this.clone(v))));
      };
      u = () => {
        const b = this.backend.numDataIds();
        l = this.tidy(() => g(this.backend, y));
        const v = Array.isArray(l) ? l : [l];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(f, b, v), v;
      };
    }
    const { inputs: c, attrs: h } = e, d = isRegisteredKernelInvocation(e) ? null : e.backwardsFunc;
    let m;
    return this.scopedRun(
      // Stop recording to a tape when running a kernel.
      () => this.state.kernelDepth++,
      () => this.state.kernelDepth--,
      () => {
        !this.ENV.getBool("DEBUG") && !this.state.profiling ? t = u() : (m = this.profiler.profileKernel(f, c, () => u()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(m), t = m.outputs);
      }
    ), s && this.addTapeNode(f, c, t, d, n, h), this.state.profiling && this.state.activeProfile.kernels.push({
      name: f,
      bytesAdded: this.state.numBytes - a,
      totalBytesSnapshot: this.state.numBytes,
      tensorsAdded: this.state.numTensors - o,
      totalTensorsSnapshot: this.state.numTensors,
      inputShapes: Object.keys(c).map((g) => c[g] != null ? c[g].shape : null),
      outputShapes: t.map((g) => g.shape),
      kernelTimeMs: m.timeMs,
      extraInfo: m.extraInfo
    }), Array.isArray(l) ? t : t[0];
  }
  /**
   * Saves tensors used in forward mode for use in backward mode.
   *
   * @param tensors the list of tensors to save.
   */
  saveTensorsForBackwardMode(e) {
    return e.map((n) => this.keep(this.clone(n)));
  }
  /**
   * Returns a list of tensors to save for a given gradient calculation.
   *
   * @param kernelName name of kernel to look up gradient for.
   * @param inputs a map of input tensors.
   * @param outputs an array of output tensors from forward mode of kernel.
   */
  getTensorsForGradient(e, t, n) {
    const s = getGradient(e);
    if (s != null) {
      const a = s.inputsToSave || [], o = s.outputsToSave || [];
      let u;
      s.saveAllInputs ? (assert$1(Array.isArray(t), () => "saveAllInputs is true, expected inputs to be an array."), u = Object.keys(t).map((f) => t[f])) : u = a.map((f) => t[f]);
      const l = n.filter((f, c) => o[c]);
      return u.concat(l);
    }
    return [];
  }
  /**
   * Internal method used by public APIs for tensor creation. Makes a new
   * tensor with the provided shape, dtype and values. It always
   * creates a new data id and writes the values to the underlying backend.
   */
  makeTensor(e, t, n, s) {
    if (e == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    n = n || "float32", s = s || this.backend;
    let a = e;
    n === "string" && isString(e[0]) && (a = e.map((l) => encodeString(l)));
    const o = s.write(a, t, n), u = new Tensor(t, n, o, this.nextTensorId());
    if (this.trackTensor(u, s), n === "string") {
      const l = this.state.tensorInfo.get(o), f = bytesFromStringArray(a);
      this.state.numBytes += f - l.bytes, l.bytes = f;
    }
    return u;
  }
  /**
   * Internal method used by backends. Makes a new tensor
   * that is a wrapper around an existing data id. It doesn't create
   * a new data id, only increments the ref count used in memory tracking.
   * @deprecated
   */
  makeTensorFromDataId(e, t, n, s) {
    n = n || "float32";
    const a = { dataId: e, shape: t, dtype: n };
    return this.makeTensorFromTensorInfo(a, s);
  }
  /**
   * Internal method used by backends. Makes a new tensor that is a wrapper
   * around an existing data id in TensorInfo. It doesn't create a new data id,
   * only increments the ref count used in memory tracking.
   */
  makeTensorFromTensorInfo(e, t) {
    const { dataId: n, shape: s, dtype: a } = e, o = new Tensor(s, a, n, this.nextTensorId());
    return this.trackTensor(o, t), o;
  }
  makeVariable(e, t = !0, n, s) {
    n = n || this.nextVariableId().toString(), s != null && s !== e.dtype && (e = e.cast(s));
    const a = new Variable(e, t, n, this.nextTensorId());
    if (this.state.registeredVariables[a.name] != null)
      throw new Error(`Variable with name ${a.name} was already registered`);
    return this.state.registeredVariables[a.name] = a, this.incRef(a, this.backend), a;
  }
  trackTensor(e, t) {
    this.state.numTensors++, e.dtype === "string" && this.state.numStringTensors++;
    let n = 0;
    e.dtype !== "complex64" && e.dtype !== "string" && (n = e.size * bytesPerElement(e.dtype)), this.state.numBytes += n, this.state.tensorInfo.has(e.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(e.dataId, {
      backend: t || this.backend,
      dtype: e.dtype,
      shape: e.shape,
      bytes: n
    })), e instanceof Variable || this.track(e);
  }
  // Track the tensor by dataId and increase the refCount for the dataId in the
  // backend.
  // TODO(pyu10055): This is currently used by makeVariable method, to increase
  // refCount on the backend for the dataId. It can potentially be replaced with
  // Identity op indead of calling backend directly.
  incRef(e, t) {
    this.trackTensor(e, t), this.backend.incRef(e.dataId);
  }
  removeDataId(e, t) {
    this.state.tensorInfo.has(e) && this.state.tensorInfo.get(e).backend === t && (this.state.tensorInfo.delete(e), this.state.numDataBuffers--);
  }
  disposeTensor(e) {
    if (!this.state.tensorInfo.has(e.dataId))
      return;
    const t = this.state.tensorInfo.get(e.dataId);
    if (this.state.numTensors--, e.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= t.bytes), e.dtype !== "complex64" && e.dtype !== "string") {
      const n = e.size * bytesPerElement(e.dtype);
      this.state.numBytes -= n;
    }
    t.backend.disposeData(e.dataId) && this.removeDataId(e.dataId, t.backend);
  }
  disposeVariables() {
    for (const e in this.state.registeredVariables) {
      const t = this.state.registeredVariables[e];
      this.disposeVariable(t);
    }
  }
  disposeVariable(e) {
    this.disposeTensor(e), this.state.registeredVariables[e.name] != null && delete this.state.registeredVariables[e.name];
  }
  memory() {
    const e = this.backend.memory();
    return e.numTensors = this.state.numTensors, e.numDataBuffers = this.state.numDataBuffers, e.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (e.unreliable = !0, e.reasons == null && (e.reasons = []), e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), e;
  }
  async profile(e) {
    this.state.profiling = !0;
    const t = this.state.numBytes, n = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await e(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((s) => s.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - t, this.state.activeProfile.newTensors = this.state.numTensors - n;
    for (const s of this.state.activeProfile.kernels)
      s.kernelTimeMs = await s.kernelTimeMs, s.extraInfo = await s.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(e, t, n, s, a, o) {
    const u = { id: this.state.nextTapeNodeId++, kernelName: e, inputs: t, outputs: n, saved: a }, l = getGradient(e);
    l != null && (s = l.gradFunc), s != null && (u.gradient = (f) => (f = f.map((c, h) => {
      if (c == null) {
        const d = n[h], m = makeZerosTypedArray(d.size, d.dtype);
        return this.makeTensor(m, d.shape, d.dtype);
      }
      return c;
    }), s(f.length > 1 ? f : f[0], a, o))), this.state.activeTape.push(u);
  }
  keep(e) {
    return e.kept = !0, e;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  /**
   * Start a scope. Use this with endScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */
  startScope(e) {
    const t = {
      track: [],
      name: "unnamed scope",
      id: this.state.nextScopeId++
    };
    e && (t.name = e), this.state.scopeStack.push(t), this.state.activeScope = t;
  }
  /**
   * End a scope. Use this with startScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */
  endScope(e) {
    const t = getTensorsInContainer(e), n = new Set(t.map((a) => a.id));
    for (let a = 0; a < this.state.activeScope.track.length; a++) {
      const o = this.state.activeScope.track[a];
      !o.kept && !n.has(o.id) && o.dispose();
    }
    const s = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], t.forEach((a) => {
      !a.kept && a.scopeId === s.id && this.track(a);
    });
  }
  /**
   * Returns gradients of `f` with respect to each of the `xs`. The gradients
   * returned are of the same length as `xs`, but some might be null if `f`
   * was not a function of that `x`. It also takes optional dy to multiply the
   * gradient, which defaults to `1`.
   */
  gradients(e, t, n, s = !1) {
    if (assert$1(t.length > 0, () => "gradients() received an empty list of xs."), n != null && n.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);
    const a = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", e));
    assert$1(a instanceof Tensor, () => "The result y returned by f() must be a tensor.");
    const o = getFilteredNodesXToY(this.state.activeTape, t, a);
    if (!s && o.length === 0 && t.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      const u = {};
      u[a.id] = n ?? ones$2(a.shape), backpropagateGradients(
        u,
        o,
        // Pass the tidy function to avoid circular dep with `tape.ts`.
        (f) => this.tidy(f),
        // Pass an add function to avoide a circular dep with `tape.ts`.
        add$3
      );
      const l = t.map((f) => u[f.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((f) => {
        for (const c of f.saved)
          c.dispose();
      }), this.state.activeTape = null), { value: a, grads: l };
    });
  }
  customGrad(e) {
    return assert$1(isFunction(e), () => "The f passed in customGrad(f) must be a function."), (...t) => {
      assert$1(t.every((u) => u instanceof Tensor), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let n;
      const s = {};
      t.forEach((u, l) => {
        s[l] = u;
      });
      const a = (u, l) => (n = e(...t, l), assert$1(n.value instanceof Tensor, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), assert$1(isFunction(n.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), n.value), o = (u, l) => {
        const f = n.gradFunc(u, l), c = Array.isArray(f) ? f : [f];
        assert$1(c.length === t.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), assert$1(c.every((d) => d instanceof Tensor), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        const h = {};
        return c.forEach((d, m) => {
          h[m] = () => d;
        }), h;
      };
      return this.runKernelFunc({
        forwardFunc: a,
        backwardsFunc: o,
        inputs: s
      });
    };
  }
  readSync(e) {
    return this.state.tensorInfo.get(e).backend.readSync(e);
  }
  read(e) {
    return this.state.tensorInfo.get(e).backend.read(e);
  }
  readToGPU(e, t) {
    return this.state.tensorInfo.get(e).backend.readToGPU(e, t);
  }
  async time(e) {
    const t = now(), n = await this.backend.time(e);
    return n.wallMs = now() - t, n;
  }
  /**
   * Tracks a Tensor in the current scope to be automatically cleaned up
   * when the current scope ends, and returns the value.
   *
   * @param result The Tensor to track in the current scope.
   */
  track(e) {
    return this.state.activeScope != null && (e.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(e)), e;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  /**
   * Resets the engine state. Removes all backends but does not remove
   * registered backend factories.
   */
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new EngineState();
    for (const e in this.registry)
      this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
}
Engine.nextTensorId = 0;
Engine.nextVariableId = 0;
function ones$2(r) {
  const e = makeOnesTypedArray(sizeFromShape(r), "float32");
  return ENGINE.makeTensor(e, r, "float32");
}
function getOrMakeEngine() {
  const r = getGlobalNamespace();
  if (r._tfengine == null) {
    const e = new Environment(r);
    r._tfengine = new Engine(e);
  }
  return setEnvironmentGlobal(r._tfengine.ENV), setTensorTracker(() => r._tfengine), r._tfengine;
}
const ENGINE = getOrMakeEngine();
function add$3(r, e) {
  const t = { a: r, b: e };
  return ENGINE.runKernel(Add$1, t);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _isNavigatorDefined() {
  return typeof navigator < "u" && navigator != null;
}
let isMobileMockValue;
function mockIsMobile(r) {
  isMobileMockValue = r;
}
function isMobile(r) {
  if (isMobileMockValue !== void 0)
    return isMobileMockValue;
  if (r || _isNavigatorDefined()) {
    if (r || (r = navigator), r.product === "ReactNative")
      return !0;
    const e = r.userAgent || r.vendor || // tslint:disable-next-line:no-any
    (typeof window < "u" ? window.opera : "");
    if (!e) {
      const t = r;
      return t.userAgentData && t.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || // tslint:disable-next-line:max-line-length
    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4));
  }
  return !1;
}
function isBrowser() {
  return typeof window < "u" && window.document != null || //@ts-ignore
  typeof WorkerGlobalScope < "u";
}
const device_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  isBrowser,
  isMobile,
  mockIsMobile
}, Symbol.toStringTag, { value: "Module" })), ENV$3 = env();
ENV$3.registerFlag("DEBUG", () => !1, (r) => {
  r && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
ENV$3.registerFlag("IS_BROWSER", () => isBrowser());
ENV$3.registerFlag("IS_NODE", () => typeof process$1 < "u" && typeof process$1.versions < "u" && typeof process$1.versions.node < "u");
ENV$3.registerFlag("IS_CHROME", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
ENV$3.registerFlag("IS_SAFARI", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Safari/.test(navigator.userAgent) && /Apple/.test(navigator.vendor));
ENV$3.registerFlag("PROD", () => !1);
ENV$3.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => ENV$3.getBool("DEBUG"));
ENV$3.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => !0);
ENV$3.registerFlag("IS_TEST", () => !1);
ENV$3.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => ENV$3.getBool("DEBUG"));
ENV$3.registerFlag("WRAP_TO_IMAGEBITMAP", () => !1);
ENV$3.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => !1);
ENV$3.registerFlag("USE_SETTIMEOUTCUSTOM", () => !1);
var buffer$2 = {}, base64Js = {};
base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;
var lookup = [], revLookup = [], Arr = typeof Uint8Array < "u" ? Uint8Array : Array, code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i = 0, len = code.length; i < len; ++i)
  lookup[i] = code[i], revLookup[code.charCodeAt(i)] = i;
revLookup[45] = 62;
revLookup[95] = 63;
function getLens(r) {
  var e = r.length;
  if (e % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var t = r.indexOf("=");
  t === -1 && (t = e);
  var n = t === e ? 0 : 4 - t % 4;
  return [t, n];
}
function byteLength(r) {
  var e = getLens(r), t = e[0], n = e[1];
  return (t + n) * 3 / 4 - n;
}
function _byteLength(r, e, t) {
  return (e + t) * 3 / 4 - t;
}
function toByteArray(r) {
  var e, t = getLens(r), n = t[0], s = t[1], a = new Arr(_byteLength(r, n, s)), o = 0, u = s > 0 ? n - 4 : n, l;
  for (l = 0; l < u; l += 4)
    e = revLookup[r.charCodeAt(l)] << 18 | revLookup[r.charCodeAt(l + 1)] << 12 | revLookup[r.charCodeAt(l + 2)] << 6 | revLookup[r.charCodeAt(l + 3)], a[o++] = e >> 16 & 255, a[o++] = e >> 8 & 255, a[o++] = e & 255;
  return s === 2 && (e = revLookup[r.charCodeAt(l)] << 2 | revLookup[r.charCodeAt(l + 1)] >> 4, a[o++] = e & 255), s === 1 && (e = revLookup[r.charCodeAt(l)] << 10 | revLookup[r.charCodeAt(l + 1)] << 4 | revLookup[r.charCodeAt(l + 2)] >> 2, a[o++] = e >> 8 & 255, a[o++] = e & 255), a;
}
function tripletToBase64(r) {
  return lookup[r >> 18 & 63] + lookup[r >> 12 & 63] + lookup[r >> 6 & 63] + lookup[r & 63];
}
function encodeChunk(r, e, t) {
  for (var n, s = [], a = e; a < t; a += 3)
    n = (r[a] << 16 & 16711680) + (r[a + 1] << 8 & 65280) + (r[a + 2] & 255), s.push(tripletToBase64(n));
  return s.join("");
}
function fromByteArray(r) {
  for (var e, t = r.length, n = t % 3, s = [], a = 16383, o = 0, u = t - n; o < u; o += a)
    s.push(encodeChunk(r, o, o + a > u ? u : o + a));
  return n === 1 ? (e = r[t - 1], s.push(
    lookup[e >> 2] + lookup[e << 4 & 63] + "=="
  )) : n === 2 && (e = (r[t - 2] << 8) + r[t - 1], s.push(
    lookup[e >> 10] + lookup[e >> 4 & 63] + lookup[e << 2 & 63] + "="
  )), s.join("");
}
var ieee754 = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
ieee754.read = function(r, e, t, n, s) {
  var a, o, u = s * 8 - n - 1, l = (1 << u) - 1, f = l >> 1, c = -7, h = t ? s - 1 : 0, d = t ? -1 : 1, m = r[e + h];
  for (h += d, a = m & (1 << -c) - 1, m >>= -c, c += u; c > 0; a = a * 256 + r[e + h], h += d, c -= 8)
    ;
  for (o = a & (1 << -c) - 1, a >>= -c, c += n; c > 0; o = o * 256 + r[e + h], h += d, c -= 8)
    ;
  if (a === 0)
    a = 1 - f;
  else {
    if (a === l)
      return o ? NaN : (m ? -1 : 1) * (1 / 0);
    o = o + Math.pow(2, n), a = a - f;
  }
  return (m ? -1 : 1) * o * Math.pow(2, a - n);
};
ieee754.write = function(r, e, t, n, s, a) {
  var o, u, l, f = a * 8 - s - 1, c = (1 << f) - 1, h = c >> 1, d = s === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, m = n ? 0 : a - 1, g = n ? 1 : -1, y = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;
  for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (u = isNaN(e) ? 1 : 0, o = c) : (o = Math.floor(Math.log(e) / Math.LN2), e * (l = Math.pow(2, -o)) < 1 && (o--, l *= 2), o + h >= 1 ? e += d / l : e += d * Math.pow(2, 1 - h), e * l >= 2 && (o++, l /= 2), o + h >= c ? (u = 0, o = c) : o + h >= 1 ? (u = (e * l - 1) * Math.pow(2, s), o = o + h) : (u = e * Math.pow(2, h - 1) * Math.pow(2, s), o = 0)); s >= 8; r[t + m] = u & 255, m += g, u /= 256, s -= 8)
    ;
  for (o = o << s | u, f += s; f > 0; r[t + m] = o & 255, m += g, o /= 256, f -= 8)
    ;
  r[t + m - g] |= y * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(r) {
  const e = base64Js, t = ieee754, n = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  r.Buffer = c, r.SlowBuffer = _, r.INSPECT_MAX_BYTES = 50;
  const s = 2147483647;
  r.kMaxLength = s;
  const { Uint8Array: a, ArrayBuffer: o, SharedArrayBuffer: u } = globalThis;
  c.TYPED_ARRAY_SUPPORT = l(), !c.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error(
    "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
  );
  function l() {
    try {
      const Y = new a(1), B = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(B, a.prototype), Object.setPrototypeOf(Y, B), Y.foo() === 42;
    } catch {
      return !1;
    }
  }
  Object.defineProperty(c.prototype, "parent", {
    enumerable: !0,
    get: function() {
      if (c.isBuffer(this))
        return this.buffer;
    }
  }), Object.defineProperty(c.prototype, "offset", {
    enumerable: !0,
    get: function() {
      if (c.isBuffer(this))
        return this.byteOffset;
    }
  });
  function f(Y) {
    if (Y > s)
      throw new RangeError('The value "' + Y + '" is invalid for option "size"');
    const B = new a(Y);
    return Object.setPrototypeOf(B, c.prototype), B;
  }
  function c(Y, B, U) {
    if (typeof Y == "number") {
      if (typeof B == "string")
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      return g(Y);
    }
    return h(Y, B, U);
  }
  c.poolSize = 8192;
  function h(Y, B, U) {
    if (typeof Y == "string")
      return y(Y, B);
    if (o.isView(Y))
      return v(Y);
    if (Y == null)
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof Y
      );
    if (Ee(Y, o) || Y && Ee(Y.buffer, o) || typeof u < "u" && (Ee(Y, u) || Y && Ee(Y.buffer, u)))
      return w(Y, B, U);
    if (typeof Y == "number")
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    const ee = Y.valueOf && Y.valueOf();
    if (ee != null && ee !== Y)
      return c.from(ee, B, U);
    const ie = I(Y);
    if (ie) return ie;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof Y[Symbol.toPrimitive] == "function")
      return c.from(Y[Symbol.toPrimitive]("string"), B, U);
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof Y
    );
  }
  c.from = function(Y, B, U) {
    return h(Y, B, U);
  }, Object.setPrototypeOf(c.prototype, a.prototype), Object.setPrototypeOf(c, a);
  function d(Y) {
    if (typeof Y != "number")
      throw new TypeError('"size" argument must be of type number');
    if (Y < 0)
      throw new RangeError('The value "' + Y + '" is invalid for option "size"');
  }
  function m(Y, B, U) {
    return d(Y), Y <= 0 ? f(Y) : B !== void 0 ? typeof U == "string" ? f(Y).fill(B, U) : f(Y).fill(B) : f(Y);
  }
  c.alloc = function(Y, B, U) {
    return m(Y, B, U);
  };
  function g(Y) {
    return d(Y), f(Y < 0 ? 0 : T(Y) | 0);
  }
  c.allocUnsafe = function(Y) {
    return g(Y);
  }, c.allocUnsafeSlow = function(Y) {
    return g(Y);
  };
  function y(Y, B) {
    if ((typeof B != "string" || B === "") && (B = "utf8"), !c.isEncoding(B))
      throw new TypeError("Unknown encoding: " + B);
    const U = F(Y, B) | 0;
    let ee = f(U);
    const ie = ee.write(Y, B);
    return ie !== U && (ee = ee.slice(0, ie)), ee;
  }
  function b(Y) {
    const B = Y.length < 0 ? 0 : T(Y.length) | 0, U = f(B);
    for (let ee = 0; ee < B; ee += 1)
      U[ee] = Y[ee] & 255;
    return U;
  }
  function v(Y) {
    if (Ee(Y, a)) {
      const B = new a(Y);
      return w(B.buffer, B.byteOffset, B.byteLength);
    }
    return b(Y);
  }
  function w(Y, B, U) {
    if (B < 0 || Y.byteLength < B)
      throw new RangeError('"offset" is outside of buffer bounds');
    if (Y.byteLength < B + (U || 0))
      throw new RangeError('"length" is outside of buffer bounds');
    let ee;
    return B === void 0 && U === void 0 ? ee = new a(Y) : U === void 0 ? ee = new a(Y, B) : ee = new a(Y, B, U), Object.setPrototypeOf(ee, c.prototype), ee;
  }
  function I(Y) {
    if (c.isBuffer(Y)) {
      const B = T(Y.length) | 0, U = f(B);
      return U.length === 0 || Y.copy(U, 0, 0, B), U;
    }
    if (Y.length !== void 0)
      return typeof Y.length != "number" || De(Y.length) ? f(0) : b(Y);
    if (Y.type === "Buffer" && Array.isArray(Y.data))
      return b(Y.data);
  }
  function T(Y) {
    if (Y >= s)
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s.toString(16) + " bytes");
    return Y | 0;
  }
  function _(Y) {
    return +Y != Y && (Y = 0), c.alloc(+Y);
  }
  c.isBuffer = function(B) {
    return B != null && B._isBuffer === !0 && B !== c.prototype;
  }, c.compare = function(B, U) {
    if (Ee(B, a) && (B = c.from(B, B.offset, B.byteLength)), Ee(U, a) && (U = c.from(U, U.offset, U.byteLength)), !c.isBuffer(B) || !c.isBuffer(U))
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    if (B === U) return 0;
    let ee = B.length, ie = U.length;
    for (let ue = 0, fe = Math.min(ee, ie); ue < fe; ++ue)
      if (B[ue] !== U[ue]) {
        ee = B[ue], ie = U[ue];
        break;
      }
    return ee < ie ? -1 : ie < ee ? 1 : 0;
  }, c.isEncoding = function(B) {
    switch (String(B).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return !0;
      default:
        return !1;
    }
  }, c.concat = function(B, U) {
    if (!Array.isArray(B))
      throw new TypeError('"list" argument must be an Array of Buffers');
    if (B.length === 0)
      return c.alloc(0);
    let ee;
    if (U === void 0)
      for (U = 0, ee = 0; ee < B.length; ++ee)
        U += B[ee].length;
    const ie = c.allocUnsafe(U);
    let ue = 0;
    for (ee = 0; ee < B.length; ++ee) {
      let fe = B[ee];
      if (Ee(fe, a))
        ue + fe.length > ie.length ? (c.isBuffer(fe) || (fe = c.from(fe)), fe.copy(ie, ue)) : a.prototype.set.call(
          ie,
          fe,
          ue
        );
      else if (c.isBuffer(fe))
        fe.copy(ie, ue);
      else
        throw new TypeError('"list" argument must be an Array of Buffers');
      ue += fe.length;
    }
    return ie;
  };
  function F(Y, B) {
    if (c.isBuffer(Y))
      return Y.length;
    if (o.isView(Y) || Ee(Y, o))
      return Y.byteLength;
    if (typeof Y != "string")
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof Y
      );
    const U = Y.length, ee = arguments.length > 2 && arguments[2] === !0;
    if (!ee && U === 0) return 0;
    let ie = !1;
    for (; ; )
      switch (B) {
        case "ascii":
        case "latin1":
        case "binary":
          return U;
        case "utf8":
        case "utf-8":
          return $e(Y).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return U * 2;
        case "hex":
          return U >>> 1;
        case "base64":
          return we(Y).length;
        default:
          if (ie)
            return ee ? -1 : $e(Y).length;
          B = ("" + B).toLowerCase(), ie = !0;
      }
  }
  c.byteLength = F;
  function O(Y, B, U) {
    let ee = !1;
    if ((B === void 0 || B < 0) && (B = 0), B > this.length || ((U === void 0 || U > this.length) && (U = this.length), U <= 0) || (U >>>= 0, B >>>= 0, U <= B))
      return "";
    for (Y || (Y = "utf8"); ; )
      switch (Y) {
        case "hex":
          return P(this, B, U);
        case "utf8":
        case "utf-8":
          return N(this, B, U);
        case "ascii":
          return E(this, B, U);
        case "latin1":
        case "binary":
          return M(this, B, U);
        case "base64":
          return A(this, B, U);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return z(this, B, U);
        default:
          if (ee) throw new TypeError("Unknown encoding: " + Y);
          Y = (Y + "").toLowerCase(), ee = !0;
      }
  }
  c.prototype._isBuffer = !0;
  function q(Y, B, U) {
    const ee = Y[B];
    Y[B] = Y[U], Y[U] = ee;
  }
  c.prototype.swap16 = function() {
    const B = this.length;
    if (B % 2 !== 0)
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let U = 0; U < B; U += 2)
      q(this, U, U + 1);
    return this;
  }, c.prototype.swap32 = function() {
    const B = this.length;
    if (B % 4 !== 0)
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let U = 0; U < B; U += 4)
      q(this, U, U + 3), q(this, U + 1, U + 2);
    return this;
  }, c.prototype.swap64 = function() {
    const B = this.length;
    if (B % 8 !== 0)
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let U = 0; U < B; U += 8)
      q(this, U, U + 7), q(this, U + 1, U + 6), q(this, U + 2, U + 5), q(this, U + 3, U + 4);
    return this;
  }, c.prototype.toString = function() {
    const B = this.length;
    return B === 0 ? "" : arguments.length === 0 ? N(this, 0, B) : O.apply(this, arguments);
  }, c.prototype.toLocaleString = c.prototype.toString, c.prototype.equals = function(B) {
    if (!c.isBuffer(B)) throw new TypeError("Argument must be a Buffer");
    return this === B ? !0 : c.compare(this, B) === 0;
  }, c.prototype.inspect = function() {
    let B = "";
    const U = r.INSPECT_MAX_BYTES;
    return B = this.toString("hex", 0, U).replace(/(.{2})/g, "$1 ").trim(), this.length > U && (B += " ... "), "<Buffer " + B + ">";
  }, n && (c.prototype[n] = c.prototype.inspect), c.prototype.compare = function(B, U, ee, ie, ue) {
    if (Ee(B, a) && (B = c.from(B, B.offset, B.byteLength)), !c.isBuffer(B))
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof B
      );
    if (U === void 0 && (U = 0), ee === void 0 && (ee = B ? B.length : 0), ie === void 0 && (ie = 0), ue === void 0 && (ue = this.length), U < 0 || ee > B.length || ie < 0 || ue > this.length)
      throw new RangeError("out of range index");
    if (ie >= ue && U >= ee)
      return 0;
    if (ie >= ue)
      return -1;
    if (U >= ee)
      return 1;
    if (U >>>= 0, ee >>>= 0, ie >>>= 0, ue >>>= 0, this === B) return 0;
    let fe = ue - ie, Ie = ee - U;
    const Re = Math.min(fe, Ie), Se = this.slice(ie, ue), Pe = B.slice(U, ee);
    for (let Ae = 0; Ae < Re; ++Ae)
      if (Se[Ae] !== Pe[Ae]) {
        fe = Se[Ae], Ie = Pe[Ae];
        break;
      }
    return fe < Ie ? -1 : Ie < fe ? 1 : 0;
  };
  function V(Y, B, U, ee, ie) {
    if (Y.length === 0) return -1;
    if (typeof U == "string" ? (ee = U, U = 0) : U > 2147483647 ? U = 2147483647 : U < -2147483648 && (U = -2147483648), U = +U, De(U) && (U = ie ? 0 : Y.length - 1), U < 0 && (U = Y.length + U), U >= Y.length) {
      if (ie) return -1;
      U = Y.length - 1;
    } else if (U < 0)
      if (ie) U = 0;
      else return -1;
    if (typeof B == "string" && (B = c.from(B, ee)), c.isBuffer(B))
      return B.length === 0 ? -1 : H(Y, B, U, ee, ie);
    if (typeof B == "number")
      return B = B & 255, typeof a.prototype.indexOf == "function" ? ie ? a.prototype.indexOf.call(Y, B, U) : a.prototype.lastIndexOf.call(Y, B, U) : H(Y, [B], U, ee, ie);
    throw new TypeError("val must be string, number or Buffer");
  }
  function H(Y, B, U, ee, ie) {
    let ue = 1, fe = Y.length, Ie = B.length;
    if (ee !== void 0 && (ee = String(ee).toLowerCase(), ee === "ucs2" || ee === "ucs-2" || ee === "utf16le" || ee === "utf-16le")) {
      if (Y.length < 2 || B.length < 2)
        return -1;
      ue = 2, fe /= 2, Ie /= 2, U /= 2;
    }
    function Re(Pe, Ae) {
      return ue === 1 ? Pe[Ae] : Pe.readUInt16BE(Ae * ue);
    }
    let Se;
    if (ie) {
      let Pe = -1;
      for (Se = U; Se < fe; Se++)
        if (Re(Y, Se) === Re(B, Pe === -1 ? 0 : Se - Pe)) {
          if (Pe === -1 && (Pe = Se), Se - Pe + 1 === Ie) return Pe * ue;
        } else
          Pe !== -1 && (Se -= Se - Pe), Pe = -1;
    } else
      for (U + Ie > fe && (U = fe - Ie), Se = U; Se >= 0; Se--) {
        let Pe = !0;
        for (let Ae = 0; Ae < Ie; Ae++)
          if (Re(Y, Se + Ae) !== Re(B, Ae)) {
            Pe = !1;
            break;
          }
        if (Pe) return Se;
      }
    return -1;
  }
  c.prototype.includes = function(B, U, ee) {
    return this.indexOf(B, U, ee) !== -1;
  }, c.prototype.indexOf = function(B, U, ee) {
    return V(this, B, U, ee, !0);
  }, c.prototype.lastIndexOf = function(B, U, ee) {
    return V(this, B, U, ee, !1);
  };
  function R(Y, B, U, ee) {
    U = Number(U) || 0;
    const ie = Y.length - U;
    ee ? (ee = Number(ee), ee > ie && (ee = ie)) : ee = ie;
    const ue = B.length;
    ee > ue / 2 && (ee = ue / 2);
    let fe;
    for (fe = 0; fe < ee; ++fe) {
      const Ie = parseInt(B.substr(fe * 2, 2), 16);
      if (De(Ie)) return fe;
      Y[U + fe] = Ie;
    }
    return fe;
  }
  function $(Y, B, U, ee) {
    return ve($e(B, Y.length - U), Y, U, ee);
  }
  function S(Y, B, U, ee) {
    return ve(be(B), Y, U, ee);
  }
  function x(Y, B, U, ee) {
    return ve(we(B), Y, U, ee);
  }
  function C(Y, B, U, ee) {
    return ve(xe(B, Y.length - U), Y, U, ee);
  }
  c.prototype.write = function(B, U, ee, ie) {
    if (U === void 0)
      ie = "utf8", ee = this.length, U = 0;
    else if (ee === void 0 && typeof U == "string")
      ie = U, ee = this.length, U = 0;
    else if (isFinite(U))
      U = U >>> 0, isFinite(ee) ? (ee = ee >>> 0, ie === void 0 && (ie = "utf8")) : (ie = ee, ee = void 0);
    else
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    const ue = this.length - U;
    if ((ee === void 0 || ee > ue) && (ee = ue), B.length > 0 && (ee < 0 || U < 0) || U > this.length)
      throw new RangeError("Attempt to write outside buffer bounds");
    ie || (ie = "utf8");
    let fe = !1;
    for (; ; )
      switch (ie) {
        case "hex":
          return R(this, B, U, ee);
        case "utf8":
        case "utf-8":
          return $(this, B, U, ee);
        case "ascii":
        case "latin1":
        case "binary":
          return S(this, B, U, ee);
        case "base64":
          return x(this, B, U, ee);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return C(this, B, U, ee);
        default:
          if (fe) throw new TypeError("Unknown encoding: " + ie);
          ie = ("" + ie).toLowerCase(), fe = !0;
      }
  }, c.prototype.toJSON = function() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function A(Y, B, U) {
    return B === 0 && U === Y.length ? e.fromByteArray(Y) : e.fromByteArray(Y.slice(B, U));
  }
  function N(Y, B, U) {
    U = Math.min(Y.length, U);
    const ee = [];
    let ie = B;
    for (; ie < U; ) {
      const ue = Y[ie];
      let fe = null, Ie = ue > 239 ? 4 : ue > 223 ? 3 : ue > 191 ? 2 : 1;
      if (ie + Ie <= U) {
        let Re, Se, Pe, Ae;
        switch (Ie) {
          case 1:
            ue < 128 && (fe = ue);
            break;
          case 2:
            Re = Y[ie + 1], (Re & 192) === 128 && (Ae = (ue & 31) << 6 | Re & 63, Ae > 127 && (fe = Ae));
            break;
          case 3:
            Re = Y[ie + 1], Se = Y[ie + 2], (Re & 192) === 128 && (Se & 192) === 128 && (Ae = (ue & 15) << 12 | (Re & 63) << 6 | Se & 63, Ae > 2047 && (Ae < 55296 || Ae > 57343) && (fe = Ae));
            break;
          case 4:
            Re = Y[ie + 1], Se = Y[ie + 2], Pe = Y[ie + 3], (Re & 192) === 128 && (Se & 192) === 128 && (Pe & 192) === 128 && (Ae = (ue & 15) << 18 | (Re & 63) << 12 | (Se & 63) << 6 | Pe & 63, Ae > 65535 && Ae < 1114112 && (fe = Ae));
        }
      }
      fe === null ? (fe = 65533, Ie = 1) : fe > 65535 && (fe -= 65536, ee.push(fe >>> 10 & 1023 | 55296), fe = 56320 | fe & 1023), ee.push(fe), ie += Ie;
    }
    return D(ee);
  }
  const k = 4096;
  function D(Y) {
    const B = Y.length;
    if (B <= k)
      return String.fromCharCode.apply(String, Y);
    let U = "", ee = 0;
    for (; ee < B; )
      U += String.fromCharCode.apply(
        String,
        Y.slice(ee, ee += k)
      );
    return U;
  }
  function E(Y, B, U) {
    let ee = "";
    U = Math.min(Y.length, U);
    for (let ie = B; ie < U; ++ie)
      ee += String.fromCharCode(Y[ie] & 127);
    return ee;
  }
  function M(Y, B, U) {
    let ee = "";
    U = Math.min(Y.length, U);
    for (let ie = B; ie < U; ++ie)
      ee += String.fromCharCode(Y[ie]);
    return ee;
  }
  function P(Y, B, U) {
    const ee = Y.length;
    (!B || B < 0) && (B = 0), (!U || U < 0 || U > ee) && (U = ee);
    let ie = "";
    for (let ue = B; ue < U; ++ue)
      ie += Ce[Y[ue]];
    return ie;
  }
  function z(Y, B, U) {
    const ee = Y.slice(B, U);
    let ie = "";
    for (let ue = 0; ue < ee.length - 1; ue += 2)
      ie += String.fromCharCode(ee[ue] + ee[ue + 1] * 256);
    return ie;
  }
  c.prototype.slice = function(B, U) {
    const ee = this.length;
    B = ~~B, U = U === void 0 ? ee : ~~U, B < 0 ? (B += ee, B < 0 && (B = 0)) : B > ee && (B = ee), U < 0 ? (U += ee, U < 0 && (U = 0)) : U > ee && (U = ee), U < B && (U = B);
    const ie = this.subarray(B, U);
    return Object.setPrototypeOf(ie, c.prototype), ie;
  };
  function J(Y, B, U) {
    if (Y % 1 !== 0 || Y < 0) throw new RangeError("offset is not uint");
    if (Y + B > U) throw new RangeError("Trying to access beyond buffer length");
  }
  c.prototype.readUintLE = c.prototype.readUIntLE = function(B, U, ee) {
    B = B >>> 0, U = U >>> 0, ee || J(B, U, this.length);
    let ie = this[B], ue = 1, fe = 0;
    for (; ++fe < U && (ue *= 256); )
      ie += this[B + fe] * ue;
    return ie;
  }, c.prototype.readUintBE = c.prototype.readUIntBE = function(B, U, ee) {
    B = B >>> 0, U = U >>> 0, ee || J(B, U, this.length);
    let ie = this[B + --U], ue = 1;
    for (; U > 0 && (ue *= 256); )
      ie += this[B + --U] * ue;
    return ie;
  }, c.prototype.readUint8 = c.prototype.readUInt8 = function(B, U) {
    return B = B >>> 0, U || J(B, 1, this.length), this[B];
  }, c.prototype.readUint16LE = c.prototype.readUInt16LE = function(B, U) {
    return B = B >>> 0, U || J(B, 2, this.length), this[B] | this[B + 1] << 8;
  }, c.prototype.readUint16BE = c.prototype.readUInt16BE = function(B, U) {
    return B = B >>> 0, U || J(B, 2, this.length), this[B] << 8 | this[B + 1];
  }, c.prototype.readUint32LE = c.prototype.readUInt32LE = function(B, U) {
    return B = B >>> 0, U || J(B, 4, this.length), (this[B] | this[B + 1] << 8 | this[B + 2] << 16) + this[B + 3] * 16777216;
  }, c.prototype.readUint32BE = c.prototype.readUInt32BE = function(B, U) {
    return B = B >>> 0, U || J(B, 4, this.length), this[B] * 16777216 + (this[B + 1] << 16 | this[B + 2] << 8 | this[B + 3]);
  }, c.prototype.readBigUInt64LE = _e(function(B) {
    B = B >>> 0, pe(B, "offset");
    const U = this[B], ee = this[B + 7];
    (U === void 0 || ee === void 0) && ge(B, this.length - 8);
    const ie = U + this[++B] * 2 ** 8 + this[++B] * 2 ** 16 + this[++B] * 2 ** 24, ue = this[++B] + this[++B] * 2 ** 8 + this[++B] * 2 ** 16 + ee * 2 ** 24;
    return BigInt(ie) + (BigInt(ue) << BigInt(32));
  }), c.prototype.readBigUInt64BE = _e(function(B) {
    B = B >>> 0, pe(B, "offset");
    const U = this[B], ee = this[B + 7];
    (U === void 0 || ee === void 0) && ge(B, this.length - 8);
    const ie = U * 2 ** 24 + this[++B] * 2 ** 16 + this[++B] * 2 ** 8 + this[++B], ue = this[++B] * 2 ** 24 + this[++B] * 2 ** 16 + this[++B] * 2 ** 8 + ee;
    return (BigInt(ie) << BigInt(32)) + BigInt(ue);
  }), c.prototype.readIntLE = function(B, U, ee) {
    B = B >>> 0, U = U >>> 0, ee || J(B, U, this.length);
    let ie = this[B], ue = 1, fe = 0;
    for (; ++fe < U && (ue *= 256); )
      ie += this[B + fe] * ue;
    return ue *= 128, ie >= ue && (ie -= Math.pow(2, 8 * U)), ie;
  }, c.prototype.readIntBE = function(B, U, ee) {
    B = B >>> 0, U = U >>> 0, ee || J(B, U, this.length);
    let ie = U, ue = 1, fe = this[B + --ie];
    for (; ie > 0 && (ue *= 256); )
      fe += this[B + --ie] * ue;
    return ue *= 128, fe >= ue && (fe -= Math.pow(2, 8 * U)), fe;
  }, c.prototype.readInt8 = function(B, U) {
    return B = B >>> 0, U || J(B, 1, this.length), this[B] & 128 ? (255 - this[B] + 1) * -1 : this[B];
  }, c.prototype.readInt16LE = function(B, U) {
    B = B >>> 0, U || J(B, 2, this.length);
    const ee = this[B] | this[B + 1] << 8;
    return ee & 32768 ? ee | 4294901760 : ee;
  }, c.prototype.readInt16BE = function(B, U) {
    B = B >>> 0, U || J(B, 2, this.length);
    const ee = this[B + 1] | this[B] << 8;
    return ee & 32768 ? ee | 4294901760 : ee;
  }, c.prototype.readInt32LE = function(B, U) {
    return B = B >>> 0, U || J(B, 4, this.length), this[B] | this[B + 1] << 8 | this[B + 2] << 16 | this[B + 3] << 24;
  }, c.prototype.readInt32BE = function(B, U) {
    return B = B >>> 0, U || J(B, 4, this.length), this[B] << 24 | this[B + 1] << 16 | this[B + 2] << 8 | this[B + 3];
  }, c.prototype.readBigInt64LE = _e(function(B) {
    B = B >>> 0, pe(B, "offset");
    const U = this[B], ee = this[B + 7];
    (U === void 0 || ee === void 0) && ge(B, this.length - 8);
    const ie = this[B + 4] + this[B + 5] * 2 ** 8 + this[B + 6] * 2 ** 16 + (ee << 24);
    return (BigInt(ie) << BigInt(32)) + BigInt(U + this[++B] * 2 ** 8 + this[++B] * 2 ** 16 + this[++B] * 2 ** 24);
  }), c.prototype.readBigInt64BE = _e(function(B) {
    B = B >>> 0, pe(B, "offset");
    const U = this[B], ee = this[B + 7];
    (U === void 0 || ee === void 0) && ge(B, this.length - 8);
    const ie = (U << 24) + // Overflow
    this[++B] * 2 ** 16 + this[++B] * 2 ** 8 + this[++B];
    return (BigInt(ie) << BigInt(32)) + BigInt(this[++B] * 2 ** 24 + this[++B] * 2 ** 16 + this[++B] * 2 ** 8 + ee);
  }), c.prototype.readFloatLE = function(B, U) {
    return B = B >>> 0, U || J(B, 4, this.length), t.read(this, B, !0, 23, 4);
  }, c.prototype.readFloatBE = function(B, U) {
    return B = B >>> 0, U || J(B, 4, this.length), t.read(this, B, !1, 23, 4);
  }, c.prototype.readDoubleLE = function(B, U) {
    return B = B >>> 0, U || J(B, 8, this.length), t.read(this, B, !0, 52, 8);
  }, c.prototype.readDoubleBE = function(B, U) {
    return B = B >>> 0, U || J(B, 8, this.length), t.read(this, B, !1, 52, 8);
  };
  function re(Y, B, U, ee, ie, ue) {
    if (!c.isBuffer(Y)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (B > ie || B < ue) throw new RangeError('"value" argument is out of bounds');
    if (U + ee > Y.length) throw new RangeError("Index out of range");
  }
  c.prototype.writeUintLE = c.prototype.writeUIntLE = function(B, U, ee, ie) {
    if (B = +B, U = U >>> 0, ee = ee >>> 0, !ie) {
      const Ie = Math.pow(2, 8 * ee) - 1;
      re(this, B, U, ee, Ie, 0);
    }
    let ue = 1, fe = 0;
    for (this[U] = B & 255; ++fe < ee && (ue *= 256); )
      this[U + fe] = B / ue & 255;
    return U + ee;
  }, c.prototype.writeUintBE = c.prototype.writeUIntBE = function(B, U, ee, ie) {
    if (B = +B, U = U >>> 0, ee = ee >>> 0, !ie) {
      const Ie = Math.pow(2, 8 * ee) - 1;
      re(this, B, U, ee, Ie, 0);
    }
    let ue = ee - 1, fe = 1;
    for (this[U + ue] = B & 255; --ue >= 0 && (fe *= 256); )
      this[U + ue] = B / fe & 255;
    return U + ee;
  }, c.prototype.writeUint8 = c.prototype.writeUInt8 = function(B, U, ee) {
    return B = +B, U = U >>> 0, ee || re(this, B, U, 1, 255, 0), this[U] = B & 255, U + 1;
  }, c.prototype.writeUint16LE = c.prototype.writeUInt16LE = function(B, U, ee) {
    return B = +B, U = U >>> 0, ee || re(this, B, U, 2, 65535, 0), this[U] = B & 255, this[U + 1] = B >>> 8, U + 2;
  }, c.prototype.writeUint16BE = c.prototype.writeUInt16BE = function(B, U, ee) {
    return B = +B, U = U >>> 0, ee || re(this, B, U, 2, 65535, 0), this[U] = B >>> 8, this[U + 1] = B & 255, U + 2;
  }, c.prototype.writeUint32LE = c.prototype.writeUInt32LE = function(B, U, ee) {
    return B = +B, U = U >>> 0, ee || re(this, B, U, 4, 4294967295, 0), this[U + 3] = B >>> 24, this[U + 2] = B >>> 16, this[U + 1] = B >>> 8, this[U] = B & 255, U + 4;
  }, c.prototype.writeUint32BE = c.prototype.writeUInt32BE = function(B, U, ee) {
    return B = +B, U = U >>> 0, ee || re(this, B, U, 4, 4294967295, 0), this[U] = B >>> 24, this[U + 1] = B >>> 16, this[U + 2] = B >>> 8, this[U + 3] = B & 255, U + 4;
  };
  function Q(Y, B, U, ee, ie) {
    me(B, ee, ie, Y, U, 7);
    let ue = Number(B & BigInt(4294967295));
    Y[U++] = ue, ue = ue >> 8, Y[U++] = ue, ue = ue >> 8, Y[U++] = ue, ue = ue >> 8, Y[U++] = ue;
    let fe = Number(B >> BigInt(32) & BigInt(4294967295));
    return Y[U++] = fe, fe = fe >> 8, Y[U++] = fe, fe = fe >> 8, Y[U++] = fe, fe = fe >> 8, Y[U++] = fe, U;
  }
  function W(Y, B, U, ee, ie) {
    me(B, ee, ie, Y, U, 7);
    let ue = Number(B & BigInt(4294967295));
    Y[U + 7] = ue, ue = ue >> 8, Y[U + 6] = ue, ue = ue >> 8, Y[U + 5] = ue, ue = ue >> 8, Y[U + 4] = ue;
    let fe = Number(B >> BigInt(32) & BigInt(4294967295));
    return Y[U + 3] = fe, fe = fe >> 8, Y[U + 2] = fe, fe = fe >> 8, Y[U + 1] = fe, fe = fe >> 8, Y[U] = fe, U + 8;
  }
  c.prototype.writeBigUInt64LE = _e(function(B, U = 0) {
    return Q(this, B, U, BigInt(0), BigInt("0xffffffffffffffff"));
  }), c.prototype.writeBigUInt64BE = _e(function(B, U = 0) {
    return W(this, B, U, BigInt(0), BigInt("0xffffffffffffffff"));
  }), c.prototype.writeIntLE = function(B, U, ee, ie) {
    if (B = +B, U = U >>> 0, !ie) {
      const Re = Math.pow(2, 8 * ee - 1);
      re(this, B, U, ee, Re - 1, -Re);
    }
    let ue = 0, fe = 1, Ie = 0;
    for (this[U] = B & 255; ++ue < ee && (fe *= 256); )
      B < 0 && Ie === 0 && this[U + ue - 1] !== 0 && (Ie = 1), this[U + ue] = (B / fe >> 0) - Ie & 255;
    return U + ee;
  }, c.prototype.writeIntBE = function(B, U, ee, ie) {
    if (B = +B, U = U >>> 0, !ie) {
      const Re = Math.pow(2, 8 * ee - 1);
      re(this, B, U, ee, Re - 1, -Re);
    }
    let ue = ee - 1, fe = 1, Ie = 0;
    for (this[U + ue] = B & 255; --ue >= 0 && (fe *= 256); )
      B < 0 && Ie === 0 && this[U + ue + 1] !== 0 && (Ie = 1), this[U + ue] = (B / fe >> 0) - Ie & 255;
    return U + ee;
  }, c.prototype.writeInt8 = function(B, U, ee) {
    return B = +B, U = U >>> 0, ee || re(this, B, U, 1, 127, -128), B < 0 && (B = 255 + B + 1), this[U] = B & 255, U + 1;
  }, c.prototype.writeInt16LE = function(B, U, ee) {
    return B = +B, U = U >>> 0, ee || re(this, B, U, 2, 32767, -32768), this[U] = B & 255, this[U + 1] = B >>> 8, U + 2;
  }, c.prototype.writeInt16BE = function(B, U, ee) {
    return B = +B, U = U >>> 0, ee || re(this, B, U, 2, 32767, -32768), this[U] = B >>> 8, this[U + 1] = B & 255, U + 2;
  }, c.prototype.writeInt32LE = function(B, U, ee) {
    return B = +B, U = U >>> 0, ee || re(this, B, U, 4, 2147483647, -2147483648), this[U] = B & 255, this[U + 1] = B >>> 8, this[U + 2] = B >>> 16, this[U + 3] = B >>> 24, U + 4;
  }, c.prototype.writeInt32BE = function(B, U, ee) {
    return B = +B, U = U >>> 0, ee || re(this, B, U, 4, 2147483647, -2147483648), B < 0 && (B = 4294967295 + B + 1), this[U] = B >>> 24, this[U + 1] = B >>> 16, this[U + 2] = B >>> 8, this[U + 3] = B & 255, U + 4;
  }, c.prototype.writeBigInt64LE = _e(function(B, U = 0) {
    return Q(this, B, U, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  }), c.prototype.writeBigInt64BE = _e(function(B, U = 0) {
    return W(this, B, U, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function j(Y, B, U, ee, ie, ue) {
    if (U + ee > Y.length) throw new RangeError("Index out of range");
    if (U < 0) throw new RangeError("Index out of range");
  }
  function te(Y, B, U, ee, ie) {
    return B = +B, U = U >>> 0, ie || j(Y, B, U, 4), t.write(Y, B, U, ee, 23, 4), U + 4;
  }
  c.prototype.writeFloatLE = function(B, U, ee) {
    return te(this, B, U, !0, ee);
  }, c.prototype.writeFloatBE = function(B, U, ee) {
    return te(this, B, U, !1, ee);
  };
  function se(Y, B, U, ee, ie) {
    return B = +B, U = U >>> 0, ie || j(Y, B, U, 8), t.write(Y, B, U, ee, 52, 8), U + 8;
  }
  c.prototype.writeDoubleLE = function(B, U, ee) {
    return se(this, B, U, !0, ee);
  }, c.prototype.writeDoubleBE = function(B, U, ee) {
    return se(this, B, U, !1, ee);
  }, c.prototype.copy = function(B, U, ee, ie) {
    if (!c.isBuffer(B)) throw new TypeError("argument should be a Buffer");
    if (ee || (ee = 0), !ie && ie !== 0 && (ie = this.length), U >= B.length && (U = B.length), U || (U = 0), ie > 0 && ie < ee && (ie = ee), ie === ee || B.length === 0 || this.length === 0) return 0;
    if (U < 0)
      throw new RangeError("targetStart out of bounds");
    if (ee < 0 || ee >= this.length) throw new RangeError("Index out of range");
    if (ie < 0) throw new RangeError("sourceEnd out of bounds");
    ie > this.length && (ie = this.length), B.length - U < ie - ee && (ie = B.length - U + ee);
    const ue = ie - ee;
    return this === B && typeof a.prototype.copyWithin == "function" ? this.copyWithin(U, ee, ie) : a.prototype.set.call(
      B,
      this.subarray(ee, ie),
      U
    ), ue;
  }, c.prototype.fill = function(B, U, ee, ie) {
    if (typeof B == "string") {
      if (typeof U == "string" ? (ie = U, U = 0, ee = this.length) : typeof ee == "string" && (ie = ee, ee = this.length), ie !== void 0 && typeof ie != "string")
        throw new TypeError("encoding must be a string");
      if (typeof ie == "string" && !c.isEncoding(ie))
        throw new TypeError("Unknown encoding: " + ie);
      if (B.length === 1) {
        const fe = B.charCodeAt(0);
        (ie === "utf8" && fe < 128 || ie === "latin1") && (B = fe);
      }
    } else typeof B == "number" ? B = B & 255 : typeof B == "boolean" && (B = Number(B));
    if (U < 0 || this.length < U || this.length < ee)
      throw new RangeError("Out of range index");
    if (ee <= U)
      return this;
    U = U >>> 0, ee = ee === void 0 ? this.length : ee >>> 0, B || (B = 0);
    let ue;
    if (typeof B == "number")
      for (ue = U; ue < ee; ++ue)
        this[ue] = B;
    else {
      const fe = c.isBuffer(B) ? B : c.from(B, ie), Ie = fe.length;
      if (Ie === 0)
        throw new TypeError('The value "' + B + '" is invalid for argument "value"');
      for (ue = 0; ue < ee - U; ++ue)
        this[ue + U] = fe[ue % Ie];
    }
    return this;
  };
  const X = {};
  function K(Y, B, U) {
    X[Y] = class extends U {
      constructor() {
        super(), Object.defineProperty(this, "message", {
          value: B.apply(this, arguments),
          writable: !0,
          configurable: !0
        }), this.name = `${this.name} [${Y}]`, this.stack, delete this.name;
      }
      get code() {
        return Y;
      }
      set code(ie) {
        Object.defineProperty(this, "code", {
          configurable: !0,
          enumerable: !0,
          value: ie,
          writable: !0
        });
      }
      toString() {
        return `${this.name} [${Y}]: ${this.message}`;
      }
    };
  }
  K(
    "ERR_BUFFER_OUT_OF_BOUNDS",
    function(Y) {
      return Y ? `${Y} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    },
    RangeError
  ), K(
    "ERR_INVALID_ARG_TYPE",
    function(Y, B) {
      return `The "${Y}" argument must be of type number. Received type ${typeof B}`;
    },
    TypeError
  ), K(
    "ERR_OUT_OF_RANGE",
    function(Y, B, U) {
      let ee = `The value of "${Y}" is out of range.`, ie = U;
      return Number.isInteger(U) && Math.abs(U) > 2 ** 32 ? ie = ae(String(U)) : typeof U == "bigint" && (ie = String(U), (U > BigInt(2) ** BigInt(32) || U < -(BigInt(2) ** BigInt(32))) && (ie = ae(ie)), ie += "n"), ee += ` It must be ${B}. Received ${ie}`, ee;
    },
    RangeError
  );
  function ae(Y) {
    let B = "", U = Y.length;
    const ee = Y[0] === "-" ? 1 : 0;
    for (; U >= ee + 4; U -= 3)
      B = `_${Y.slice(U - 3, U)}${B}`;
    return `${Y.slice(0, U)}${B}`;
  }
  function de(Y, B, U) {
    pe(B, "offset"), (Y[B] === void 0 || Y[B + U] === void 0) && ge(B, Y.length - (U + 1));
  }
  function me(Y, B, U, ee, ie, ue) {
    if (Y > U || Y < B) {
      const fe = typeof B == "bigint" ? "n" : "";
      let Ie;
      throw B === 0 || B === BigInt(0) ? Ie = `>= 0${fe} and < 2${fe} ** ${(ue + 1) * 8}${fe}` : Ie = `>= -(2${fe} ** ${(ue + 1) * 8 - 1}${fe}) and < 2 ** ${(ue + 1) * 8 - 1}${fe}`, new X.ERR_OUT_OF_RANGE("value", Ie, Y);
    }
    de(ee, ie, ue);
  }
  function pe(Y, B) {
    if (typeof Y != "number")
      throw new X.ERR_INVALID_ARG_TYPE(B, "number", Y);
  }
  function ge(Y, B, U) {
    throw Math.floor(Y) !== Y ? (pe(Y, U), new X.ERR_OUT_OF_RANGE("offset", "an integer", Y)) : B < 0 ? new X.ERR_BUFFER_OUT_OF_BOUNDS() : new X.ERR_OUT_OF_RANGE(
      "offset",
      `>= 0 and <= ${B}`,
      Y
    );
  }
  const ye = /[^+/0-9A-Za-z-_]/g;
  function ce(Y) {
    if (Y = Y.split("=")[0], Y = Y.trim().replace(ye, ""), Y.length < 2) return "";
    for (; Y.length % 4 !== 0; )
      Y = Y + "=";
    return Y;
  }
  function $e(Y, B) {
    B = B || 1 / 0;
    let U;
    const ee = Y.length;
    let ie = null;
    const ue = [];
    for (let fe = 0; fe < ee; ++fe) {
      if (U = Y.charCodeAt(fe), U > 55295 && U < 57344) {
        if (!ie) {
          if (U > 56319) {
            (B -= 3) > -1 && ue.push(239, 191, 189);
            continue;
          } else if (fe + 1 === ee) {
            (B -= 3) > -1 && ue.push(239, 191, 189);
            continue;
          }
          ie = U;
          continue;
        }
        if (U < 56320) {
          (B -= 3) > -1 && ue.push(239, 191, 189), ie = U;
          continue;
        }
        U = (ie - 55296 << 10 | U - 56320) + 65536;
      } else ie && (B -= 3) > -1 && ue.push(239, 191, 189);
      if (ie = null, U < 128) {
        if ((B -= 1) < 0) break;
        ue.push(U);
      } else if (U < 2048) {
        if ((B -= 2) < 0) break;
        ue.push(
          U >> 6 | 192,
          U & 63 | 128
        );
      } else if (U < 65536) {
        if ((B -= 3) < 0) break;
        ue.push(
          U >> 12 | 224,
          U >> 6 & 63 | 128,
          U & 63 | 128
        );
      } else if (U < 1114112) {
        if ((B -= 4) < 0) break;
        ue.push(
          U >> 18 | 240,
          U >> 12 & 63 | 128,
          U >> 6 & 63 | 128,
          U & 63 | 128
        );
      } else
        throw new Error("Invalid code point");
    }
    return ue;
  }
  function be(Y) {
    const B = [];
    for (let U = 0; U < Y.length; ++U)
      B.push(Y.charCodeAt(U) & 255);
    return B;
  }
  function xe(Y, B) {
    let U, ee, ie;
    const ue = [];
    for (let fe = 0; fe < Y.length && !((B -= 2) < 0); ++fe)
      U = Y.charCodeAt(fe), ee = U >> 8, ie = U % 256, ue.push(ie), ue.push(ee);
    return ue;
  }
  function we(Y) {
    return e.toByteArray(ce(Y));
  }
  function ve(Y, B, U, ee) {
    let ie;
    for (ie = 0; ie < ee && !(ie + U >= B.length || ie >= Y.length); ++ie)
      B[ie + U] = Y[ie];
    return ie;
  }
  function Ee(Y, B) {
    return Y instanceof B || Y != null && Y.constructor != null && Y.constructor.name != null && Y.constructor.name === B.name;
  }
  function De(Y) {
    return Y !== Y;
  }
  const Ce = function() {
    const Y = "0123456789abcdef", B = new Array(256);
    for (let U = 0; U < 16; ++U) {
      const ee = U * 16;
      for (let ie = 0; ie < 16; ++ie)
        B[ee + ie] = Y[U] + Y[ie];
    }
    return B;
  }();
  function _e(Y) {
    return typeof BigInt > "u" ? ze : Y;
  }
  function ze() {
    throw new Error("BigInt not supported");
  }
})(buffer$2);
const Buffer = buffer$2.Buffer, Buffer$1 = buffer$2.Buffer;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function inferShape(r, e) {
  let t = r;
  if (isTypedArray$1(r))
    return e === "string" ? [] : [r.length];
  if (isWebGLData(r)) {
    const s = r.channels || "RGBA";
    return [r.height, r.width * s.length];
  } else if (isWebGPUData(r))
    return [r.buffer.size / (e == null ? 4 : bytesPerElement(e))];
  if (!Array.isArray(r))
    return [];
  const n = [];
  for (; Array.isArray(t) || isTypedArray$1(t) && e !== "string"; )
    n.push(t.length), t = t[0];
  return Array.isArray(r) && env().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && deepAssertShapeConsistency(r, n, []), n;
}
function deepAssertShapeConsistency(r, e, t) {
  if (t = t || [], !Array.isArray(r) && !isTypedArray$1(r)) {
    assert$1(e.length === 0, () => `Element arr[${t.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);
    return;
  }
  assert$1(e.length > 0, () => `Element arr[${t.join("][")}] should be a primitive, but is an array of ${r.length} elements`), assert$1(r.length === e[0], () => `Element arr[${t.join("][")}] should have ${e[0]} elements, but has ${r.length} elements`);
  const n = e.slice(1);
  for (let s = 0; s < r.length; ++s)
    deepAssertShapeConsistency(r[s], n, t.concat(s));
}
function assertDtype(r, e, t, n) {
  if (r !== "string_or_numeric") {
    if (r == null)
      throw new Error("Expected dtype cannot be null.");
    if (r !== "numeric" && r !== e || r === "numeric" && e === "string")
      throw new Error(`Argument '${t}' passed to '${n}' must be ${r} tensor, but got ${e} tensor`);
  }
}
function convertToTensor(r, e, t, n = "numeric") {
  if (r instanceof getGlobalTensorClass())
    return assertDtype(n, r.dtype, e, t), r;
  let s = inferDtype(r);
  if (s !== "string" && ["bool", "int32", "float32"].indexOf(n) >= 0 && (s = n), assertDtype(n, s, e, t), r == null || !isTypedArray$1(r) && !Array.isArray(r) && typeof r != "number" && typeof r != "boolean" && typeof r != "string") {
    const l = r == null ? "null" : r.constructor.name;
    throw new Error(`Argument '${e}' passed to '${t}' must be a Tensor or TensorLike, but got '${l}'`);
  }
  const a = inferShape(r, s);
  !isTypedArray$1(r) && !Array.isArray(r) && (r = [r]);
  const u = s !== "string" ? toTypedArray(r, s) : flatten$2(r, [], !0);
  return ENGINE.makeTensor(u, a, s);
}
function convertToTensorArray(r, e, t, n = "numeric") {
  if (!Array.isArray(r))
    throw new Error(`Argument ${e} passed to ${t} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return r.map((a, o) => convertToTensor(a, `${e}[${o}]`, t, n));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OP_SCOPE_SUFFIX = "__op";
function op(r) {
  const e = Object.keys(r);
  if (e.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);
  let t = e[0];
  const n = r[t];
  t.endsWith("_") && (t = t.substring(0, t.length - 1)), t = t + OP_SCOPE_SUFFIX;
  const s = (...a) => {
    ENGINE.startScope(t);
    try {
      const o = n(...a);
      return isPromise(o) && console.error("Cannot return a Promise inside of tidy."), ENGINE.endScope(o), o;
    } catch (o) {
      throw ENGINE.endScope(null), o;
    }
  };
  return Object.defineProperty(s, "name", { value: t, configurable: !0 }), s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function complex_(r, e) {
  const t = convertToTensor(r, "real", "complex"), n = convertToTensor(e, "imag", "complex");
  assertShapesMatch(t.shape, n.shape, `real and imag shapes, ${t.shape} and ${n.shape}, must match in call to tf.complex().`);
  const s = { real: t, imag: n };
  return ENGINE.runKernel(Complex, s);
}
const complex$2 = /* @__PURE__ */ op({ complex_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function makeTensor(r, e, t, n) {
  if (n == null)
    n = inferDtype(r);
  else if (n === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (isWebGPUData(r) || isWebGLData(r)) {
    if (n !== "float32" && n !== "int32")
      throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${n}.`);
    return ENGINE.backend.createTensorFromGPUData(r, e || t, n);
  }
  if (!isTypedArray$1(r) && !Array.isArray(r) && typeof r != "number" && typeof r != "boolean" && typeof r != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (e != null) {
    assertNonNegativeIntegerDimensions(e);
    const s = sizeFromShape(e), a = sizeFromShape(t);
    assert$1(s === a, () => `Based on the provided shape, [${e}], the tensor should have ${s} values but has ${a}`);
    for (let o = 0; o < t.length; ++o) {
      const u = t[o], l = o === t.length - 1 ? u !== sizeFromShape(e.slice(o)) : !0;
      assert$1(t[o] === e[o] || !l, () => `Error creating a new Tensor. Inferred shape (${t}) does not match the provided shape (${e}). `);
    }
  }
  return !isTypedArray$1(r) && !Array.isArray(r) && (r = [r]), e = e || t, r = n !== "string" ? toTypedArray(r, n) : flatten$2(r, [], !0), ENGINE.makeTensor(r, e, n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tensor(r, e, t) {
  const n = inferShape(r, t);
  return makeTensor(r, e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DTYPE_VALUE_SIZE_MAP = {
  float32: 4,
  float16: 2,
  int32: 4,
  uint16: 2,
  uint8: 1,
  bool: 1,
  complex64: 8
};
class CompositeArrayBuffer {
  /**
   * Concatenate a number of ArrayBuffers into one.
   *
   * @param buffers An array of ArrayBuffers to concatenate, or a single
   *     ArrayBuffer.
   * @returns Result of concatenating `buffers` in order.
   */
  static join(e) {
    return new CompositeArrayBuffer(e).slice();
  }
  constructor(e) {
    if (this.shards = [], this.previousShardIndex = 0, e == null || (e instanceof Array || (e = [e]), e = e.map((n) => isTypedArray$1(n) ? n.buffer : n), e.length === 0))
      return;
    this.bufferUniformSize = e[0].byteLength;
    let t = 0;
    for (let n = 0; n < e.length; n++) {
      const s = e[n];
      n !== e.length - 1 && s.byteLength !== this.bufferUniformSize && (this.bufferUniformSize = void 0);
      const a = t + s.byteLength;
      this.shards.push({ buffer: s, start: t, end: a }), t = a;
    }
    this.shards.length === 0 && (this.byteLength = 0), this.byteLength = this.shards[this.shards.length - 1].end;
  }
  slice(e = 0, t = this.byteLength) {
    if (this.shards.length === 0)
      return new ArrayBuffer(0);
    if (e = isNaN(Number(e)) ? 0 : e, t = isNaN(Number(t)) ? 0 : t, e = Math.max(0, e), t = Math.min(this.byteLength, t), t <= e)
      return new ArrayBuffer(0);
    const n = this.findShardForByte(e);
    if (n === -1)
      throw new Error(`Could not find start shard for byte ${e}`);
    const s = t - e, a = new ArrayBuffer(s), o = new Uint8Array(a);
    let u = 0;
    for (let l = n; l < this.shards.length; l++) {
      const f = this.shards[l], h = e + u - f.start, d = u, g = Math.min(t, f.end) - f.start, y = new Uint8Array(f.buffer, h, g - h);
      if (o.set(y, d), u += y.length, t < f.end)
        break;
    }
    return a;
  }
  /**
   * Get the index of the shard that contains the byte at `byteIndex`.
   */
  findShardForByte(e) {
    if (this.shards.length === 0 || e < 0 || e >= this.byteLength)
      return -1;
    if (this.bufferUniformSize != null)
      return this.previousShardIndex = Math.floor(e / this.bufferUniformSize), this.previousShardIndex;
    function t(s) {
      return e < s.start ? -1 : e >= s.end ? 1 : 0;
    }
    if (t(this.shards[this.previousShardIndex]) === 0)
      return this.previousShardIndex;
    const n = search(this.shards, t);
    return n === -1 ? -1 : (this.previousShardIndex = n, this.previousShardIndex);
  }
}
function search(r, e) {
  let t = 0, n = r.length;
  for (; t <= n; ) {
    const s = Math.floor((n - t) / 2) + t, a = e(r[s]);
    if (a === 0)
      return s;
    a < 0 ? n = s : t = s + 1;
  }
  return -1;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function enableProdMode() {
  env().set("PROD", !0);
}
function enableDebugMode() {
  env().set("DEBUG", !0);
}
function disableDeprecationWarnings() {
  env().set("DEPRECATION_WARNINGS_ENABLED", !1), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function deprecationWarn(r) {
  env().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(r + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
function disposeVariables() {
  ENGINE.disposeVariables();
}
function engine() {
  return ENGINE;
}
function memory() {
  return ENGINE.memory();
}
function profile(r) {
  return ENGINE.profile(r);
}
function tidy(r, e) {
  return ENGINE.tidy(r, e);
}
function dispose(r) {
  getTensorsInContainer(r).forEach((t) => t.dispose());
}
function keep(r) {
  return ENGINE.keep(r);
}
function time(r) {
  return ENGINE.time(r);
}
function setBackend(r) {
  return ENGINE.setBackend(r);
}
function ready() {
  return ENGINE.ready();
}
function getBackend() {
  return ENGINE.backendName;
}
function removeBackend(r) {
  ENGINE.removeBackend(r);
}
function findBackend(r) {
  return ENGINE.findBackend(r);
}
function findBackendFactory(r) {
  return ENGINE.findBackendFactory(r);
}
function registerBackend(r, e, t = 1) {
  return ENGINE.registerBackend(r, e, t);
}
function backend() {
  return ENGINE.backend;
}
function setPlatform(r, e) {
  env().setPlatform(r, e);
}
const NUM_BYTES_STRING_LENGTH = 4;
async function encodeWeights(r, e) {
  const t = [], n = [], s = Array.isArray(r) ? r.map((o) => o.name) : Object.keys(r);
  for (let o = 0; o < s.length; ++o) {
    const u = s[o], l = Array.isArray(r) ? r[o].tensor : r[u];
    if (l.dtype !== "float32" && l.dtype !== "int32" && l.dtype !== "bool" && l.dtype !== "string" && l.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${u}': ${l.dtype}`);
    const f = { name: u, shape: l.shape, dtype: l.dtype };
    if (l.dtype === "string") {
      const c = new Promise(async (h) => {
        const d = await l.bytes(), m = d.reduce((b, v) => b + v.length, 0) + NUM_BYTES_STRING_LENGTH * d.length, g = new Uint8Array(m);
        let y = 0;
        for (let b = 0; b < d.length; b++) {
          const v = d[b], w = new Uint8Array(new Uint32Array([v.length]).buffer);
          g.set(w, y), y += NUM_BYTES_STRING_LENGTH, g.set(v, y), y += v.length;
        }
        h(g);
      });
      n.push(c);
    } else
      n.push(l.data());
    e != null && (f.group = e), t.push(f);
  }
  const a = await Promise.all(n);
  return { data: concatenateTypedArrays(a), specs: t };
}
function decodeWeights(r, e) {
  const t = new CompositeArrayBuffer(r), n = {};
  let s = 0;
  for (const a of e) {
    const o = getWeightBytelength(a, (u, l) => t.slice(s + u, s + l));
    n[a.name] = decodeWeight(a, t.slice(s, s + o)), s += o;
  }
  return n;
}
function getWeightBytelength(r, e) {
  const t = sizeFromShape(r.shape);
  let n;
  if ("quantization" in r) {
    const s = r.quantization;
    n = DTYPE_VALUE_SIZE_MAP[s.dtype];
  } else if (r.dtype === "string") {
    let s = 0;
    for (let a = 0; a < t; a++)
      s += NUM_BYTES_STRING_LENGTH + new Uint32Array(e(s, s + NUM_BYTES_STRING_LENGTH))[0];
    return s;
  } else
    n = DTYPE_VALUE_SIZE_MAP[r.dtype];
  return t * n;
}
async function getWeightBytelengthAsync(r, e) {
  const t = sizeFromShape(r.shape);
  let n;
  if ("quantization" in r) {
    const s = r.quantization;
    n = DTYPE_VALUE_SIZE_MAP[s.dtype];
  } else if (r.dtype === "string") {
    let s = 0;
    for (let a = 0; a < t; a++)
      s += NUM_BYTES_STRING_LENGTH + new Uint32Array(await e(s, s + NUM_BYTES_STRING_LENGTH))[0];
    return s;
  } else
    n = DTYPE_VALUE_SIZE_MAP[r.dtype];
  return t * n;
}
function decodeWeight(r, e) {
  const t = r.name, n = r.dtype, s = r.shape, a = sizeFromShape(s);
  let o, u = 0;
  if ("quantization" in r) {
    const l = r.quantization;
    if (l.dtype === "uint8" || l.dtype === "uint16") {
      if (!("min" in l && "scale" in l))
        throw new Error(`Weight ${r.name} with quantization ${l.dtype} doesn't have corresponding metadata min and scale.`);
    } else if (l.dtype === "float16") {
      if (n !== "float32")
        throw new Error(`Weight ${r.name} is quantized with ${l.dtype} which only supports weights of type float32 not ${n}.`);
    } else
      throw new Error(`Weight ${r.name} has unknown quantization dtype ${l.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
    const f = DTYPE_VALUE_SIZE_MAP[l.dtype], c = l.dtype === "uint8" ? new Uint8Array(e) : new Uint16Array(e);
    if (n === "float32")
      if (l.dtype === "uint8" || l.dtype === "uint16") {
        o = new Float32Array(c.length);
        for (let h = 0; h < c.length; h++) {
          const d = c[h];
          o[h] = d * l.scale + l.min;
        }
      } else if (l.dtype === "float16")
        o = getFloat16Decoder()(c);
      else
        throw new Error(`Unsupported quantization type ${l.dtype} for weight type float32.`);
    else if (n === "int32") {
      if (l.dtype !== "uint8" && l.dtype !== "uint16")
        throw new Error(`Unsupported quantization type ${l.dtype} for weight type int32.`);
      o = new Int32Array(c.length);
      for (let h = 0; h < c.length; h++) {
        const d = c[h];
        o[h] = Math.round(d * l.scale + l.min);
      }
    } else
      throw new Error(`Unsupported dtype in weight '${t}': ${n}`);
    u += a * f;
  } else if (n === "string") {
    const l = sizeFromShape(r.shape);
    o = [];
    for (let f = 0; f < l; f++) {
      const c = new Uint32Array(e.slice(u, u + NUM_BYTES_STRING_LENGTH))[0];
      u += NUM_BYTES_STRING_LENGTH;
      const h = new Uint8Array(e.slice(u, u + c));
      o.push(h), u += c;
    }
  } else {
    const l = DTYPE_VALUE_SIZE_MAP[n];
    if (n === "float32")
      o = new Float32Array(e);
    else if (n === "int32")
      o = new Int32Array(e);
    else if (n === "bool")
      o = new Uint8Array(e);
    else if (n === "complex64") {
      o = new Float32Array(e);
      const f = new Float32Array(o.length / 2), c = new Float32Array(o.length / 2);
      for (let g = 0; g < f.length; g++)
        f[g] = o[g * 2], c[g] = o[g * 2 + 1];
      const h = tensor(f, s, "float32"), d = tensor(c, s, "float32"), m = complex$2(h, d);
      return h.dispose(), d.dispose(), m;
    } else
      throw new Error(`Unsupported dtype in weight '${t}': ${n}`);
    u += a * l;
  }
  return tensor(o, s, n);
}
async function readToLength(r, e, t) {
  let n = new Uint8Array(e);
  for (; n.byteLength < t; ) {
    const { done: s, value: a } = await r.read();
    if (s && a == null) {
      const u = t - n.byteLength;
      throw new Error(`Reader is done but ${u} bytes are still expected`);
    }
    const o = new Uint8Array(n.length + a.byteLength);
    o.set(n, 0), o.set(new Uint8Array(a), n.length), n = o;
  }
  return n.buffer;
}
async function decodeWeightsStream(r, e) {
  const t = {}, n = r.getReader();
  let s = new ArrayBuffer(0);
  for (const a of e) {
    const o = await getWeightBytelengthAsync(a, async (f, c) => (s = await readToLength(n, s, c), s.slice(f, c)));
    s = await readToLength(n, s, o);
    const u = s.slice(0, o);
    s = s.slice(o);
    const l = decodeWeight(a, u);
    if (t[a.name] = l, getBackend() === "webgpu") {
      const f = backend();
      "uploadToGPU" in f && sizeFromShape(l.shape) >= env().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD") && f.uploadToGPU(l.dataId);
    }
  }
  return t;
}
function concatenateTypedArrays(r) {
  if (r === null)
    throw new Error(`Invalid input value: ${JSON.stringify(r)}`);
  let e = 0;
  const t = [];
  r.forEach((a) => {
    if (e += a.byteLength, t.push(a.byteLength === a.buffer.byteLength ? a : new a.constructor(a)), !(a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${a.constructor.name}`);
  });
  const n = new Uint8Array(e);
  let s = 0;
  return t.forEach((a) => {
    n.set(new Uint8Array(a.buffer), s), s += a.byteLength;
  }), n.buffer;
}
const useNodeBuffer = typeof Buffer < "u" && (typeof Blob > "u" || typeof atob > "u" || typeof btoa > "u");
function stringByteLength(r) {
  return useNodeBuffer ? Buffer.byteLength(r, "utf8") : new Blob([r]).size;
}
function arrayBufferToBase64String(r) {
  if (useNodeBuffer)
    return Buffer.from(r).toString("base64");
  const e = new Uint8Array(r);
  let t = "";
  for (let n = 0, s = e.length; n < s; n++)
    t += String.fromCharCode(e[n]);
  return btoa(t);
}
function base64StringToArrayBuffer(r) {
  if (useNodeBuffer) {
    const n = Buffer.from(r, "base64");
    return n.buffer.slice(n.byteOffset, n.byteOffset + n.byteLength);
  }
  const e = atob(r), t = new Uint8Array(e.length);
  for (let n = 0; n < e.length; ++n)
    t.set([e.charCodeAt(n)], n);
  return t.buffer;
}
function concatenateArrayBuffers(r) {
  return CompositeArrayBuffer.join(r);
}
function basename(r) {
  const e = "/";
  for (r = r.trim(); r.endsWith(e); )
    r = r.slice(0, r.length - 1);
  const t = r.split(e);
  return t[t.length - 1];
}
function getModelJSONForModelArtifacts(r, e) {
  const t = {
    modelTopology: r.modelTopology,
    format: r.format,
    generatedBy: r.generatedBy,
    convertedBy: r.convertedBy,
    weightsManifest: e
  };
  return r.signature != null && (t.signature = r.signature), r.userDefinedMetadata != null && (t.userDefinedMetadata = r.userDefinedMetadata), r.modelInitializer != null && (t.modelInitializer = r.modelInitializer), r.initializerSignature != null && (t.initializerSignature = r.initializerSignature), r.trainingConfig != null && (t.trainingConfig = r.trainingConfig), t;
}
function getModelArtifactsForJSONSync(r, e, t) {
  const n = {
    modelTopology: r.modelTopology,
    format: r.format,
    generatedBy: r.generatedBy,
    convertedBy: r.convertedBy
  };
  if (r.trainingConfig != null && (n.trainingConfig = r.trainingConfig), r.weightsManifest != null) {
    if (!e)
      throw new Error("modelJSON has weightsManifest but weightSpecs is null");
    if (!t)
      throw new Error("modelJSON has weightsManifest but weightData is null");
    n.weightSpecs = e, n.weightData = t;
  }
  return r.signature != null && (n.signature = r.signature), r.userDefinedMetadata != null && (n.userDefinedMetadata = r.userDefinedMetadata), r.modelInitializer != null && (n.modelInitializer = r.modelInitializer), r.initializerSignature != null && (n.initializerSignature = r.initializerSignature), n;
}
async function getModelArtifactsForJSON(r, e) {
  let t, n;
  return r.weightsManifest != null && ([t, n] = await e(r.weightsManifest)), getModelArtifactsForJSONSync(r, t, n);
}
function getModelArtifactsInfoForJSON(r) {
  if (r.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return {
    dateSaved: /* @__PURE__ */ new Date(),
    modelTopologyType: "JSON",
    modelTopologyBytes: r.modelTopology == null ? 0 : stringByteLength(JSON.stringify(r.modelTopology)),
    weightSpecsBytes: r.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(r.weightSpecs)),
    weightDataBytes: r.weightData == null ? 0 : new CompositeArrayBuffer(r.weightData).byteLength
  };
}
function getWeightSpecs(r) {
  const e = [];
  for (const t of r)
    e.push(...t.weights);
  return e;
}
function computeFloat16MantisaTable() {
  const r = (t) => {
    let n = t << 13, s = 0;
    for (; !(n & 8388608); )
      s -= 8388608, n <<= 1;
    return n &= -8388609, s += 947912704, n | s;
  }, e = new Uint32Array(2048);
  e[0] = 0;
  for (let t = 1; t < 1024; t++)
    e[t] = r(t);
  for (let t = 1024; t < 2048; t++)
    e[t] = 939524096 + (t - 1024 << 13);
  return e;
}
function computeFloat16ExponentTable() {
  const r = new Uint32Array(64);
  r[0] = 0, r[31] = 1199570944, r[32] = 2147483648, r[63] = 3347054592;
  for (let e = 1; e < 31; e++)
    r[e] = e << 23;
  for (let e = 33; e < 63; e++)
    r[e] = 2147483648 + (e - 32 << 23);
  return r;
}
function computeFloat16OffsetTable() {
  const r = new Uint32Array(64);
  for (let e = 0; e < 64; e++)
    r[e] = 1024;
  return r[0] = r[32] = 0, r;
}
function getFloat16Decoder() {
  const r = computeFloat16MantisaTable(), e = computeFloat16ExponentTable(), t = computeFloat16OffsetTable();
  return (n) => {
    const s = new ArrayBuffer(4 * n.length), a = new Uint32Array(s);
    for (let o = 0; o < n.length; o++) {
      const u = n[o], l = r[t[u >> 10] + (u & 1023)] + e[u >> 10];
      a[o] = l;
    }
    return new Float32Array(s);
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class IORouterRegistry {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return IORouterRegistry.instance == null && (IORouterRegistry.instance = new IORouterRegistry()), IORouterRegistry.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */
  static registerSaveRouter(e) {
    IORouterRegistry.getInstance().saveRouters.push(e);
  }
  /**
   * Register a load-handler router.
   *
   * @param loadRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `load` method defined or `null`.
   */
  static registerLoadRouter(e) {
    IORouterRegistry.getInstance().loadRouters.push(e);
  }
  /**
   * Look up IOHandler for saving, given a URL-like string.
   *
   * @param url
   * @returns If only one match is found, an instance of IOHandler with the
   * `save` method defined. If no match is found, `null`.
   * @throws Error, if more than one match is found.
   */
  static getSaveHandlers(e) {
    return IORouterRegistry.getHandlers(e, "save");
  }
  /**
   * Look up IOHandler for loading, given a URL-like string.
   *
   * @param url
   * @param loadOptions Optional, custom load options.
   * @returns All valid handlers for `url`, given the currently registered
   *   handler routers.
   */
  static getLoadHandlers(e, t) {
    return IORouterRegistry.getHandlers(e, "load", t);
  }
  static getHandlers(e, t, n) {
    const s = [];
    return (t === "load" ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters).forEach((o) => {
      const u = o(e, n);
      u !== null && s.push(u);
    }), s;
  }
}
const registerSaveRouter = (r) => IORouterRegistry.registerSaveRouter(r), registerLoadRouter = (r) => IORouterRegistry.registerLoadRouter(r), getSaveHandlers = (r) => IORouterRegistry.getSaveHandlers(r), getLoadHandlers = (r, e) => IORouterRegistry.getLoadHandlers(r, e);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DATABASE_NAME = "tensorflowjs", DATABASE_VERSION = 1, MODEL_STORE_NAME = "models_store", INFO_STORE_NAME = "model_info_store";
function getIndexedDBFactory() {
  if (!env().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  const r = typeof window > "u" ? self : window, e = r.indexedDB || r.mozIndexedDB || r.webkitIndexedDB || r.msIndexedDB || r.shimIndexedDB;
  if (e == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return e;
}
function setUpDatabase(r) {
  const e = r.result;
  e.createObjectStore(MODEL_STORE_NAME, { keyPath: "modelPath" }), e.createObjectStore(INFO_STORE_NAME, { keyPath: "modelPath" });
}
class BrowserIndexedDB {
  constructor(e) {
    if (this.indexedDB = getIndexedDBFactory(), e == null || !e)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = e;
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, e);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  /**
   * Perform database action to put model artifacts into or read model artifacts
   * from IndexedDB object store.
   *
   * Whether the action is put or get depends on whether `modelArtifacts` is
   * specified. If it is specified, the action will be put; otherwise the action
   * will be get.
   *
   * @param modelPath A unique string path for the model.
   * @param modelArtifacts If specified, it will be the model artifacts to be
   *   stored in IndexedDB.
   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
   *   of `ModelArtifacts`, if the action is get.
   */
  databaseAction(e, t) {
    return new Promise((n, s) => {
      const a = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
      a.onupgradeneeded = () => setUpDatabase(a), a.onsuccess = () => {
        const o = a.result;
        if (t == null) {
          const u = o.transaction(MODEL_STORE_NAME, "readonly"), f = u.objectStore(MODEL_STORE_NAME).get(this.modelPath);
          f.onsuccess = () => {
            if (f.result == null)
              return o.close(), s(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            n(f.result.modelArtifacts);
          }, f.onerror = (c) => (o.close(), s(f.error)), u.oncomplete = () => o.close();
        } else {
          t.weightData = CompositeArrayBuffer.join(t.weightData);
          const u = getModelArtifactsInfoForJSON(t), l = o.transaction(INFO_STORE_NAME, "readwrite");
          let f = l.objectStore(INFO_STORE_NAME), c;
          try {
            c = f.put({ modelPath: this.modelPath, modelArtifactsInfo: u });
          } catch (d) {
            return s(d);
          }
          let h;
          c.onsuccess = () => {
            h = o.transaction(MODEL_STORE_NAME, "readwrite");
            const d = h.objectStore(MODEL_STORE_NAME);
            let m;
            try {
              m = d.put({
                modelPath: this.modelPath,
                modelArtifacts: t,
                modelArtifactsInfo: u
              });
            } catch (g) {
              return s(g);
            }
            m.onsuccess = () => n({ modelArtifactsInfo: u }), m.onerror = (g) => {
              f = l.objectStore(INFO_STORE_NAME);
              const y = f.delete(this.modelPath);
              y.onsuccess = () => (o.close(), s(m.error)), y.onerror = (b) => (o.close(), s(m.error));
            };
          }, c.onerror = (d) => (o.close(), s(c.error)), l.oncomplete = () => {
            h == null ? o.close() : h.oncomplete = () => o.close();
          };
        }
      }, a.onerror = (o) => s(a.error);
    });
  }
}
BrowserIndexedDB.URL_SCHEME = "indexeddb://";
const indexedDBRouter = (r) => env().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(BrowserIndexedDB.URL_SCHEME) ? browserIndexedDB(r.slice(BrowserIndexedDB.URL_SCHEME.length)) : null;
IORouterRegistry.registerSaveRouter(indexedDBRouter);
IORouterRegistry.registerLoadRouter(indexedDBRouter);
function browserIndexedDB(r) {
  return new BrowserIndexedDB(r);
}
function maybeStripScheme$1(r) {
  return r.startsWith(BrowserIndexedDB.URL_SCHEME) ? r.slice(BrowserIndexedDB.URL_SCHEME.length) : r;
}
class BrowserIndexedDBManager {
  constructor() {
    this.indexedDB = getIndexedDBFactory();
  }
  async listModels() {
    return new Promise((e, t) => {
      const n = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
      n.onupgradeneeded = () => setUpDatabase(n), n.onsuccess = () => {
        const s = n.result, a = s.transaction(INFO_STORE_NAME, "readonly"), u = a.objectStore(INFO_STORE_NAME).getAll();
        u.onsuccess = () => {
          const l = {};
          for (const f of u.result)
            l[f.modelPath] = f.modelArtifactsInfo;
          e(l);
        }, u.onerror = (l) => (s.close(), t(u.error)), a.oncomplete = () => s.close();
      }, n.onerror = (s) => t(n.error);
    });
  }
  async removeModel(e) {
    return e = maybeStripScheme$1(e), new Promise((t, n) => {
      const s = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
      s.onupgradeneeded = () => setUpDatabase(s), s.onsuccess = () => {
        const a = s.result, o = a.transaction(INFO_STORE_NAME, "readwrite"), u = o.objectStore(INFO_STORE_NAME), l = u.get(e);
        let f;
        l.onsuccess = () => {
          if (l.result == null)
            return a.close(), n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));
          {
            const c = u.delete(e), h = () => {
              f = a.transaction(MODEL_STORE_NAME, "readwrite");
              const m = f.objectStore(MODEL_STORE_NAME).delete(e);
              m.onsuccess = () => t(l.result.modelArtifactsInfo), m.onerror = (g) => n(l.error);
            };
            c.onsuccess = h, c.onerror = (d) => (h(), a.close(), n(l.error));
          }
        }, l.onerror = (c) => (a.close(), n(l.error)), o.oncomplete = () => {
          f == null ? a.close() : f.oncomplete = () => a.close();
        };
      }, s.onerror = (a) => n(s.error);
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PATH_SEPARATOR = "/", PATH_PREFIX = "tensorflowjs_models", INFO_SUFFIX = "info", MODEL_TOPOLOGY_SUFFIX = "model_topology", WEIGHT_SPECS_SUFFIX = "weight_specs", WEIGHT_DATA_SUFFIX = "weight_data", MODEL_METADATA_SUFFIX = "model_metadata";
function getModelKeys(r) {
  return {
    info: [PATH_PREFIX, r, INFO_SUFFIX].join(PATH_SEPARATOR),
    topology: [PATH_PREFIX, r, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),
    weightSpecs: [PATH_PREFIX, r, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),
    weightData: [PATH_PREFIX, r, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),
    modelMetadata: [PATH_PREFIX, r, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)
  };
}
function removeItems(r) {
  for (const e of Object.values(r))
    window.localStorage.removeItem(e);
}
function getModelPathFromKey(r) {
  const e = r.split(PATH_SEPARATOR);
  if (e.length < 3)
    throw new Error(`Invalid key format: ${r}`);
  return e.slice(1, e.length - 1).join(PATH_SEPARATOR);
}
function maybeStripScheme(r) {
  return r.startsWith(BrowserLocalStorage.URL_SCHEME) ? r.slice(BrowserLocalStorage.URL_SCHEME.length) : r;
}
class BrowserLocalStorage {
  constructor(e) {
    if (!env().getBool("IS_BROWSER") || typeof window > "u" || typeof window.localStorage > "u")
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, e == null || !e)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = e, this.keys = getModelKeys(this.modelPath);
  }
  /**
   * Save model artifacts to browser local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @param modelArtifacts The model artifacts to be stored.
   * @returns An instance of SaveResult.
   */
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      const t = JSON.stringify(e.modelTopology), n = JSON.stringify(e.weightSpecs), s = getModelArtifactsInfoForJSON(e), a = CompositeArrayBuffer.join(e.weightData);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(s)), this.LS.setItem(this.keys.topology, t), this.LS.setItem(this.keys.weightSpecs, n), this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(a));
        const o = {
          format: e.format,
          generatedBy: e.generatedBy,
          convertedBy: e.convertedBy,
          signature: e.signature != null ? e.signature : void 0,
          userDefinedMetadata: e.userDefinedMetadata != null ? e.userDefinedMetadata : void 0,
          modelInitializer: e.modelInitializer != null ? e.modelInitializer : void 0,
          initializerSignature: e.initializerSignature != null ? e.initializerSignature : void 0,
          trainingConfig: e.trainingConfig != null ? e.trainingConfig : void 0
        };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(o)), { modelArtifactsInfo: s };
      } catch {
        throw removeItems(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`);
      }
    }
  }
  /**
   * Load a model from local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @returns The loaded model (if loading succeeds).
   */
  async load() {
    const e = JSON.parse(this.LS.getItem(this.keys.info));
    if (e == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (e.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    const t = {}, n = JSON.parse(this.LS.getItem(this.keys.topology));
    if (n == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    t.modelTopology = n;
    const s = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (s == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    t.weightSpecs = s;
    const a = this.LS.getItem(this.keys.modelMetadata);
    if (a != null) {
      const u = JSON.parse(a);
      t.format = u.format, t.generatedBy = u.generatedBy, t.convertedBy = u.convertedBy, u.signature != null && (t.signature = u.signature), u.userDefinedMetadata != null && (t.userDefinedMetadata = u.userDefinedMetadata), u.modelInitializer != null && (t.modelInitializer = u.modelInitializer), u.initializerSignature != null && (t.initializerSignature = u.initializerSignature), u.trainingConfig != null && (t.trainingConfig = u.trainingConfig);
    }
    const o = this.LS.getItem(this.keys.weightData);
    if (o == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return t.weightData = base64StringToArrayBuffer(o), t;
  }
}
BrowserLocalStorage.URL_SCHEME = "localstorage://";
const localStorageRouter = (r) => env().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(BrowserLocalStorage.URL_SCHEME) ? browserLocalStorage(r.slice(BrowserLocalStorage.URL_SCHEME.length)) : null;
IORouterRegistry.registerSaveRouter(localStorageRouter);
IORouterRegistry.registerLoadRouter(localStorageRouter);
function browserLocalStorage(r) {
  return new BrowserLocalStorage(r);
}
class BrowserLocalStorageManager {
  constructor() {
    assert$1(env().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), assert$1(typeof window > "u" || typeof window.localStorage < "u", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    const e = {}, t = PATH_PREFIX + PATH_SEPARATOR, n = PATH_SEPARATOR + INFO_SUFFIX;
    for (let s = 0; s < this.LS.length; ++s) {
      const a = this.LS.key(s);
      if (a.startsWith(t) && a.endsWith(n)) {
        const o = getModelPathFromKey(a);
        e[o] = JSON.parse(this.LS.getItem(a));
      }
    }
    return e;
  }
  async removeModel(e) {
    e = maybeStripScheme(e);
    const t = getModelKeys(e);
    if (this.LS.getItem(t.info) == null)
      throw new Error(`Cannot find model at path '${e}'`);
    const n = JSON.parse(this.LS.getItem(t.info));
    return removeItems(t), n;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const URL_SCHEME_SUFFIX = "://";
class ModelStoreManagerRegistry {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return ModelStoreManagerRegistry.instance == null && (ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry()), ModelStoreManagerRegistry.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */
  static registerManager(e, t) {
    assert$1(e != null, () => "scheme must not be undefined or null."), e.endsWith(URL_SCHEME_SUFFIX) && (e = e.slice(0, e.indexOf(URL_SCHEME_SUFFIX))), assert$1(e.length > 0, () => "scheme must not be an empty string.");
    const n = ModelStoreManagerRegistry.getInstance();
    assert$1(n.managers[e] == null, () => `A model store manager is already registered for scheme '${e}'.`), n.managers[e] = t;
  }
  static getManager(e) {
    const t = ModelStoreManagerRegistry.getInstance().managers[e];
    if (t == null)
      throw new Error(`Cannot find model manager for scheme '${e}'`);
    return t;
  }
  static getSchemes() {
    return Object.keys(ModelStoreManagerRegistry.getInstance().managers);
  }
}
function parseURL(r) {
  if (r.indexOf(URL_SCHEME_SUFFIX) === -1)
    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ModelStoreManagerRegistry.getSchemes().join(",")}`);
  return {
    scheme: r.split(URL_SCHEME_SUFFIX)[0],
    path: r.split(URL_SCHEME_SUFFIX)[1]
  };
}
async function cloneModelInternal(r, e, t = !1) {
  assert$1(r !== e, () => `Old path and new path are the same: '${r}'`);
  const n = IORouterRegistry.getLoadHandlers(r);
  assert$1(n.length > 0, () => `Copying failed because no load handler is found for source URL ${r}.`), assert$1(n.length < 2, () => `Copying failed because more than one (${n.length}) load handlers for source URL ${r}.`);
  const s = n[0], a = IORouterRegistry.getSaveHandlers(e);
  assert$1(a.length > 0, () => `Copying failed because no save handler is found for destination URL ${e}.`), assert$1(a.length < 2, () => `Copying failed because more than one (${n.length}) save handlers for destination URL ${e}.`);
  const o = a[0], u = parseURL(r).scheme, l = parseURL(r).path, f = u === parseURL(r).scheme, c = await s.load();
  t && f && await ModelStoreManagerRegistry.getManager(u).removeModel(l);
  const h = await o.save(c);
  return t && !f && await ModelStoreManagerRegistry.getManager(u).removeModel(l), h.modelArtifactsInfo;
}
async function listModels() {
  const r = ModelStoreManagerRegistry.getSchemes(), e = {};
  for (const t of r) {
    const n = await ModelStoreManagerRegistry.getManager(t).listModels();
    for (const s in n) {
      const a = t + URL_SCHEME_SUFFIX + s;
      e[a] = n[s];
    }
  }
  return e;
}
async function removeModel(r) {
  const e = parseURL(r);
  return ModelStoreManagerRegistry.getManager(e.scheme).removeModel(e.path);
}
async function copyModel(r, e) {
  return cloneModelInternal(r, e, !1);
}
async function moveModel(r, e) {
  return cloneModelInternal(r, e, !0);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PlatformBrowser {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = !1;
  }
  fetch(e, t) {
    return fetch(e, t);
  }
  now() {
    return performance.now();
  }
  encode(e, t) {
    if (t !== "utf-8" && t !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(e);
  }
  decode(e, t) {
    return new TextDecoder(t).decode(e);
  }
  // If the setTimeout nesting level is greater than 5 and timeout is less
  // than 4ms, timeout will be clamped to 4ms, which hurts the perf.
  // Interleaving window.postMessage and setTimeout will trick the browser and
  // avoid the clamp.
  setTimeoutCustom(e, t) {
    if (typeof window > "u" || !env().getBool("USE_SETTIMEOUTCUSTOM")) {
      setTimeout(e, t);
      return;
    }
    this.functionRefs.push(e), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, t), this.hasEventListener || (this.hasEventListener = !0, window.addEventListener("message", (n) => {
      if (n.source === window && n.data.name === this.messageName) {
        n.stopPropagation();
        const s = this.functionRefs[n.data.index];
        s(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
      }
    }, !0));
  }
  isTypedArray(e) {
    return isTypedArrayBrowser(e);
  }
}
if (env().get("IS_BROWSER")) {
  env().setPlatform("browser", new PlatformBrowser());
  try {
    ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());
  } catch {
  }
  try {
    ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());
  } catch {
  }
}
const getNodeFetch = {
  // tslint:disable-next-line:no-require-imports
  importFetch: () => require("node-fetch")
};
let systemFetch;
class PlatformNode {
  constructor() {
    this.util = require("util"), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(e, t) {
    return env().global.fetch != null ? env().global.fetch(e, t) : (systemFetch == null && (systemFetch = getNodeFetch.importFetch()), systemFetch(e, t));
  }
  now() {
    const e = process$1.hrtime();
    return e[0] * 1e3 + e[1] / 1e6;
  }
  encode(e, t) {
    if (t !== "utf-8" && t !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);
    return this.textEncoder.encode(e);
  }
  decode(e, t) {
    return e.length === 0 ? "" : new this.util.TextDecoder(t).decode(e);
  }
  isTypedArray(e) {
    return this.util.types.isFloat32Array(e) || this.util.types.isInt32Array(e) || this.util.types.isUint8Array(e) || this.util.types.isUint8ClampedArray(e);
  }
}
env().get("IS_NODE") && !env().get("IS_BROWSER") && env().setPlatform("node", new PlatformNode());
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function buffer$1(r, e = "float32", t) {
  return e = e || "float32", assertNonNegativeIntegerDimensions(r), new TensorBuffer(r, e, t);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cast_(r, e) {
  const t = convertToTensor(r, "x", "cast");
  if (!isValidDtype(e))
    throw new Error(`Failed to cast to unknown dtype ${e}`);
  if (e === "string" && t.dtype !== "string" || e !== "string" && t.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  const n = { x: t }, s = { dtype: e };
  return ENGINE.runKernel(Cast, n, s);
}
const cast$3 = /* @__PURE__ */ op({ cast_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function clone_(r) {
  const t = { x: convertToTensor(r, "x", "clone", "string_or_numeric") };
  return ENGINE.runKernel(Identity$1, t);
}
const clone = /* @__PURE__ */ op({ clone_ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function print(r, e = !1) {
  console.log(r.toString(e));
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getOrMakeEngine();
const opHandler = {
  buffer: buffer$1,
  cast: cast$3,
  clone,
  print
};
setOpHandler(opHandler);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function add_(r, e) {
  let t = convertToTensor(r, "a", "add"), n = convertToTensor(e, "b", "add");
  [t, n] = makeTypesMatch(t, n);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Add$1, s);
}
const add$2 = /* @__PURE__ */ op({ add_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function floorDiv_(r, e) {
  let t = convertToTensor(r, "a", "floorDiv"), n = convertToTensor(e, "b", "floorDiv");
  [t, n] = makeTypesMatch(t, n);
  const s = { a: t, b: n };
  return ENGINE.runKernel(FloorDiv, s);
}
const floorDiv$2 = /* @__PURE__ */ op({ floorDiv_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function div_(r, e) {
  let t = convertToTensor(r, "a", "div"), n = convertToTensor(e, "b", "div");
  if ([t, n] = makeTypesMatch(t, n), t.dtype === "int32" && n.dtype === "int32")
    return floorDiv$2(t, n);
  const s = { a: t, b: n }, a = {};
  return ENGINE.runKernel(RealDiv, s, a);
}
const div$1 = /* @__PURE__ */ op({ div_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mul_(r, e) {
  let t = convertToTensor(r, "a", "mul"), n = convertToTensor(e, "b", "mul");
  [t, n] = makeTypesMatch(t, n);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Multiply$1, s);
}
const mul = /* @__PURE__ */ op({ mul_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function abs_(r) {
  const e = convertToTensor(r, "x", "abs");
  if (e.dtype === "complex64") {
    const t = { x: e };
    return ENGINE.runKernel(ComplexAbs, t);
  } else {
    const t = { x: e };
    return ENGINE.runKernel(Abs, t);
  }
}
const abs$3 = /* @__PURE__ */ op({ abs_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function acos_(r) {
  const t = { x: convertToTensor(r, "x", "acos") };
  return ENGINE.runKernel(Acos, t);
}
const acos$2 = /* @__PURE__ */ op({ acos_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function acosh_(r) {
  const t = { x: convertToTensor(r, "x", "acosh") };
  return ENGINE.runKernel(Acosh, t);
}
const acosh$2 = /* @__PURE__ */ op({ acosh_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function addN_(r) {
  assert$1(Array.isArray(r), () => "The argument passed to tf.addN() must be a list of tensors"), assert$1(r.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${r.length}`);
  const e = r.map((s, a) => convertToTensor(s, `tensors${a}`, "addN")), t = e[0];
  e.forEach((s) => {
    if (s.dtype !== t.dtype)
      throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), e.forEach((s) => {
    if (!arraysEqual(s.shape, t.shape))
      throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  const n = e;
  return ENGINE.runKernel(AddN, n);
}
const addN$2 = /* @__PURE__ */ op({ addN_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function all_(r, e = null, t = !1) {
  const s = { x: convertToTensor(r, "x", "all", "bool") }, a = { axis: e, keepDims: t };
  return ENGINE.runKernel(All, s, a);
}
const all$2 = /* @__PURE__ */ op({ all_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function any_(r, e = null, t = !1) {
  const s = { x: convertToTensor(r, "x", "any", "bool") }, a = { axis: e, keepDims: t };
  return ENGINE.runKernel(Any, s, a);
}
const any$2 = /* @__PURE__ */ op({ any_ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function argMax_(r, e = 0) {
  const n = { x: convertToTensor(r, "x", "argMax") }, s = { axis: e };
  return ENGINE.runKernel(ArgMax, n, s);
}
const argMax$2 = /* @__PURE__ */ op({ argMax_ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function argMin_(r, e = 0) {
  const n = { x: convertToTensor(r, "x", "argMin") }, s = { axis: e };
  return ENGINE.runKernel(ArgMin, n, s);
}
const argMin$2 = /* @__PURE__ */ op({ argMin_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function asin_(r) {
  const t = { x: convertToTensor(r, "x", "asin") };
  return ENGINE.runKernel(Asin, t);
}
const asin$2 = /* @__PURE__ */ op({ asin_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function asinh_(r) {
  const t = { x: convertToTensor(r, "x", "asinh") };
  return ENGINE.runKernel(Asinh, t);
}
const asinh$2 = /* @__PURE__ */ op({ asinh_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function atan_(r) {
  const t = { x: convertToTensor(r, "x", "atan") };
  return ENGINE.runKernel(Atan, t);
}
const atan$2 = /* @__PURE__ */ op({ atan_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function atan2_(r, e) {
  let t = convertToTensor(r, "a", "atan2"), n = convertToTensor(e, "b", "atan2");
  [t, n] = makeTypesMatch(t, n);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Atan2, s);
}
const atan2$2 = /* @__PURE__ */ op({ atan2_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function atanh_(r) {
  const t = { x: convertToTensor(r, "x", "atanh") };
  return ENGINE.runKernel(Atanh, t);
}
const atanh$2 = /* @__PURE__ */ op({ atanh_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function computeDilation2DInfo(r, e, t, n, s = "NHWC", a) {
  const o = r[3], u = [...e, o], l = convertConv2DDataFormat(s);
  return computeConv2DInfo(r, u, t, a, n, null, null, l);
}
function computePool2DInfo(r, e, t, n, s, a, o = "channelsLast") {
  const [u, l] = parseTupleParam(e);
  let f;
  if (o === "channelsLast")
    f = [u, l, r[3], r[3]];
  else if (o === "channelsFirst")
    f = [u, l, r[1], r[1]];
  else
    throw new Error(`Unknown dataFormat ${o}`);
  return computeConv2DInfo(r, f, t, n, s, a, !1, o);
}
function computePool3DInfo(r, e, t, n, s, a, o = "NDHWC") {
  const [u, l, f] = parse3TupleParam(e);
  let c, h;
  if (o === "NDHWC")
    h = "channelsLast", c = [u, l, f, r[4], r[4]];
  else if (o === "NCDHW")
    h = "channelsFirst", c = [u, l, f, r[1], r[1]];
  else
    throw new Error(`Unknown dataFormat ${o}`);
  return computeConv3DInfo(r, c, t, n, s, !1, h, a);
}
function computeConv2DInfo(r, e, t, n, s, a, o = !1, u = "channelsLast") {
  let [l, f, c, h] = [-1, -1, -1, -1];
  if (u === "channelsLast")
    [l, f, c, h] = r;
  else if (u === "channelsFirst")
    [l, h, f, c] = r;
  else
    throw new Error(`Unknown dataFormat ${u}`);
  const [d, m, , g] = e, [y, b] = parseTupleParam(t), [v, w] = parseTupleParam(n), I = getEffectiveFilterSize(d, v), T = getEffectiveFilterSize(m, w), { padInfo: _, outHeight: F, outWidth: O } = getPadAndOutInfo(s, f, c, y, b, I, T, a, u), q = o ? g * h : g;
  let V;
  return u === "channelsFirst" ? V = [l, q, F, O] : u === "channelsLast" && (V = [l, F, O, q]), {
    batchSize: l,
    dataFormat: u,
    inHeight: f,
    inWidth: c,
    inChannels: h,
    outHeight: F,
    outWidth: O,
    outChannels: q,
    padInfo: _,
    strideHeight: y,
    strideWidth: b,
    filterHeight: d,
    filterWidth: m,
    effectiveFilterHeight: I,
    effectiveFilterWidth: T,
    dilationHeight: v,
    dilationWidth: w,
    inShape: r,
    outShape: V,
    filterShape: e
  };
}
function computeConv3DInfo(r, e, t, n, s, a = !1, o = "channelsLast", u) {
  let [l, f, c, h, d] = [-1, -1, -1, -1, -1];
  if (o === "channelsLast")
    [l, f, c, h, d] = r;
  else if (o === "channelsFirst")
    [l, d, f, c, h] = r;
  else
    throw new Error(`Unknown dataFormat ${o}`);
  const [m, g, y, , b] = e, [v, w, I] = parse3TupleParam(t), [T, _, F] = parse3TupleParam(n), O = getEffectiveFilterSize(m, T), q = getEffectiveFilterSize(g, _), V = getEffectiveFilterSize(y, F), { padInfo: H, outDepth: R, outHeight: $, outWidth: S } = get3DPadAndOutInfo(s, f, c, h, v, w, I, O, q, V, u), x = a ? b * d : b;
  let C;
  return o === "channelsFirst" ? C = [l, x, R, $, S] : o === "channelsLast" && (C = [l, R, $, S, x]), {
    batchSize: l,
    dataFormat: o,
    inDepth: f,
    inHeight: c,
    inWidth: h,
    inChannels: d,
    outDepth: R,
    outHeight: $,
    outWidth: S,
    outChannels: x,
    padInfo: H,
    strideDepth: v,
    strideHeight: w,
    strideWidth: I,
    filterDepth: m,
    filterHeight: g,
    filterWidth: y,
    effectiveFilterDepth: O,
    effectiveFilterHeight: q,
    effectiveFilterWidth: V,
    dilationDepth: T,
    dilationHeight: _,
    dilationWidth: F,
    inShape: r,
    outShape: C,
    filterShape: e
  };
}
function computeOutputShape2D(r, e, t, n, s) {
  n == null && (n = computeDefaultPad(r, e, t));
  const a = r[0], o = r[1], u = round$4((a - e + 2 * n) / t + 1, s), l = round$4((o - e + 2 * n) / t + 1, s);
  return [u, l];
}
function computeOutputShape4D(r, e, t, n, s, a) {
  s == null && (s = computeDefaultPad(r, e[0], n[0]));
  const o = [0, 0, 0, t];
  for (let u = 0; u < 3; u++)
    r[u] + 2 * s >= e[u] && (o[u] = round$4((r[u] - e[u] + 2 * s) / n[u] + 1, a));
  return o;
}
function computeDefaultPad(r, e, t, n = 1) {
  const s = getEffectiveFilterSize(e, n);
  return Math.floor((r[0] * (t - 1) - t + s) / 2);
}
function parseTupleParam(r) {
  return typeof r == "number" ? [r, r, r] : r.length === 2 ? [r[0], r[1], 1] : r;
}
function parse3TupleParam(r) {
  return typeof r == "number" ? [r, r, r] : r;
}
function getEffectiveFilterSize(r, e) {
  return e <= 1 ? r : r + (r - 1) * (e - 1);
}
function getPadAndOutInfo(r, e, t, n, s, a, o, u, l) {
  let f, c, h;
  if (typeof r == "number") {
    f = { top: r, bottom: r, left: r, right: r, type: r === 0 ? "VALID" : "NUMBER" };
    const m = computeOutputShape2D([e, t], a, n, r, u);
    c = m[0], h = m[1];
  } else if (r === "same") {
    c = Math.ceil(e / n), h = Math.ceil(t / s);
    const d = Math.max(0, (c - 1) * n + a - e), m = Math.max(0, (h - 1) * s + o - t), g = Math.floor(d / 2), y = d - g, b = Math.floor(m / 2), v = m - b;
    f = { top: g, bottom: y, left: b, right: v, type: "SAME" };
  } else if (r === "valid")
    f = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, c = Math.ceil((e - a + 1) / n), h = Math.ceil((t - o + 1) / s);
  else if (typeof r == "object") {
    const d = l === "channelsLast" ? r[1][0] : r[2][0], m = l === "channelsLast" ? r[1][1] : r[2][1], g = l === "channelsLast" ? r[2][0] : r[3][0], y = l === "channelsLast" ? r[2][1] : r[3][1];
    f = { top: d, bottom: m, left: g, right: y, type: d === 0 && m === 0 && g === 0 && y === 0 ? "VALID" : "EXPLICIT" }, c = round$4((e - a + d + m) / n + 1, u), h = round$4((t - o + g + y) / s + 1, u);
  } else
    throw Error(`Unknown padding parameter: ${r}`);
  return { padInfo: f, outHeight: c, outWidth: h };
}
function get3DPadAndOutInfo(r, e, t, n, s, a, o, u, l, f, c) {
  let h, d, m, g;
  if (r === "valid" && (r = 0), typeof r == "number") {
    h = {
      top: r,
      bottom: r,
      left: r,
      right: r,
      front: r,
      back: r,
      type: r === 0 ? "VALID" : "NUMBER"
    };
    const b = computeOutputShape4D([e, t, n, 1], [u, l, f], 1, [s, a, o], r, c);
    d = b[0], m = b[1], g = b[2];
  } else if (r === "same") {
    d = Math.ceil(e / s), m = Math.ceil(t / a), g = Math.ceil(n / o);
    const y = (d - 1) * s + u - e, b = (m - 1) * a + l - t, v = (g - 1) * o + f - n, w = Math.floor(y / 2), I = y - w, T = Math.floor(b / 2), _ = b - T, F = Math.floor(v / 2), O = v - F;
    h = { top: T, bottom: _, left: F, right: O, front: w, back: I, type: "SAME" };
  } else
    throw Error(`Unknown padding parameter: ${r}`);
  return { padInfo: h, outDepth: d, outHeight: m, outWidth: g };
}
function round$4(r, e) {
  if (!e)
    return Math.trunc(r);
  switch (e) {
    case "round":
      return Math.round(r);
    case "ceil":
      return Math.ceil(r);
    case "floor":
      return Math.floor(r);
    default:
      throw new Error(`Unknown roundingMode ${e}`);
  }
}
function tupleValuesAreOne(r) {
  const [e, t, n] = parseTupleParam(r);
  return e === 1 && t === 1 && n === 1;
}
function eitherStridesOrDilationsAreOne(r, e) {
  return tupleValuesAreOne(r) || tupleValuesAreOne(e);
}
function stridesOrDilationsArePositive(r) {
  return parseTupleParam(r).every((e) => e > 0);
}
function convertConv2DDataFormat(r) {
  if (r === "NHWC")
    return "channelsLast";
  if (r === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${r}`);
}
function checkPadOnDimRoundingMode(r, e, t) {
  if (t != null) {
    if (typeof e == "string")
      throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);
    if (typeof e == "number")
      assert$1(isInt(e), () => `Error in ${r}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);
    else if (typeof e == "object")
      e.forEach((n) => {
        n.forEach((s) => {
          assert$1(isInt(s), () => `Error in ${r}: pad must be an integer when using dimRoundingMode ${t} but got pad ${s}.`);
        });
      });
    else
      throw Error(`Error in ${r}: Unknown padding parameter: ${e}`);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reshape_(r, e) {
  const n = { x: convertToTensor(r, "x", "reshape", "string_or_numeric") }, s = { shape: e };
  return ENGINE.runKernel(Reshape$1, n, s);
}
const reshape$3 = /* @__PURE__ */ op({ reshape_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool_(r, e, t, n, s) {
  const a = convertToTensor(r, "x", "avgPool", "float32"), o = 1;
  assert$1(eitherStridesOrDilationsAreOne(t, o), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`);
  let u = a, l = !1;
  a.rank === 3 && (l = !0, u = reshape$3(a, [1, a.shape[0], a.shape[1], a.shape[2]])), assert$1(u.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${u.rank}.`), checkPadOnDimRoundingMode("avgPool", n, s);
  const f = { x: u }, c = { filterSize: e, strides: t, pad: n, dimRoundingMode: s };
  let h = ENGINE.runKernel(AvgPool, f, c);
  return h = cast$3(h, a.dtype), l ? reshape$3(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const avgPool$2 = /* @__PURE__ */ op({ avgPool_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool3d_(r, e, t, n, s, a = "NDHWC") {
  const o = convertToTensor(r, "x", "avgPool3d", "float32");
  let u = o, l = !1;
  o.rank === 4 && (l = !0, u = reshape$3(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]])), assert$1(u.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`), assert$1(a === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`), assert$1(typeof t == "number" && t > 0 || Array.isArray(t) && t[0] > 0 && t[1] > 0 && t[2] > 0, () => `Error in avgPool3d: Stride must be > 0, but got '${t}'`), checkPadOnDimRoundingMode("avgPool3d", n, s);
  const f = { x: u }, c = { filterSize: e, strides: t, pad: n, dimRoundingMode: s, dataFormat: a };
  let h = ENGINE.runKernel(AvgPool3D, f, c);
  return h = cast$3(h, u.dtype), l ? reshape$3(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const avgPool3d$1 = /* @__PURE__ */ op({ avgPool3d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function concat_(r, e = 0) {
  assert$1(r.length >= 1, () => "Pass at least one tensor to concat");
  const t = convertToTensorArray(r, "tensors", "concat", "string_or_numeric");
  if (t[0].dtype === "complex64" && t.forEach((a) => {
    if (a.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${a.dtype}. `);
  }), t.length === 1)
    return clone(t[0]);
  const n = t, s = { axis: e };
  return ENGINE.runKernel(Concat, n, s);
}
const concat$2 = /* @__PURE__ */ op({ concat_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function matMul_(r, e, t = !1, n = !1) {
  let s = convertToTensor(r, "a", "matMul"), a = convertToTensor(e, "b", "matMul");
  [s, a] = makeTypesMatch(s, a);
  const o = { a: s, b: a }, u = { transposeA: t, transposeB: n };
  return ENGINE.runKernel(BatchMatMul, o, u);
}
const matMul$1 = /* @__PURE__ */ op({ matMul_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sigmoid_(r) {
  const t = { x: convertToTensor(r, "x", "sigmoid", "float32") };
  return ENGINE.runKernel(Sigmoid$1, t);
}
const sigmoid$2 = /* @__PURE__ */ op({ sigmoid_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function slice_(r, e, t) {
  const n = convertToTensor(r, "x", "slice", "string_or_numeric");
  if (n.rank === 0)
    throw new Error("Slicing scalar is not possible");
  const s = { x: n }, a = { begin: e, size: t };
  return ENGINE.runKernel(Slice, s, a);
}
const slice$2 = /* @__PURE__ */ op({ slice_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tanh_(r) {
  const t = { x: convertToTensor(r, "x", "tanh", "float32") };
  return ENGINE.runKernel(Tanh$1, t);
}
const tanh$2 = /* @__PURE__ */ op({ tanh_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function basicLSTMCell_(r, e, t, n, s, a) {
  const o = convertToTensor(r, "forgetBias", "basicLSTMCell"), u = convertToTensor(e, "lstmKernel", "basicLSTMCell"), l = convertToTensor(t, "lstmBias", "basicLSTMCell"), f = convertToTensor(n, "data", "basicLSTMCell"), c = convertToTensor(s, "c", "basicLSTMCell"), h = convertToTensor(a, "h", "basicLSTMCell"), d = concat$2([f, h], 1), m = matMul$1(d, u), g = add$2(m, l), y = g.shape[0], b = g.shape[1] / 4, v = [y, b], w = slice$2(g, [0, 0], v), I = slice$2(g, [0, b], v), T = slice$2(g, [0, b * 2], v), _ = slice$2(g, [0, b * 3], v), F = add$2(mul(sigmoid$2(w), tanh$2(I)), mul(c, sigmoid$2(add$2(o, T)))), O = mul(tanh$2(F), sigmoid$2(_));
  return [F, O];
}
const basicLSTMCell = /* @__PURE__ */ op({ basicLSTMCell_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function batchToSpaceND_(r, e, t) {
  const n = convertToTensor(r, "x", "batchToSpaceND"), s = e.reduce((u, l) => u * l);
  assert$1(n.rank >= 1 + e.length, () => `input rank is ${n.rank} but should be > than blockShape.length ${e.length}`), assert$1(t.length === e.length, () => `crops.length is ${t.length} but should be equal to blockShape.length  ${e.length}`), assert$1(n.shape[0] % s === 0, () => `input tensor batch is ${n.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`);
  const a = { x: n }, o = { blockShape: e, crops: t };
  return ENGINE.runKernel(BatchToSpaceND, a, o);
}
const batchToSpaceND$2 = /* @__PURE__ */ op({ batchToSpaceND_ });
function xAs4D(r) {
  let e;
  return r.rank === 0 || r.rank === 1 ? e = reshape$3(r, [1, 1, 1, r.size]) : r.rank === 2 ? e = reshape$3(r, [1, 1, r.shape[0], r.shape[1]]) : r.rank === 3 ? e = reshape$3(r, [1, r.shape[0], r.shape[1], r.shape[2]]) : e = r, e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function batchNorm_(r, e, t, n, s, a) {
  a == null && (a = 1e-3);
  const o = convertToTensor(r, "x", "batchNorm"), u = convertToTensor(e, "mean", "batchNorm"), l = convertToTensor(t, "variance", "batchNorm");
  let f;
  s != null && (f = convertToTensor(s, "scale", "batchNorm"));
  let c;
  n != null && (c = convertToTensor(n, "offset", "batchNorm")), assert$1(u.rank === l.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), assert$1(c == null || u.rank === c.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), assert$1(f == null || u.rank === f.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  const d = {
    x: xAs4D(o),
    scale: f,
    offset: c,
    mean: u,
    variance: l
  }, m = { varianceEpsilon: a }, g = ENGINE.runKernel(FusedBatchNorm, d, m);
  return reshape$3(g, o.shape);
}
const batchNorm$2 = /* @__PURE__ */ op({ batchNorm_ });
function batchNorm2d_(r, e, t, n, s, a) {
  const o = convertToTensor(r, "x", "batchNorm"), u = convertToTensor(e, "mean", "batchNorm"), l = convertToTensor(t, "variance", "batchNorm");
  let f;
  s != null && (f = convertToTensor(s, "scale", "batchNorm"));
  let c;
  return n != null && (c = convertToTensor(n, "offset", "batchNorm")), assert$1(o.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`), assert$1(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${u.rank}.`), assert$1(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`), f != null && assert$1(f.rank === 2 || f.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${f.rank}.`), c != null && assert$1(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`), batchNorm$2(o, u, l, c, f, a);
}
const batchNorm2d = /* @__PURE__ */ op({ batchNorm2d_ });
function batchNorm3d_(r, e, t, n, s, a) {
  const o = convertToTensor(r, "x", "batchNorm"), u = convertToTensor(e, "mean", "batchNorm"), l = convertToTensor(t, "variance", "batchNorm");
  let f;
  s != null && (f = convertToTensor(s, "scale", "batchNorm"));
  let c;
  return n != null && (c = convertToTensor(n, "offset", "batchNorm")), assert$1(o.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`), assert$1(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${u.rank}.`), assert$1(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`), f != null && assert$1(f.rank === 3 || f.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${f.rank}.`), c != null && assert$1(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`), batchNorm$2(o, u, l, c, f, a);
}
const batchNorm3d = /* @__PURE__ */ op({ batchNorm3d_ });
function batchNorm4d_(r, e, t, n, s, a) {
  const o = convertToTensor(r, "x", "batchNorm"), u = convertToTensor(e, "mean", "batchNorm"), l = convertToTensor(t, "variance", "batchNorm");
  let f;
  s != null && (f = convertToTensor(s, "scale", "batchNorm"));
  let c;
  return n != null && (c = convertToTensor(n, "offset", "batchNorm")), assert$1(o.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`), assert$1(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${u.rank}.`), assert$1(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`), f != null && assert$1(f.rank === 4 || f.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${f.rank}.`), c != null && assert$1(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`), batchNorm$2(o, u, l, c, f, a);
}
const batchNorm4d = /* @__PURE__ */ op({ batchNorm4d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bincount_(r, e, t) {
  const n = convertToTensor(r, "x", "bincount"), s = convertToTensor(e, "weights", "bincount");
  assert$1(n.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${n.dtype}`), assert$1(t >= 0, () => `size must be non-negative, but got ${t}.`), assert$1(s.size === n.size || s.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${n.shape}, weights shape: ${s.shape}.`);
  const a = { x: n, weights: s }, o = { size: t };
  return ENGINE.runKernel(Bincount, a, o);
}
const bincount$2 = /* @__PURE__ */ op({ bincount_ });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bitwiseAnd_(r, e) {
  const t = convertToTensor(r, "x", "bitwiseAnd"), n = convertToTensor(e, "y", "bitwiseAnd");
  if (!arraysEqual(t.shape, n.shape))
    throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${t.shape}, y: ${n.shape}`);
  if (t.dtype !== "int32" || n.dtype !== "int32")
    throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${t.dtype} and type of y: ${n.dtype}`);
  const s = { a: t, b: n };
  return ENGINE.runKernel(BitwiseAnd, s);
}
const bitwiseAnd$2 = /* @__PURE__ */ op({ bitwiseAnd_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function broadcastArgs_(r, e) {
  const t = convertToTensor(r, "s0", "broadcastArgs", "int32"), n = convertToTensor(e, "s1", "broadcastArgs", "int32");
  if (t.rank !== 1)
    throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${t.rank}`);
  if (n.rank !== 1)
    throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${n.rank}`);
  const s = { s0: t, s1: n };
  return ENGINE.runKernel(BroadcastArgs, s);
}
const broadcastArgs$2 = /* @__PURE__ */ op({ broadcastArgs_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function broadcastTo_(r, e) {
  let t = convertToTensor(r, "broadcastTo", "x");
  const n = t.shape;
  if (assertNonNegativeIntegerDimensions(e), e.length < t.rank)
    throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t.rank}.`);
  if (e.length > t.rank) {
    const f = t.shape.slice();
    for (; f.length < e.length; )
      f.unshift(1);
    t = reshape$3(t, f);
  }
  const s = t.shape, a = Array.from(e);
  for (let f = e.length - 1; f >= 0; f--)
    if (s[f] === e[f])
      a[f] = 1;
    else if (t.shape[f] !== 1)
      throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${e}].`);
  if (a.map((f, c) => f > 1 ? c : -1).filter((f) => f >= 0).length === 0)
    return clone(t);
  const u = { x: t }, l = { reps: a };
  return ENGINE.runKernel(Tile, u, l);
}
const broadcastTo = /* @__PURE__ */ op({ broadcastTo_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ceil_(r) {
  const t = { x: convertToTensor(r, "x", "ceil", "float32") };
  return ENGINE.runKernel(Ceil, t);
}
const ceil$2 = /* @__PURE__ */ op({ ceil_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fill$2(r, e, t) {
  assertNonNegativeIntegerDimensions(r), t = t || inferDtype(e);
  const n = { shape: r, value: e, dtype: t };
  return ENGINE.runKernel(Fill, {}, n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function clipByValue_(r, e, t) {
  const n = convertToTensor(r, "x", "clipByValue");
  if (assert$1(e <= t, () => `Error in clip: min (${e}) must be less than or equal to max (${t}).`), e === t)
    return fill$2(n.shape, e, n.dtype);
  const s = { x: n }, a = { clipValueMin: e, clipValueMax: t };
  return ENGINE.runKernel(ClipByValue, s, a);
}
const clipByValue$2 = /* @__PURE__ */ op({ clipByValue_ });
function concat1d_(r) {
  return concat$2(
    r,
    0
    /* axis */
  );
}
const concat1d = /* @__PURE__ */ op({ concat1d_ });
function concat2d_(r, e) {
  return concat$2(r, e);
}
const concat2d = /* @__PURE__ */ op({ concat2d_ });
function concat3d_(r, e) {
  return concat$2(r, e);
}
const concat3d = /* @__PURE__ */ op({ concat3d_ });
function concat4d_(r, e) {
  return concat$2(r, e);
}
const concat4d = /* @__PURE__ */ op({ concat4d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2d_(r, e, t, n, s = "NHWC", a = [1, 1], o) {
  const u = convertToTensor(r, "x", "conv2d", "float32"), l = convertToTensor(e, "filter", "conv2d", "float32");
  let f = u, c = !1;
  u.rank === 3 && (c = !0, f = reshape$3(u, [1, u.shape[0], u.shape[1], u.shape[2]])), assert$1(f.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${f.rank}.`), assert$1(l.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`), checkPadOnDimRoundingMode("conv2d", n, o);
  const h = s === "NHWC" ? f.shape[3] : f.shape[1];
  assert$1(h === l.shape[2], () => `Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`), assert$1(eitherStridesOrDilationsAreOne(t, a), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`), assert$1(stridesOrDilationsArePositive(a), () => "Error in conv2D: Dilated rates should be larger than 0."), assert$1(stridesOrDilationsArePositive(t), () => "Error in conv2D: Strides should be larger than 0.");
  const d = { x: f, filter: l }, m = { strides: t, pad: n, dataFormat: s, dilations: a, dimRoundingMode: o }, g = ENGINE.runKernel(Conv2D$1, d, m);
  return c ? reshape$3(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
const conv2d$3 = /* @__PURE__ */ op({ conv2d_ });
function conv1d_(r, e, t, n, s = "NWC", a = 1, o) {
  const u = convertToTensor(r, "x", "conv1d"), l = convertToTensor(e, "filter", "conv1d");
  let f = u, c = !1;
  u.rank === 2 && (c = !0, f = reshape$3(u, [1, u.shape[0], u.shape[1]])), assert$1(f.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${f.rank}.`), assert$1(l.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`), checkPadOnDimRoundingMode("conv1d", n, o), assert$1(f.shape[2] === l.shape[1], () => `Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${l.shape[1]}.`), assert$1(eitherStridesOrDilationsAreOne(t, a), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${a}'`), assert$1(stridesOrDilationsArePositive(a), () => "Error in conv1D: Dilated rates should be larger than 0."), assert$1(stridesOrDilationsArePositive(t), () => "Error in conv1D: Stride should be larger than 0."), assert$1(s === "NWC", () => `Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);
  const h = reshape$3(l, [1, l.shape[0], l.shape[1], l.shape[2]]), d = reshape$3(f, [f.shape[0], 1, f.shape[1], f.shape[2]]), b = conv2d$3(d, h, [1, t], n, "NHWC", [1, a], o);
  return c ? reshape$3(b, [b.shape[2], b.shape[3]]) : reshape$3(b, [b.shape[0], b.shape[2], b.shape[3]]);
}
const conv1d$1 = /* @__PURE__ */ op({ conv1d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2DBackpropInput_(r, e, t, n, s, a = "NHWC", o) {
  assert$1(r.length === e.rank, () => `Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);
  let u = r, l = e, f = !1;
  e.rank === 3 && (f = !0, l = reshape$3(e, [1, e.shape[0], e.shape[1], e.shape[2]]), u = [1, r[0], r[1], r[2]]), assert$1(u.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${u.length}.`), assert$1(l.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`), assert$1(t.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${t.rank}`);
  const c = a === "NHWC" ? u[3] : u[1], h = a === "NHWC" ? l.shape[3] : l.shape[1];
  assert$1(c === t.shape[2], () => `Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${t.shape[2]}.`), assert$1(h === t.shape[3], () => `Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${t.shape[3]}.`), checkPadOnDimRoundingMode("conv2dDerInput", s, o);
  const d = { dy: l, filter: t }, m = { strides: n, pad: s, dataFormat: a, dimRoundingMode: o, inputShape: u }, g = ENGINE.runKernel(Conv2DBackpropInput, d, m);
  return f ? reshape$3(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
const conv2DBackpropInput$2 = /* @__PURE__ */ op({ conv2DBackpropInput_ });
function conv2dTranspose_(r, e, t, n, s, a) {
  const o = convertToTensor(r, "x", "conv2dTranspose"), u = convertToTensor(e, "filter", "conv2dTranspose");
  return conv2DBackpropInput$2(t, o, u, n, s, "NHWC", a);
}
const conv2dTranspose$1 = /* @__PURE__ */ op({ conv2dTranspose_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3d_(r, e, t, n, s = "NDHWC", a = [1, 1, 1]) {
  const o = convertToTensor(r, "x", "conv3d"), u = convertToTensor(e, "filter", "conv3d");
  let l = o, f = !1;
  o.rank === 4 && (f = !0, l = reshape$3(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]])), assert$1(l.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`), assert$1(u.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${u.rank}.`), assert$1(l.shape[4] === u.shape[3], () => `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${u.shape[3]}.`), assert$1(eitherStridesOrDilationsAreOne(t, a), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`), assert$1(s === "NDHWC", () => `Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`), assert$1(stridesOrDilationsArePositive(a), () => "Error in conv3D: Dilated rates should be larger than 0."), assert$1(stridesOrDilationsArePositive(t), () => "Error in conv3D: Strides should be larger than 0.");
  const c = { x: l, filter: u }, h = { strides: t, pad: n, dataFormat: s, dilations: a }, d = ENGINE.runKernel(Conv3D$1, c, h);
  return f ? reshape$3(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const conv3d$1 = /* @__PURE__ */ op({ conv3d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3DBackpropInput_(r, e, t, n, s) {
  assert$1(r.length === e.rank, () => `Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);
  let a = r, o = e, u = !1;
  e.rank === 4 && (u = !0, o = reshape$3(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]]), a = [1, r[0], r[1], r[2], r[3]]);
  const l = a[4], f = o.shape[4];
  assert$1(a.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`), assert$1(o.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`), assert$1(t.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${t.rank}`), assert$1(l === t.shape[3], () => `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${t.shape[3]}.`), assert$1(f === t.shape[4], () => `Error in conv3dDerInput: depth of output (${f}) must match output depth for filter ${t.shape[4]}.`);
  const c = { dy: o, filter: t }, h = { pad: s, strides: n, inputShape: a }, d = ENGINE.runKernel(Conv3DBackpropInputV2, c, h);
  return u ? reshape$3(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const conv3DBackpropInput$1 = /* @__PURE__ */ op({ conv3DBackpropInput_ });
function conv3dTranspose_(r, e, t, n, s) {
  const a = convertToTensor(r, "x", "conv3dTranspose"), o = convertToTensor(e, "filter", "conv3dTranspose");
  return conv3DBackpropInput$1(t, a, o, n, s);
}
const conv3dTranspose$1 = /* @__PURE__ */ op({ conv3dTranspose_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cos_(r) {
  const t = { x: convertToTensor(r, "x", "cos", "float32") };
  return ENGINE.runKernel(Cos, t);
}
const cos$2 = /* @__PURE__ */ op({ cos_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cosh_(r) {
  const t = { x: convertToTensor(r, "x", "cosh", "float32") };
  return ENGINE.runKernel(Cosh, t);
}
const cosh$2 = /* @__PURE__ */ op({ cosh_ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cumprod_(r, e = 0, t = !1, n = !1) {
  const a = { x: convertToTensor(r, "x", "cumprod") }, o = { axis: e, exclusive: t, reverse: n };
  return ENGINE.runKernel(Cumprod, a, o);
}
const cumprod$2 = /* @__PURE__ */ op({ cumprod_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cumsum_(r, e = 0, t = !1, n = !1) {
  const a = { x: convertToTensor(r, "x", "cumsum") }, o = { axis: e, exclusive: t, reverse: n };
  return ENGINE.runKernel(Cumsum, a, o);
}
const cumsum$2 = /* @__PURE__ */ op({ cumsum_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function denseBincount_(r, e, t, n = !1) {
  const s = convertToTensor(r, "x", "denseBincount"), a = convertToTensor(e, "weights", "denseBincount");
  assert$1(s.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${s.dtype}`), assert$1(s.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`), assert$1(t >= 0, () => `size must be non-negative, but got ${t}.`), assert$1(a.size === s.size || a.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`);
  const o = { x: s, weights: a }, u = { size: t, binaryOutput: n };
  return ENGINE.runKernel(DenseBincount, o, u);
}
const denseBincount$2 = /* @__PURE__ */ op({ denseBincount_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthToSpace_(r, e, t = "NHWC") {
  const n = convertToTensor(r, "x", "depthToSpace", "float32"), s = t === "NHWC" ? n.shape[1] : n.shape[2], a = t === "NHWC" ? n.shape[2] : n.shape[3], o = t === "NHWC" ? n.shape[3] : n.shape[1];
  assert$1(e > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${e}`), assert$1(s * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${s} and ${e}  for depthToSpace with input shape
    ${n.shape}`), assert$1(a * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${a} and ${e} for depthToSpace with input shape
        ${n.shape}`), assert$1(o % (e * e) === 0, () => `Dimension size must be evenly divisible by ${e * e} but is ${o} for depthToSpace with input shape ${n.shape}`);
  const u = { x: n }, l = { blockSize: e, dataFormat: t };
  return ENGINE.runKernel(DepthToSpace, u, l);
}
const depthToSpace$2 = /* @__PURE__ */ op({ depthToSpace_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2d_(r, e, t, n, s = "NHWC", a = [1, 1], o) {
  const u = convertToTensor(r, "x", "depthwiseConv2d", "float32"), l = convertToTensor(e, "filter", "depthwiseConv2d", "float32");
  let f = u, c = !1;
  u.rank === 3 && (c = !0, f = reshape$3(u, [1, u.shape[0], u.shape[1], u.shape[2]])), assert$1(f.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`), assert$1(l.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);
  const h = s === "NHWC" ? f.shape[3] : f.shape[1];
  assert$1(h === l.shape[2], () => `Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`), checkPadOnDimRoundingMode("depthwiseConv2d", n, o);
  const d = { x: f, filter: l }, m = { strides: t, pad: n, dataFormat: s, dilations: a, dimRoundingMode: o }, g = ENGINE.runKernel(DepthwiseConv2dNative, d, m);
  return c ? reshape$3(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
const depthwiseConv2d$3 = /* @__PURE__ */ op({ depthwiseConv2d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function diag_(r) {
  const t = { x: convertToTensor(r, "x", "diag") };
  return ENGINE.runKernel(Diag, t);
}
const diag$2 = /* @__PURE__ */ op({ diag_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dilation2d_(r, e, t, n, s = [1, 1], a = "NHWC") {
  const o = convertToTensor(r, "x", "dilation2d"), u = convertToTensor(e, "filter", "dilation2d");
  assert$1(o.rank === 3 || o.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`), assert$1(u.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${u.rank}.`), assert$1(a === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`);
  let l = o, f = !1;
  o.rank === 3 && (l = reshape$3(o, [1, o.shape[0], o.shape[1], o.shape[2]]), f = !0), assert$1(l.shape[3] === u.shape[2], () => `Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${u.shape[2]}`);
  const c = { x: l, filter: u }, h = { strides: t, pad: n, dilations: s }, d = ENGINE.runKernel(Dilation2D, c, h);
  return f ? reshape$3(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const dilation2d = /* @__PURE__ */ op({ dilation2d_ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getBroadcastDims$1(r, e) {
  const t = r.length, n = [];
  for (let s = 0; s < t; s++) {
    const a = t - 1 - s, o = r[a] || 1;
    (e[e.length - 1 - s] || 1) > 1 && o === 1 && n.unshift(a);
  }
  return n;
}
function getReductionAxes(r, e) {
  const t = [];
  for (let n = 0; n < e.length; n++) {
    const s = r[r.length - n - 1], a = e.length - n - 1, o = e[a];
    (s == null || s === 1 && o > 1) && t.unshift(a);
  }
  return t;
}
function assertAndGetBroadcastShape(r, e) {
  const t = Math.max(r.length, e.length), n = new Array(t);
  for (let s = 0; s < t; s++) {
    let a = r[r.length - s - 1];
    a == null && (a = 1);
    let o = e[e.length - s - 1];
    if (o == null && (o = 1), a === 1)
      n[t - s - 1] = o;
    else if (o === 1)
      n[t - s - 1] = a;
    else if (a !== o) {
      const u = `Operands could not be broadcast together with shapes ${r} and ${e}.`;
      throw Error(u);
    } else
      n[t - s - 1] = a;
  }
  return n;
}
const broadcast_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertAndGetBroadcastShape,
  getBroadcastDims: getBroadcastDims$1,
  getReductionAxes
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function equal_(r, e) {
  let t = convertToTensor(r, "a", "equal", "string_or_numeric"), n = convertToTensor(e, "b", "equal", "string_or_numeric");
  [t, n] = makeTypesMatch(t, n), assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Equal, s);
}
const equal$2 = /* @__PURE__ */ op({ equal_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function where_(r, e, t) {
  const n = convertToTensor(e, "a", "where"), s = convertToTensor(t, "b", "where"), a = convertToTensor(r, "condition", "where", "bool"), o = assertAndGetBroadcastShape(assertAndGetBroadcastShape(a.shape, n.shape), s.shape), u = broadcastTo(a, o), l = broadcastTo(n, o), f = broadcastTo(s, o), c = {
    condition: u,
    t: l,
    e: f
  };
  return ENGINE.runKernel(Select, c);
}
const where = /* @__PURE__ */ op({ where_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zerosLike_(r) {
  const t = { x: convertToTensor(r, "x", "zerosLike") };
  return ENGINE.runKernel(ZerosLike, t);
}
const zerosLike$2 = /* @__PURE__ */ op({ zerosLike_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function divNoNan_(r, e) {
  let t = convertToTensor(r, "a", "div"), n = convertToTensor(e, "b", "div");
  [t, n] = makeTypesMatch(t, n);
  const s = div$1(t, n), a = zerosLike$2(s), o = equal$2(n, a);
  return where(o, a, s);
}
const divNoNan = /* @__PURE__ */ op({ divNoNan_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dot_(r, e) {
  const t = convertToTensor(r, "t1", "dot"), n = convertToTensor(e, "t2", "dot");
  assert$1((t.rank === 1 || t.rank === 2) && (n.rank === 1 || n.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${t.rank} and ${n.rank}.`);
  const s = t.rank === 1 ? t.size : t.shape[1], a = n.rank === 1 ? n.size : n.shape[0];
  if (assert$1(s === a, () => `Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`), t.rank === 1 && n.rank === 1) {
    const o = reshape$3(t, [1, -1]), u = reshape$3(n, [-1, 1]), l = matMul$1(o, u);
    return reshape$3(l, []);
  } else if (t.rank === 1 && n.rank === 2) {
    const o = reshape$3(t, [1, -1]), u = reshape$3(n, [n.shape[0], n.shape[1]]), l = matMul$1(o, u);
    return reshape$3(l, [l.size]);
  } else if (t.rank === 2 && n.rank === 1) {
    const o = reshape$3(n, [-1, 1]), u = matMul$1(t, o);
    return reshape$3(u, [u.size]);
  } else {
    const o = reshape$3(n, [n.shape[0], n.shape[1]]);
    return matMul$1(t, o);
  }
}
const dot$2 = /* @__PURE__ */ op({ dot_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function einsum_(r, ...e) {
  const t = e.map((s, a) => convertToTensor(s, `tensors${a}`, "einsum")), n = { equation: r };
  return ENGINE.runKernel(Einsum, t, n);
}
const einsum$2 = /* @__PURE__ */ op({ einsum_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function elu_(r) {
  const t = { x: convertToTensor(r, "x", "elu", "float32") };
  return ENGINE.runKernel(Elu$1, t);
}
const elu$4 = /* @__PURE__ */ op({ elu_ });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ensureShape_(r, e) {
  const t = convertToTensor(r, "x", "ensureShape", "string_or_numeric");
  if (!arraysEqualWithNull(t.shape, e))
    throw new Error(`EnsureShape: Shape of tensor ${t.shape} is not compatible with expected shape ${e}`);
  return r;
}
const ensureShape = /* @__PURE__ */ op({ ensureShape_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function erf_(r) {
  let e = convertToTensor(r, "x", "erf");
  assert$1(e.dtype === "int32" || e.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), e.dtype === "int32" && (e = cast$3(e, "float32"));
  const t = { x: e };
  return ENGINE.runKernel(Erf, t);
}
const erf$2 = /* @__PURE__ */ op({ erf_ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function axesAreInnerMostDims(r, e) {
  for (let t = 0; t < r.length; ++t)
    if (r[r.length - t - 1] !== e - 1 - t)
      return !1;
  return !0;
}
function combineLocations(r, e, t) {
  const n = r.length + e.length, s = [];
  let a = 0, o = 0;
  for (let u = 0; u < n; u++)
    t.indexOf(u) === -1 ? s.push(r[a++]) : s.push(e[o++]);
  return s;
}
function computeOutAndReduceShapes(r, e) {
  const t = [], n = r.length;
  for (let a = 0; a < n; a++)
    e.indexOf(a) === -1 && t.push(r[a]);
  const s = e.map((a) => r[a]);
  return [t, s];
}
function expandShapeToKeepDim(r, e) {
  const t = e.map((n) => 1);
  return combineLocations(r, t, e);
}
function assertAxesAreInnerMostDims(r, e, t) {
  assert$1(axesAreInnerMostDims(e, t), () => `${r} supports only inner-most axes for now. Got axes ${e} and rank-${t} input.`);
}
function getAxesPermutation(r, e) {
  if (axesAreInnerMostDims(r, e))
    return null;
  const t = [];
  for (let n = 0; n < e; ++n)
    r.indexOf(n) === -1 && t.push(n);
  return r.forEach((n) => t.push(n)), t;
}
function getUndoAxesPermutation(r) {
  return r.map((e, t) => [t, e]).sort((e, t) => e[1] - t[1]).map((e) => e[0]);
}
function getInnerMostAxes(r, e) {
  const t = [];
  for (let n = e - r; n < e; ++n)
    t.push(n);
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function max_(r, e = null, t = !1) {
  const s = { x: convertToTensor(r, "x", "max") }, a = { reductionIndices: e, keepDims: t };
  return ENGINE.runKernel(Max, s, a);
}
const max$4 = /* @__PURE__ */ op({ max_ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function min_(r, e = null, t = !1) {
  const s = { x: convertToTensor(r, "x", "min") }, a = { axis: e, keepDims: t };
  return ENGINE.runKernel(Min, s, a);
}
const min$4 = /* @__PURE__ */ op({ min_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pow_(r, e) {
  let t = convertToTensor(r, "base", "pow"), n = convertToTensor(e, "exp", "pow");
  [t, n] = makeTypesMatch(t, n);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Pow, s);
}
const pow$3 = /* @__PURE__ */ op({ pow_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function scalar(r, e) {
  if ((isTypedArray$1(r) && e !== "string" || Array.isArray(r)) && e !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (e === "string" && isTypedArray$1(r) && !(r instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return makeTensor(r, [], [], e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sqrt_(r) {
  const t = { x: convertToTensor(r, "x", "sqrt", "float32") };
  return ENGINE.runKernel(Sqrt, t);
}
const sqrt$2 = /* @__PURE__ */ op({ sqrt_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function square_(r) {
  const e = convertToTensor(r, "x", "square"), t = {};
  return ENGINE.runKernel("Square", { x: e }, t);
}
const square$2 = /* @__PURE__ */ op({ square_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sum_(r, e = null, t = !1) {
  let n = convertToTensor(r, "x", "sum");
  n.dtype === "bool" && (n = cast$3(n, "int32"));
  const s = { x: n }, a = { axis: e, keepDims: t };
  return ENGINE.runKernel(Sum, s, a);
}
const sum$2 = /* @__PURE__ */ op({ sum_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function norm_(r, e = "euclidean", t = null, n = !1) {
  r = convertToTensor(r, "x", "norm");
  const s = normImpl(r, e, t);
  let a = s.shape;
  if (n) {
    const o = parseAxisParam(t, r.shape);
    a = expandShapeToKeepDim(s.shape, o);
  }
  return reshape$3(s, a);
}
function normImpl(r, e, t = null) {
  if (r.rank === 0)
    return abs$3(r);
  if (r.rank !== 1 && t === null)
    return normImpl(reshape$3(r, [-1]), e, t);
  if (r.rank === 1 || typeof t == "number" || Array.isArray(t) && t.length === 1) {
    if (e === 1)
      return sum$2(abs$3(r), t);
    if (e === 1 / 0)
      return max$4(abs$3(r), t);
    if (e === -1 / 0)
      return min$4(abs$3(r), t);
    if (e === "euclidean" || e === 2)
      return sqrt$2(sum$2(pow$3(abs$3(r), scalar(2, "int32")), t));
    throw new Error(`Error in norm: invalid ord value: ${e}`);
  }
  if (Array.isArray(t) && t.length === 2) {
    if (e === 1)
      return max$4(sum$2(abs$3(r), t[0]), t[1] - 1);
    if (e === 1 / 0)
      return max$4(sum$2(abs$3(r), t[1]), t[0]);
    if (e === -1 / 0)
      return min$4(sum$2(abs$3(r), t[1]), t[0]);
    if (e === "fro" || e === "euclidean")
      return sqrt$2(sum$2(square$2(r), t));
    throw new Error(`Error in norm: invalid ord value: ${e}`);
  }
  throw new Error(`Error in norm: invalid axis: ${t}`);
}
const norm = /* @__PURE__ */ op({ norm_ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function euclideanNorm_(r, e = null, t = !1) {
  return norm(r, "euclidean", e, t);
}
const euclideanNorm = /* @__PURE__ */ op({ euclideanNorm_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function exp_(r) {
  const t = { x: convertToTensor(r, "x", "exp") };
  return ENGINE.runKernel(Exp, t);
}
const exp$2 = /* @__PURE__ */ op({ exp_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function expandDims_(r, e = 0) {
  const t = convertToTensor(r, "x", "expandDims", "string_or_numeric");
  assert$1(e <= t.rank, () => "Axis must be <= rank of the tensor");
  const n = { input: t }, s = { dim: e };
  return ENGINE.runKernel(ExpandDims, n, s);
}
const expandDims$3 = /* @__PURE__ */ op({ expandDims_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function expm1_(r) {
  const t = { x: convertToTensor(r, "x", "expm1") };
  return ENGINE.runKernel(Expm1, t);
}
const expm1$2 = /* @__PURE__ */ op({ expm1_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tile_(r, e) {
  const t = convertToTensor(r, "x", "tile", "string_or_numeric");
  assert$1(t.rank === e.length, () => `Error in transpose: rank of input ${t.rank} must match length of reps ${e}.`);
  const n = { x: t }, s = { reps: e };
  return ENGINE.runKernel(Tile, n, s);
}
const tile$3 = /* @__PURE__ */ op({ tile_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eye_(r, e, t, n = "float32") {
  e == null && (e = r);
  const s = buffer$1([r, e], n), a = r <= e ? r : e;
  for (let u = 0; u < a; ++u)
    s.set(1, u, u);
  const o = reshape$3(s.toTensor(), [r, e]);
  if (t == null)
    return o;
  if (t.length === 1)
    return tile$3(expandDims$3(o, 0), [t[0], 1, 1]);
  if (t.length === 2)
    return tile$3(expandDims$3(expandDims$3(o, 0), 0), [t[0], t[1], 1, 1]);
  if (t.length === 3)
    return tile$3(expandDims$3(expandDims$3(expandDims$3(o, 0), 0), 0), [
      t[0],
      t[1],
      t[2],
      1,
      1
    ]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${t.length}D.`);
}
const eye = /* @__PURE__ */ op({ eye_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function floor_(r) {
  const t = { x: convertToTensor(r, "x", "floor", "float32") };
  return ENGINE.runKernel(Floor, t);
}
const floor$3 = /* @__PURE__ */ op({ floor_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gather_(r, e, t = 0, n = 0) {
  const s = convertToTensor(r, "x", "gather"), a = convertToTensor(e, "indices", "gather", "int32"), o = { x: s, indices: a }, u = { axis: t, batchDims: n };
  return ENGINE.runKernel(GatherV2, o, u);
}
const gather$1 = /* @__PURE__ */ op({ gather_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function greater_(r, e) {
  let t = convertToTensor(r, "a", "greater", "string_or_numeric"), n = convertToTensor(e, "b", "greater", "string_or_numeric");
  [t, n] = makeTypesMatch(t, n), assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Greater, s);
}
const greater$3 = /* @__PURE__ */ op({ greater_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function greaterEqual_(r, e) {
  let t = convertToTensor(r, "a", "greaterEqual", "string_or_numeric"), n = convertToTensor(e, "b", "greaterEqual", "string_or_numeric");
  [t, n] = makeTypesMatch(t, n), assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n };
  return ENGINE.runKernel(GreaterEqual, s);
}
const greaterEqual$2 = /* @__PURE__ */ op({ greaterEqual_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function imag_(r) {
  const t = { input: convertToTensor(r, "input", "imag") };
  return ENGINE.runKernel(Imag, t);
}
const imag$2 = /* @__PURE__ */ op({ imag_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function isFinite_(r) {
  const t = { x: convertToTensor(r, "x", "isFinite") };
  return ENGINE.runKernel(IsFinite, t);
}
const isFinite$3 = /* @__PURE__ */ op({ isFinite_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function isInf_(r) {
  const t = { x: convertToTensor(r, "x", "isInf") };
  return ENGINE.runKernel(IsInf, t);
}
const isInf$2 = /* @__PURE__ */ op({ isInf_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function isNaN_(r) {
  const t = { x: convertToTensor(r, "x", "isNaN") };
  return ENGINE.runKernel(IsNan, t);
}
const isNaN$3 = /* @__PURE__ */ op({ isNaN_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function leakyRelu_(r, e = 0.2) {
  const n = { x: convertToTensor(r, "x", "leakyRelu") }, s = { alpha: e };
  return ENGINE.runKernel(LeakyRelu, n, s);
}
const leakyRelu$2 = /* @__PURE__ */ op({ leakyRelu_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function less_(r, e) {
  let t = convertToTensor(r, "a", "less", "string_or_numeric"), n = convertToTensor(e, "b", "less", "string_or_numeric");
  [t, n] = makeTypesMatch(t, n), assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Less, s);
}
const less$3 = /* @__PURE__ */ op({ less_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lessEqual_(r, e) {
  let t = convertToTensor(r, "a", "lessEqual", "string_or_numeric"), n = convertToTensor(e, "b", "lessEqual", "string_or_numeric");
  [t, n] = makeTypesMatch(t, n), assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n };
  return ENGINE.runKernel(LessEqual, s);
}
const lessEqual$2 = /* @__PURE__ */ op({ lessEqual_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function linspace(r, e, t) {
  if (t <= 0)
    throw new Error("The number of values should be positive.");
  const n = { start: r, stop: e, num: t };
  return ENGINE.runKernel(LinSpace, {}, n);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function localResponseNormalization_(r, e = 5, t = 1, n = 1, s = 0.5) {
  const a = convertToTensor(r, "x", "localResponseNormalization");
  assert$1(a.rank === 4 || a.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${a.rank}.`), assert$1(isInt(e), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);
  let o = a, u = !1;
  a.rank === 3 && (u = !0, o = reshape$3(a, [1, a.shape[0], a.shape[1], a.shape[2]]));
  const l = { x: o }, f = { depthRadius: e, bias: t, alpha: n, beta: s }, c = ENGINE.runKernel(LRN, l, f);
  return u ? reshape$3(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const localResponseNormalization = /* @__PURE__ */ op({ localResponseNormalization_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function log_(r) {
  const t = { x: convertToTensor(r, "x", "log", "float32") };
  return ENGINE.runKernel(Log, t);
}
const log$2 = /* @__PURE__ */ op({ log_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function log1p_(r) {
  const t = { x: convertToTensor(r, "x", "log1p") };
  return ENGINE.runKernel(Log1p, t);
}
const log1p$2 = /* @__PURE__ */ op({ log1p_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function grad(r) {
  return assert$1(isFunction(r), () => "The f passed in grad(f) must be a function"), (e, t) => {
    const n = convertToTensor(e, "x", "tf.grad", "string_or_numeric"), s = t != null ? convertToTensor(t, "dy", "tf.grad") : null;
    return ENGINE.tidy(() => {
      const { value: a, grads: o } = ENGINE.gradients(() => r(n), [n], s);
      return s != null && assertShapesMatch(a.shape, s.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), checkGrads(o), o[0];
    });
  };
}
function grads(r) {
  return assert$1(isFunction(r), () => "The f passed in grads(f) must be a function"), (e, t) => {
    assert$1(Array.isArray(e), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    const n = convertToTensorArray(e, "args", "tf.grads", "string_or_numeric"), s = t != null ? convertToTensor(t, "dy", "tf.grads") : null;
    return ENGINE.tidy(() => {
      const { value: a, grads: o } = ENGINE.gradients(() => r(...n), n, s);
      return s != null && assertShapesMatch(a.shape, s.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), checkGrads(o), o;
    });
  };
}
function valueAndGrad(r) {
  return assert$1(isFunction(r), () => "The f passed in valueAndGrad(f) must be a function"), (e, t) => {
    assert$1(e instanceof Tensor, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), assert$1(t == null || t instanceof Tensor, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    const { grads: n, value: s } = ENGINE.gradients(() => r(e), [e], t);
    return checkGrads(n), { grad: n[0], value: s };
  };
}
function valueAndGrads(r) {
  return assert$1(isFunction(r), () => "The f passed in valueAndGrads(f) must be a function"), (e, t) => {
    assert$1(Array.isArray(e) && e.every((s) => s instanceof Tensor), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), assert$1(t == null || t instanceof Tensor, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    const n = ENGINE.gradients(() => r(...e), e, t);
    return t != null && assertShapesMatch(n.value.shape, t.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), checkGrads(n.grads), n;
  };
}
function variableGrads(r, e) {
  assert$1(isFunction(r), () => "The f passed in variableGrads(f) must be a function"), assert$1(e == null || Array.isArray(e) && e.every((f) => f instanceof Variable), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  const t = e != null;
  if (!t) {
    e = [];
    for (const f in ENGINE.registeredVariables)
      e.push(ENGINE.registeredVariables[f]);
  }
  const n = t ? e.filter((f) => !f.trainable) : null, s = e.length;
  e = e.filter((f) => f.trainable), assert$1(e.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);
  const a = !0, { value: o, grads: u } = ENGINE.gradients(r, e, null, a);
  assert$1(u.some((f) => f != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), assert$1(o.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${o.rank} tensor`);
  const l = {};
  return e.forEach((f, c) => {
    u[c] != null && (l[f.name] = u[c]);
  }), n != null && n.forEach((f) => l[f.name] = null), { value: o, grads: l };
}
function customGrad(r) {
  return ENGINE.customGrad(r);
}
function checkGrads(r) {
  if (r.filter((t) => t == null).length > 0)
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function neg_(r) {
  const t = { x: convertToTensor(r, "x", "neg") };
  return ENGINE.runKernel(Neg, t);
}
const neg$2 = /* @__PURE__ */ op({ neg_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function softplus_(r) {
  const t = { x: convertToTensor(r, "x", "softplus") };
  return ENGINE.runKernel(Softplus$1, t);
}
const softplus$2 = /* @__PURE__ */ op({ softplus_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function logSigmoid_(r) {
  const e = convertToTensor(r, "x", "logSigmoid");
  return customGrad((n) => ({ value: neg$2(softplus$2(neg$2(n))), gradFunc: (o) => mul(o, sigmoid$2(neg$2(n))) }))(e);
}
const logSigmoid = /* @__PURE__ */ op({ logSigmoid_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sub_(r, e) {
  let t = convertToTensor(r, "a", "sub"), n = convertToTensor(e, "b", "sub");
  [t, n] = makeTypesMatch(t, n);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Sub, s);
}
const sub$2 = /* @__PURE__ */ op({ sub_ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function logSoftmax_(r, e = -1) {
  const t = convertToTensor(r, "logits", "logSoftmax");
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and axis was ${e}`);
  return customGrad((s, a) => {
    const u = max$4(s, e, !0), l = sub$2(s, u), f = sub$2(cast$3(l, "float32"), log$2(sum$2(exp$2(l), e, !0)));
    return a([f]), { value: f, gradFunc: (h, d) => {
      const [m] = d, g = !0, y = exp$2(m);
      return sub$2(h, mul(sum$2(h, e, g), y));
    } };
  })(t);
}
const logSoftmax = /* @__PURE__ */ op({ logSoftmax_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function logSumExp_(r, e = null, t = !1) {
  const n = convertToTensor(r, "x", "logSumExp"), s = parseAxisParam(e, n.shape), a = max$4(
    n,
    s,
    !0
    /* keepDims */
  ), o = sub$2(n, a), u = exp$2(o), l = sum$2(u, s), f = log$2(l), c = add$2(reshape$3(a, f.shape), f);
  if (t) {
    const h = expandShapeToKeepDim(c.shape, s);
    return reshape$3(c, h);
  }
  return c;
}
const logSumExp = /* @__PURE__ */ op({ logSumExp_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function logicalAnd_(r, e) {
  const t = convertToTensor(r, "a", "logicalAnd", "bool"), n = convertToTensor(e, "b", "logicalAnd", "bool");
  assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n };
  return ENGINE.runKernel(LogicalAnd, s);
}
const logicalAnd$2 = /* @__PURE__ */ op({ logicalAnd_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function logicalNot_(r) {
  const t = { x: convertToTensor(r, "x", "logicalNot", "bool") };
  return ENGINE.runKernel(LogicalNot, t);
}
const logicalNot$2 = /* @__PURE__ */ op({ logicalNot_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function logicalOr_(r, e) {
  const t = convertToTensor(r, "a", "logicalOr", "bool"), n = convertToTensor(e, "b", "logicalOr", "bool");
  assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n };
  return ENGINE.runKernel(LogicalOr, s);
}
const logicalOr$2 = /* @__PURE__ */ op({ logicalOr_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function logicalXor_(r, e) {
  const t = convertToTensor(r, "a", "logicalXor", "bool"), n = convertToTensor(e, "b", "logicalXor", "bool");
  return assertAndGetBroadcastShape(t.shape, n.shape), logicalAnd$2(logicalOr$2(r, e), logicalNot$2(logicalAnd$2(r, e)));
}
const logicalXor = /* @__PURE__ */ op({ logicalXor_ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const INT32_MAX$1 = 2147483648;
function searchSorted_(r, e, t = "left") {
  const n = convertToTensor(r, "sortedSequence", "searchSorted"), s = convertToTensor(e, "values", "searchSorted"), a = n.shape[n.shape.length - 1], o = s.shape[s.shape.length - 1], u = reshape$3(n, [-1, a]), l = reshape$3(s, [-1, o]);
  if (u.rank < 2)
    throw new Error("Sorted input argument must be at least 2-dimensional");
  if (u.shape[0] !== l.shape[0])
    throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");
  if (sizeFromShape(l.shape) >= INT32_MAX$1)
    throw new Error(`values tensor size must less than ${INT32_MAX$1}`);
  if (u.shape[1] >= INT32_MAX$1)
    throw new Error(`trailing dim_size must less than ${INT32_MAX$1} for int32 output type, was ${u.shape[1]}`);
  const f = {
    sortedSequence: u,
    values: l
  }, c = { side: t };
  return ENGINE.runKernel(SearchSorted, f, c);
}
const searchSorted$2 = /* @__PURE__ */ op({ searchSorted_ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lowerBound$1(r, e) {
  return searchSorted$2(r, e, "left");
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool_(r, e, t, n, s) {
  const a = convertToTensor(r, "x", "maxPool"), o = 1;
  let u = a, l = !1;
  a.rank === 3 && (l = !0, u = reshape$3(a, [1, a.shape[0], a.shape[1], a.shape[2]])), assert$1(u.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${u.rank}.`), assert$1(eitherStridesOrDilationsAreOne(t, o), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`), checkPadOnDimRoundingMode("maxPool", n, s);
  const f = { x: u }, c = { filterSize: e, strides: t, pad: n, dimRoundingMode: s }, h = ENGINE.runKernel(MaxPool, f, c);
  return l ? reshape$3(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const maxPool$2 = /* @__PURE__ */ op({ maxPool_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool3d_(r, e = [1, 1, 1], t, n, s, a = "NDHWC") {
  const o = convertToTensor(r, "x", "maxPool3d");
  let u = o, l = !1;
  o.rank === 4 && (l = !0, u = reshape$3(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]])), assert$1(u.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`), assert$1(a === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`), checkPadOnDimRoundingMode("maxPool3d", n, s);
  const f = { x: u }, c = { filterSize: e, strides: t, pad: n, dimRoundingMode: s, dataFormat: a }, h = ENGINE.runKernel(MaxPool3D, f, c);
  return l ? reshape$3(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const maxPool3d$1 = /* @__PURE__ */ op({ maxPool3d_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPoolWithArgmax_(r, e, t, n, s = !1) {
  const o = { x: convertToTensor(r, "x", "maxPoolWithArgmax") }, u = { filterSize: e, strides: t, pad: n, includeBatchInIndex: s }, l = ENGINE.runKernel(MaxPoolWithArgmax, o, u);
  return { result: l[0], indexes: l[1] };
}
const maxPoolWithArgmax = /* @__PURE__ */ op({ maxPoolWithArgmax_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maximum_(r, e) {
  let t = convertToTensor(r, "a", "maximum"), n = convertToTensor(e, "b", "maximum");
  [t, n] = makeTypesMatch(t, n), t.dtype === "bool" && (t = cast$3(t, "int32"), n = cast$3(n, "int32")), assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Maximum$1, s);
}
const maximum$3 = /* @__PURE__ */ op({ maximum_ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mean_(r, e = null, t = !1) {
  const s = { x: convertToTensor(r, "x", "mean") }, a = { axis: e, keepDims: t };
  return ENGINE.runKernel(Mean, s, a);
}
const mean$1 = /* @__PURE__ */ op({ mean_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zeros$2(r, e = "float32") {
  if (assertNonNegativeIntegerDimensions(r), e === "complex64") {
    const n = zeros$2(r, "float32"), s = zeros$2(r, "float32");
    return complex$2(n, s);
  }
  const t = makeZerosTypedArray(sizeFromShape(r), e);
  return ENGINE.makeTensor(t, r, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ones$1(r, e = "float32") {
  if (assertNonNegativeIntegerDimensions(r), e === "complex64") {
    const n = ones$1(r, "float32"), s = zeros$2(r, "float32");
    return complex$2(n, s);
  }
  const t = makeOnesTypedArray(sizeFromShape(r), e);
  return ENGINE.makeTensor(t, r, e);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function meshgrid(r, e, { indexing: t = "xy" } = {}) {
  if (t !== "xy" && t !== "ij")
    throw new TypeError(`${t} is not a valid third argument to meshgrid`);
  if (r === void 0)
    return [];
  let n = convertToTensor(r, "x", "meshgrid", r instanceof Tensor ? r.dtype : "float32");
  if (e === void 0)
    return [n];
  let s = convertToTensor(e, "y", "meshgrid", e instanceof Tensor ? e.dtype : "float32");
  const a = sizeFromShape(n.shape), o = sizeFromShape(s.shape);
  return t === "xy" ? (n = reshape$3(n, [1, -1]), s = reshape$3(s, [-1, 1]), [
    matMul$1(ones$1([o, 1], n.dtype), n),
    matMul$1(s, ones$1([1, a], s.dtype))
  ]) : (n = reshape$3(n, [-1, 1]), s = reshape$3(s, [1, -1]), [
    matMul$1(n, ones$1([1, o], n.dtype)),
    matMul$1(ones$1([a, 1], s.dtype), s)
  ]);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function minimum_(r, e) {
  let t = convertToTensor(r, "a", "minimum"), n = convertToTensor(e, "b", "minimum");
  [t, n] = makeTypesMatch(t, n), t.dtype === "bool" && (t = cast$3(t, "int32"), n = cast$3(n, "int32")), assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Minimum$1, s);
}
const minimum$3 = /* @__PURE__ */ op({ minimum_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mirrorPad_(r, e, t) {
  assert$1(t === "reflect" || t === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${t}.`);
  const n = convertToTensor(r, "x", "mirrorPad");
  if (n.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  assert$1(e.length === n.rank, () => `Padding doesn't match input. Must be ${n.rank}. Got ${e.length}.`);
  const s = t === "reflect" ? 1 : 0;
  for (let u = 0; u < n.rank; u++)
    assert$1(e[u].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), assert$1(e[u][0] >= 0 && e[u][0] <= n.shape[u] - s && e[u][1] >= 0 && e[u][1] <= n.shape[u] - s, () => `Padding in dimension ${u} cannot be greater than or equal to ${n.shape[u] - s} or less than 0 for input of shape ${n.shape}`);
  const a = { paddings: e, mode: t }, o = { x: n };
  return ENGINE.runKernel(MirrorPad, o, a);
}
const mirrorPad$1 = /* @__PURE__ */ op({ mirrorPad_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mod_(r, e) {
  let t = convertToTensor(r, "a", "mod"), n = convertToTensor(e, "b", "mod");
  [t, n] = makeTypesMatch(t, n);
  const s = { a: t, b: n };
  return ENGINE.runKernel(Mod, s);
}
const mod$2 = /* @__PURE__ */ op({ mod_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function moments_(r, e = null, t = !1) {
  r = convertToTensor(r, "x", "moments");
  const n = parseAxisParam(e, r.shape), s = mean$1(r, n, t);
  let a = s.shape;
  t || (a = expandShapeToKeepDim(s.shape, n));
  const o = square$2(sub$2(cast$3(r, "float32"), reshape$3(s, a))), u = mean$1(o, n, t);
  return { mean: s, variance: u };
}
const moments = /* @__PURE__ */ op({ moments_ });
function multiRNNCell_(r, e, t, n) {
  const s = convertToTensor(e, "data", "multiRNNCell"), a = convertToTensorArray(t, "c", "multiRNNCell"), o = convertToTensorArray(n, "h", "multiRNNCell");
  let u = s;
  const l = [];
  for (let h = 0; h < r.length; h++) {
    const d = r[h](u, a[h], o[h]);
    l.push(d[0]), l.push(d[1]), u = d[1];
  }
  const f = [], c = [];
  for (let h = 0; h < l.length; h += 2)
    f.push(l[h]), c.push(l[h + 1]);
  return [f, c];
}
const multiRNNCell = /* @__PURE__ */ op({ multiRNNCell_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function multinomial_(r, e, t, n = !1) {
  const s = convertToTensor(r, "logits", "multinomial"), a = s.size, o = s.rank;
  if (a < 2)
    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);
  if (o > 2)
    throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);
  t = t || Math.random();
  const l = { logits: o === 1 ? reshape$3(s, [1, -1]) : s }, f = { numSamples: e, seed: t, normalized: n }, c = ENGINE.runKernel(Multinomial, l, f);
  return o === 1 ? reshape$3(c, [c.size]) : c;
}
const multinomial$2 = /* @__PURE__ */ op({ multinomial_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function notEqual_(r, e) {
  let t = convertToTensor(r, "a", "notEqual", "string_or_numeric"), n = convertToTensor(e, "b", "notEqual", "string_or_numeric");
  [t, n] = makeTypesMatch(t, n), assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n };
  return ENGINE.runKernel(NotEqual, s);
}
const notEqual$2 = /* @__PURE__ */ op({ notEqual_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oneHot_(r, e, t = 1, n = 0, s = "int32") {
  if (e < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);
  const o = { indices: convertToTensor(r, "indices", "oneHot", "int32") }, u = { dtype: s, depth: e, onValue: t, offValue: n };
  return ENGINE.runKernel(OneHot, o, u);
}
const oneHot$2 = /* @__PURE__ */ op({ oneHot_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function onesLike_(r) {
  const t = { x: convertToTensor(r, "x", "onesLike") };
  return ENGINE.runKernel(OnesLike, t);
}
const onesLike$2 = /* @__PURE__ */ op({ onesLike_ });
function outerProduct_(r, e) {
  const t = convertToTensor(r, "v1", "outerProduct"), n = convertToTensor(e, "v2", "outerProduct");
  assert$1(t.rank === 1 && n.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${t.rank} and ${n.rank}.`);
  const s = reshape$3(t, [-1, 1]), a = reshape$3(n, [1, -1]);
  return matMul$1(s, a);
}
const outerProduct = /* @__PURE__ */ op({ outerProduct_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pad_(r, e, t = 0) {
  const n = convertToTensor(r, "x", "pad");
  if (n.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  const s = { paddings: e, constantValue: t }, a = { x: n };
  return ENGINE.runKernel(PadV2, a, s);
}
const pad = /* @__PURE__ */ op({ pad_ });
function pad1d_(r, e, t = 0) {
  return assert$1(e.length === 2, () => "Invalid number of paddings. Must be length of 2."), pad(r, [e], t);
}
const pad1d = /* @__PURE__ */ op({ pad1d_ });
function pad2d_(r, e, t = 0) {
  return assert$1(e.length === 2 && e[0].length === 2 && e[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), pad(r, e, t);
}
const pad2d = /* @__PURE__ */ op({ pad2d_ });
function pad3d_(r, e, t = 0) {
  return assert$1(e.length === 3 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), pad(r, e, t);
}
const pad3d = /* @__PURE__ */ op({ pad3d_ });
function pad4d_(r, e, t = 0) {
  return assert$1(e.length === 4 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2 && e[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), pad(r, e, t);
}
const pad4d = /* @__PURE__ */ op({ pad4d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function spaceToBatchND_(r, e, t) {
  const n = convertToTensor(r, "x", "spaceToBatchND");
  assert$1(n.rank >= 1 + e.length, () => `input rank ${n.rank} should be > than [blockShape] ${e.length}`), assert$1(t.length === e.length, () => `paddings.shape[0] ${t.length} must be equal to [blockShape] ${e.length}`), assert$1(n.shape.reduce((o, u, l) => l > 0 && l <= e.length ? o && (u + t[l - 1][0] + t[l - 1][1]) % e[l - 1] === 0 : o, !0), () => `input spatial dimensions ${n.shape.slice(1)} with paddings ${t.toString()} must be divisible by blockShapes ${e.toString()}`);
  const s = { x: n }, a = { blockShape: e, paddings: t };
  return ENGINE.runKernel(SpaceToBatchND, s, a);
}
const spaceToBatchND$2 = /* @__PURE__ */ op({ spaceToBatchND_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pool_(r, e, t, n, s, a, o) {
  s == null && (s = [1, 1]), a == null && (a = 1), n === 0 && (n = "valid");
  const u = convertToTensor(r, "x", "maxPool");
  let l = u, f = !1;
  u.rank === 3 && (f = !0, l = reshape$3(u, [1, u.shape[0], u.shape[1], u.shape[2]])), assert$1(eitherStridesOrDilationsAreOne(a, s), () => `Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);
  const c = computePool2DInfo(l.shape, e, a, s, n), h = [c.dilationHeight, c.dilationWidth];
  let d;
  n === "same" ? d = withSpaceToBatchBasePaddings([c.filterHeight, c.filterWidth], h) : d = [[0, 0], [0, 0]];
  const m = h[0] === 1 && h[1] === 1, [g, y] = requiredSpaceToBatchPaddings([c.inHeight, c.inWidth], h, d), b = m ? n : "valid", v = m ? l : spaceToBatchND$2(l, h, g), I = (t === "avg" ? () => avgPool$2(v, e, a, b, o) : () => maxPool$2(v, e, a, b, o))(), T = m ? I : batchToSpaceND$2(I, h, y);
  return f ? reshape$3(T, [T.shape[1], T.shape[2], T.shape[3]]) : T;
}
function requiredSpaceToBatchPaddings(r, e, t) {
  const n = t.map((c) => c[0]), s = t.map((c) => c[1]), a = r.concat(n, s), o = e.map((c, h) => (c - a[h] % c) % c), u = s.map((c, h) => c + o[h]), l = e.map((c, h) => [n[h], u[h]]), f = e.map((c, h) => [0, o[h]]);
  return [l, f];
}
function withSpaceToBatchBasePaddings(r, e) {
  const n = r.map((o, u) => o + (o - 1) * (e[u] - 1)).map((o) => o - 1), s = n.map((o) => Math.floor(o / 2)), a = n.map((o, u) => o - s[u]);
  return n.map((o, u) => [s[u], a[u]]);
}
const pool$1 = /* @__PURE__ */ op({ pool_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function prelu_(r, e) {
  const t = convertToTensor(r, "x", "prelu"), n = convertToTensor(e, "alpha", "prelu"), s = { x: t, alpha: n };
  return ENGINE.runKernel(Prelu, s);
}
const prelu$3 = /* @__PURE__ */ op({ prelu_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function prod_(r, e = null, t = !1) {
  let n = convertToTensor(r, "x", "prod");
  n.dtype === "bool" && (n = cast$3(n, "int32"));
  const s = { x: n }, a = { axis: e, keepDims: t };
  return ENGINE.runKernel(Prod, s, a);
}
const prod$2 = /* @__PURE__ */ op({ prod_ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function raggedGather_(r, e, t, n) {
  const s = r.map((c, h) => convertToTensor(c, `tensors${h}`, "raggedGather", "int32")), a = convertToTensor(e, "paramsDenseValues", "raggedGather"), o = convertToTensor(t, "indices", "raggedGather", "int32"), u = {
    paramsNestedSplits: s,
    paramsDenseValues: a,
    indices: o
  }, l = { outputRaggedRank: n }, f = ENGINE.runKernel(RaggedGather, u, l);
  return {
    outputNestedSplits: f.slice(0, f.length - 1),
    outputDenseValues: f[f.length - 1]
  };
}
const raggedGather$2 = /* @__PURE__ */ op({ raggedGather_ });
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function raggedRange_(r, e, t) {
  const n = convertToTensor(r, "starts", "raggedRange"), s = convertToTensor(e, "limits", "raggedRange", n.dtype), a = convertToTensor(t, "deltas", "raggedRange", n.dtype), o = {
    starts: n,
    limits: s,
    deltas: a
  }, u = ENGINE.runKernel(RaggedRange, o);
  return {
    rtNestedSplits: u[0],
    rtDenseValues: u[1]
  };
}
const raggedRange$2 = /* @__PURE__ */ op({ raggedRange_ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function raggedTensorToTensor_(r, e, t, n, s) {
  const a = convertToTensor(r, "shape", "raggedTensorToTensor", "int32"), o = convertToTensor(e, "values", "raggedTensorToTensor"), u = convertToTensor(t, "defaultValue", "raggedTensorToTensor", o.dtype), l = n.map((h, d) => convertToTensor(h, `tensors${d}`, "raggedTensorToTensor", "int32")), f = {
    shape: a,
    values: o,
    defaultValue: u,
    rowPartitionTensors: l
  }, c = { rowPartitionTypes: s };
  return ENGINE.runKernel(RaggedTensorToTensor, f, c);
}
const raggedTensorToTensor$2 = /* @__PURE__ */ op({ raggedTensorToTensor_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rand_(r, e, t) {
  assertNonNegativeIntegerDimensions(r);
  const n = sizeFromShape(r);
  let s = null;
  if (t == null || t === "float32")
    s = new Float32Array(n);
  else if (t === "int32")
    s = new Int32Array(n);
  else if (t === "bool")
    s = new Uint8Array(n);
  else
    throw new Error(`Unknown data type ${t}`);
  for (let a = 0; a < n; a++)
    s[a] = e();
  return ENGINE.makeTensor(s, r, t);
}
const rand = /* @__PURE__ */ op({ rand_ });
var alea$1 = { exports: {} }, alea = alea$1.exports, hasRequiredAlea;
function requireAlea() {
  return hasRequiredAlea || (hasRequiredAlea = 1, function(r) {
    (function(e, t, n) {
      function s(l) {
        var f = this, c = u();
        f.next = function() {
          var h = 2091639 * f.s0 + f.c * 23283064365386963e-26;
          return f.s0 = f.s1, f.s1 = f.s2, f.s2 = h - (f.c = h | 0);
        }, f.c = 1, f.s0 = c(" "), f.s1 = c(" "), f.s2 = c(" "), f.s0 -= c(l), f.s0 < 0 && (f.s0 += 1), f.s1 -= c(l), f.s1 < 0 && (f.s1 += 1), f.s2 -= c(l), f.s2 < 0 && (f.s2 += 1), c = null;
      }
      function a(l, f) {
        return f.c = l.c, f.s0 = l.s0, f.s1 = l.s1, f.s2 = l.s2, f;
      }
      function o(l, f) {
        var c = new s(l), h = f && f.state, d = c.next;
        return d.int32 = function() {
          return c.next() * 4294967296 | 0;
        }, d.double = function() {
          return d() + (d() * 2097152 | 0) * 11102230246251565e-32;
        }, d.quick = d, h && (typeof h == "object" && a(h, c), d.state = function() {
          return a(c, {});
        }), d;
      }
      function u() {
        var l = 4022871197, f = function(c) {
          c = String(c);
          for (var h = 0; h < c.length; h++) {
            l += c.charCodeAt(h);
            var d = 0.02519603282416938 * l;
            l = d >>> 0, d -= l, d *= l, l = d >>> 0, d -= l, l += d * 4294967296;
          }
          return (l >>> 0) * 23283064365386963e-26;
        };
        return f;
      }
      t && t.exports ? t.exports = o : this.alea = o;
    })(
      alea,
      r
    );
  }(alea$1)), alea$1.exports;
}
var xor128$1 = { exports: {} }, xor128 = xor128$1.exports, hasRequiredXor128;
function requireXor128() {
  return hasRequiredXor128 || (hasRequiredXor128 = 1, function(r) {
    (function(e, t, n) {
      function s(u) {
        var l = this, f = "";
        l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.next = function() {
          var h = l.x ^ l.x << 11;
          return l.x = l.y, l.y = l.z, l.z = l.w, l.w ^= l.w >>> 19 ^ h ^ h >>> 8;
        }, u === (u | 0) ? l.x = u : f += u;
        for (var c = 0; c < f.length + 64; c++)
          l.x ^= f.charCodeAt(c) | 0, l.next();
      }
      function a(u, l) {
        return l.x = u.x, l.y = u.y, l.z = u.z, l.w = u.w, l;
      }
      function o(u, l) {
        var f = new s(u), c = l && l.state, h = function() {
          return (f.next() >>> 0) / 4294967296;
        };
        return h.double = function() {
          do
            var d = f.next() >>> 11, m = (f.next() >>> 0) / 4294967296, g = (d + m) / (1 << 21);
          while (g === 0);
          return g;
        }, h.int32 = f.next, h.quick = h, c && (typeof c == "object" && a(c, f), h.state = function() {
          return a(f, {});
        }), h;
      }
      t && t.exports ? t.exports = o : this.xor128 = o;
    })(
      xor128,
      r
    );
  }(xor128$1)), xor128$1.exports;
}
var xorwow$1 = { exports: {} }, xorwow = xorwow$1.exports, hasRequiredXorwow;
function requireXorwow() {
  return hasRequiredXorwow || (hasRequiredXorwow = 1, function(r) {
    (function(e, t, n) {
      function s(u) {
        var l = this, f = "";
        l.next = function() {
          var h = l.x ^ l.x >>> 2;
          return l.x = l.y, l.y = l.z, l.z = l.w, l.w = l.v, (l.d = l.d + 362437 | 0) + (l.v = l.v ^ l.v << 4 ^ (h ^ h << 1)) | 0;
        }, l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.v = 0, u === (u | 0) ? l.x = u : f += u;
        for (var c = 0; c < f.length + 64; c++)
          l.x ^= f.charCodeAt(c) | 0, c == f.length && (l.d = l.x << 10 ^ l.x >>> 4), l.next();
      }
      function a(u, l) {
        return l.x = u.x, l.y = u.y, l.z = u.z, l.w = u.w, l.v = u.v, l.d = u.d, l;
      }
      function o(u, l) {
        var f = new s(u), c = l && l.state, h = function() {
          return (f.next() >>> 0) / 4294967296;
        };
        return h.double = function() {
          do
            var d = f.next() >>> 11, m = (f.next() >>> 0) / 4294967296, g = (d + m) / (1 << 21);
          while (g === 0);
          return g;
        }, h.int32 = f.next, h.quick = h, c && (typeof c == "object" && a(c, f), h.state = function() {
          return a(f, {});
        }), h;
      }
      t && t.exports ? t.exports = o : this.xorwow = o;
    })(
      xorwow,
      r
    );
  }(xorwow$1)), xorwow$1.exports;
}
var xorshift7$1 = { exports: {} }, xorshift7 = xorshift7$1.exports, hasRequiredXorshift7;
function requireXorshift7() {
  return hasRequiredXorshift7 || (hasRequiredXorshift7 = 1, function(r) {
    (function(e, t, n) {
      function s(u) {
        var l = this;
        l.next = function() {
          var c = l.x, h = l.i, d, m;
          return d = c[h], d ^= d >>> 7, m = d ^ d << 24, d = c[h + 1 & 7], m ^= d ^ d >>> 10, d = c[h + 3 & 7], m ^= d ^ d >>> 3, d = c[h + 4 & 7], m ^= d ^ d << 7, d = c[h + 7 & 7], d = d ^ d << 13, m ^= d ^ d << 9, c[h] = m, l.i = h + 1 & 7, m;
        };
        function f(c, h) {
          var d, m = [];
          if (h === (h | 0))
            m[0] = h;
          else
            for (h = "" + h, d = 0; d < h.length; ++d)
              m[d & 7] = m[d & 7] << 15 ^ h.charCodeAt(d) + m[d + 1 & 7] << 13;
          for (; m.length < 8; ) m.push(0);
          for (d = 0; d < 8 && m[d] === 0; ++d) ;
          for (d == 8 ? m[7] = -1 : m[d], c.x = m, c.i = 0, d = 256; d > 0; --d)
            c.next();
        }
        f(l, u);
      }
      function a(u, l) {
        return l.x = u.x.slice(), l.i = u.i, l;
      }
      function o(u, l) {
        u == null && (u = +/* @__PURE__ */ new Date());
        var f = new s(u), c = l && l.state, h = function() {
          return (f.next() >>> 0) / 4294967296;
        };
        return h.double = function() {
          do
            var d = f.next() >>> 11, m = (f.next() >>> 0) / 4294967296, g = (d + m) / (1 << 21);
          while (g === 0);
          return g;
        }, h.int32 = f.next, h.quick = h, c && (c.x && a(c, f), h.state = function() {
          return a(f, {});
        }), h;
      }
      t && t.exports ? t.exports = o : this.xorshift7 = o;
    })(
      xorshift7,
      r
    );
  }(xorshift7$1)), xorshift7$1.exports;
}
var xor4096$1 = { exports: {} }, xor4096 = xor4096$1.exports, hasRequiredXor4096;
function requireXor4096() {
  return hasRequiredXor4096 || (hasRequiredXor4096 = 1, function(r) {
    (function(e, t, n) {
      function s(u) {
        var l = this;
        l.next = function() {
          var c = l.w, h = l.X, d = l.i, m, g;
          return l.w = c = c + 1640531527 | 0, g = h[d + 34 & 127], m = h[d = d + 1 & 127], g ^= g << 13, m ^= m << 17, g ^= g >>> 15, m ^= m >>> 12, g = h[d] = g ^ m, l.i = d, g + (c ^ c >>> 16) | 0;
        };
        function f(c, h) {
          var d, m, g, y, b, v = [], w = 128;
          for (h === (h | 0) ? (m = h, h = null) : (h = h + "\0", m = 0, w = Math.max(w, h.length)), g = 0, y = -32; y < w; ++y)
            h && (m ^= h.charCodeAt((y + 32) % h.length)), y === 0 && (b = m), m ^= m << 10, m ^= m >>> 15, m ^= m << 4, m ^= m >>> 13, y >= 0 && (b = b + 1640531527 | 0, d = v[y & 127] ^= m + b, g = d == 0 ? g + 1 : 0);
          for (g >= 128 && (v[(h && h.length || 0) & 127] = -1), g = 127, y = 4 * 128; y > 0; --y)
            m = v[g + 34 & 127], d = v[g = g + 1 & 127], m ^= m << 13, d ^= d << 17, m ^= m >>> 15, d ^= d >>> 12, v[g] = m ^ d;
          c.w = b, c.X = v, c.i = g;
        }
        f(l, u);
      }
      function a(u, l) {
        return l.i = u.i, l.w = u.w, l.X = u.X.slice(), l;
      }
      function o(u, l) {
        u == null && (u = +/* @__PURE__ */ new Date());
        var f = new s(u), c = l && l.state, h = function() {
          return (f.next() >>> 0) / 4294967296;
        };
        return h.double = function() {
          do
            var d = f.next() >>> 11, m = (f.next() >>> 0) / 4294967296, g = (d + m) / (1 << 21);
          while (g === 0);
          return g;
        }, h.int32 = f.next, h.quick = h, c && (c.X && a(c, f), h.state = function() {
          return a(f, {});
        }), h;
      }
      t && t.exports ? t.exports = o : this.xor4096 = o;
    })(
      xor4096,
      // window object or global
      r
    );
  }(xor4096$1)), xor4096$1.exports;
}
var tychei$1 = { exports: {} }, tychei = tychei$1.exports, hasRequiredTychei;
function requireTychei() {
  return hasRequiredTychei || (hasRequiredTychei = 1, function(r) {
    (function(e, t, n) {
      function s(u) {
        var l = this, f = "";
        l.next = function() {
          var h = l.b, d = l.c, m = l.d, g = l.a;
          return h = h << 25 ^ h >>> 7 ^ d, d = d - m | 0, m = m << 24 ^ m >>> 8 ^ g, g = g - h | 0, l.b = h = h << 20 ^ h >>> 12 ^ d, l.c = d = d - m | 0, l.d = m << 16 ^ d >>> 16 ^ g, l.a = g - h | 0;
        }, l.a = 0, l.b = 0, l.c = -1640531527, l.d = 1367130551, u === Math.floor(u) ? (l.a = u / 4294967296 | 0, l.b = u | 0) : f += u;
        for (var c = 0; c < f.length + 20; c++)
          l.b ^= f.charCodeAt(c) | 0, l.next();
      }
      function a(u, l) {
        return l.a = u.a, l.b = u.b, l.c = u.c, l.d = u.d, l;
      }
      function o(u, l) {
        var f = new s(u), c = l && l.state, h = function() {
          return (f.next() >>> 0) / 4294967296;
        };
        return h.double = function() {
          do
            var d = f.next() >>> 11, m = (f.next() >>> 0) / 4294967296, g = (d + m) / (1 << 21);
          while (g === 0);
          return g;
        }, h.int32 = f.next, h.quick = h, c && (typeof c == "object" && a(c, f), h.state = function() {
          return a(f, {});
        }), h;
      }
      t && t.exports ? t.exports = o : this.tychei = o;
    })(
      tychei,
      r
    );
  }(tychei$1)), tychei$1.exports;
}
var seedrandom$2 = { exports: {} }, cryptoBrowserify = {}, browser$c = { exports: {} }, safeBuffer$1 = { exports: {} }, dist = {}, hasRequiredDist;
function requireDist() {
  return hasRequiredDist || (hasRequiredDist = 1, function(r) {
    Object.defineProperties(r, { __esModule: { value: !0 }, [Symbol.toStringTag]: { value: "Module" } });
    var e = {}, t = {};
    t.byteLength = c, t.toByteArray = d, t.fromByteArray = y;
    for (var n = [], s = [], a = typeof Uint8Array < "u" ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", u = 0, l = o.length; u < l; ++u)
      n[u] = o[u], s[o.charCodeAt(u)] = u;
    s[45] = 62, s[95] = 63;
    function f(w) {
      var I = w.length;
      if (I % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var T = w.indexOf("=");
      T === -1 && (T = I);
      var _ = T === I ? 0 : 4 - T % 4;
      return [T, _];
    }
    function c(w) {
      var I = f(w), T = I[0], _ = I[1];
      return (T + _) * 3 / 4 - _;
    }
    function h(w, I, T) {
      return (I + T) * 3 / 4 - T;
    }
    function d(w) {
      var I, T = f(w), _ = T[0], F = T[1], O = new a(h(w, _, F)), q = 0, V = F > 0 ? _ - 4 : _, H;
      for (H = 0; H < V; H += 4)
        I = s[w.charCodeAt(H)] << 18 | s[w.charCodeAt(H + 1)] << 12 | s[w.charCodeAt(H + 2)] << 6 | s[w.charCodeAt(H + 3)], O[q++] = I >> 16 & 255, O[q++] = I >> 8 & 255, O[q++] = I & 255;
      return F === 2 && (I = s[w.charCodeAt(H)] << 2 | s[w.charCodeAt(H + 1)] >> 4, O[q++] = I & 255), F === 1 && (I = s[w.charCodeAt(H)] << 10 | s[w.charCodeAt(H + 1)] << 4 | s[w.charCodeAt(H + 2)] >> 2, O[q++] = I >> 8 & 255, O[q++] = I & 255), O;
    }
    function m(w) {
      return n[w >> 18 & 63] + n[w >> 12 & 63] + n[w >> 6 & 63] + n[w & 63];
    }
    function g(w, I, T) {
      for (var _, F = [], O = I; O < T; O += 3)
        _ = (w[O] << 16 & 16711680) + (w[O + 1] << 8 & 65280) + (w[O + 2] & 255), F.push(m(_));
      return F.join("");
    }
    function y(w) {
      for (var I, T = w.length, _ = T % 3, F = [], O = 16383, q = 0, V = T - _; q < V; q += O)
        F.push(g(w, q, q + O > V ? V : q + O));
      return _ === 1 ? (I = w[T - 1], F.push(
        n[I >> 2] + n[I << 4 & 63] + "=="
      )) : _ === 2 && (I = (w[T - 2] << 8) + w[T - 1], F.push(
        n[I >> 10] + n[I >> 4 & 63] + n[I << 2 & 63] + "="
      )), F.join("");
    }
    var b = {};
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    b.read = function(w, I, T, _, F) {
      var O, q, V = F * 8 - _ - 1, H = (1 << V) - 1, R = H >> 1, $ = -7, S = T ? F - 1 : 0, x = T ? -1 : 1, C = w[I + S];
      for (S += x, O = C & (1 << -$) - 1, C >>= -$, $ += V; $ > 0; O = O * 256 + w[I + S], S += x, $ -= 8)
        ;
      for (q = O & (1 << -$) - 1, O >>= -$, $ += _; $ > 0; q = q * 256 + w[I + S], S += x, $ -= 8)
        ;
      if (O === 0)
        O = 1 - R;
      else {
        if (O === H)
          return q ? NaN : (C ? -1 : 1) * (1 / 0);
        q = q + Math.pow(2, _), O = O - R;
      }
      return (C ? -1 : 1) * q * Math.pow(2, O - _);
    }, b.write = function(w, I, T, _, F, O) {
      var q, V, H, R = O * 8 - F - 1, $ = (1 << R) - 1, S = $ >> 1, x = F === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, C = _ ? 0 : O - 1, A = _ ? 1 : -1, N = I < 0 || I === 0 && 1 / I < 0 ? 1 : 0;
      for (I = Math.abs(I), isNaN(I) || I === 1 / 0 ? (V = isNaN(I) ? 1 : 0, q = $) : (q = Math.floor(Math.log(I) / Math.LN2), I * (H = Math.pow(2, -q)) < 1 && (q--, H *= 2), q + S >= 1 ? I += x / H : I += x * Math.pow(2, 1 - S), I * H >= 2 && (q++, H /= 2), q + S >= $ ? (V = 0, q = $) : q + S >= 1 ? (V = (I * H - 1) * Math.pow(2, F), q = q + S) : (V = I * Math.pow(2, S - 1) * Math.pow(2, F), q = 0)); F >= 8; w[T + C] = V & 255, C += A, V /= 256, F -= 8)
        ;
      for (q = q << F | V, R += F; R > 0; w[T + C] = q & 255, C += A, q /= 256, R -= 8)
        ;
      w[T + C - A] |= N * 128;
    };
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    (function(w) {
      const I = t, T = b, _ = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
      w.Buffer = $, w.SlowBuffer = z, w.INSPECT_MAX_BYTES = 50;
      const F = 2147483647;
      w.kMaxLength = F;
      const { Uint8Array: O, ArrayBuffer: q, SharedArrayBuffer: V } = globalThis;
      $.TYPED_ARRAY_SUPPORT = H(), !$.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
      function H() {
        try {
          const Z = new O(1), L = { foo: function() {
            return 42;
          } };
          return Object.setPrototypeOf(L, O.prototype), Object.setPrototypeOf(Z, L), Z.foo() === 42;
        } catch {
          return !1;
        }
      }
      Object.defineProperty($.prototype, "parent", {
        enumerable: !0,
        get: function() {
          if ($.isBuffer(this))
            return this.buffer;
        }
      }), Object.defineProperty($.prototype, "offset", {
        enumerable: !0,
        get: function() {
          if ($.isBuffer(this))
            return this.byteOffset;
        }
      });
      function R(Z) {
        if (Z > F)
          throw new RangeError('The value "' + Z + '" is invalid for option "size"');
        const L = new O(Z);
        return Object.setPrototypeOf(L, $.prototype), L;
      }
      function $(Z, L, G) {
        if (typeof Z == "number") {
          if (typeof L == "string")
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          return A(Z);
        }
        return S(Z, L, G);
      }
      $.poolSize = 8192;
      function S(Z, L, G) {
        if (typeof Z == "string")
          return N(Z, L);
        if (q.isView(Z))
          return D(Z);
        if (Z == null)
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof Z
          );
        if (Ve(Z, q) || Z && Ve(Z.buffer, q) || typeof V < "u" && (Ve(Z, V) || Z && Ve(Z.buffer, V)))
          return E(Z, L, G);
        if (typeof Z == "number")
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        const ne = Z.valueOf && Z.valueOf();
        if (ne != null && ne !== Z)
          return $.from(ne, L, G);
        const oe = M(Z);
        if (oe) return oe;
        if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof Z[Symbol.toPrimitive] == "function")
          return $.from(Z[Symbol.toPrimitive]("string"), L, G);
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof Z
        );
      }
      $.from = function(Z, L, G) {
        return S(Z, L, G);
      }, Object.setPrototypeOf($.prototype, O.prototype), Object.setPrototypeOf($, O);
      function x(Z) {
        if (typeof Z != "number")
          throw new TypeError('"size" argument must be of type number');
        if (Z < 0)
          throw new RangeError('The value "' + Z + '" is invalid for option "size"');
      }
      function C(Z, L, G) {
        return x(Z), Z <= 0 ? R(Z) : L !== void 0 ? typeof G == "string" ? R(Z).fill(L, G) : R(Z).fill(L) : R(Z);
      }
      $.alloc = function(Z, L, G) {
        return C(Z, L, G);
      };
      function A(Z) {
        return x(Z), R(Z < 0 ? 0 : P(Z) | 0);
      }
      $.allocUnsafe = function(Z) {
        return A(Z);
      }, $.allocUnsafeSlow = function(Z) {
        return A(Z);
      };
      function N(Z, L) {
        if ((typeof L != "string" || L === "") && (L = "utf8"), !$.isEncoding(L))
          throw new TypeError("Unknown encoding: " + L);
        const G = J(Z, L) | 0;
        let ne = R(G);
        const oe = ne.write(Z, L);
        return oe !== G && (ne = ne.slice(0, oe)), ne;
      }
      function k(Z) {
        const L = Z.length < 0 ? 0 : P(Z.length) | 0, G = R(L);
        for (let ne = 0; ne < L; ne += 1)
          G[ne] = Z[ne] & 255;
        return G;
      }
      function D(Z) {
        if (Ve(Z, O)) {
          const L = new O(Z);
          return E(L.buffer, L.byteOffset, L.byteLength);
        }
        return k(Z);
      }
      function E(Z, L, G) {
        if (L < 0 || Z.byteLength < L)
          throw new RangeError('"offset" is outside of buffer bounds');
        if (Z.byteLength < L + (G || 0))
          throw new RangeError('"length" is outside of buffer bounds');
        let ne;
        return L === void 0 && G === void 0 ? ne = new O(Z) : G === void 0 ? ne = new O(Z, L) : ne = new O(Z, L, G), Object.setPrototypeOf(ne, $.prototype), ne;
      }
      function M(Z) {
        if ($.isBuffer(Z)) {
          const L = P(Z.length) | 0, G = R(L);
          return G.length === 0 || Z.copy(G, 0, 0, L), G;
        }
        if (Z.length !== void 0)
          return typeof Z.length != "number" || Ue(Z.length) ? R(0) : k(Z);
        if (Z.type === "Buffer" && Array.isArray(Z.data))
          return k(Z.data);
      }
      function P(Z) {
        if (Z >= F)
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + F.toString(16) + " bytes");
        return Z | 0;
      }
      function z(Z) {
        return +Z != Z && (Z = 0), $.alloc(+Z);
      }
      $.isBuffer = function(L) {
        return L != null && L._isBuffer === !0 && L !== $.prototype;
      }, $.compare = function(L, G) {
        if (Ve(L, O) && (L = $.from(L, L.offset, L.byteLength)), Ve(G, O) && (G = $.from(G, G.offset, G.byteLength)), !$.isBuffer(L) || !$.isBuffer(G))
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        if (L === G) return 0;
        let ne = L.length, oe = G.length;
        for (let le = 0, he = Math.min(ne, oe); le < he; ++le)
          if (L[le] !== G[le]) {
            ne = L[le], oe = G[le];
            break;
          }
        return ne < oe ? -1 : oe < ne ? 1 : 0;
      }, $.isEncoding = function(L) {
        switch (String(L).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return !0;
          default:
            return !1;
        }
      }, $.concat = function(L, G) {
        if (!Array.isArray(L))
          throw new TypeError('"list" argument must be an Array of Buffers');
        if (L.length === 0)
          return $.alloc(0);
        let ne;
        if (G === void 0)
          for (G = 0, ne = 0; ne < L.length; ++ne)
            G += L[ne].length;
        const oe = $.allocUnsafe(G);
        let le = 0;
        for (ne = 0; ne < L.length; ++ne) {
          let he = L[ne];
          if (Ve(he, O))
            le + he.length > oe.length ? ($.isBuffer(he) || (he = $.from(he)), he.copy(oe, le)) : O.prototype.set.call(
              oe,
              he,
              le
            );
          else if ($.isBuffer(he))
            he.copy(oe, le);
          else
            throw new TypeError('"list" argument must be an Array of Buffers');
          le += he.length;
        }
        return oe;
      };
      function J(Z, L) {
        if ($.isBuffer(Z))
          return Z.length;
        if (q.isView(Z) || Ve(Z, q))
          return Z.byteLength;
        if (typeof Z != "string")
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof Z
          );
        const G = Z.length, ne = arguments.length > 2 && arguments[2] === !0;
        if (!ne && G === 0) return 0;
        let oe = !1;
        for (; ; )
          switch (L) {
            case "ascii":
            case "latin1":
            case "binary":
              return G;
            case "utf8":
            case "utf-8":
              return Re(Z).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return G * 2;
            case "hex":
              return G >>> 1;
            case "base64":
              return Ae(Z).length;
            default:
              if (oe)
                return ne ? -1 : Re(Z).length;
              L = ("" + L).toLowerCase(), oe = !0;
          }
      }
      $.byteLength = J;
      function re(Z, L, G) {
        let ne = !1;
        if ((L === void 0 || L < 0) && (L = 0), L > this.length || ((G === void 0 || G > this.length) && (G = this.length), G <= 0) || (G >>>= 0, L >>>= 0, G <= L))
          return "";
        for (Z || (Z = "utf8"); ; )
          switch (Z) {
            case "hex":
              return $e(this, L, G);
            case "utf8":
            case "utf-8":
              return me(this, L, G);
            case "ascii":
              return ye(this, L, G);
            case "latin1":
            case "binary":
              return ce(this, L, G);
            case "base64":
              return de(this, L, G);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return be(this, L, G);
            default:
              if (ne) throw new TypeError("Unknown encoding: " + Z);
              Z = (Z + "").toLowerCase(), ne = !0;
          }
      }
      $.prototype._isBuffer = !0;
      function Q(Z, L, G) {
        const ne = Z[L];
        Z[L] = Z[G], Z[G] = ne;
      }
      $.prototype.swap16 = function() {
        const L = this.length;
        if (L % 2 !== 0)
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        for (let G = 0; G < L; G += 2)
          Q(this, G, G + 1);
        return this;
      }, $.prototype.swap32 = function() {
        const L = this.length;
        if (L % 4 !== 0)
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        for (let G = 0; G < L; G += 4)
          Q(this, G, G + 3), Q(this, G + 1, G + 2);
        return this;
      }, $.prototype.swap64 = function() {
        const L = this.length;
        if (L % 8 !== 0)
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        for (let G = 0; G < L; G += 8)
          Q(this, G, G + 7), Q(this, G + 1, G + 6), Q(this, G + 2, G + 5), Q(this, G + 3, G + 4);
        return this;
      }, $.prototype.toString = function() {
        const L = this.length;
        return L === 0 ? "" : arguments.length === 0 ? me(this, 0, L) : re.apply(this, arguments);
      }, $.prototype.toLocaleString = $.prototype.toString, $.prototype.equals = function(L) {
        if (!$.isBuffer(L)) throw new TypeError("Argument must be a Buffer");
        return this === L ? !0 : $.compare(this, L) === 0;
      }, $.prototype.inspect = function() {
        let L = "";
        const G = w.INSPECT_MAX_BYTES;
        return L = this.toString("hex", 0, G).replace(/(.{2})/g, "$1 ").trim(), this.length > G && (L += " ... "), "<Buffer " + L + ">";
      }, _ && ($.prototype[_] = $.prototype.inspect), $.prototype.compare = function(L, G, ne, oe, le) {
        if (Ve(L, O) && (L = $.from(L, L.offset, L.byteLength)), !$.isBuffer(L))
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof L
          );
        if (G === void 0 && (G = 0), ne === void 0 && (ne = L ? L.length : 0), oe === void 0 && (oe = 0), le === void 0 && (le = this.length), G < 0 || ne > L.length || oe < 0 || le > this.length)
          throw new RangeError("out of range index");
        if (oe >= le && G >= ne)
          return 0;
        if (oe >= le)
          return -1;
        if (G >= ne)
          return 1;
        if (G >>>= 0, ne >>>= 0, oe >>>= 0, le >>>= 0, this === L) return 0;
        let he = le - oe, Ne = ne - G;
        const Me = Math.min(he, Ne), Te = this.slice(oe, le), Oe = L.slice(G, ne);
        for (let ke = 0; ke < Me; ++ke)
          if (Te[ke] !== Oe[ke]) {
            he = Te[ke], Ne = Oe[ke];
            break;
          }
        return he < Ne ? -1 : Ne < he ? 1 : 0;
      };
      function W(Z, L, G, ne, oe) {
        if (Z.length === 0) return -1;
        if (typeof G == "string" ? (ne = G, G = 0) : G > 2147483647 ? G = 2147483647 : G < -2147483648 && (G = -2147483648), G = +G, Ue(G) && (G = oe ? 0 : Z.length - 1), G < 0 && (G = Z.length + G), G >= Z.length) {
          if (oe) return -1;
          G = Z.length - 1;
        } else if (G < 0)
          if (oe) G = 0;
          else return -1;
        if (typeof L == "string" && (L = $.from(L, ne)), $.isBuffer(L))
          return L.length === 0 ? -1 : j(Z, L, G, ne, oe);
        if (typeof L == "number")
          return L = L & 255, typeof O.prototype.indexOf == "function" ? oe ? O.prototype.indexOf.call(Z, L, G) : O.prototype.lastIndexOf.call(Z, L, G) : j(Z, [L], G, ne, oe);
        throw new TypeError("val must be string, number or Buffer");
      }
      function j(Z, L, G, ne, oe) {
        let le = 1, he = Z.length, Ne = L.length;
        if (ne !== void 0 && (ne = String(ne).toLowerCase(), ne === "ucs2" || ne === "ucs-2" || ne === "utf16le" || ne === "utf-16le")) {
          if (Z.length < 2 || L.length < 2)
            return -1;
          le = 2, he /= 2, Ne /= 2, G /= 2;
        }
        function Me(Oe, ke) {
          return le === 1 ? Oe[ke] : Oe.readUInt16BE(ke * le);
        }
        let Te;
        if (oe) {
          let Oe = -1;
          for (Te = G; Te < he; Te++)
            if (Me(Z, Te) === Me(L, Oe === -1 ? 0 : Te - Oe)) {
              if (Oe === -1 && (Oe = Te), Te - Oe + 1 === Ne) return Oe * le;
            } else
              Oe !== -1 && (Te -= Te - Oe), Oe = -1;
        } else
          for (G + Ne > he && (G = he - Ne), Te = G; Te >= 0; Te--) {
            let Oe = !0;
            for (let ke = 0; ke < Ne; ke++)
              if (Me(Z, Te + ke) !== Me(L, ke)) {
                Oe = !1;
                break;
              }
            if (Oe) return Te;
          }
        return -1;
      }
      $.prototype.includes = function(L, G, ne) {
        return this.indexOf(L, G, ne) !== -1;
      }, $.prototype.indexOf = function(L, G, ne) {
        return W(this, L, G, ne, !0);
      }, $.prototype.lastIndexOf = function(L, G, ne) {
        return W(this, L, G, ne, !1);
      };
      function te(Z, L, G, ne) {
        G = Number(G) || 0;
        const oe = Z.length - G;
        ne ? (ne = Number(ne), ne > oe && (ne = oe)) : ne = oe;
        const le = L.length;
        ne > le / 2 && (ne = le / 2);
        let he;
        for (he = 0; he < ne; ++he) {
          const Ne = parseInt(L.substr(he * 2, 2), 16);
          if (Ue(Ne)) return he;
          Z[G + he] = Ne;
        }
        return he;
      }
      function se(Z, L, G, ne) {
        return Fe(Re(L, Z.length - G), Z, G, ne);
      }
      function X(Z, L, G, ne) {
        return Fe(Se(L), Z, G, ne);
      }
      function K(Z, L, G, ne) {
        return Fe(Ae(L), Z, G, ne);
      }
      function ae(Z, L, G, ne) {
        return Fe(Pe(L, Z.length - G), Z, G, ne);
      }
      $.prototype.write = function(L, G, ne, oe) {
        if (G === void 0)
          oe = "utf8", ne = this.length, G = 0;
        else if (ne === void 0 && typeof G == "string")
          oe = G, ne = this.length, G = 0;
        else if (isFinite(G))
          G = G >>> 0, isFinite(ne) ? (ne = ne >>> 0, oe === void 0 && (oe = "utf8")) : (oe = ne, ne = void 0);
        else
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        const le = this.length - G;
        if ((ne === void 0 || ne > le) && (ne = le), L.length > 0 && (ne < 0 || G < 0) || G > this.length)
          throw new RangeError("Attempt to write outside buffer bounds");
        oe || (oe = "utf8");
        let he = !1;
        for (; ; )
          switch (oe) {
            case "hex":
              return te(this, L, G, ne);
            case "utf8":
            case "utf-8":
              return se(this, L, G, ne);
            case "ascii":
            case "latin1":
            case "binary":
              return X(this, L, G, ne);
            case "base64":
              return K(this, L, G, ne);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ae(this, L, G, ne);
            default:
              if (he) throw new TypeError("Unknown encoding: " + oe);
              oe = ("" + oe).toLowerCase(), he = !0;
          }
      }, $.prototype.toJSON = function() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function de(Z, L, G) {
        return L === 0 && G === Z.length ? I.fromByteArray(Z) : I.fromByteArray(Z.slice(L, G));
      }
      function me(Z, L, G) {
        G = Math.min(Z.length, G);
        const ne = [];
        let oe = L;
        for (; oe < G; ) {
          const le = Z[oe];
          let he = null, Ne = le > 239 ? 4 : le > 223 ? 3 : le > 191 ? 2 : 1;
          if (oe + Ne <= G) {
            let Me, Te, Oe, ke;
            switch (Ne) {
              case 1:
                le < 128 && (he = le);
                break;
              case 2:
                Me = Z[oe + 1], (Me & 192) === 128 && (ke = (le & 31) << 6 | Me & 63, ke > 127 && (he = ke));
                break;
              case 3:
                Me = Z[oe + 1], Te = Z[oe + 2], (Me & 192) === 128 && (Te & 192) === 128 && (ke = (le & 15) << 12 | (Me & 63) << 6 | Te & 63, ke > 2047 && (ke < 55296 || ke > 57343) && (he = ke));
                break;
              case 4:
                Me = Z[oe + 1], Te = Z[oe + 2], Oe = Z[oe + 3], (Me & 192) === 128 && (Te & 192) === 128 && (Oe & 192) === 128 && (ke = (le & 15) << 18 | (Me & 63) << 12 | (Te & 63) << 6 | Oe & 63, ke > 65535 && ke < 1114112 && (he = ke));
            }
          }
          he === null ? (he = 65533, Ne = 1) : he > 65535 && (he -= 65536, ne.push(he >>> 10 & 1023 | 55296), he = 56320 | he & 1023), ne.push(he), oe += Ne;
        }
        return ge(ne);
      }
      const pe = 4096;
      function ge(Z) {
        const L = Z.length;
        if (L <= pe)
          return String.fromCharCode.apply(String, Z);
        let G = "", ne = 0;
        for (; ne < L; )
          G += String.fromCharCode.apply(
            String,
            Z.slice(ne, ne += pe)
          );
        return G;
      }
      function ye(Z, L, G) {
        let ne = "";
        G = Math.min(Z.length, G);
        for (let oe = L; oe < G; ++oe)
          ne += String.fromCharCode(Z[oe] & 127);
        return ne;
      }
      function ce(Z, L, G) {
        let ne = "";
        G = Math.min(Z.length, G);
        for (let oe = L; oe < G; ++oe)
          ne += String.fromCharCode(Z[oe]);
        return ne;
      }
      function $e(Z, L, G) {
        const ne = Z.length;
        (!L || L < 0) && (L = 0), (!G || G < 0 || G > ne) && (G = ne);
        let oe = "";
        for (let le = L; le < G; ++le)
          oe += Be[Z[le]];
        return oe;
      }
      function be(Z, L, G) {
        const ne = Z.slice(L, G);
        let oe = "";
        for (let le = 0; le < ne.length - 1; le += 2)
          oe += String.fromCharCode(ne[le] + ne[le + 1] * 256);
        return oe;
      }
      $.prototype.slice = function(L, G) {
        const ne = this.length;
        L = ~~L, G = G === void 0 ? ne : ~~G, L < 0 ? (L += ne, L < 0 && (L = 0)) : L > ne && (L = ne), G < 0 ? (G += ne, G < 0 && (G = 0)) : G > ne && (G = ne), G < L && (G = L);
        const oe = this.subarray(L, G);
        return Object.setPrototypeOf(oe, $.prototype), oe;
      };
      function xe(Z, L, G) {
        if (Z % 1 !== 0 || Z < 0) throw new RangeError("offset is not uint");
        if (Z + L > G) throw new RangeError("Trying to access beyond buffer length");
      }
      $.prototype.readUintLE = $.prototype.readUIntLE = function(L, G, ne) {
        L = L >>> 0, G = G >>> 0, ne || xe(L, G, this.length);
        let oe = this[L], le = 1, he = 0;
        for (; ++he < G && (le *= 256); )
          oe += this[L + he] * le;
        return oe;
      }, $.prototype.readUintBE = $.prototype.readUIntBE = function(L, G, ne) {
        L = L >>> 0, G = G >>> 0, ne || xe(L, G, this.length);
        let oe = this[L + --G], le = 1;
        for (; G > 0 && (le *= 256); )
          oe += this[L + --G] * le;
        return oe;
      }, $.prototype.readUint8 = $.prototype.readUInt8 = function(L, G) {
        return L = L >>> 0, G || xe(L, 1, this.length), this[L];
      }, $.prototype.readUint16LE = $.prototype.readUInt16LE = function(L, G) {
        return L = L >>> 0, G || xe(L, 2, this.length), this[L] | this[L + 1] << 8;
      }, $.prototype.readUint16BE = $.prototype.readUInt16BE = function(L, G) {
        return L = L >>> 0, G || xe(L, 2, this.length), this[L] << 8 | this[L + 1];
      }, $.prototype.readUint32LE = $.prototype.readUInt32LE = function(L, G) {
        return L = L >>> 0, G || xe(L, 4, this.length), (this[L] | this[L + 1] << 8 | this[L + 2] << 16) + this[L + 3] * 16777216;
      }, $.prototype.readUint32BE = $.prototype.readUInt32BE = function(L, G) {
        return L = L >>> 0, G || xe(L, 4, this.length), this[L] * 16777216 + (this[L + 1] << 16 | this[L + 2] << 8 | this[L + 3]);
      }, $.prototype.readBigUInt64LE = qe(function(L) {
        L = L >>> 0, ie(L, "offset");
        const G = this[L], ne = this[L + 7];
        (G === void 0 || ne === void 0) && ue(L, this.length - 8);
        const oe = G + this[++L] * 2 ** 8 + this[++L] * 2 ** 16 + this[++L] * 2 ** 24, le = this[++L] + this[++L] * 2 ** 8 + this[++L] * 2 ** 16 + ne * 2 ** 24;
        return BigInt(oe) + (BigInt(le) << BigInt(32));
      }), $.prototype.readBigUInt64BE = qe(function(L) {
        L = L >>> 0, ie(L, "offset");
        const G = this[L], ne = this[L + 7];
        (G === void 0 || ne === void 0) && ue(L, this.length - 8);
        const oe = G * 2 ** 24 + this[++L] * 2 ** 16 + this[++L] * 2 ** 8 + this[++L], le = this[++L] * 2 ** 24 + this[++L] * 2 ** 16 + this[++L] * 2 ** 8 + ne;
        return (BigInt(oe) << BigInt(32)) + BigInt(le);
      }), $.prototype.readIntLE = function(L, G, ne) {
        L = L >>> 0, G = G >>> 0, ne || xe(L, G, this.length);
        let oe = this[L], le = 1, he = 0;
        for (; ++he < G && (le *= 256); )
          oe += this[L + he] * le;
        return le *= 128, oe >= le && (oe -= Math.pow(2, 8 * G)), oe;
      }, $.prototype.readIntBE = function(L, G, ne) {
        L = L >>> 0, G = G >>> 0, ne || xe(L, G, this.length);
        let oe = G, le = 1, he = this[L + --oe];
        for (; oe > 0 && (le *= 256); )
          he += this[L + --oe] * le;
        return le *= 128, he >= le && (he -= Math.pow(2, 8 * G)), he;
      }, $.prototype.readInt8 = function(L, G) {
        return L = L >>> 0, G || xe(L, 1, this.length), this[L] & 128 ? (255 - this[L] + 1) * -1 : this[L];
      }, $.prototype.readInt16LE = function(L, G) {
        L = L >>> 0, G || xe(L, 2, this.length);
        const ne = this[L] | this[L + 1] << 8;
        return ne & 32768 ? ne | 4294901760 : ne;
      }, $.prototype.readInt16BE = function(L, G) {
        L = L >>> 0, G || xe(L, 2, this.length);
        const ne = this[L + 1] | this[L] << 8;
        return ne & 32768 ? ne | 4294901760 : ne;
      }, $.prototype.readInt32LE = function(L, G) {
        return L = L >>> 0, G || xe(L, 4, this.length), this[L] | this[L + 1] << 8 | this[L + 2] << 16 | this[L + 3] << 24;
      }, $.prototype.readInt32BE = function(L, G) {
        return L = L >>> 0, G || xe(L, 4, this.length), this[L] << 24 | this[L + 1] << 16 | this[L + 2] << 8 | this[L + 3];
      }, $.prototype.readBigInt64LE = qe(function(L) {
        L = L >>> 0, ie(L, "offset");
        const G = this[L], ne = this[L + 7];
        (G === void 0 || ne === void 0) && ue(L, this.length - 8);
        const oe = this[L + 4] + this[L + 5] * 2 ** 8 + this[L + 6] * 2 ** 16 + (ne << 24);
        return (BigInt(oe) << BigInt(32)) + BigInt(G + this[++L] * 2 ** 8 + this[++L] * 2 ** 16 + this[++L] * 2 ** 24);
      }), $.prototype.readBigInt64BE = qe(function(L) {
        L = L >>> 0, ie(L, "offset");
        const G = this[L], ne = this[L + 7];
        (G === void 0 || ne === void 0) && ue(L, this.length - 8);
        const oe = (G << 24) + // Overflow
        this[++L] * 2 ** 16 + this[++L] * 2 ** 8 + this[++L];
        return (BigInt(oe) << BigInt(32)) + BigInt(this[++L] * 2 ** 24 + this[++L] * 2 ** 16 + this[++L] * 2 ** 8 + ne);
      }), $.prototype.readFloatLE = function(L, G) {
        return L = L >>> 0, G || xe(L, 4, this.length), T.read(this, L, !0, 23, 4);
      }, $.prototype.readFloatBE = function(L, G) {
        return L = L >>> 0, G || xe(L, 4, this.length), T.read(this, L, !1, 23, 4);
      }, $.prototype.readDoubleLE = function(L, G) {
        return L = L >>> 0, G || xe(L, 8, this.length), T.read(this, L, !0, 52, 8);
      }, $.prototype.readDoubleBE = function(L, G) {
        return L = L >>> 0, G || xe(L, 8, this.length), T.read(this, L, !1, 52, 8);
      };
      function we(Z, L, G, ne, oe, le) {
        if (!$.isBuffer(Z)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (L > oe || L < le) throw new RangeError('"value" argument is out of bounds');
        if (G + ne > Z.length) throw new RangeError("Index out of range");
      }
      $.prototype.writeUintLE = $.prototype.writeUIntLE = function(L, G, ne, oe) {
        if (L = +L, G = G >>> 0, ne = ne >>> 0, !oe) {
          const Ne = Math.pow(2, 8 * ne) - 1;
          we(this, L, G, ne, Ne, 0);
        }
        let le = 1, he = 0;
        for (this[G] = L & 255; ++he < ne && (le *= 256); )
          this[G + he] = L / le & 255;
        return G + ne;
      }, $.prototype.writeUintBE = $.prototype.writeUIntBE = function(L, G, ne, oe) {
        if (L = +L, G = G >>> 0, ne = ne >>> 0, !oe) {
          const Ne = Math.pow(2, 8 * ne) - 1;
          we(this, L, G, ne, Ne, 0);
        }
        let le = ne - 1, he = 1;
        for (this[G + le] = L & 255; --le >= 0 && (he *= 256); )
          this[G + le] = L / he & 255;
        return G + ne;
      }, $.prototype.writeUint8 = $.prototype.writeUInt8 = function(L, G, ne) {
        return L = +L, G = G >>> 0, ne || we(this, L, G, 1, 255, 0), this[G] = L & 255, G + 1;
      }, $.prototype.writeUint16LE = $.prototype.writeUInt16LE = function(L, G, ne) {
        return L = +L, G = G >>> 0, ne || we(this, L, G, 2, 65535, 0), this[G] = L & 255, this[G + 1] = L >>> 8, G + 2;
      }, $.prototype.writeUint16BE = $.prototype.writeUInt16BE = function(L, G, ne) {
        return L = +L, G = G >>> 0, ne || we(this, L, G, 2, 65535, 0), this[G] = L >>> 8, this[G + 1] = L & 255, G + 2;
      }, $.prototype.writeUint32LE = $.prototype.writeUInt32LE = function(L, G, ne) {
        return L = +L, G = G >>> 0, ne || we(this, L, G, 4, 4294967295, 0), this[G + 3] = L >>> 24, this[G + 2] = L >>> 16, this[G + 1] = L >>> 8, this[G] = L & 255, G + 4;
      }, $.prototype.writeUint32BE = $.prototype.writeUInt32BE = function(L, G, ne) {
        return L = +L, G = G >>> 0, ne || we(this, L, G, 4, 4294967295, 0), this[G] = L >>> 24, this[G + 1] = L >>> 16, this[G + 2] = L >>> 8, this[G + 3] = L & 255, G + 4;
      };
      function ve(Z, L, G, ne, oe) {
        ee(L, ne, oe, Z, G, 7);
        let le = Number(L & BigInt(4294967295));
        Z[G++] = le, le = le >> 8, Z[G++] = le, le = le >> 8, Z[G++] = le, le = le >> 8, Z[G++] = le;
        let he = Number(L >> BigInt(32) & BigInt(4294967295));
        return Z[G++] = he, he = he >> 8, Z[G++] = he, he = he >> 8, Z[G++] = he, he = he >> 8, Z[G++] = he, G;
      }
      function Ee(Z, L, G, ne, oe) {
        ee(L, ne, oe, Z, G, 7);
        let le = Number(L & BigInt(4294967295));
        Z[G + 7] = le, le = le >> 8, Z[G + 6] = le, le = le >> 8, Z[G + 5] = le, le = le >> 8, Z[G + 4] = le;
        let he = Number(L >> BigInt(32) & BigInt(4294967295));
        return Z[G + 3] = he, he = he >> 8, Z[G + 2] = he, he = he >> 8, Z[G + 1] = he, he = he >> 8, Z[G] = he, G + 8;
      }
      $.prototype.writeBigUInt64LE = qe(function(L, G = 0) {
        return ve(this, L, G, BigInt(0), BigInt("0xffffffffffffffff"));
      }), $.prototype.writeBigUInt64BE = qe(function(L, G = 0) {
        return Ee(this, L, G, BigInt(0), BigInt("0xffffffffffffffff"));
      }), $.prototype.writeIntLE = function(L, G, ne, oe) {
        if (L = +L, G = G >>> 0, !oe) {
          const Me = Math.pow(2, 8 * ne - 1);
          we(this, L, G, ne, Me - 1, -Me);
        }
        let le = 0, he = 1, Ne = 0;
        for (this[G] = L & 255; ++le < ne && (he *= 256); )
          L < 0 && Ne === 0 && this[G + le - 1] !== 0 && (Ne = 1), this[G + le] = (L / he >> 0) - Ne & 255;
        return G + ne;
      }, $.prototype.writeIntBE = function(L, G, ne, oe) {
        if (L = +L, G = G >>> 0, !oe) {
          const Me = Math.pow(2, 8 * ne - 1);
          we(this, L, G, ne, Me - 1, -Me);
        }
        let le = ne - 1, he = 1, Ne = 0;
        for (this[G + le] = L & 255; --le >= 0 && (he *= 256); )
          L < 0 && Ne === 0 && this[G + le + 1] !== 0 && (Ne = 1), this[G + le] = (L / he >> 0) - Ne & 255;
        return G + ne;
      }, $.prototype.writeInt8 = function(L, G, ne) {
        return L = +L, G = G >>> 0, ne || we(this, L, G, 1, 127, -128), L < 0 && (L = 255 + L + 1), this[G] = L & 255, G + 1;
      }, $.prototype.writeInt16LE = function(L, G, ne) {
        return L = +L, G = G >>> 0, ne || we(this, L, G, 2, 32767, -32768), this[G] = L & 255, this[G + 1] = L >>> 8, G + 2;
      }, $.prototype.writeInt16BE = function(L, G, ne) {
        return L = +L, G = G >>> 0, ne || we(this, L, G, 2, 32767, -32768), this[G] = L >>> 8, this[G + 1] = L & 255, G + 2;
      }, $.prototype.writeInt32LE = function(L, G, ne) {
        return L = +L, G = G >>> 0, ne || we(this, L, G, 4, 2147483647, -2147483648), this[G] = L & 255, this[G + 1] = L >>> 8, this[G + 2] = L >>> 16, this[G + 3] = L >>> 24, G + 4;
      }, $.prototype.writeInt32BE = function(L, G, ne) {
        return L = +L, G = G >>> 0, ne || we(this, L, G, 4, 2147483647, -2147483648), L < 0 && (L = 4294967295 + L + 1), this[G] = L >>> 24, this[G + 1] = L >>> 16, this[G + 2] = L >>> 8, this[G + 3] = L & 255, G + 4;
      }, $.prototype.writeBigInt64LE = qe(function(L, G = 0) {
        return ve(this, L, G, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      }), $.prototype.writeBigInt64BE = qe(function(L, G = 0) {
        return Ee(this, L, G, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function De(Z, L, G, ne, oe, le) {
        if (G + ne > Z.length) throw new RangeError("Index out of range");
        if (G < 0) throw new RangeError("Index out of range");
      }
      function Ce(Z, L, G, ne, oe) {
        return L = +L, G = G >>> 0, oe || De(Z, L, G, 4), T.write(Z, L, G, ne, 23, 4), G + 4;
      }
      $.prototype.writeFloatLE = function(L, G, ne) {
        return Ce(this, L, G, !0, ne);
      }, $.prototype.writeFloatBE = function(L, G, ne) {
        return Ce(this, L, G, !1, ne);
      };
      function _e(Z, L, G, ne, oe) {
        return L = +L, G = G >>> 0, oe || De(Z, L, G, 8), T.write(Z, L, G, ne, 52, 8), G + 8;
      }
      $.prototype.writeDoubleLE = function(L, G, ne) {
        return _e(this, L, G, !0, ne);
      }, $.prototype.writeDoubleBE = function(L, G, ne) {
        return _e(this, L, G, !1, ne);
      }, $.prototype.copy = function(L, G, ne, oe) {
        if (!$.isBuffer(L)) throw new TypeError("argument should be a Buffer");
        if (ne || (ne = 0), !oe && oe !== 0 && (oe = this.length), G >= L.length && (G = L.length), G || (G = 0), oe > 0 && oe < ne && (oe = ne), oe === ne || L.length === 0 || this.length === 0) return 0;
        if (G < 0)
          throw new RangeError("targetStart out of bounds");
        if (ne < 0 || ne >= this.length) throw new RangeError("Index out of range");
        if (oe < 0) throw new RangeError("sourceEnd out of bounds");
        oe > this.length && (oe = this.length), L.length - G < oe - ne && (oe = L.length - G + ne);
        const le = oe - ne;
        return this === L && typeof O.prototype.copyWithin == "function" ? this.copyWithin(G, ne, oe) : O.prototype.set.call(
          L,
          this.subarray(ne, oe),
          G
        ), le;
      }, $.prototype.fill = function(L, G, ne, oe) {
        if (typeof L == "string") {
          if (typeof G == "string" ? (oe = G, G = 0, ne = this.length) : typeof ne == "string" && (oe = ne, ne = this.length), oe !== void 0 && typeof oe != "string")
            throw new TypeError("encoding must be a string");
          if (typeof oe == "string" && !$.isEncoding(oe))
            throw new TypeError("Unknown encoding: " + oe);
          if (L.length === 1) {
            const he = L.charCodeAt(0);
            (oe === "utf8" && he < 128 || oe === "latin1") && (L = he);
          }
        } else typeof L == "number" ? L = L & 255 : typeof L == "boolean" && (L = Number(L));
        if (G < 0 || this.length < G || this.length < ne)
          throw new RangeError("Out of range index");
        if (ne <= G)
          return this;
        G = G >>> 0, ne = ne === void 0 ? this.length : ne >>> 0, L || (L = 0);
        let le;
        if (typeof L == "number")
          for (le = G; le < ne; ++le)
            this[le] = L;
        else {
          const he = $.isBuffer(L) ? L : $.from(L, oe), Ne = he.length;
          if (Ne === 0)
            throw new TypeError('The value "' + L + '" is invalid for argument "value"');
          for (le = 0; le < ne - G; ++le)
            this[le + G] = he[le % Ne];
        }
        return this;
      };
      const ze = {};
      function Y(Z, L, G) {
        ze[Z] = class extends G {
          constructor() {
            super(), Object.defineProperty(this, "message", {
              value: L.apply(this, arguments),
              writable: !0,
              configurable: !0
            }), this.name = `${this.name} [${Z}]`, this.stack, delete this.name;
          }
          get code() {
            return Z;
          }
          set code(oe) {
            Object.defineProperty(this, "code", {
              configurable: !0,
              enumerable: !0,
              value: oe,
              writable: !0
            });
          }
          toString() {
            return `${this.name} [${Z}]: ${this.message}`;
          }
        };
      }
      Y(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(Z) {
          return Z ? `${Z} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
        },
        RangeError
      ), Y(
        "ERR_INVALID_ARG_TYPE",
        function(Z, L) {
          return `The "${Z}" argument must be of type number. Received type ${typeof L}`;
        },
        TypeError
      ), Y(
        "ERR_OUT_OF_RANGE",
        function(Z, L, G) {
          let ne = `The value of "${Z}" is out of range.`, oe = G;
          return Number.isInteger(G) && Math.abs(G) > 2 ** 32 ? oe = B(String(G)) : typeof G == "bigint" && (oe = String(G), (G > BigInt(2) ** BigInt(32) || G < -(BigInt(2) ** BigInt(32))) && (oe = B(oe)), oe += "n"), ne += ` It must be ${L}. Received ${oe}`, ne;
        },
        RangeError
      );
      function B(Z) {
        let L = "", G = Z.length;
        const ne = Z[0] === "-" ? 1 : 0;
        for (; G >= ne + 4; G -= 3)
          L = `_${Z.slice(G - 3, G)}${L}`;
        return `${Z.slice(0, G)}${L}`;
      }
      function U(Z, L, G) {
        ie(L, "offset"), (Z[L] === void 0 || Z[L + G] === void 0) && ue(L, Z.length - (G + 1));
      }
      function ee(Z, L, G, ne, oe, le) {
        if (Z > G || Z < L) {
          const he = typeof L == "bigint" ? "n" : "";
          let Ne;
          throw L === 0 || L === BigInt(0) ? Ne = `>= 0${he} and < 2${he} ** ${(le + 1) * 8}${he}` : Ne = `>= -(2${he} ** ${(le + 1) * 8 - 1}${he}) and < 2 ** ${(le + 1) * 8 - 1}${he}`, new ze.ERR_OUT_OF_RANGE("value", Ne, Z);
        }
        U(ne, oe, le);
      }
      function ie(Z, L) {
        if (typeof Z != "number")
          throw new ze.ERR_INVALID_ARG_TYPE(L, "number", Z);
      }
      function ue(Z, L, G) {
        throw Math.floor(Z) !== Z ? (ie(Z, G), new ze.ERR_OUT_OF_RANGE("offset", "an integer", Z)) : L < 0 ? new ze.ERR_BUFFER_OUT_OF_BOUNDS() : new ze.ERR_OUT_OF_RANGE(
          "offset",
          `>= 0 and <= ${L}`,
          Z
        );
      }
      const fe = /[^+/0-9A-Za-z-_]/g;
      function Ie(Z) {
        if (Z = Z.split("=")[0], Z = Z.trim().replace(fe, ""), Z.length < 2) return "";
        for (; Z.length % 4 !== 0; )
          Z = Z + "=";
        return Z;
      }
      function Re(Z, L) {
        L = L || 1 / 0;
        let G;
        const ne = Z.length;
        let oe = null;
        const le = [];
        for (let he = 0; he < ne; ++he) {
          if (G = Z.charCodeAt(he), G > 55295 && G < 57344) {
            if (!oe) {
              if (G > 56319) {
                (L -= 3) > -1 && le.push(239, 191, 189);
                continue;
              } else if (he + 1 === ne) {
                (L -= 3) > -1 && le.push(239, 191, 189);
                continue;
              }
              oe = G;
              continue;
            }
            if (G < 56320) {
              (L -= 3) > -1 && le.push(239, 191, 189), oe = G;
              continue;
            }
            G = (oe - 55296 << 10 | G - 56320) + 65536;
          } else oe && (L -= 3) > -1 && le.push(239, 191, 189);
          if (oe = null, G < 128) {
            if ((L -= 1) < 0) break;
            le.push(G);
          } else if (G < 2048) {
            if ((L -= 2) < 0) break;
            le.push(
              G >> 6 | 192,
              G & 63 | 128
            );
          } else if (G < 65536) {
            if ((L -= 3) < 0) break;
            le.push(
              G >> 12 | 224,
              G >> 6 & 63 | 128,
              G & 63 | 128
            );
          } else if (G < 1114112) {
            if ((L -= 4) < 0) break;
            le.push(
              G >> 18 | 240,
              G >> 12 & 63 | 128,
              G >> 6 & 63 | 128,
              G & 63 | 128
            );
          } else
            throw new Error("Invalid code point");
        }
        return le;
      }
      function Se(Z) {
        const L = [];
        for (let G = 0; G < Z.length; ++G)
          L.push(Z.charCodeAt(G) & 255);
        return L;
      }
      function Pe(Z, L) {
        let G, ne, oe;
        const le = [];
        for (let he = 0; he < Z.length && !((L -= 2) < 0); ++he)
          G = Z.charCodeAt(he), ne = G >> 8, oe = G % 256, le.push(oe), le.push(ne);
        return le;
      }
      function Ae(Z) {
        return I.toByteArray(Ie(Z));
      }
      function Fe(Z, L, G, ne) {
        let oe;
        for (oe = 0; oe < ne && !(oe + G >= L.length || oe >= Z.length); ++oe)
          L[oe + G] = Z[oe];
        return oe;
      }
      function Ve(Z, L) {
        return Z instanceof L || Z != null && Z.constructor != null && Z.constructor.name != null && Z.constructor.name === L.name;
      }
      function Ue(Z) {
        return Z !== Z;
      }
      const Be = function() {
        const Z = "0123456789abcdef", L = new Array(256);
        for (let G = 0; G < 16; ++G) {
          const ne = G * 16;
          for (let oe = 0; oe < 16; ++oe)
            L[ne + oe] = Z[G] + Z[oe];
        }
        return L;
      }();
      function qe(Z) {
        return typeof BigInt > "u" ? Ge : Z;
      }
      function Ge() {
        throw new Error("BigInt not supported");
      }
    })(e);
    const v = e.Buffer;
    r.Blob = e.Blob, r.BlobOptions = e.BlobOptions, r.Buffer = e.Buffer, r.File = e.File, r.FileOptions = e.FileOptions, r.INSPECT_MAX_BYTES = e.INSPECT_MAX_BYTES, r.SlowBuffer = e.SlowBuffer, r.TranscodeEncoding = e.TranscodeEncoding, r.atob = e.atob, r.btoa = e.btoa, r.constants = e.constants, r.default = v, r.isAscii = e.isAscii, r.isUtf8 = e.isUtf8, r.kMaxLength = e.kMaxLength, r.kStringMaxLength = e.kStringMaxLength, r.resolveObjectURL = e.resolveObjectURL, r.transcode = e.transcode;
  }(dist)), dist;
}
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var hasRequiredSafeBuffer$1;
function requireSafeBuffer$1() {
  return hasRequiredSafeBuffer$1 || (hasRequiredSafeBuffer$1 = 1, function(r, e) {
    var t = requireDist(), n = t.Buffer;
    function s(o, u) {
      for (var l in o)
        u[l] = o[l];
    }
    n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow ? r.exports = t : (s(t, e), e.Buffer = a);
    function a(o, u, l) {
      return n(o, u, l);
    }
    a.prototype = Object.create(n.prototype), s(n, a), a.from = function(o, u, l) {
      if (typeof o == "number")
        throw new TypeError("Argument must not be a number");
      return n(o, u, l);
    }, a.alloc = function(o, u, l) {
      if (typeof o != "number")
        throw new TypeError("Argument must be a number");
      var f = n(o);
      return u !== void 0 ? typeof l == "string" ? f.fill(u, l) : f.fill(u) : f.fill(0), f;
    }, a.allocUnsafe = function(o) {
      if (typeof o != "number")
        throw new TypeError("Argument must be a number");
      return n(o);
    }, a.allocUnsafeSlow = function(o) {
      if (typeof o != "number")
        throw new TypeError("Argument must be a number");
      return t.SlowBuffer(o);
    };
  }(safeBuffer$1, safeBuffer$1.exports)), safeBuffer$1.exports;
}
var hasRequiredBrowser$b;
function requireBrowser$b() {
  if (hasRequiredBrowser$b) return browser$c.exports;
  hasRequiredBrowser$b = 1;
  var r = 65536, e = 4294967295;
  function t() {
    throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`);
  }
  var n = requireSafeBuffer$1().Buffer, s = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
  s && s.getRandomValues ? browser$c.exports = a : browser$c.exports = t;
  function a(o, u) {
    if (o > e) throw new RangeError("requested too many random bytes");
    var l = n.allocUnsafe(o);
    if (o > 0)
      if (o > r)
        for (var f = 0; f < o; f += r)
          s.getRandomValues(l.slice(f, f + r));
      else
        s.getRandomValues(l);
    return typeof u == "function" ? process$1.nextTick(function() {
      u(null, l);
    }) : l;
  }
  return browser$c.exports;
}
var inherits_browser = { exports: {} }, hasRequiredInherits_browser;
function requireInherits_browser() {
  return hasRequiredInherits_browser || (hasRequiredInherits_browser = 1, typeof Object.create == "function" ? inherits_browser.exports = function(e, t) {
    t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }));
  } : inherits_browser.exports = function(e, t) {
    if (t) {
      e.super_ = t;
      var n = function() {
      };
      n.prototype = t.prototype, e.prototype = new n(), e.prototype.constructor = e;
    }
  }), inherits_browser.exports;
}
var events = { exports: {} }, hasRequiredEvents;
function requireEvents() {
  if (hasRequiredEvents) return events.exports;
  hasRequiredEvents = 1;
  var r = typeof Reflect == "object" ? Reflect : null, e = r && typeof r.apply == "function" ? r.apply : function(_, F, O) {
    return Function.prototype.apply.call(_, F, O);
  }, t;
  r && typeof r.ownKeys == "function" ? t = r.ownKeys : Object.getOwnPropertySymbols ? t = function(_) {
    return Object.getOwnPropertyNames(_).concat(Object.getOwnPropertySymbols(_));
  } : t = function(_) {
    return Object.getOwnPropertyNames(_);
  };
  function n(T) {
    console && console.warn && console.warn(T);
  }
  var s = Number.isNaN || function(_) {
    return _ !== _;
  };
  function a() {
    a.init.call(this);
  }
  events.exports = a, events.exports.once = v, a.EventEmitter = a, a.prototype._events = void 0, a.prototype._eventsCount = 0, a.prototype._maxListeners = void 0;
  var o = 10;
  function u(T) {
    if (typeof T != "function")
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof T);
  }
  Object.defineProperty(a, "defaultMaxListeners", {
    enumerable: !0,
    get: function() {
      return o;
    },
    set: function(T) {
      if (typeof T != "number" || T < 0 || s(T))
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + T + ".");
      o = T;
    }
  }), a.init = function() {
    (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
  }, a.prototype.setMaxListeners = function(_) {
    if (typeof _ != "number" || _ < 0 || s(_))
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + _ + ".");
    return this._maxListeners = _, this;
  };
  function l(T) {
    return T._maxListeners === void 0 ? a.defaultMaxListeners : T._maxListeners;
  }
  a.prototype.getMaxListeners = function() {
    return l(this);
  }, a.prototype.emit = function(_) {
    for (var F = [], O = 1; O < arguments.length; O++) F.push(arguments[O]);
    var q = _ === "error", V = this._events;
    if (V !== void 0)
      q = q && V.error === void 0;
    else if (!q)
      return !1;
    if (q) {
      var H;
      if (F.length > 0 && (H = F[0]), H instanceof Error)
        throw H;
      var R = new Error("Unhandled error." + (H ? " (" + H.message + ")" : ""));
      throw R.context = H, R;
    }
    var $ = V[_];
    if ($ === void 0)
      return !1;
    if (typeof $ == "function")
      e($, this, F);
    else
      for (var S = $.length, x = g($, S), O = 0; O < S; ++O)
        e(x[O], this, F);
    return !0;
  };
  function f(T, _, F, O) {
    var q, V, H;
    if (u(F), V = T._events, V === void 0 ? (V = T._events = /* @__PURE__ */ Object.create(null), T._eventsCount = 0) : (V.newListener !== void 0 && (T.emit(
      "newListener",
      _,
      F.listener ? F.listener : F
    ), V = T._events), H = V[_]), H === void 0)
      H = V[_] = F, ++T._eventsCount;
    else if (typeof H == "function" ? H = V[_] = O ? [F, H] : [H, F] : O ? H.unshift(F) : H.push(F), q = l(T), q > 0 && H.length > q && !H.warned) {
      H.warned = !0;
      var R = new Error("Possible EventEmitter memory leak detected. " + H.length + " " + String(_) + " listeners added. Use emitter.setMaxListeners() to increase limit");
      R.name = "MaxListenersExceededWarning", R.emitter = T, R.type = _, R.count = H.length, n(R);
    }
    return T;
  }
  a.prototype.addListener = function(_, F) {
    return f(this, _, F, !1);
  }, a.prototype.on = a.prototype.addListener, a.prototype.prependListener = function(_, F) {
    return f(this, _, F, !0);
  };
  function c() {
    if (!this.fired)
      return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
  }
  function h(T, _, F) {
    var O = { fired: !1, wrapFn: void 0, target: T, type: _, listener: F }, q = c.bind(O);
    return q.listener = F, O.wrapFn = q, q;
  }
  a.prototype.once = function(_, F) {
    return u(F), this.on(_, h(this, _, F)), this;
  }, a.prototype.prependOnceListener = function(_, F) {
    return u(F), this.prependListener(_, h(this, _, F)), this;
  }, a.prototype.removeListener = function(_, F) {
    var O, q, V, H, R;
    if (u(F), q = this._events, q === void 0)
      return this;
    if (O = q[_], O === void 0)
      return this;
    if (O === F || O.listener === F)
      --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete q[_], q.removeListener && this.emit("removeListener", _, O.listener || F));
    else if (typeof O != "function") {
      for (V = -1, H = O.length - 1; H >= 0; H--)
        if (O[H] === F || O[H].listener === F) {
          R = O[H].listener, V = H;
          break;
        }
      if (V < 0)
        return this;
      V === 0 ? O.shift() : y(O, V), O.length === 1 && (q[_] = O[0]), q.removeListener !== void 0 && this.emit("removeListener", _, R || F);
    }
    return this;
  }, a.prototype.off = a.prototype.removeListener, a.prototype.removeAllListeners = function(_) {
    var F, O, q;
    if (O = this._events, O === void 0)
      return this;
    if (O.removeListener === void 0)
      return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : O[_] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete O[_]), this;
    if (arguments.length === 0) {
      var V = Object.keys(O), H;
      for (q = 0; q < V.length; ++q)
        H = V[q], H !== "removeListener" && this.removeAllListeners(H);
      return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
    }
    if (F = O[_], typeof F == "function")
      this.removeListener(_, F);
    else if (F !== void 0)
      for (q = F.length - 1; q >= 0; q--)
        this.removeListener(_, F[q]);
    return this;
  };
  function d(T, _, F) {
    var O = T._events;
    if (O === void 0)
      return [];
    var q = O[_];
    return q === void 0 ? [] : typeof q == "function" ? F ? [q.listener || q] : [q] : F ? b(q) : g(q, q.length);
  }
  a.prototype.listeners = function(_) {
    return d(this, _, !0);
  }, a.prototype.rawListeners = function(_) {
    return d(this, _, !1);
  }, a.listenerCount = function(T, _) {
    return typeof T.listenerCount == "function" ? T.listenerCount(_) : m.call(T, _);
  }, a.prototype.listenerCount = m;
  function m(T) {
    var _ = this._events;
    if (_ !== void 0) {
      var F = _[T];
      if (typeof F == "function")
        return 1;
      if (F !== void 0)
        return F.length;
    }
    return 0;
  }
  a.prototype.eventNames = function() {
    return this._eventsCount > 0 ? t(this._events) : [];
  };
  function g(T, _) {
    for (var F = new Array(_), O = 0; O < _; ++O)
      F[O] = T[O];
    return F;
  }
  function y(T, _) {
    for (; _ + 1 < T.length; _++)
      T[_] = T[_ + 1];
    T.pop();
  }
  function b(T) {
    for (var _ = new Array(T.length), F = 0; F < _.length; ++F)
      _[F] = T[F].listener || T[F];
    return _;
  }
  function v(T, _) {
    return new Promise(function(F, O) {
      function q(H) {
        T.removeListener(_, V), O(H);
      }
      function V() {
        typeof T.removeListener == "function" && T.removeListener("error", q), F([].slice.call(arguments));
      }
      I(T, _, V, { once: !0 }), _ !== "error" && w(T, q, { once: !0 });
    });
  }
  function w(T, _, F) {
    typeof T.on == "function" && I(T, "error", _, F);
  }
  function I(T, _, F, O) {
    if (typeof T.on == "function")
      O.once ? T.once(_, F) : T.on(_, F);
    else if (typeof T.addEventListener == "function")
      T.addEventListener(_, function q(V) {
        O.once && T.removeEventListener(_, q), F(V);
      });
    else
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof T);
  }
  return events.exports;
}
var streamBrowser$1, hasRequiredStreamBrowser$1;
function requireStreamBrowser$1() {
  return hasRequiredStreamBrowser$1 || (hasRequiredStreamBrowser$1 = 1, streamBrowser$1 = requireEvents().EventEmitter), streamBrowser$1;
}
var util$1 = {}, types = {}, shams$2, hasRequiredShams$2;
function requireShams$2() {
  return hasRequiredShams$2 || (hasRequiredShams$2 = 1, shams$2 = function() {
    if (typeof Symbol != "function" || typeof Object.getOwnPropertySymbols != "function")
      return !1;
    if (typeof Symbol.iterator == "symbol")
      return !0;
    var e = {}, t = Symbol("test"), n = Object(t);
    if (typeof t == "string" || Object.prototype.toString.call(t) !== "[object Symbol]" || Object.prototype.toString.call(n) !== "[object Symbol]")
      return !1;
    var s = 42;
    e[t] = s;
    for (var a in e)
      return !1;
    if (typeof Object.keys == "function" && Object.keys(e).length !== 0 || typeof Object.getOwnPropertyNames == "function" && Object.getOwnPropertyNames(e).length !== 0)
      return !1;
    var o = Object.getOwnPropertySymbols(e);
    if (o.length !== 1 || o[0] !== t || !Object.prototype.propertyIsEnumerable.call(e, t))
      return !1;
    if (typeof Object.getOwnPropertyDescriptor == "function") {
      var u = (
        /** @type {PropertyDescriptor} */
        Object.getOwnPropertyDescriptor(e, t)
      );
      if (u.value !== s || u.enumerable !== !0)
        return !1;
    }
    return !0;
  }), shams$2;
}
var shams$1, hasRequiredShams$1;
function requireShams$1() {
  if (hasRequiredShams$1) return shams$1;
  hasRequiredShams$1 = 1;
  var r = requireShams$2();
  return shams$1 = function() {
    return r() && !!Symbol.toStringTag;
  }, shams$1;
}
var esObjectAtoms, hasRequiredEsObjectAtoms;
function requireEsObjectAtoms() {
  return hasRequiredEsObjectAtoms || (hasRequiredEsObjectAtoms = 1, esObjectAtoms = Object), esObjectAtoms;
}
var esErrors, hasRequiredEsErrors;
function requireEsErrors() {
  return hasRequiredEsErrors || (hasRequiredEsErrors = 1, esErrors = Error), esErrors;
}
var _eval, hasRequired_eval;
function require_eval() {
  return hasRequired_eval || (hasRequired_eval = 1, _eval = EvalError), _eval;
}
var range$4, hasRequiredRange;
function requireRange() {
  return hasRequiredRange || (hasRequiredRange = 1, range$4 = RangeError), range$4;
}
var ref, hasRequiredRef;
function requireRef() {
  return hasRequiredRef || (hasRequiredRef = 1, ref = ReferenceError), ref;
}
var syntax, hasRequiredSyntax;
function requireSyntax() {
  return hasRequiredSyntax || (hasRequiredSyntax = 1, syntax = SyntaxError), syntax;
}
var type, hasRequiredType;
function requireType() {
  return hasRequiredType || (hasRequiredType = 1, type = TypeError), type;
}
var uri, hasRequiredUri;
function requireUri() {
  return hasRequiredUri || (hasRequiredUri = 1, uri = URIError), uri;
}
var abs$2, hasRequiredAbs;
function requireAbs() {
  return hasRequiredAbs || (hasRequiredAbs = 1, abs$2 = Math.abs), abs$2;
}
var floor$2, hasRequiredFloor;
function requireFloor() {
  return hasRequiredFloor || (hasRequiredFloor = 1, floor$2 = Math.floor), floor$2;
}
var max$3, hasRequiredMax;
function requireMax() {
  return hasRequiredMax || (hasRequiredMax = 1, max$3 = Math.max), max$3;
}
var min$3, hasRequiredMin;
function requireMin() {
  return hasRequiredMin || (hasRequiredMin = 1, min$3 = Math.min), min$3;
}
var pow$2, hasRequiredPow;
function requirePow() {
  return hasRequiredPow || (hasRequiredPow = 1, pow$2 = Math.pow), pow$2;
}
var round$3, hasRequiredRound;
function requireRound() {
  return hasRequiredRound || (hasRequiredRound = 1, round$3 = Math.round), round$3;
}
var _isNaN, hasRequired_isNaN;
function require_isNaN() {
  return hasRequired_isNaN || (hasRequired_isNaN = 1, _isNaN = Number.isNaN || function(e) {
    return e !== e;
  }), _isNaN;
}
var sign$4, hasRequiredSign$1;
function requireSign$1() {
  if (hasRequiredSign$1) return sign$4;
  hasRequiredSign$1 = 1;
  var r = /* @__PURE__ */ require_isNaN();
  return sign$4 = function(t) {
    return r(t) || t === 0 ? t : t < 0 ? -1 : 1;
  }, sign$4;
}
var gOPD, hasRequiredGOPD;
function requireGOPD() {
  return hasRequiredGOPD || (hasRequiredGOPD = 1, gOPD = Object.getOwnPropertyDescriptor), gOPD;
}
var gopd$1, hasRequiredGopd$1;
function requireGopd$1() {
  if (hasRequiredGopd$1) return gopd$1;
  hasRequiredGopd$1 = 1;
  var r = /* @__PURE__ */ requireGOPD();
  if (r)
    try {
      r([], "length");
    } catch {
      r = null;
    }
  return gopd$1 = r, gopd$1;
}
var esDefineProperty$1, hasRequiredEsDefineProperty$1;
function requireEsDefineProperty$1() {
  if (hasRequiredEsDefineProperty$1) return esDefineProperty$1;
  hasRequiredEsDefineProperty$1 = 1;
  var r = Object.defineProperty || !1;
  if (r)
    try {
      r({}, "a", { value: 1 });
    } catch {
      r = !1;
    }
  return esDefineProperty$1 = r, esDefineProperty$1;
}
var hasSymbols$1, hasRequiredHasSymbols$1;
function requireHasSymbols$1() {
  if (hasRequiredHasSymbols$1) return hasSymbols$1;
  hasRequiredHasSymbols$1 = 1;
  var r = typeof Symbol < "u" && Symbol, e = requireShams$2();
  return hasSymbols$1 = function() {
    return typeof r != "function" || typeof Symbol != "function" || typeof r("foo") != "symbol" || typeof Symbol("bar") != "symbol" ? !1 : e();
  }, hasSymbols$1;
}
var Reflect_getPrototypeOf, hasRequiredReflect_getPrototypeOf;
function requireReflect_getPrototypeOf() {
  return hasRequiredReflect_getPrototypeOf || (hasRequiredReflect_getPrototypeOf = 1, Reflect_getPrototypeOf = typeof Reflect < "u" && Reflect.getPrototypeOf || null), Reflect_getPrototypeOf;
}
var Object_getPrototypeOf, hasRequiredObject_getPrototypeOf;
function requireObject_getPrototypeOf() {
  if (hasRequiredObject_getPrototypeOf) return Object_getPrototypeOf;
  hasRequiredObject_getPrototypeOf = 1;
  var r = /* @__PURE__ */ requireEsObjectAtoms();
  return Object_getPrototypeOf = r.getPrototypeOf || null, Object_getPrototypeOf;
}
var implementation, hasRequiredImplementation;
function requireImplementation() {
  if (hasRequiredImplementation) return implementation;
  hasRequiredImplementation = 1;
  var r = "Function.prototype.bind called on incompatible ", e = Object.prototype.toString, t = Math.max, n = "[object Function]", s = function(l, f) {
    for (var c = [], h = 0; h < l.length; h += 1)
      c[h] = l[h];
    for (var d = 0; d < f.length; d += 1)
      c[d + l.length] = f[d];
    return c;
  }, a = function(l, f) {
    for (var c = [], h = f, d = 0; h < l.length; h += 1, d += 1)
      c[d] = l[h];
    return c;
  }, o = function(u, l) {
    for (var f = "", c = 0; c < u.length; c += 1)
      f += u[c], c + 1 < u.length && (f += l);
    return f;
  };
  return implementation = function(l) {
    var f = this;
    if (typeof f != "function" || e.apply(f) !== n)
      throw new TypeError(r + f);
    for (var c = a(arguments, 1), h, d = function() {
      if (this instanceof h) {
        var v = f.apply(
          this,
          s(c, arguments)
        );
        return Object(v) === v ? v : this;
      }
      return f.apply(
        l,
        s(c, arguments)
      );
    }, m = t(0, f.length - c.length), g = [], y = 0; y < m; y++)
      g[y] = "$" + y;
    if (h = Function("binder", "return function (" + o(g, ",") + "){ return binder.apply(this,arguments); }")(d), f.prototype) {
      var b = function() {
      };
      b.prototype = f.prototype, h.prototype = new b(), b.prototype = null;
    }
    return h;
  }, implementation;
}
var functionBind, hasRequiredFunctionBind;
function requireFunctionBind() {
  if (hasRequiredFunctionBind) return functionBind;
  hasRequiredFunctionBind = 1;
  var r = requireImplementation();
  return functionBind = Function.prototype.bind || r, functionBind;
}
var functionCall, hasRequiredFunctionCall;
function requireFunctionCall() {
  return hasRequiredFunctionCall || (hasRequiredFunctionCall = 1, functionCall = Function.prototype.call), functionCall;
}
var functionApply, hasRequiredFunctionApply;
function requireFunctionApply() {
  return hasRequiredFunctionApply || (hasRequiredFunctionApply = 1, functionApply = Function.prototype.apply), functionApply;
}
var reflectApply, hasRequiredReflectApply;
function requireReflectApply() {
  return hasRequiredReflectApply || (hasRequiredReflectApply = 1, reflectApply = typeof Reflect < "u" && Reflect && Reflect.apply), reflectApply;
}
var actualApply, hasRequiredActualApply;
function requireActualApply() {
  if (hasRequiredActualApply) return actualApply;
  hasRequiredActualApply = 1;
  var r = requireFunctionBind(), e = requireFunctionApply(), t = requireFunctionCall(), n = requireReflectApply();
  return actualApply = n || r.call(t, e), actualApply;
}
var callBindApplyHelpers, hasRequiredCallBindApplyHelpers;
function requireCallBindApplyHelpers() {
  if (hasRequiredCallBindApplyHelpers) return callBindApplyHelpers;
  hasRequiredCallBindApplyHelpers = 1;
  var r = requireFunctionBind(), e = /* @__PURE__ */ requireType(), t = requireFunctionCall(), n = requireActualApply();
  return callBindApplyHelpers = function(a) {
    if (a.length < 1 || typeof a[0] != "function")
      throw new e("a function is required");
    return n(r, t, a);
  }, callBindApplyHelpers;
}
var get$2, hasRequiredGet;
function requireGet() {
  if (hasRequiredGet) return get$2;
  hasRequiredGet = 1;
  var r = requireCallBindApplyHelpers(), e = /* @__PURE__ */ requireGopd$1(), t;
  try {
    t = /** @type {{ __proto__?: typeof Array.prototype }} */
    [].__proto__ === Array.prototype;
  } catch (o) {
    if (!o || typeof o != "object" || !("code" in o) || o.code !== "ERR_PROTO_ACCESS")
      throw o;
  }
  var n = !!t && e && e(
    Object.prototype,
    /** @type {keyof typeof Object.prototype} */
    "__proto__"
  ), s = Object, a = s.getPrototypeOf;
  return get$2 = n && typeof n.get == "function" ? r([n.get]) : typeof a == "function" ? (
    /** @type {import('./get')} */
    function(u) {
      return a(u == null ? u : s(u));
    }
  ) : !1, get$2;
}
var getProto, hasRequiredGetProto;
function requireGetProto() {
  if (hasRequiredGetProto) return getProto;
  hasRequiredGetProto = 1;
  var r = requireReflect_getPrototypeOf(), e = requireObject_getPrototypeOf(), t = /* @__PURE__ */ requireGet();
  return getProto = r ? function(s) {
    return r(s);
  } : e ? function(s) {
    if (!s || typeof s != "object" && typeof s != "function")
      throw new TypeError("getProto: not an object");
    return e(s);
  } : t ? function(s) {
    return t(s);
  } : null, getProto;
}
var hasown, hasRequiredHasown;
function requireHasown() {
  if (hasRequiredHasown) return hasown;
  hasRequiredHasown = 1;
  var r = Function.prototype.call, e = Object.prototype.hasOwnProperty, t = requireFunctionBind();
  return hasown = t.call(r, e), hasown;
}
var getIntrinsic$1, hasRequiredGetIntrinsic$1;
function requireGetIntrinsic$1() {
  if (hasRequiredGetIntrinsic$1) return getIntrinsic$1;
  hasRequiredGetIntrinsic$1 = 1;
  var r, e = /* @__PURE__ */ requireEsObjectAtoms(), t = /* @__PURE__ */ requireEsErrors(), n = /* @__PURE__ */ require_eval(), s = /* @__PURE__ */ requireRange(), a = /* @__PURE__ */ requireRef(), o = /* @__PURE__ */ requireSyntax(), u = /* @__PURE__ */ requireType(), l = /* @__PURE__ */ requireUri(), f = /* @__PURE__ */ requireAbs(), c = /* @__PURE__ */ requireFloor(), h = /* @__PURE__ */ requireMax(), d = /* @__PURE__ */ requireMin(), m = /* @__PURE__ */ requirePow(), g = /* @__PURE__ */ requireRound(), y = /* @__PURE__ */ requireSign$1(), b = Function, v = function(te) {
    try {
      return b('"use strict"; return (' + te + ").constructor;")();
    } catch {
    }
  }, w = /* @__PURE__ */ requireGopd$1(), I = /* @__PURE__ */ requireEsDefineProperty$1(), T = function() {
    throw new u();
  }, _ = w ? function() {
    try {
      return arguments.callee, T;
    } catch {
      try {
        return w(arguments, "callee").get;
      } catch {
        return T;
      }
    }
  }() : T, F = requireHasSymbols$1()(), O = requireGetProto(), q = requireObject_getPrototypeOf(), V = requireReflect_getPrototypeOf(), H = requireFunctionApply(), R = requireFunctionCall(), $ = {}, S = typeof Uint8Array > "u" || !O ? r : O(Uint8Array), x = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError > "u" ? r : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer > "u" ? r : ArrayBuffer,
    "%ArrayIteratorPrototype%": F && O ? O([][Symbol.iterator]()) : r,
    "%AsyncFromSyncIteratorPrototype%": r,
    "%AsyncFunction%": $,
    "%AsyncGenerator%": $,
    "%AsyncGeneratorFunction%": $,
    "%AsyncIteratorPrototype%": $,
    "%Atomics%": typeof Atomics > "u" ? r : Atomics,
    "%BigInt%": typeof BigInt > "u" ? r : BigInt,
    "%BigInt64Array%": typeof BigInt64Array > "u" ? r : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array > "u" ? r : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView > "u" ? r : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": t,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": n,
    "%Float32Array%": typeof Float32Array > "u" ? r : Float32Array,
    "%Float64Array%": typeof Float64Array > "u" ? r : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry > "u" ? r : FinalizationRegistry,
    "%Function%": b,
    "%GeneratorFunction%": $,
    "%Int8Array%": typeof Int8Array > "u" ? r : Int8Array,
    "%Int16Array%": typeof Int16Array > "u" ? r : Int16Array,
    "%Int32Array%": typeof Int32Array > "u" ? r : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": F && O ? O(O([][Symbol.iterator]())) : r,
    "%JSON%": typeof JSON == "object" ? JSON : r,
    "%Map%": typeof Map > "u" ? r : Map,
    "%MapIteratorPrototype%": typeof Map > "u" || !F || !O ? r : O((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": e,
    "%Object.getOwnPropertyDescriptor%": w,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise > "u" ? r : Promise,
    "%Proxy%": typeof Proxy > "u" ? r : Proxy,
    "%RangeError%": s,
    "%ReferenceError%": a,
    "%Reflect%": typeof Reflect > "u" ? r : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set > "u" ? r : Set,
    "%SetIteratorPrototype%": typeof Set > "u" || !F || !O ? r : O((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer > "u" ? r : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": F && O ? O(""[Symbol.iterator]()) : r,
    "%Symbol%": F ? Symbol : r,
    "%SyntaxError%": o,
    "%ThrowTypeError%": _,
    "%TypedArray%": S,
    "%TypeError%": u,
    "%Uint8Array%": typeof Uint8Array > "u" ? r : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray > "u" ? r : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array > "u" ? r : Uint16Array,
    "%Uint32Array%": typeof Uint32Array > "u" ? r : Uint32Array,
    "%URIError%": l,
    "%WeakMap%": typeof WeakMap > "u" ? r : WeakMap,
    "%WeakRef%": typeof WeakRef > "u" ? r : WeakRef,
    "%WeakSet%": typeof WeakSet > "u" ? r : WeakSet,
    "%Function.prototype.call%": R,
    "%Function.prototype.apply%": H,
    "%Object.defineProperty%": I,
    "%Object.getPrototypeOf%": q,
    "%Math.abs%": f,
    "%Math.floor%": c,
    "%Math.max%": h,
    "%Math.min%": d,
    "%Math.pow%": m,
    "%Math.round%": g,
    "%Math.sign%": y,
    "%Reflect.getPrototypeOf%": V
  };
  if (O)
    try {
      null.error;
    } catch (te) {
      var C = O(O(te));
      x["%Error.prototype%"] = C;
    }
  var A = function te(se) {
    var X;
    if (se === "%AsyncFunction%")
      X = v("async function () {}");
    else if (se === "%GeneratorFunction%")
      X = v("function* () {}");
    else if (se === "%AsyncGeneratorFunction%")
      X = v("async function* () {}");
    else if (se === "%AsyncGenerator%") {
      var K = te("%AsyncGeneratorFunction%");
      K && (X = K.prototype);
    } else if (se === "%AsyncIteratorPrototype%") {
      var ae = te("%AsyncGenerator%");
      ae && O && (X = O(ae.prototype));
    }
    return x[se] = X, X;
  }, N = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  }, k = requireFunctionBind(), D = /* @__PURE__ */ requireHasown(), E = k.call(R, Array.prototype.concat), M = k.call(H, Array.prototype.splice), P = k.call(R, String.prototype.replace), z = k.call(R, String.prototype.slice), J = k.call(R, RegExp.prototype.exec), re = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, Q = /\\(\\)?/g, W = function(se) {
    var X = z(se, 0, 1), K = z(se, -1);
    if (X === "%" && K !== "%")
      throw new o("invalid intrinsic syntax, expected closing `%`");
    if (K === "%" && X !== "%")
      throw new o("invalid intrinsic syntax, expected opening `%`");
    var ae = [];
    return P(se, re, function(de, me, pe, ge) {
      ae[ae.length] = pe ? P(ge, Q, "$1") : me || de;
    }), ae;
  }, j = function(se, X) {
    var K = se, ae;
    if (D(N, K) && (ae = N[K], K = "%" + ae[0] + "%"), D(x, K)) {
      var de = x[K];
      if (de === $ && (de = A(K)), typeof de > "u" && !X)
        throw new u("intrinsic " + se + " exists, but is not available. Please file an issue!");
      return {
        alias: ae,
        name: K,
        value: de
      };
    }
    throw new o("intrinsic " + se + " does not exist!");
  };
  return getIntrinsic$1 = function(se, X) {
    if (typeof se != "string" || se.length === 0)
      throw new u("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof X != "boolean")
      throw new u('"allowMissing" argument must be a boolean');
    if (J(/^%?[^%]*%?$/, se) === null)
      throw new o("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var K = W(se), ae = K.length > 0 ? K[0] : "", de = j("%" + ae + "%", X), me = de.name, pe = de.value, ge = !1, ye = de.alias;
    ye && (ae = ye[0], M(K, E([0, 1], ye)));
    for (var ce = 1, $e = !0; ce < K.length; ce += 1) {
      var be = K[ce], xe = z(be, 0, 1), we = z(be, -1);
      if ((xe === '"' || xe === "'" || xe === "`" || we === '"' || we === "'" || we === "`") && xe !== we)
        throw new o("property names with quotes must have matching quotes");
      if ((be === "constructor" || !$e) && (ge = !0), ae += "." + be, me = "%" + ae + "%", D(x, me))
        pe = x[me];
      else if (pe != null) {
        if (!(be in pe)) {
          if (!X)
            throw new u("base intrinsic for " + se + " exists, but the property is not available.");
          return;
        }
        if (w && ce + 1 >= K.length) {
          var ve = w(pe, be);
          $e = !!ve, $e && "get" in ve && !("originalValue" in ve.get) ? pe = ve.get : pe = pe[be];
        } else
          $e = D(pe, be), pe = pe[be];
        $e && !ge && (x[me] = pe);
      }
    }
    return pe;
  }, getIntrinsic$1;
}
var callBound$1, hasRequiredCallBound$1;
function requireCallBound$1() {
  if (hasRequiredCallBound$1) return callBound$1;
  hasRequiredCallBound$1 = 1;
  var r = /* @__PURE__ */ requireGetIntrinsic$1(), e = requireCallBindApplyHelpers(), t = e([r("%String.prototype.indexOf%")]);
  return callBound$1 = function(s, a) {
    var o = (
      /** @type {Parameters<typeof callBindBasic>[0][0]} */
      r(s, !!a)
    );
    return typeof o == "function" && t(s, ".prototype.") > -1 ? e([o]) : o;
  }, callBound$1;
}
var isArguments, hasRequiredIsArguments;
function requireIsArguments() {
  if (hasRequiredIsArguments) return isArguments;
  hasRequiredIsArguments = 1;
  var r = requireShams$1()(), e = /* @__PURE__ */ requireCallBound$1(), t = e("Object.prototype.toString"), n = function(u) {
    return r && u && typeof u == "object" && Symbol.toStringTag in u ? !1 : t(u) === "[object Arguments]";
  }, s = function(u) {
    return n(u) ? !0 : u !== null && typeof u == "object" && "length" in u && typeof u.length == "number" && u.length >= 0 && t(u) !== "[object Array]" && "callee" in u && t(u.callee) === "[object Function]";
  }, a = function() {
    return n(arguments);
  }();
  return n.isLegacyArguments = s, isArguments = a ? n : s, isArguments;
}
var isGeneratorFunction, hasRequiredIsGeneratorFunction;
function requireIsGeneratorFunction() {
  if (hasRequiredIsGeneratorFunction) return isGeneratorFunction;
  hasRequiredIsGeneratorFunction = 1;
  var r = Object.prototype.toString, e = Function.prototype.toString, t = /^\s*(?:function)?\*/, n = requireShams$1()(), s = Object.getPrototypeOf, a = function() {
    if (!n)
      return !1;
    try {
      return Function("return function*() {}")();
    } catch {
    }
  }, o;
  return isGeneratorFunction = function(l) {
    if (typeof l != "function")
      return !1;
    if (t.test(e.call(l)))
      return !0;
    if (!n) {
      var f = r.call(l);
      return f === "[object GeneratorFunction]";
    }
    if (!s)
      return !1;
    if (typeof o > "u") {
      var c = a();
      o = c ? s(c) : !1;
    }
    return s(l) === o;
  }, isGeneratorFunction;
}
var isCallable, hasRequiredIsCallable;
function requireIsCallable() {
  if (hasRequiredIsCallable) return isCallable;
  hasRequiredIsCallable = 1;
  var r = Function.prototype.toString, e = typeof Reflect == "object" && Reflect !== null && Reflect.apply, t, n;
  if (typeof e == "function" && typeof Object.defineProperty == "function")
    try {
      t = Object.defineProperty({}, "length", {
        get: function() {
          throw n;
        }
      }), n = {}, e(function() {
        throw 42;
      }, null, t);
    } catch (w) {
      w !== n && (e = null);
    }
  else
    e = null;
  var s = /^\s*class\b/, a = function(I) {
    try {
      var T = r.call(I);
      return s.test(T);
    } catch {
      return !1;
    }
  }, o = function(I) {
    try {
      return a(I) ? !1 : (r.call(I), !0);
    } catch {
      return !1;
    }
  }, u = Object.prototype.toString, l = "[object Object]", f = "[object Function]", c = "[object GeneratorFunction]", h = "[object HTMLAllCollection]", d = "[object HTML document.all class]", m = "[object HTMLCollection]", g = typeof Symbol == "function" && !!Symbol.toStringTag, y = !(0 in [,]), b = function() {
    return !1;
  };
  if (typeof document == "object") {
    var v = document.all;
    u.call(v) === u.call(document.all) && (b = function(I) {
      if ((y || !I) && (typeof I > "u" || typeof I == "object"))
        try {
          var T = u.call(I);
          return (T === h || T === d || T === m || T === l) && I("") == null;
        } catch {
        }
      return !1;
    });
  }
  return isCallable = e ? function(I) {
    if (b(I))
      return !0;
    if (!I || typeof I != "function" && typeof I != "object")
      return !1;
    try {
      e(I, null, t);
    } catch (T) {
      if (T !== n)
        return !1;
    }
    return !a(I) && o(I);
  } : function(I) {
    if (b(I))
      return !0;
    if (!I || typeof I != "function" && typeof I != "object")
      return !1;
    if (g)
      return o(I);
    if (a(I))
      return !1;
    var T = u.call(I);
    return T !== f && T !== c && !/^\[object HTML/.test(T) ? !1 : o(I);
  }, isCallable;
}
var forEach_1, hasRequiredForEach;
function requireForEach() {
  if (hasRequiredForEach) return forEach_1;
  hasRequiredForEach = 1;
  var r = requireIsCallable(), e = Object.prototype.toString, t = Object.prototype.hasOwnProperty, n = function(l, f, c) {
    for (var h = 0, d = l.length; h < d; h++)
      t.call(l, h) && (c == null ? f(l[h], h, l) : f.call(c, l[h], h, l));
  }, s = function(l, f, c) {
    for (var h = 0, d = l.length; h < d; h++)
      c == null ? f(l.charAt(h), h, l) : f.call(c, l.charAt(h), h, l);
  }, a = function(l, f, c) {
    for (var h in l)
      t.call(l, h) && (c == null ? f(l[h], h, l) : f.call(c, l[h], h, l));
  }, o = function(l, f, c) {
    if (!r(f))
      throw new TypeError("iterator must be a function");
    var h;
    arguments.length >= 3 && (h = c), e.call(l) === "[object Array]" ? n(l, f, h) : typeof l == "string" ? s(l, f, h) : a(l, f, h);
  };
  return forEach_1 = o, forEach_1;
}
var possibleTypedArrayNames, hasRequiredPossibleTypedArrayNames;
function requirePossibleTypedArrayNames() {
  return hasRequiredPossibleTypedArrayNames || (hasRequiredPossibleTypedArrayNames = 1, possibleTypedArrayNames = [
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Int16Array",
    "Int32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array"
  ]), possibleTypedArrayNames;
}
var availableTypedArrays, hasRequiredAvailableTypedArrays;
function requireAvailableTypedArrays() {
  if (hasRequiredAvailableTypedArrays) return availableTypedArrays;
  hasRequiredAvailableTypedArrays = 1;
  var r = /* @__PURE__ */ requirePossibleTypedArrayNames(), e = typeof globalThis > "u" ? commonjsGlobal : globalThis;
  return availableTypedArrays = function() {
    for (var n = [], s = 0; s < r.length; s++)
      typeof e[r[s]] == "function" && (n[n.length] = r[s]);
    return n;
  }, availableTypedArrays;
}
var callBind = { exports: {} }, shams, hasRequiredShams;
function requireShams() {
  return hasRequiredShams || (hasRequiredShams = 1, shams = function() {
    if (typeof Symbol != "function" || typeof Object.getOwnPropertySymbols != "function")
      return !1;
    if (typeof Symbol.iterator == "symbol")
      return !0;
    var e = {}, t = Symbol("test"), n = Object(t);
    if (typeof t == "string" || Object.prototype.toString.call(t) !== "[object Symbol]" || Object.prototype.toString.call(n) !== "[object Symbol]")
      return !1;
    var s = 42;
    e[t] = s;
    for (t in e)
      return !1;
    if (typeof Object.keys == "function" && Object.keys(e).length !== 0 || typeof Object.getOwnPropertyNames == "function" && Object.getOwnPropertyNames(e).length !== 0)
      return !1;
    var a = Object.getOwnPropertySymbols(e);
    if (a.length !== 1 || a[0] !== t || !Object.prototype.propertyIsEnumerable.call(e, t))
      return !1;
    if (typeof Object.getOwnPropertyDescriptor == "function") {
      var o = Object.getOwnPropertyDescriptor(e, t);
      if (o.value !== s || o.enumerable !== !0)
        return !1;
    }
    return !0;
  }), shams;
}
var hasSymbols, hasRequiredHasSymbols;
function requireHasSymbols() {
  if (hasRequiredHasSymbols) return hasSymbols;
  hasRequiredHasSymbols = 1;
  var r = typeof Symbol < "u" && Symbol, e = requireShams();
  return hasSymbols = function() {
    return typeof r != "function" || typeof Symbol != "function" || typeof r("foo") != "symbol" || typeof Symbol("bar") != "symbol" ? !1 : e();
  }, hasSymbols;
}
var hasProto, hasRequiredHasProto;
function requireHasProto() {
  if (hasRequiredHasProto) return hasProto;
  hasRequiredHasProto = 1;
  var r = {
    __proto__: null,
    foo: {}
  }, e = Object;
  return hasProto = function() {
    return { __proto__: r }.foo === r.foo && !(r instanceof e);
  }, hasProto;
}
var getIntrinsic, hasRequiredGetIntrinsic;
function requireGetIntrinsic() {
  if (hasRequiredGetIntrinsic) return getIntrinsic;
  hasRequiredGetIntrinsic = 1;
  var r, e = /* @__PURE__ */ requireEsErrors(), t = /* @__PURE__ */ require_eval(), n = /* @__PURE__ */ requireRange(), s = /* @__PURE__ */ requireRef(), a = /* @__PURE__ */ requireSyntax(), o = /* @__PURE__ */ requireType(), u = /* @__PURE__ */ requireUri(), l = Function, f = function(N) {
    try {
      return l('"use strict"; return (' + N + ").constructor;")();
    } catch {
    }
  }, c = Object.getOwnPropertyDescriptor;
  if (c)
    try {
      c({}, "");
    } catch {
      c = null;
    }
  var h = function() {
    throw new o();
  }, d = c ? function() {
    try {
      return arguments.callee, h;
    } catch {
      try {
        return c(arguments, "callee").get;
      } catch {
        return h;
      }
    }
  }() : h, m = requireHasSymbols()(), g = /* @__PURE__ */ requireHasProto()(), y = Object.getPrototypeOf || (g ? function(N) {
    return N.__proto__;
  } : null), b = {}, v = typeof Uint8Array > "u" || !y ? r : y(Uint8Array), w = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError > "u" ? r : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer > "u" ? r : ArrayBuffer,
    "%ArrayIteratorPrototype%": m && y ? y([][Symbol.iterator]()) : r,
    "%AsyncFromSyncIteratorPrototype%": r,
    "%AsyncFunction%": b,
    "%AsyncGenerator%": b,
    "%AsyncGeneratorFunction%": b,
    "%AsyncIteratorPrototype%": b,
    "%Atomics%": typeof Atomics > "u" ? r : Atomics,
    "%BigInt%": typeof BigInt > "u" ? r : BigInt,
    "%BigInt64Array%": typeof BigInt64Array > "u" ? r : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array > "u" ? r : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView > "u" ? r : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": e,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": t,
    "%Float32Array%": typeof Float32Array > "u" ? r : Float32Array,
    "%Float64Array%": typeof Float64Array > "u" ? r : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry > "u" ? r : FinalizationRegistry,
    "%Function%": l,
    "%GeneratorFunction%": b,
    "%Int8Array%": typeof Int8Array > "u" ? r : Int8Array,
    "%Int16Array%": typeof Int16Array > "u" ? r : Int16Array,
    "%Int32Array%": typeof Int32Array > "u" ? r : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": m && y ? y(y([][Symbol.iterator]())) : r,
    "%JSON%": typeof JSON == "object" ? JSON : r,
    "%Map%": typeof Map > "u" ? r : Map,
    "%MapIteratorPrototype%": typeof Map > "u" || !m || !y ? r : y((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise > "u" ? r : Promise,
    "%Proxy%": typeof Proxy > "u" ? r : Proxy,
    "%RangeError%": n,
    "%ReferenceError%": s,
    "%Reflect%": typeof Reflect > "u" ? r : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set > "u" ? r : Set,
    "%SetIteratorPrototype%": typeof Set > "u" || !m || !y ? r : y((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer > "u" ? r : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": m && y ? y(""[Symbol.iterator]()) : r,
    "%Symbol%": m ? Symbol : r,
    "%SyntaxError%": a,
    "%ThrowTypeError%": d,
    "%TypedArray%": v,
    "%TypeError%": o,
    "%Uint8Array%": typeof Uint8Array > "u" ? r : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray > "u" ? r : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array > "u" ? r : Uint16Array,
    "%Uint32Array%": typeof Uint32Array > "u" ? r : Uint32Array,
    "%URIError%": u,
    "%WeakMap%": typeof WeakMap > "u" ? r : WeakMap,
    "%WeakRef%": typeof WeakRef > "u" ? r : WeakRef,
    "%WeakSet%": typeof WeakSet > "u" ? r : WeakSet
  };
  if (y)
    try {
      null.error;
    } catch (N) {
      var I = y(y(N));
      w["%Error.prototype%"] = I;
    }
  var T = function N(k) {
    var D;
    if (k === "%AsyncFunction%")
      D = f("async function () {}");
    else if (k === "%GeneratorFunction%")
      D = f("function* () {}");
    else if (k === "%AsyncGeneratorFunction%")
      D = f("async function* () {}");
    else if (k === "%AsyncGenerator%") {
      var E = N("%AsyncGeneratorFunction%");
      E && (D = E.prototype);
    } else if (k === "%AsyncIteratorPrototype%") {
      var M = N("%AsyncGenerator%");
      M && y && (D = y(M.prototype));
    }
    return w[k] = D, D;
  }, _ = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  }, F = requireFunctionBind(), O = /* @__PURE__ */ requireHasown(), q = F.call(Function.call, Array.prototype.concat), V = F.call(Function.apply, Array.prototype.splice), H = F.call(Function.call, String.prototype.replace), R = F.call(Function.call, String.prototype.slice), $ = F.call(Function.call, RegExp.prototype.exec), S = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, x = /\\(\\)?/g, C = function(k) {
    var D = R(k, 0, 1), E = R(k, -1);
    if (D === "%" && E !== "%")
      throw new a("invalid intrinsic syntax, expected closing `%`");
    if (E === "%" && D !== "%")
      throw new a("invalid intrinsic syntax, expected opening `%`");
    var M = [];
    return H(k, S, function(P, z, J, re) {
      M[M.length] = J ? H(re, x, "$1") : z || P;
    }), M;
  }, A = function(k, D) {
    var E = k, M;
    if (O(_, E) && (M = _[E], E = "%" + M[0] + "%"), O(w, E)) {
      var P = w[E];
      if (P === b && (P = T(E)), typeof P > "u" && !D)
        throw new o("intrinsic " + k + " exists, but is not available. Please file an issue!");
      return {
        alias: M,
        name: E,
        value: P
      };
    }
    throw new a("intrinsic " + k + " does not exist!");
  };
  return getIntrinsic = function(k, D) {
    if (typeof k != "string" || k.length === 0)
      throw new o("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof D != "boolean")
      throw new o('"allowMissing" argument must be a boolean');
    if ($(/^%?[^%]*%?$/, k) === null)
      throw new a("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var E = C(k), M = E.length > 0 ? E[0] : "", P = A("%" + M + "%", D), z = P.name, J = P.value, re = !1, Q = P.alias;
    Q && (M = Q[0], V(E, q([0, 1], Q)));
    for (var W = 1, j = !0; W < E.length; W += 1) {
      var te = E[W], se = R(te, 0, 1), X = R(te, -1);
      if ((se === '"' || se === "'" || se === "`" || X === '"' || X === "'" || X === "`") && se !== X)
        throw new a("property names with quotes must have matching quotes");
      if ((te === "constructor" || !j) && (re = !0), M += "." + te, z = "%" + M + "%", O(w, z))
        J = w[z];
      else if (J != null) {
        if (!(te in J)) {
          if (!D)
            throw new o("base intrinsic for " + k + " exists, but the property is not available.");
          return;
        }
        if (c && W + 1 >= E.length) {
          var K = c(J, te);
          j = !!K, j && "get" in K && !("originalValue" in K.get) ? J = K.get : J = J[te];
        } else
          j = O(J, te), J = J[te];
        j && !re && (w[z] = J);
      }
    }
    return J;
  }, getIntrinsic;
}
var esDefineProperty, hasRequiredEsDefineProperty;
function requireEsDefineProperty() {
  if (hasRequiredEsDefineProperty) return esDefineProperty;
  hasRequiredEsDefineProperty = 1;
  var r = /* @__PURE__ */ requireGetIntrinsic(), e = r("%Object.defineProperty%", !0) || !1;
  if (e)
    try {
      e({}, "a", { value: 1 });
    } catch {
      e = !1;
    }
  return esDefineProperty = e, esDefineProperty;
}
var gopd, hasRequiredGopd;
function requireGopd() {
  if (hasRequiredGopd) return gopd;
  hasRequiredGopd = 1;
  var r = /* @__PURE__ */ requireGetIntrinsic(), e = r("%Object.getOwnPropertyDescriptor%", !0);
  if (e)
    try {
      e([], "length");
    } catch {
      e = null;
    }
  return gopd = e, gopd;
}
var defineDataProperty, hasRequiredDefineDataProperty;
function requireDefineDataProperty() {
  if (hasRequiredDefineDataProperty) return defineDataProperty;
  hasRequiredDefineDataProperty = 1;
  var r = /* @__PURE__ */ requireEsDefineProperty(), e = /* @__PURE__ */ requireSyntax(), t = /* @__PURE__ */ requireType(), n = /* @__PURE__ */ requireGopd();
  return defineDataProperty = function(a, o, u) {
    if (!a || typeof a != "object" && typeof a != "function")
      throw new t("`obj` must be an object or a function`");
    if (typeof o != "string" && typeof o != "symbol")
      throw new t("`property` must be a string or a symbol`");
    if (arguments.length > 3 && typeof arguments[3] != "boolean" && arguments[3] !== null)
      throw new t("`nonEnumerable`, if provided, must be a boolean or null");
    if (arguments.length > 4 && typeof arguments[4] != "boolean" && arguments[4] !== null)
      throw new t("`nonWritable`, if provided, must be a boolean or null");
    if (arguments.length > 5 && typeof arguments[5] != "boolean" && arguments[5] !== null)
      throw new t("`nonConfigurable`, if provided, must be a boolean or null");
    if (arguments.length > 6 && typeof arguments[6] != "boolean")
      throw new t("`loose`, if provided, must be a boolean");
    var l = arguments.length > 3 ? arguments[3] : null, f = arguments.length > 4 ? arguments[4] : null, c = arguments.length > 5 ? arguments[5] : null, h = arguments.length > 6 ? arguments[6] : !1, d = !!n && n(a, o);
    if (r)
      r(a, o, {
        configurable: c === null && d ? d.configurable : !c,
        enumerable: l === null && d ? d.enumerable : !l,
        value: u,
        writable: f === null && d ? d.writable : !f
      });
    else if (h || !l && !f && !c)
      a[o] = u;
    else
      throw new e("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
  }, defineDataProperty;
}
var hasPropertyDescriptors_1, hasRequiredHasPropertyDescriptors;
function requireHasPropertyDescriptors() {
  if (hasRequiredHasPropertyDescriptors) return hasPropertyDescriptors_1;
  hasRequiredHasPropertyDescriptors = 1;
  var r = /* @__PURE__ */ requireEsDefineProperty(), e = function() {
    return !!r;
  };
  return e.hasArrayLengthDefineBug = function() {
    if (!r)
      return null;
    try {
      return r([], "length", { value: 1 }).length !== 1;
    } catch {
      return !0;
    }
  }, hasPropertyDescriptors_1 = e, hasPropertyDescriptors_1;
}
var setFunctionLength, hasRequiredSetFunctionLength;
function requireSetFunctionLength() {
  if (hasRequiredSetFunctionLength) return setFunctionLength;
  hasRequiredSetFunctionLength = 1;
  var r = /* @__PURE__ */ requireGetIntrinsic(), e = /* @__PURE__ */ requireDefineDataProperty(), t = /* @__PURE__ */ requireHasPropertyDescriptors()(), n = /* @__PURE__ */ requireGopd(), s = /* @__PURE__ */ requireType(), a = r("%Math.floor%");
  return setFunctionLength = function(u, l) {
    if (typeof u != "function")
      throw new s("`fn` is not a function");
    if (typeof l != "number" || l < 0 || l > 4294967295 || a(l) !== l)
      throw new s("`length` must be a positive 32-bit integer");
    var f = arguments.length > 2 && !!arguments[2], c = !0, h = !0;
    if ("length" in u && n) {
      var d = n(u, "length");
      d && !d.configurable && (c = !1), d && !d.writable && (h = !1);
    }
    return (c || h || !f) && (t ? e(
      /** @type {Parameters<define>[0]} */
      u,
      "length",
      l,
      !0,
      !0
    ) : e(
      /** @type {Parameters<define>[0]} */
      u,
      "length",
      l
    )), u;
  }, setFunctionLength;
}
var hasRequiredCallBind;
function requireCallBind() {
  return hasRequiredCallBind || (hasRequiredCallBind = 1, function(r) {
    var e = requireFunctionBind(), t = /* @__PURE__ */ requireGetIntrinsic(), n = /* @__PURE__ */ requireSetFunctionLength(), s = /* @__PURE__ */ requireType(), a = t("%Function.prototype.apply%"), o = t("%Function.prototype.call%"), u = t("%Reflect.apply%", !0) || e.call(o, a), l = /* @__PURE__ */ requireEsDefineProperty(), f = t("%Math.max%");
    r.exports = function(d) {
      if (typeof d != "function")
        throw new s("a function is required");
      var m = u(e, o, arguments);
      return n(
        m,
        1 + f(0, d.length - (arguments.length - 1)),
        !0
      );
    };
    var c = function() {
      return u(e, a, arguments);
    };
    l ? l(r.exports, "apply", { value: c }) : r.exports.apply = c;
  }(callBind)), callBind.exports;
}
var callBound, hasRequiredCallBound;
function requireCallBound() {
  if (hasRequiredCallBound) return callBound;
  hasRequiredCallBound = 1;
  var r = /* @__PURE__ */ requireGetIntrinsic(), e = requireCallBind(), t = e(r("String.prototype.indexOf"));
  return callBound = function(s, a) {
    var o = r(s, !!a);
    return typeof o == "function" && t(s, ".prototype.") > -1 ? e(o) : o;
  }, callBound;
}
var whichTypedArray, hasRequiredWhichTypedArray;
function requireWhichTypedArray() {
  if (hasRequiredWhichTypedArray) return whichTypedArray;
  hasRequiredWhichTypedArray = 1;
  var r = requireForEach(), e = /* @__PURE__ */ requireAvailableTypedArrays(), t = requireCallBind(), n = requireCallBound(), s = /* @__PURE__ */ requireGopd(), a = n("Object.prototype.toString"), o = requireShams$1()(), u = typeof globalThis > "u" ? commonjsGlobal : globalThis, l = e(), f = n("String.prototype.slice"), c = Object.getPrototypeOf, h = n("Array.prototype.indexOf", !0) || function(b, v) {
    for (var w = 0; w < b.length; w += 1)
      if (b[w] === v)
        return w;
    return -1;
  }, d = { __proto__: null };
  o && s && c ? r(l, function(y) {
    var b = new u[y]();
    if (Symbol.toStringTag in b) {
      var v = c(b), w = s(v, Symbol.toStringTag);
      if (!w) {
        var I = c(v);
        w = s(I, Symbol.toStringTag);
      }
      d["$" + y] = t(w.get);
    }
  }) : r(l, function(y) {
    var b = new u[y](), v = b.slice || b.set;
    v && (d["$" + y] = t(v));
  });
  var m = function(b) {
    var v = !1;
    return r(
      // eslint-disable-next-line no-extra-parens
      /** @type {Record<`\$${TypedArrayName}`, Getter>} */
      /** @type {any} */
      d,
      /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
      function(w, I) {
        if (!v)
          try {
            "$" + w(b) === I && (v = f(I, 1));
          } catch {
          }
      }
    ), v;
  }, g = function(b) {
    var v = !1;
    return r(
      // eslint-disable-next-line no-extra-parens
      /** @type {Record<`\$${TypedArrayName}`, Getter>} */
      /** @type {any} */
      d,
      /** @type {(getter: typeof cache, name: `\$${import('.').TypedArrayName}`) => void} */
      function(w, I) {
        if (!v)
          try {
            w(b), v = f(I, 1);
          } catch {
          }
      }
    ), v;
  };
  return whichTypedArray = function(b) {
    if (!b || typeof b != "object")
      return !1;
    if (!o) {
      var v = f(a(b), 8, -1);
      return h(l, v) > -1 ? v : v !== "Object" ? !1 : g(b);
    }
    return s ? m(b) : null;
  }, whichTypedArray;
}
var isTypedArray, hasRequiredIsTypedArray;
function requireIsTypedArray() {
  if (hasRequiredIsTypedArray) return isTypedArray;
  hasRequiredIsTypedArray = 1;
  var r = /* @__PURE__ */ requireWhichTypedArray();
  return isTypedArray = function(t) {
    return !!r(t);
  }, isTypedArray;
}
var hasRequiredTypes;
function requireTypes() {
  return hasRequiredTypes || (hasRequiredTypes = 1, function(r) {
    var e = /* @__PURE__ */ requireIsArguments(), t = requireIsGeneratorFunction(), n = /* @__PURE__ */ requireWhichTypedArray(), s = /* @__PURE__ */ requireIsTypedArray();
    function a(ce) {
      return ce.call.bind(ce);
    }
    var o = typeof BigInt < "u", u = typeof Symbol < "u", l = a(Object.prototype.toString), f = a(Number.prototype.valueOf), c = a(String.prototype.valueOf), h = a(Boolean.prototype.valueOf);
    if (o)
      var d = a(BigInt.prototype.valueOf);
    if (u)
      var m = a(Symbol.prototype.valueOf);
    function g(ce, $e) {
      if (typeof ce != "object")
        return !1;
      try {
        return $e(ce), !0;
      } catch {
        return !1;
      }
    }
    r.isArgumentsObject = e, r.isGeneratorFunction = t, r.isTypedArray = s;
    function y(ce) {
      return typeof Promise < "u" && ce instanceof Promise || ce !== null && typeof ce == "object" && typeof ce.then == "function" && typeof ce.catch == "function";
    }
    r.isPromise = y;
    function b(ce) {
      return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? ArrayBuffer.isView(ce) : s(ce) || z(ce);
    }
    r.isArrayBufferView = b;
    function v(ce) {
      return n(ce) === "Uint8Array";
    }
    r.isUint8Array = v;
    function w(ce) {
      return n(ce) === "Uint8ClampedArray";
    }
    r.isUint8ClampedArray = w;
    function I(ce) {
      return n(ce) === "Uint16Array";
    }
    r.isUint16Array = I;
    function T(ce) {
      return n(ce) === "Uint32Array";
    }
    r.isUint32Array = T;
    function _(ce) {
      return n(ce) === "Int8Array";
    }
    r.isInt8Array = _;
    function F(ce) {
      return n(ce) === "Int16Array";
    }
    r.isInt16Array = F;
    function O(ce) {
      return n(ce) === "Int32Array";
    }
    r.isInt32Array = O;
    function q(ce) {
      return n(ce) === "Float32Array";
    }
    r.isFloat32Array = q;
    function V(ce) {
      return n(ce) === "Float64Array";
    }
    r.isFloat64Array = V;
    function H(ce) {
      return n(ce) === "BigInt64Array";
    }
    r.isBigInt64Array = H;
    function R(ce) {
      return n(ce) === "BigUint64Array";
    }
    r.isBigUint64Array = R;
    function $(ce) {
      return l(ce) === "[object Map]";
    }
    $.working = typeof Map < "u" && $(/* @__PURE__ */ new Map());
    function S(ce) {
      return typeof Map > "u" ? !1 : $.working ? $(ce) : ce instanceof Map;
    }
    r.isMap = S;
    function x(ce) {
      return l(ce) === "[object Set]";
    }
    x.working = typeof Set < "u" && x(/* @__PURE__ */ new Set());
    function C(ce) {
      return typeof Set > "u" ? !1 : x.working ? x(ce) : ce instanceof Set;
    }
    r.isSet = C;
    function A(ce) {
      return l(ce) === "[object WeakMap]";
    }
    A.working = typeof WeakMap < "u" && A(/* @__PURE__ */ new WeakMap());
    function N(ce) {
      return typeof WeakMap > "u" ? !1 : A.working ? A(ce) : ce instanceof WeakMap;
    }
    r.isWeakMap = N;
    function k(ce) {
      return l(ce) === "[object WeakSet]";
    }
    k.working = typeof WeakSet < "u" && k(/* @__PURE__ */ new WeakSet());
    function D(ce) {
      return k(ce);
    }
    r.isWeakSet = D;
    function E(ce) {
      return l(ce) === "[object ArrayBuffer]";
    }
    E.working = typeof ArrayBuffer < "u" && E(new ArrayBuffer());
    function M(ce) {
      return typeof ArrayBuffer > "u" ? !1 : E.working ? E(ce) : ce instanceof ArrayBuffer;
    }
    r.isArrayBuffer = M;
    function P(ce) {
      return l(ce) === "[object DataView]";
    }
    P.working = typeof ArrayBuffer < "u" && typeof DataView < "u" && P(new DataView(new ArrayBuffer(1), 0, 1));
    function z(ce) {
      return typeof DataView > "u" ? !1 : P.working ? P(ce) : ce instanceof DataView;
    }
    r.isDataView = z;
    var J = typeof SharedArrayBuffer < "u" ? SharedArrayBuffer : void 0;
    function re(ce) {
      return l(ce) === "[object SharedArrayBuffer]";
    }
    function Q(ce) {
      return typeof J > "u" ? !1 : (typeof re.working > "u" && (re.working = re(new J())), re.working ? re(ce) : ce instanceof J);
    }
    r.isSharedArrayBuffer = Q;
    function W(ce) {
      return l(ce) === "[object AsyncFunction]";
    }
    r.isAsyncFunction = W;
    function j(ce) {
      return l(ce) === "[object Map Iterator]";
    }
    r.isMapIterator = j;
    function te(ce) {
      return l(ce) === "[object Set Iterator]";
    }
    r.isSetIterator = te;
    function se(ce) {
      return l(ce) === "[object Generator]";
    }
    r.isGeneratorObject = se;
    function X(ce) {
      return l(ce) === "[object WebAssembly.Module]";
    }
    r.isWebAssemblyCompiledModule = X;
    function K(ce) {
      return g(ce, f);
    }
    r.isNumberObject = K;
    function ae(ce) {
      return g(ce, c);
    }
    r.isStringObject = ae;
    function de(ce) {
      return g(ce, h);
    }
    r.isBooleanObject = de;
    function me(ce) {
      return o && g(ce, d);
    }
    r.isBigIntObject = me;
    function pe(ce) {
      return u && g(ce, m);
    }
    r.isSymbolObject = pe;
    function ge(ce) {
      return K(ce) || ae(ce) || de(ce) || me(ce) || pe(ce);
    }
    r.isBoxedPrimitive = ge;
    function ye(ce) {
      return typeof Uint8Array < "u" && (M(ce) || Q(ce));
    }
    r.isAnyArrayBuffer = ye, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(ce) {
      Object.defineProperty(r, ce, {
        enumerable: !1,
        value: function() {
          throw new Error(ce + " is not supported in userland");
        }
      });
    });
  }(types)), types;
}
var isBufferBrowser, hasRequiredIsBufferBrowser;
function requireIsBufferBrowser() {
  return hasRequiredIsBufferBrowser || (hasRequiredIsBufferBrowser = 1, isBufferBrowser = function(e) {
    return e && typeof e == "object" && typeof e.copy == "function" && typeof e.fill == "function" && typeof e.readUInt8 == "function";
  }), isBufferBrowser;
}
var hasRequiredUtil$1;
function requireUtil$1() {
  return hasRequiredUtil$1 || (hasRequiredUtil$1 = 1, function(r) {
    var e = {}, t = Object.getOwnPropertyDescriptors || function(J) {
      for (var re = Object.keys(J), Q = {}, W = 0; W < re.length; W++)
        Q[re[W]] = Object.getOwnPropertyDescriptor(J, re[W]);
      return Q;
    }, n = /%[sdj%]/g;
    r.format = function(z) {
      if (!F(z)) {
        for (var J = [], re = 0; re < arguments.length; re++)
          J.push(u(arguments[re]));
        return J.join(" ");
      }
      for (var re = 1, Q = arguments, W = Q.length, j = String(z).replace(n, function(se) {
        if (se === "%%") return "%";
        if (re >= W) return se;
        switch (se) {
          case "%s":
            return String(Q[re++]);
          case "%d":
            return Number(Q[re++]);
          case "%j":
            try {
              return JSON.stringify(Q[re++]);
            } catch {
              return "[Circular]";
            }
          default:
            return se;
        }
      }), te = Q[re]; re < W; te = Q[++re])
        I(te) || !H(te) ? j += " " + te : j += " " + u(te);
      return j;
    }, r.deprecate = function(z, J) {
      if (typeof process$1 < "u" && process$1.noDeprecation === !0)
        return z;
      if (typeof process$1 > "u")
        return function() {
          return r.deprecate(z, J).apply(this, arguments);
        };
      var re = !1;
      function Q() {
        if (!re) {
          if (process$1.throwDeprecation)
            throw new Error(J);
          process$1.traceDeprecation ? console.trace(J) : console.error(J), re = !0;
        }
        return z.apply(this, arguments);
      }
      return Q;
    };
    var s = {}, a = /^$/;
    if (e.NODE_DEBUG) {
      var o = e.NODE_DEBUG;
      o = o.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), a = new RegExp("^" + o + "$", "i");
    }
    r.debuglog = function(z) {
      if (z = z.toUpperCase(), !s[z])
        if (a.test(z)) {
          var J = process$1.pid;
          s[z] = function() {
            var re = r.format.apply(r, arguments);
            console.error("%s %d: %s", z, J, re);
          };
        } else
          s[z] = function() {
          };
      return s[z];
    };
    function u(z, J) {
      var re = {
        seen: [],
        stylize: f
      };
      return arguments.length >= 3 && (re.depth = arguments[2]), arguments.length >= 4 && (re.colors = arguments[3]), w(J) ? re.showHidden = J : J && r._extend(re, J), q(re.showHidden) && (re.showHidden = !1), q(re.depth) && (re.depth = 2), q(re.colors) && (re.colors = !1), q(re.customInspect) && (re.customInspect = !0), re.colors && (re.stylize = l), h(re, z, re.depth);
    }
    r.inspect = u, u.colors = {
      bold: [1, 22],
      italic: [3, 23],
      underline: [4, 24],
      inverse: [7, 27],
      white: [37, 39],
      grey: [90, 39],
      black: [30, 39],
      blue: [34, 39],
      cyan: [36, 39],
      green: [32, 39],
      magenta: [35, 39],
      red: [31, 39],
      yellow: [33, 39]
    }, u.styles = {
      special: "cyan",
      number: "yellow",
      boolean: "yellow",
      undefined: "grey",
      null: "bold",
      string: "green",
      date: "magenta",
      // "name": intentionally not styling
      regexp: "red"
    };
    function l(z, J) {
      var re = u.styles[J];
      return re ? "\x1B[" + u.colors[re][0] + "m" + z + "\x1B[" + u.colors[re][1] + "m" : z;
    }
    function f(z, J) {
      return z;
    }
    function c(z) {
      var J = {};
      return z.forEach(function(re, Q) {
        J[re] = !0;
      }), J;
    }
    function h(z, J, re) {
      if (z.customInspect && J && S(J.inspect) && // Filter out the util module, it's inspect function is special
      J.inspect !== r.inspect && // Also filter out any prototype objects using the circular check.
      !(J.constructor && J.constructor.prototype === J)) {
        var Q = J.inspect(re, z);
        return F(Q) || (Q = h(z, Q, re)), Q;
      }
      var W = d(z, J);
      if (W)
        return W;
      var j = Object.keys(J), te = c(j);
      if (z.showHidden && (j = Object.getOwnPropertyNames(J)), $(J) && (j.indexOf("message") >= 0 || j.indexOf("description") >= 0))
        return m(J);
      if (j.length === 0) {
        if (S(J)) {
          var se = J.name ? ": " + J.name : "";
          return z.stylize("[Function" + se + "]", "special");
        }
        if (V(J))
          return z.stylize(RegExp.prototype.toString.call(J), "regexp");
        if (R(J))
          return z.stylize(Date.prototype.toString.call(J), "date");
        if ($(J))
          return m(J);
      }
      var X = "", K = !1, ae = ["{", "}"];
      if (v(J) && (K = !0, ae = ["[", "]"]), S(J)) {
        var de = J.name ? ": " + J.name : "";
        X = " [Function" + de + "]";
      }
      if (V(J) && (X = " " + RegExp.prototype.toString.call(J)), R(J) && (X = " " + Date.prototype.toUTCString.call(J)), $(J) && (X = " " + m(J)), j.length === 0 && (!K || J.length == 0))
        return ae[0] + X + ae[1];
      if (re < 0)
        return V(J) ? z.stylize(RegExp.prototype.toString.call(J), "regexp") : z.stylize("[Object]", "special");
      z.seen.push(J);
      var me;
      return K ? me = g(z, J, re, te, j) : me = j.map(function(pe) {
        return y(z, J, re, te, pe, K);
      }), z.seen.pop(), b(me, X, ae);
    }
    function d(z, J) {
      if (q(J))
        return z.stylize("undefined", "undefined");
      if (F(J)) {
        var re = "'" + JSON.stringify(J).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return z.stylize(re, "string");
      }
      if (_(J))
        return z.stylize("" + J, "number");
      if (w(J))
        return z.stylize("" + J, "boolean");
      if (I(J))
        return z.stylize("null", "null");
    }
    function m(z) {
      return "[" + Error.prototype.toString.call(z) + "]";
    }
    function g(z, J, re, Q, W) {
      for (var j = [], te = 0, se = J.length; te < se; ++te)
        D(J, String(te)) ? j.push(y(
          z,
          J,
          re,
          Q,
          String(te),
          !0
        )) : j.push("");
      return W.forEach(function(X) {
        X.match(/^\d+$/) || j.push(y(
          z,
          J,
          re,
          Q,
          X,
          !0
        ));
      }), j;
    }
    function y(z, J, re, Q, W, j) {
      var te, se, X;
      if (X = Object.getOwnPropertyDescriptor(J, W) || { value: J[W] }, X.get ? X.set ? se = z.stylize("[Getter/Setter]", "special") : se = z.stylize("[Getter]", "special") : X.set && (se = z.stylize("[Setter]", "special")), D(Q, W) || (te = "[" + W + "]"), se || (z.seen.indexOf(X.value) < 0 ? (I(re) ? se = h(z, X.value, null) : se = h(z, X.value, re - 1), se.indexOf(`
`) > -1 && (j ? se = se.split(`
`).map(function(K) {
        return "  " + K;
      }).join(`
`).slice(2) : se = `
` + se.split(`
`).map(function(K) {
        return "   " + K;
      }).join(`
`))) : se = z.stylize("[Circular]", "special")), q(te)) {
        if (j && W.match(/^\d+$/))
          return se;
        te = JSON.stringify("" + W), te.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (te = te.slice(1, -1), te = z.stylize(te, "name")) : (te = te.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), te = z.stylize(te, "string"));
      }
      return te + ": " + se;
    }
    function b(z, J, re) {
      var Q = z.reduce(function(W, j) {
        return j.indexOf(`
`) >= 0, W + j.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      return Q > 60 ? re[0] + (J === "" ? "" : J + `
 `) + " " + z.join(`,
  `) + " " + re[1] : re[0] + J + " " + z.join(", ") + " " + re[1];
    }
    r.types = requireTypes();
    function v(z) {
      return Array.isArray(z);
    }
    r.isArray = v;
    function w(z) {
      return typeof z == "boolean";
    }
    r.isBoolean = w;
    function I(z) {
      return z === null;
    }
    r.isNull = I;
    function T(z) {
      return z == null;
    }
    r.isNullOrUndefined = T;
    function _(z) {
      return typeof z == "number";
    }
    r.isNumber = _;
    function F(z) {
      return typeof z == "string";
    }
    r.isString = F;
    function O(z) {
      return typeof z == "symbol";
    }
    r.isSymbol = O;
    function q(z) {
      return z === void 0;
    }
    r.isUndefined = q;
    function V(z) {
      return H(z) && C(z) === "[object RegExp]";
    }
    r.isRegExp = V, r.types.isRegExp = V;
    function H(z) {
      return typeof z == "object" && z !== null;
    }
    r.isObject = H;
    function R(z) {
      return H(z) && C(z) === "[object Date]";
    }
    r.isDate = R, r.types.isDate = R;
    function $(z) {
      return H(z) && (C(z) === "[object Error]" || z instanceof Error);
    }
    r.isError = $, r.types.isNativeError = $;
    function S(z) {
      return typeof z == "function";
    }
    r.isFunction = S;
    function x(z) {
      return z === null || typeof z == "boolean" || typeof z == "number" || typeof z == "string" || typeof z == "symbol" || // ES6 symbol
      typeof z > "u";
    }
    r.isPrimitive = x, r.isBuffer = requireIsBufferBrowser();
    function C(z) {
      return Object.prototype.toString.call(z);
    }
    function A(z) {
      return z < 10 ? "0" + z.toString(10) : z.toString(10);
    }
    var N = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function k() {
      var z = /* @__PURE__ */ new Date(), J = [
        A(z.getHours()),
        A(z.getMinutes()),
        A(z.getSeconds())
      ].join(":");
      return [z.getDate(), N[z.getMonth()], J].join(" ");
    }
    r.log = function() {
      console.log("%s - %s", k(), r.format.apply(r, arguments));
    }, r.inherits = requireInherits_browser(), r._extend = function(z, J) {
      if (!J || !H(J)) return z;
      for (var re = Object.keys(J), Q = re.length; Q--; )
        z[re[Q]] = J[re[Q]];
      return z;
    };
    function D(z, J) {
      return Object.prototype.hasOwnProperty.call(z, J);
    }
    var E = typeof Symbol < "u" ? Symbol("util.promisify.custom") : void 0;
    r.promisify = function(J) {
      if (typeof J != "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (E && J[E]) {
        var re = J[E];
        if (typeof re != "function")
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        return Object.defineProperty(re, E, {
          value: re,
          enumerable: !1,
          writable: !1,
          configurable: !0
        }), re;
      }
      function re() {
        for (var Q, W, j = new Promise(function(X, K) {
          Q = X, W = K;
        }), te = [], se = 0; se < arguments.length; se++)
          te.push(arguments[se]);
        te.push(function(X, K) {
          X ? W(X) : Q(K);
        });
        try {
          J.apply(this, te);
        } catch (X) {
          W(X);
        }
        return j;
      }
      return Object.setPrototypeOf(re, Object.getPrototypeOf(J)), E && Object.defineProperty(re, E, {
        value: re,
        enumerable: !1,
        writable: !1,
        configurable: !0
      }), Object.defineProperties(
        re,
        t(J)
      );
    }, r.promisify.custom = E;
    function M(z, J) {
      if (!z) {
        var re = new Error("Promise was rejected with a falsy value");
        re.reason = z, z = re;
      }
      return J(z);
    }
    function P(z) {
      if (typeof z != "function")
        throw new TypeError('The "original" argument must be of type Function');
      function J() {
        for (var re = [], Q = 0; Q < arguments.length; Q++)
          re.push(arguments[Q]);
        var W = re.pop();
        if (typeof W != "function")
          throw new TypeError("The last argument must be of type Function");
        var j = this, te = function() {
          return W.apply(j, arguments);
        };
        z.apply(this, re).then(
          function(se) {
            process$1.nextTick(te.bind(null, null, se));
          },
          function(se) {
            process$1.nextTick(M.bind(null, se, te));
          }
        );
      }
      return Object.setPrototypeOf(J, Object.getPrototypeOf(z)), Object.defineProperties(
        J,
        t(z)
      ), J;
    }
    r.callbackify = P;
  }(util$1)), util$1;
}
var buffer_list, hasRequiredBuffer_list;
function requireBuffer_list() {
  if (hasRequiredBuffer_list) return buffer_list;
  hasRequiredBuffer_list = 1;
  function r(g, y) {
    var b = Object.keys(g);
    if (Object.getOwnPropertySymbols) {
      var v = Object.getOwnPropertySymbols(g);
      y && (v = v.filter(function(w) {
        return Object.getOwnPropertyDescriptor(g, w).enumerable;
      })), b.push.apply(b, v);
    }
    return b;
  }
  function e(g) {
    for (var y = 1; y < arguments.length; y++) {
      var b = arguments[y] != null ? arguments[y] : {};
      y % 2 ? r(Object(b), !0).forEach(function(v) {
        t(g, v, b[v]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(g, Object.getOwnPropertyDescriptors(b)) : r(Object(b)).forEach(function(v) {
        Object.defineProperty(g, v, Object.getOwnPropertyDescriptor(b, v));
      });
    }
    return g;
  }
  function t(g, y, b) {
    return y = o(y), y in g ? Object.defineProperty(g, y, { value: b, enumerable: !0, configurable: !0, writable: !0 }) : g[y] = b, g;
  }
  function n(g, y) {
    if (!(g instanceof y))
      throw new TypeError("Cannot call a class as a function");
  }
  function s(g, y) {
    for (var b = 0; b < y.length; b++) {
      var v = y[b];
      v.enumerable = v.enumerable || !1, v.configurable = !0, "value" in v && (v.writable = !0), Object.defineProperty(g, o(v.key), v);
    }
  }
  function a(g, y, b) {
    return y && s(g.prototype, y), Object.defineProperty(g, "prototype", { writable: !1 }), g;
  }
  function o(g) {
    var y = u(g, "string");
    return typeof y == "symbol" ? y : String(y);
  }
  function u(g, y) {
    if (typeof g != "object" || g === null) return g;
    var b = g[Symbol.toPrimitive];
    if (b !== void 0) {
      var v = b.call(g, y);
      if (typeof v != "object") return v;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(g);
  }
  var l = requireDist(), f = l.Buffer, c = requireUtil$1(), h = c.inspect, d = h && h.custom || "inspect";
  function m(g, y, b) {
    f.prototype.copy.call(g, y, b);
  }
  return buffer_list = /* @__PURE__ */ function() {
    function g() {
      n(this, g), this.head = null, this.tail = null, this.length = 0;
    }
    return a(g, [{
      key: "push",
      value: function(b) {
        var v = {
          data: b,
          next: null
        };
        this.length > 0 ? this.tail.next = v : this.head = v, this.tail = v, ++this.length;
      }
    }, {
      key: "unshift",
      value: function(b) {
        var v = {
          data: b,
          next: this.head
        };
        this.length === 0 && (this.tail = v), this.head = v, ++this.length;
      }
    }, {
      key: "shift",
      value: function() {
        if (this.length !== 0) {
          var b = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, b;
        }
      }
    }, {
      key: "clear",
      value: function() {
        this.head = this.tail = null, this.length = 0;
      }
    }, {
      key: "join",
      value: function(b) {
        if (this.length === 0) return "";
        for (var v = this.head, w = "" + v.data; v = v.next; ) w += b + v.data;
        return w;
      }
    }, {
      key: "concat",
      value: function(b) {
        if (this.length === 0) return f.alloc(0);
        for (var v = f.allocUnsafe(b >>> 0), w = this.head, I = 0; w; )
          m(w.data, v, I), I += w.data.length, w = w.next;
        return v;
      }
      // Consumes a specified amount of bytes or characters from the buffered data.
    }, {
      key: "consume",
      value: function(b, v) {
        var w;
        return b < this.head.data.length ? (w = this.head.data.slice(0, b), this.head.data = this.head.data.slice(b)) : b === this.head.data.length ? w = this.shift() : w = v ? this._getString(b) : this._getBuffer(b), w;
      }
    }, {
      key: "first",
      value: function() {
        return this.head.data;
      }
      // Consumes a specified amount of characters from the buffered data.
    }, {
      key: "_getString",
      value: function(b) {
        var v = this.head, w = 1, I = v.data;
        for (b -= I.length; v = v.next; ) {
          var T = v.data, _ = b > T.length ? T.length : b;
          if (_ === T.length ? I += T : I += T.slice(0, b), b -= _, b === 0) {
            _ === T.length ? (++w, v.next ? this.head = v.next : this.head = this.tail = null) : (this.head = v, v.data = T.slice(_));
            break;
          }
          ++w;
        }
        return this.length -= w, I;
      }
      // Consumes a specified amount of bytes from the buffered data.
    }, {
      key: "_getBuffer",
      value: function(b) {
        var v = f.allocUnsafe(b), w = this.head, I = 1;
        for (w.data.copy(v), b -= w.data.length; w = w.next; ) {
          var T = w.data, _ = b > T.length ? T.length : b;
          if (T.copy(v, v.length - b, 0, _), b -= _, b === 0) {
            _ === T.length ? (++I, w.next ? this.head = w.next : this.head = this.tail = null) : (this.head = w, w.data = T.slice(_));
            break;
          }
          ++I;
        }
        return this.length -= I, v;
      }
      // Make sure the linked list only shows the minimal necessary information.
    }, {
      key: d,
      value: function(b, v) {
        return h(this, e(e({}, v), {}, {
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: !1
        }));
      }
    }]), g;
  }(), buffer_list;
}
var destroy_1$1, hasRequiredDestroy$1;
function requireDestroy$1() {
  if (hasRequiredDestroy$1) return destroy_1$1;
  hasRequiredDestroy$1 = 1;
  function r(o, u) {
    var l = this, f = this._readableState && this._readableState.destroyed, c = this._writableState && this._writableState.destroyed;
    return f || c ? (u ? u(o) : o && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, process$1.nextTick(s, this, o)) : process$1.nextTick(s, this, o)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(o || null, function(h) {
      !u && h ? l._writableState ? l._writableState.errorEmitted ? process$1.nextTick(t, l) : (l._writableState.errorEmitted = !0, process$1.nextTick(e, l, h)) : process$1.nextTick(e, l, h) : u ? (process$1.nextTick(t, l), u(h)) : process$1.nextTick(t, l);
    }), this);
  }
  function e(o, u) {
    s(o, u), t(o);
  }
  function t(o) {
    o._writableState && !o._writableState.emitClose || o._readableState && !o._readableState.emitClose || o.emit("close");
  }
  function n() {
    this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
  }
  function s(o, u) {
    o.emit("error", u);
  }
  function a(o, u) {
    var l = o._readableState, f = o._writableState;
    l && l.autoDestroy || f && f.autoDestroy ? o.destroy(u) : o.emit("error", u);
  }
  return destroy_1$1 = {
    destroy: r,
    undestroy: n,
    errorOrDestroy: a
  }, destroy_1$1;
}
var errorsBrowser = {}, hasRequiredErrorsBrowser;
function requireErrorsBrowser() {
  if (hasRequiredErrorsBrowser) return errorsBrowser;
  hasRequiredErrorsBrowser = 1;
  function r(u, l) {
    u.prototype = Object.create(l.prototype), u.prototype.constructor = u, u.__proto__ = l;
  }
  var e = {};
  function t(u, l, f) {
    f || (f = Error);
    function c(d, m, g) {
      return typeof l == "string" ? l : l(d, m, g);
    }
    var h = /* @__PURE__ */ function(d) {
      r(m, d);
      function m(g, y, b) {
        return d.call(this, c(g, y, b)) || this;
      }
      return m;
    }(f);
    h.prototype.name = f.name, h.prototype.code = u, e[u] = h;
  }
  function n(u, l) {
    if (Array.isArray(u)) {
      var f = u.length;
      return u = u.map(function(c) {
        return String(c);
      }), f > 2 ? "one of ".concat(l, " ").concat(u.slice(0, f - 1).join(", "), ", or ") + u[f - 1] : f === 2 ? "one of ".concat(l, " ").concat(u[0], " or ").concat(u[1]) : "of ".concat(l, " ").concat(u[0]);
    } else
      return "of ".concat(l, " ").concat(String(u));
  }
  function s(u, l, f) {
    return u.substr(0, l.length) === l;
  }
  function a(u, l, f) {
    return (f === void 0 || f > u.length) && (f = u.length), u.substring(f - l.length, f) === l;
  }
  function o(u, l, f) {
    return typeof f != "number" && (f = 0), f + l.length > u.length ? !1 : u.indexOf(l, f) !== -1;
  }
  return t("ERR_INVALID_OPT_VALUE", function(u, l) {
    return 'The value "' + l + '" is invalid for option "' + u + '"';
  }, TypeError), t("ERR_INVALID_ARG_TYPE", function(u, l, f) {
    var c;
    typeof l == "string" && s(l, "not ") ? (c = "must not be", l = l.replace(/^not /, "")) : c = "must be";
    var h;
    if (a(u, " argument"))
      h = "The ".concat(u, " ").concat(c, " ").concat(n(l, "type"));
    else {
      var d = o(u, ".") ? "property" : "argument";
      h = 'The "'.concat(u, '" ').concat(d, " ").concat(c, " ").concat(n(l, "type"));
    }
    return h += ". Received type ".concat(typeof f), h;
  }, TypeError), t("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), t("ERR_METHOD_NOT_IMPLEMENTED", function(u) {
    return "The " + u + " method is not implemented";
  }), t("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), t("ERR_STREAM_DESTROYED", function(u) {
    return "Cannot call " + u + " after a stream was destroyed";
  }), t("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), t("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), t("ERR_STREAM_WRITE_AFTER_END", "write after end"), t("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), t("ERR_UNKNOWN_ENCODING", function(u) {
    return "Unknown encoding: " + u;
  }, TypeError), t("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), errorsBrowser.codes = e, errorsBrowser;
}
var state, hasRequiredState;
function requireState() {
  if (hasRequiredState) return state;
  hasRequiredState = 1;
  var r = requireErrorsBrowser().codes.ERR_INVALID_OPT_VALUE;
  function e(n, s, a) {
    return n.highWaterMark != null ? n.highWaterMark : s ? n[a] : null;
  }
  function t(n, s, a, o) {
    var u = e(s, o, a);
    if (u != null) {
      if (!(isFinite(u) && Math.floor(u) === u) || u < 0) {
        var l = o ? a : "highWaterMark";
        throw new r(l, u);
      }
      return Math.floor(u);
    }
    return n.objectMode ? 16 : 16 * 1024;
  }
  return state = {
    getHighWaterMark: t
  }, state;
}
var browser$b, hasRequiredBrowser$a;
function requireBrowser$a() {
  if (hasRequiredBrowser$a) return browser$b;
  hasRequiredBrowser$a = 1, browser$b = r;
  function r(t, n) {
    if (e("noDeprecation"))
      return t;
    var s = !1;
    function a() {
      if (!s) {
        if (e("throwDeprecation"))
          throw new Error(n);
        e("traceDeprecation") ? console.trace(n) : console.warn(n), s = !0;
      }
      return t.apply(this, arguments);
    }
    return a;
  }
  function e(t) {
    try {
      if (!commonjsGlobal.localStorage) return !1;
    } catch {
      return !1;
    }
    var n = commonjsGlobal.localStorage[t];
    return n == null ? !1 : String(n).toLowerCase() === "true";
  }
  return browser$b;
}
var _stream_writable$1, hasRequired_stream_writable$1;
function require_stream_writable$1() {
  if (hasRequired_stream_writable$1) return _stream_writable$1;
  hasRequired_stream_writable$1 = 1, _stream_writable$1 = q;
  function r(Q) {
    var W = this;
    this.next = null, this.entry = null, this.finish = function() {
      re(W, Q);
    };
  }
  var e;
  q.WritableState = F;
  var t = {
    deprecate: requireBrowser$a()
  }, n = requireStreamBrowser$1(), s = requireDist().Buffer, a = (typeof commonjsGlobal < "u" ? commonjsGlobal : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function o(Q) {
    return s.from(Q);
  }
  function u(Q) {
    return s.isBuffer(Q) || Q instanceof a;
  }
  var l = requireDestroy$1(), f = requireState(), c = f.getHighWaterMark, h = requireErrorsBrowser().codes, d = h.ERR_INVALID_ARG_TYPE, m = h.ERR_METHOD_NOT_IMPLEMENTED, g = h.ERR_MULTIPLE_CALLBACK, y = h.ERR_STREAM_CANNOT_PIPE, b = h.ERR_STREAM_DESTROYED, v = h.ERR_STREAM_NULL_VALUES, w = h.ERR_STREAM_WRITE_AFTER_END, I = h.ERR_UNKNOWN_ENCODING, T = l.errorOrDestroy;
  requireInherits_browser()(q, n);
  function _() {
  }
  function F(Q, W, j) {
    e = e || require_stream_duplex$1(), Q = Q || {}, typeof j != "boolean" && (j = W instanceof e), this.objectMode = !!Q.objectMode, j && (this.objectMode = this.objectMode || !!Q.writableObjectMode), this.highWaterMark = c(this, Q, "writableHighWaterMark", j), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
    var te = Q.decodeStrings === !1;
    this.decodeStrings = !te, this.defaultEncoding = Q.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(se) {
      A(W, se);
    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = Q.emitClose !== !1, this.autoDestroy = !!Q.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new r(this);
  }
  F.prototype.getBuffer = function() {
    for (var W = this.bufferedRequest, j = []; W; )
      j.push(W), W = W.next;
    return j;
  }, function() {
    try {
      Object.defineProperty(F.prototype, "buffer", {
        get: t.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch {
    }
  }();
  var O;
  typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (O = Function.prototype[Symbol.hasInstance], Object.defineProperty(q, Symbol.hasInstance, {
    value: function(W) {
      return O.call(this, W) ? !0 : this !== q ? !1 : W && W._writableState instanceof F;
    }
  })) : O = function(W) {
    return W instanceof this;
  };
  function q(Q) {
    e = e || require_stream_duplex$1();
    var W = this instanceof e;
    if (!W && !O.call(q, this)) return new q(Q);
    this._writableState = new F(Q, this, W), this.writable = !0, Q && (typeof Q.write == "function" && (this._write = Q.write), typeof Q.writev == "function" && (this._writev = Q.writev), typeof Q.destroy == "function" && (this._destroy = Q.destroy), typeof Q.final == "function" && (this._final = Q.final)), n.call(this);
  }
  q.prototype.pipe = function() {
    T(this, new y());
  };
  function V(Q, W) {
    var j = new w();
    T(Q, j), process$1.nextTick(W, j);
  }
  function H(Q, W, j, te) {
    var se;
    return j === null ? se = new v() : typeof j != "string" && !W.objectMode && (se = new d("chunk", ["string", "Buffer"], j)), se ? (T(Q, se), process$1.nextTick(te, se), !1) : !0;
  }
  q.prototype.write = function(Q, W, j) {
    var te = this._writableState, se = !1, X = !te.objectMode && u(Q);
    return X && !s.isBuffer(Q) && (Q = o(Q)), typeof W == "function" && (j = W, W = null), X ? W = "buffer" : W || (W = te.defaultEncoding), typeof j != "function" && (j = _), te.ending ? V(this, j) : (X || H(this, te, Q, j)) && (te.pendingcb++, se = $(this, te, X, Q, W, j)), se;
  }, q.prototype.cork = function() {
    this._writableState.corked++;
  }, q.prototype.uncork = function() {
    var Q = this._writableState;
    Q.corked && (Q.corked--, !Q.writing && !Q.corked && !Q.bufferProcessing && Q.bufferedRequest && D(this, Q));
  }, q.prototype.setDefaultEncoding = function(W) {
    if (typeof W == "string" && (W = W.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((W + "").toLowerCase()) > -1)) throw new I(W);
    return this._writableState.defaultEncoding = W, this;
  }, Object.defineProperty(q.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function R(Q, W, j) {
    return !Q.objectMode && Q.decodeStrings !== !1 && typeof W == "string" && (W = s.from(W, j)), W;
  }
  Object.defineProperty(q.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function $(Q, W, j, te, se, X) {
    if (!j) {
      var K = R(W, te, se);
      te !== K && (j = !0, se = "buffer", te = K);
    }
    var ae = W.objectMode ? 1 : te.length;
    W.length += ae;
    var de = W.length < W.highWaterMark;
    if (de || (W.needDrain = !0), W.writing || W.corked) {
      var me = W.lastBufferedRequest;
      W.lastBufferedRequest = {
        chunk: te,
        encoding: se,
        isBuf: j,
        callback: X,
        next: null
      }, me ? me.next = W.lastBufferedRequest : W.bufferedRequest = W.lastBufferedRequest, W.bufferedRequestCount += 1;
    } else
      S(Q, W, !1, ae, te, se, X);
    return de;
  }
  function S(Q, W, j, te, se, X, K) {
    W.writelen = te, W.writecb = K, W.writing = !0, W.sync = !0, W.destroyed ? W.onwrite(new b("write")) : j ? Q._writev(se, W.onwrite) : Q._write(se, X, W.onwrite), W.sync = !1;
  }
  function x(Q, W, j, te, se) {
    --W.pendingcb, j ? (process$1.nextTick(se, te), process$1.nextTick(z, Q, W), Q._writableState.errorEmitted = !0, T(Q, te)) : (se(te), Q._writableState.errorEmitted = !0, T(Q, te), z(Q, W));
  }
  function C(Q) {
    Q.writing = !1, Q.writecb = null, Q.length -= Q.writelen, Q.writelen = 0;
  }
  function A(Q, W) {
    var j = Q._writableState, te = j.sync, se = j.writecb;
    if (typeof se != "function") throw new g();
    if (C(j), W) x(Q, j, te, W, se);
    else {
      var X = E(j) || Q.destroyed;
      !X && !j.corked && !j.bufferProcessing && j.bufferedRequest && D(Q, j), te ? process$1.nextTick(N, Q, j, X, se) : N(Q, j, X, se);
    }
  }
  function N(Q, W, j, te) {
    j || k(Q, W), W.pendingcb--, te(), z(Q, W);
  }
  function k(Q, W) {
    W.length === 0 && W.needDrain && (W.needDrain = !1, Q.emit("drain"));
  }
  function D(Q, W) {
    W.bufferProcessing = !0;
    var j = W.bufferedRequest;
    if (Q._writev && j && j.next) {
      var te = W.bufferedRequestCount, se = new Array(te), X = W.corkedRequestsFree;
      X.entry = j;
      for (var K = 0, ae = !0; j; )
        se[K] = j, j.isBuf || (ae = !1), j = j.next, K += 1;
      se.allBuffers = ae, S(Q, W, !0, W.length, se, "", X.finish), W.pendingcb++, W.lastBufferedRequest = null, X.next ? (W.corkedRequestsFree = X.next, X.next = null) : W.corkedRequestsFree = new r(W), W.bufferedRequestCount = 0;
    } else {
      for (; j; ) {
        var de = j.chunk, me = j.encoding, pe = j.callback, ge = W.objectMode ? 1 : de.length;
        if (S(Q, W, !1, ge, de, me, pe), j = j.next, W.bufferedRequestCount--, W.writing)
          break;
      }
      j === null && (W.lastBufferedRequest = null);
    }
    W.bufferedRequest = j, W.bufferProcessing = !1;
  }
  q.prototype._write = function(Q, W, j) {
    j(new m("_write()"));
  }, q.prototype._writev = null, q.prototype.end = function(Q, W, j) {
    var te = this._writableState;
    return typeof Q == "function" ? (j = Q, Q = null, W = null) : typeof W == "function" && (j = W, W = null), Q != null && this.write(Q, W), te.corked && (te.corked = 1, this.uncork()), te.ending || J(this, te, j), this;
  }, Object.defineProperty(q.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.length;
    }
  });
  function E(Q) {
    return Q.ending && Q.length === 0 && Q.bufferedRequest === null && !Q.finished && !Q.writing;
  }
  function M(Q, W) {
    Q._final(function(j) {
      W.pendingcb--, j && T(Q, j), W.prefinished = !0, Q.emit("prefinish"), z(Q, W);
    });
  }
  function P(Q, W) {
    !W.prefinished && !W.finalCalled && (typeof Q._final == "function" && !W.destroyed ? (W.pendingcb++, W.finalCalled = !0, process$1.nextTick(M, Q, W)) : (W.prefinished = !0, Q.emit("prefinish")));
  }
  function z(Q, W) {
    var j = E(W);
    if (j && (P(Q, W), W.pendingcb === 0 && (W.finished = !0, Q.emit("finish"), W.autoDestroy))) {
      var te = Q._readableState;
      (!te || te.autoDestroy && te.endEmitted) && Q.destroy();
    }
    return j;
  }
  function J(Q, W, j) {
    W.ending = !0, z(Q, W), j && (W.finished ? process$1.nextTick(j) : Q.once("finish", j)), W.ended = !0, Q.writable = !1;
  }
  function re(Q, W, j) {
    var te = Q.entry;
    for (Q.entry = null; te; ) {
      var se = te.callback;
      W.pendingcb--, se(j), te = te.next;
    }
    W.corkedRequestsFree.next = Q;
  }
  return Object.defineProperty(q.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState === void 0 ? !1 : this._writableState.destroyed;
    },
    set: function(W) {
      this._writableState && (this._writableState.destroyed = W);
    }
  }), q.prototype.destroy = l.destroy, q.prototype._undestroy = l.undestroy, q.prototype._destroy = function(Q, W) {
    W(Q);
  }, _stream_writable$1;
}
var _stream_duplex$1, hasRequired_stream_duplex$1;
function require_stream_duplex$1() {
  if (hasRequired_stream_duplex$1) return _stream_duplex$1;
  hasRequired_stream_duplex$1 = 1;
  var r = Object.keys || function(f) {
    var c = [];
    for (var h in f) c.push(h);
    return c;
  };
  _stream_duplex$1 = o;
  var e = require_stream_readable$1(), t = require_stream_writable$1();
  requireInherits_browser()(o, e);
  for (var n = r(t.prototype), s = 0; s < n.length; s++) {
    var a = n[s];
    o.prototype[a] || (o.prototype[a] = t.prototype[a]);
  }
  function o(f) {
    if (!(this instanceof o)) return new o(f);
    e.call(this, f), t.call(this, f), this.allowHalfOpen = !0, f && (f.readable === !1 && (this.readable = !1), f.writable === !1 && (this.writable = !1), f.allowHalfOpen === !1 && (this.allowHalfOpen = !1, this.once("end", u)));
  }
  Object.defineProperty(o.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  }), Object.defineProperty(o.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  }), Object.defineProperty(o.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.length;
    }
  });
  function u() {
    this._writableState.ended || process$1.nextTick(l, this);
  }
  function l(f) {
    f.end();
  }
  return Object.defineProperty(o.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState === void 0 || this._writableState === void 0 ? !1 : this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(c) {
      this._readableState === void 0 || this._writableState === void 0 || (this._readableState.destroyed = c, this._writableState.destroyed = c);
    }
  }), _stream_duplex$1;
}
var string_decoder = {}, hasRequiredString_decoder;
function requireString_decoder() {
  if (hasRequiredString_decoder) return string_decoder;
  hasRequiredString_decoder = 1;
  var r = requireSafeBuffer$1().Buffer, e = r.isEncoding || function(v) {
    switch (v = "" + v, v && v.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return !0;
      default:
        return !1;
    }
  };
  function t(v) {
    if (!v) return "utf8";
    for (var w; ; )
      switch (v) {
        case "utf8":
        case "utf-8":
          return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return "utf16le";
        case "latin1":
        case "binary":
          return "latin1";
        case "base64":
        case "ascii":
        case "hex":
          return v;
        default:
          if (w) return;
          v = ("" + v).toLowerCase(), w = !0;
      }
  }
  function n(v) {
    var w = t(v);
    if (typeof w != "string" && (r.isEncoding === e || !e(v))) throw new Error("Unknown encoding: " + v);
    return w || v;
  }
  string_decoder.StringDecoder = s;
  function s(v) {
    this.encoding = n(v);
    var w;
    switch (this.encoding) {
      case "utf16le":
        this.text = h, this.end = d, w = 4;
        break;
      case "utf8":
        this.fillLast = l, w = 4;
        break;
      case "base64":
        this.text = m, this.end = g, w = 3;
        break;
      default:
        this.write = y, this.end = b;
        return;
    }
    this.lastNeed = 0, this.lastTotal = 0, this.lastChar = r.allocUnsafe(w);
  }
  s.prototype.write = function(v) {
    if (v.length === 0) return "";
    var w, I;
    if (this.lastNeed) {
      if (w = this.fillLast(v), w === void 0) return "";
      I = this.lastNeed, this.lastNeed = 0;
    } else
      I = 0;
    return I < v.length ? w ? w + this.text(v, I) : this.text(v, I) : w || "";
  }, s.prototype.end = c, s.prototype.text = f, s.prototype.fillLast = function(v) {
    if (this.lastNeed <= v.length)
      return v.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    v.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, v.length), this.lastNeed -= v.length;
  };
  function a(v) {
    return v <= 127 ? 0 : v >> 5 === 6 ? 2 : v >> 4 === 14 ? 3 : v >> 3 === 30 ? 4 : v >> 6 === 2 ? -1 : -2;
  }
  function o(v, w, I) {
    var T = w.length - 1;
    if (T < I) return 0;
    var _ = a(w[T]);
    return _ >= 0 ? (_ > 0 && (v.lastNeed = _ - 1), _) : --T < I || _ === -2 ? 0 : (_ = a(w[T]), _ >= 0 ? (_ > 0 && (v.lastNeed = _ - 2), _) : --T < I || _ === -2 ? 0 : (_ = a(w[T]), _ >= 0 ? (_ > 0 && (_ === 2 ? _ = 0 : v.lastNeed = _ - 3), _) : 0));
  }
  function u(v, w, I) {
    if ((w[0] & 192) !== 128)
      return v.lastNeed = 0, "�";
    if (v.lastNeed > 1 && w.length > 1) {
      if ((w[1] & 192) !== 128)
        return v.lastNeed = 1, "�";
      if (v.lastNeed > 2 && w.length > 2 && (w[2] & 192) !== 128)
        return v.lastNeed = 2, "�";
    }
  }
  function l(v) {
    var w = this.lastTotal - this.lastNeed, I = u(this, v);
    if (I !== void 0) return I;
    if (this.lastNeed <= v.length)
      return v.copy(this.lastChar, w, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    v.copy(this.lastChar, w, 0, v.length), this.lastNeed -= v.length;
  }
  function f(v, w) {
    var I = o(this, v, w);
    if (!this.lastNeed) return v.toString("utf8", w);
    this.lastTotal = I;
    var T = v.length - (I - this.lastNeed);
    return v.copy(this.lastChar, 0, T), v.toString("utf8", w, T);
  }
  function c(v) {
    var w = v && v.length ? this.write(v) : "";
    return this.lastNeed ? w + "�" : w;
  }
  function h(v, w) {
    if ((v.length - w) % 2 === 0) {
      var I = v.toString("utf16le", w);
      if (I) {
        var T = I.charCodeAt(I.length - 1);
        if (T >= 55296 && T <= 56319)
          return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = v[v.length - 2], this.lastChar[1] = v[v.length - 1], I.slice(0, -1);
      }
      return I;
    }
    return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = v[v.length - 1], v.toString("utf16le", w, v.length - 1);
  }
  function d(v) {
    var w = v && v.length ? this.write(v) : "";
    if (this.lastNeed) {
      var I = this.lastTotal - this.lastNeed;
      return w + this.lastChar.toString("utf16le", 0, I);
    }
    return w;
  }
  function m(v, w) {
    var I = (v.length - w) % 3;
    return I === 0 ? v.toString("base64", w) : (this.lastNeed = 3 - I, this.lastTotal = 3, I === 1 ? this.lastChar[0] = v[v.length - 1] : (this.lastChar[0] = v[v.length - 2], this.lastChar[1] = v[v.length - 1]), v.toString("base64", w, v.length - I));
  }
  function g(v) {
    var w = v && v.length ? this.write(v) : "";
    return this.lastNeed ? w + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : w;
  }
  function y(v) {
    return v.toString(this.encoding);
  }
  function b(v) {
    return v && v.length ? this.write(v) : "";
  }
  return string_decoder;
}
var endOfStream, hasRequiredEndOfStream;
function requireEndOfStream() {
  if (hasRequiredEndOfStream) return endOfStream;
  hasRequiredEndOfStream = 1;
  var r = requireErrorsBrowser().codes.ERR_STREAM_PREMATURE_CLOSE;
  function e(a) {
    var o = !1;
    return function() {
      if (!o) {
        o = !0;
        for (var u = arguments.length, l = new Array(u), f = 0; f < u; f++)
          l[f] = arguments[f];
        a.apply(this, l);
      }
    };
  }
  function t() {
  }
  function n(a) {
    return a.setHeader && typeof a.abort == "function";
  }
  function s(a, o, u) {
    if (typeof o == "function") return s(a, null, o);
    o || (o = {}), u = e(u || t);
    var l = o.readable || o.readable !== !1 && a.readable, f = o.writable || o.writable !== !1 && a.writable, c = function() {
      a.writable || d();
    }, h = a._writableState && a._writableState.finished, d = function() {
      f = !1, h = !0, l || u.call(a);
    }, m = a._readableState && a._readableState.endEmitted, g = function() {
      l = !1, m = !0, f || u.call(a);
    }, y = function(I) {
      u.call(a, I);
    }, b = function() {
      var I;
      if (l && !m)
        return (!a._readableState || !a._readableState.ended) && (I = new r()), u.call(a, I);
      if (f && !h)
        return (!a._writableState || !a._writableState.ended) && (I = new r()), u.call(a, I);
    }, v = function() {
      a.req.on("finish", d);
    };
    return n(a) ? (a.on("complete", d), a.on("abort", b), a.req ? v() : a.on("request", v)) : f && !a._writableState && (a.on("end", c), a.on("close", c)), a.on("end", g), a.on("finish", d), o.error !== !1 && a.on("error", y), a.on("close", b), function() {
      a.removeListener("complete", d), a.removeListener("abort", b), a.removeListener("request", v), a.req && a.req.removeListener("finish", d), a.removeListener("end", c), a.removeListener("close", c), a.removeListener("finish", d), a.removeListener("end", g), a.removeListener("error", y), a.removeListener("close", b);
    };
  }
  return endOfStream = s, endOfStream;
}
var async_iterator, hasRequiredAsync_iterator;
function requireAsync_iterator() {
  if (hasRequiredAsync_iterator) return async_iterator;
  hasRequiredAsync_iterator = 1;
  var r;
  function e(I, T, _) {
    return T = t(T), T in I ? Object.defineProperty(I, T, { value: _, enumerable: !0, configurable: !0, writable: !0 }) : I[T] = _, I;
  }
  function t(I) {
    var T = n(I, "string");
    return typeof T == "symbol" ? T : String(T);
  }
  function n(I, T) {
    if (typeof I != "object" || I === null) return I;
    var _ = I[Symbol.toPrimitive];
    if (_ !== void 0) {
      var F = _.call(I, T);
      if (typeof F != "object") return F;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (T === "string" ? String : Number)(I);
  }
  var s = requireEndOfStream(), a = Symbol("lastResolve"), o = Symbol("lastReject"), u = Symbol("error"), l = Symbol("ended"), f = Symbol("lastPromise"), c = Symbol("handlePromise"), h = Symbol("stream");
  function d(I, T) {
    return {
      value: I,
      done: T
    };
  }
  function m(I) {
    var T = I[a];
    if (T !== null) {
      var _ = I[h].read();
      _ !== null && (I[f] = null, I[a] = null, I[o] = null, T(d(_, !1)));
    }
  }
  function g(I) {
    process$1.nextTick(m, I);
  }
  function y(I, T) {
    return function(_, F) {
      I.then(function() {
        if (T[l]) {
          _(d(void 0, !0));
          return;
        }
        T[c](_, F);
      }, F);
    };
  }
  var b = Object.getPrototypeOf(function() {
  }), v = Object.setPrototypeOf((r = {
    get stream() {
      return this[h];
    },
    next: function() {
      var T = this, _ = this[u];
      if (_ !== null)
        return Promise.reject(_);
      if (this[l])
        return Promise.resolve(d(void 0, !0));
      if (this[h].destroyed)
        return new Promise(function(V, H) {
          process$1.nextTick(function() {
            T[u] ? H(T[u]) : V(d(void 0, !0));
          });
        });
      var F = this[f], O;
      if (F)
        O = new Promise(y(F, this));
      else {
        var q = this[h].read();
        if (q !== null)
          return Promise.resolve(d(q, !1));
        O = new Promise(this[c]);
      }
      return this[f] = O, O;
    }
  }, e(r, Symbol.asyncIterator, function() {
    return this;
  }), e(r, "return", function() {
    var T = this;
    return new Promise(function(_, F) {
      T[h].destroy(null, function(O) {
        if (O) {
          F(O);
          return;
        }
        _(d(void 0, !0));
      });
    });
  }), r), b), w = function(T) {
    var _, F = Object.create(v, (_ = {}, e(_, h, {
      value: T,
      writable: !0
    }), e(_, a, {
      value: null,
      writable: !0
    }), e(_, o, {
      value: null,
      writable: !0
    }), e(_, u, {
      value: null,
      writable: !0
    }), e(_, l, {
      value: T._readableState.endEmitted,
      writable: !0
    }), e(_, c, {
      value: function(q, V) {
        var H = F[h].read();
        H ? (F[f] = null, F[a] = null, F[o] = null, q(d(H, !1))) : (F[a] = q, F[o] = V);
      },
      writable: !0
    }), _));
    return F[f] = null, s(T, function(O) {
      if (O && O.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var q = F[o];
        q !== null && (F[f] = null, F[a] = null, F[o] = null, q(O)), F[u] = O;
        return;
      }
      var V = F[a];
      V !== null && (F[f] = null, F[a] = null, F[o] = null, V(d(void 0, !0))), F[l] = !0;
    }), T.on("readable", g.bind(null, F)), F;
  };
  return async_iterator = w, async_iterator;
}
var fromBrowser, hasRequiredFromBrowser;
function requireFromBrowser() {
  return hasRequiredFromBrowser || (hasRequiredFromBrowser = 1, fromBrowser = function() {
    throw new Error("Readable.from is not available in the browser");
  }), fromBrowser;
}
var _stream_readable$1, hasRequired_stream_readable$1;
function require_stream_readable$1() {
  if (hasRequired_stream_readable$1) return _stream_readable$1;
  hasRequired_stream_readable$1 = 1, _stream_readable$1 = V;
  var r;
  V.ReadableState = q, requireEvents().EventEmitter;
  var e = function(K, ae) {
    return K.listeners(ae).length;
  }, t = requireStreamBrowser$1(), n = requireDist().Buffer, s = (typeof commonjsGlobal < "u" ? commonjsGlobal : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function a(X) {
    return n.from(X);
  }
  function o(X) {
    return n.isBuffer(X) || X instanceof s;
  }
  var u = requireUtil$1(), l;
  u && u.debuglog ? l = u.debuglog("stream") : l = function() {
  };
  var f = requireBuffer_list(), c = requireDestroy$1(), h = requireState(), d = h.getHighWaterMark, m = requireErrorsBrowser().codes, g = m.ERR_INVALID_ARG_TYPE, y = m.ERR_STREAM_PUSH_AFTER_EOF, b = m.ERR_METHOD_NOT_IMPLEMENTED, v = m.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, w, I, T;
  requireInherits_browser()(V, t);
  var _ = c.errorOrDestroy, F = ["error", "close", "destroy", "pause", "resume"];
  function O(X, K, ae) {
    if (typeof X.prependListener == "function") return X.prependListener(K, ae);
    !X._events || !X._events[K] ? X.on(K, ae) : Array.isArray(X._events[K]) ? X._events[K].unshift(ae) : X._events[K] = [ae, X._events[K]];
  }
  function q(X, K, ae) {
    r = r || require_stream_duplex$1(), X = X || {}, typeof ae != "boolean" && (ae = K instanceof r), this.objectMode = !!X.objectMode, ae && (this.objectMode = this.objectMode || !!X.readableObjectMode), this.highWaterMark = d(this, X, "readableHighWaterMark", ae), this.buffer = new f(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = X.emitClose !== !1, this.autoDestroy = !!X.autoDestroy, this.destroyed = !1, this.defaultEncoding = X.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, X.encoding && (w || (w = requireString_decoder().StringDecoder), this.decoder = new w(X.encoding), this.encoding = X.encoding);
  }
  function V(X) {
    if (r = r || require_stream_duplex$1(), !(this instanceof V)) return new V(X);
    var K = this instanceof r;
    this._readableState = new q(X, this, K), this.readable = !0, X && (typeof X.read == "function" && (this._read = X.read), typeof X.destroy == "function" && (this._destroy = X.destroy)), t.call(this);
  }
  Object.defineProperty(V.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState === void 0 ? !1 : this._readableState.destroyed;
    },
    set: function(K) {
      this._readableState && (this._readableState.destroyed = K);
    }
  }), V.prototype.destroy = c.destroy, V.prototype._undestroy = c.undestroy, V.prototype._destroy = function(X, K) {
    K(X);
  }, V.prototype.push = function(X, K) {
    var ae = this._readableState, de;
    return ae.objectMode ? de = !0 : typeof X == "string" && (K = K || ae.defaultEncoding, K !== ae.encoding && (X = n.from(X, K), K = ""), de = !0), H(this, X, K, !1, de);
  }, V.prototype.unshift = function(X) {
    return H(this, X, null, !0, !1);
  };
  function H(X, K, ae, de, me) {
    l("readableAddChunk", K);
    var pe = X._readableState;
    if (K === null)
      pe.reading = !1, A(X, pe);
    else {
      var ge;
      if (me || (ge = $(pe, K)), ge)
        _(X, ge);
      else if (pe.objectMode || K && K.length > 0)
        if (typeof K != "string" && !pe.objectMode && Object.getPrototypeOf(K) !== n.prototype && (K = a(K)), de)
          pe.endEmitted ? _(X, new v()) : R(X, pe, K, !0);
        else if (pe.ended)
          _(X, new y());
        else {
          if (pe.destroyed)
            return !1;
          pe.reading = !1, pe.decoder && !ae ? (K = pe.decoder.write(K), pe.objectMode || K.length !== 0 ? R(X, pe, K, !1) : D(X, pe)) : R(X, pe, K, !1);
        }
      else de || (pe.reading = !1, D(X, pe));
    }
    return !pe.ended && (pe.length < pe.highWaterMark || pe.length === 0);
  }
  function R(X, K, ae, de) {
    K.flowing && K.length === 0 && !K.sync ? (K.awaitDrain = 0, X.emit("data", ae)) : (K.length += K.objectMode ? 1 : ae.length, de ? K.buffer.unshift(ae) : K.buffer.push(ae), K.needReadable && N(X)), D(X, K);
  }
  function $(X, K) {
    var ae;
    return !o(K) && typeof K != "string" && K !== void 0 && !X.objectMode && (ae = new g("chunk", ["string", "Buffer", "Uint8Array"], K)), ae;
  }
  V.prototype.isPaused = function() {
    return this._readableState.flowing === !1;
  }, V.prototype.setEncoding = function(X) {
    w || (w = requireString_decoder().StringDecoder);
    var K = new w(X);
    this._readableState.decoder = K, this._readableState.encoding = this._readableState.decoder.encoding;
    for (var ae = this._readableState.buffer.head, de = ""; ae !== null; )
      de += K.write(ae.data), ae = ae.next;
    return this._readableState.buffer.clear(), de !== "" && this._readableState.buffer.push(de), this._readableState.length = de.length, this;
  };
  var S = 1073741824;
  function x(X) {
    return X >= S ? X = S : (X--, X |= X >>> 1, X |= X >>> 2, X |= X >>> 4, X |= X >>> 8, X |= X >>> 16, X++), X;
  }
  function C(X, K) {
    return X <= 0 || K.length === 0 && K.ended ? 0 : K.objectMode ? 1 : X !== X ? K.flowing && K.length ? K.buffer.head.data.length : K.length : (X > K.highWaterMark && (K.highWaterMark = x(X)), X <= K.length ? X : K.ended ? K.length : (K.needReadable = !0, 0));
  }
  V.prototype.read = function(X) {
    l("read", X), X = parseInt(X, 10);
    var K = this._readableState, ae = X;
    if (X !== 0 && (K.emittedReadable = !1), X === 0 && K.needReadable && ((K.highWaterMark !== 0 ? K.length >= K.highWaterMark : K.length > 0) || K.ended))
      return l("read: emitReadable", K.length, K.ended), K.length === 0 && K.ended ? j(this) : N(this), null;
    if (X = C(X, K), X === 0 && K.ended)
      return K.length === 0 && j(this), null;
    var de = K.needReadable;
    l("need readable", de), (K.length === 0 || K.length - X < K.highWaterMark) && (de = !0, l("length less than watermark", de)), K.ended || K.reading ? (de = !1, l("reading or ended", de)) : de && (l("do read"), K.reading = !0, K.sync = !0, K.length === 0 && (K.needReadable = !0), this._read(K.highWaterMark), K.sync = !1, K.reading || (X = C(ae, K)));
    var me;
    return X > 0 ? me = W(X, K) : me = null, me === null ? (K.needReadable = K.length <= K.highWaterMark, X = 0) : (K.length -= X, K.awaitDrain = 0), K.length === 0 && (K.ended || (K.needReadable = !0), ae !== X && K.ended && j(this)), me !== null && this.emit("data", me), me;
  };
  function A(X, K) {
    if (l("onEofChunk"), !K.ended) {
      if (K.decoder) {
        var ae = K.decoder.end();
        ae && ae.length && (K.buffer.push(ae), K.length += K.objectMode ? 1 : ae.length);
      }
      K.ended = !0, K.sync ? N(X) : (K.needReadable = !1, K.emittedReadable || (K.emittedReadable = !0, k(X)));
    }
  }
  function N(X) {
    var K = X._readableState;
    l("emitReadable", K.needReadable, K.emittedReadable), K.needReadable = !1, K.emittedReadable || (l("emitReadable", K.flowing), K.emittedReadable = !0, process$1.nextTick(k, X));
  }
  function k(X) {
    var K = X._readableState;
    l("emitReadable_", K.destroyed, K.length, K.ended), !K.destroyed && (K.length || K.ended) && (X.emit("readable"), K.emittedReadable = !1), K.needReadable = !K.flowing && !K.ended && K.length <= K.highWaterMark, Q(X);
  }
  function D(X, K) {
    K.readingMore || (K.readingMore = !0, process$1.nextTick(E, X, K));
  }
  function E(X, K) {
    for (; !K.reading && !K.ended && (K.length < K.highWaterMark || K.flowing && K.length === 0); ) {
      var ae = K.length;
      if (l("maybeReadMore read 0"), X.read(0), ae === K.length)
        break;
    }
    K.readingMore = !1;
  }
  V.prototype._read = function(X) {
    _(this, new b("_read()"));
  }, V.prototype.pipe = function(X, K) {
    var ae = this, de = this._readableState;
    switch (de.pipesCount) {
      case 0:
        de.pipes = X;
        break;
      case 1:
        de.pipes = [de.pipes, X];
        break;
      default:
        de.pipes.push(X);
        break;
    }
    de.pipesCount += 1, l("pipe count=%d opts=%j", de.pipesCount, K);
    var me = (!K || K.end !== !1) && X !== process$1.stdout && X !== process$1.stderr, pe = me ? ye : De;
    de.endEmitted ? process$1.nextTick(pe) : ae.once("end", pe), X.on("unpipe", ge);
    function ge(Ce, _e) {
      l("onunpipe"), Ce === ae && _e && _e.hasUnpiped === !1 && (_e.hasUnpiped = !0, be());
    }
    function ye() {
      l("onend"), X.end();
    }
    var ce = M(ae);
    X.on("drain", ce);
    var $e = !1;
    function be() {
      l("cleanup"), X.removeListener("close", ve), X.removeListener("finish", Ee), X.removeListener("drain", ce), X.removeListener("error", we), X.removeListener("unpipe", ge), ae.removeListener("end", ye), ae.removeListener("end", De), ae.removeListener("data", xe), $e = !0, de.awaitDrain && (!X._writableState || X._writableState.needDrain) && ce();
    }
    ae.on("data", xe);
    function xe(Ce) {
      l("ondata");
      var _e = X.write(Ce);
      l("dest.write", _e), _e === !1 && ((de.pipesCount === 1 && de.pipes === X || de.pipesCount > 1 && se(de.pipes, X) !== -1) && !$e && (l("false write response, pause", de.awaitDrain), de.awaitDrain++), ae.pause());
    }
    function we(Ce) {
      l("onerror", Ce), De(), X.removeListener("error", we), e(X, "error") === 0 && _(X, Ce);
    }
    O(X, "error", we);
    function ve() {
      X.removeListener("finish", Ee), De();
    }
    X.once("close", ve);
    function Ee() {
      l("onfinish"), X.removeListener("close", ve), De();
    }
    X.once("finish", Ee);
    function De() {
      l("unpipe"), ae.unpipe(X);
    }
    return X.emit("pipe", ae), de.flowing || (l("pipe resume"), ae.resume()), X;
  };
  function M(X) {
    return function() {
      var ae = X._readableState;
      l("pipeOnDrain", ae.awaitDrain), ae.awaitDrain && ae.awaitDrain--, ae.awaitDrain === 0 && e(X, "data") && (ae.flowing = !0, Q(X));
    };
  }
  V.prototype.unpipe = function(X) {
    var K = this._readableState, ae = {
      hasUnpiped: !1
    };
    if (K.pipesCount === 0) return this;
    if (K.pipesCount === 1)
      return X && X !== K.pipes ? this : (X || (X = K.pipes), K.pipes = null, K.pipesCount = 0, K.flowing = !1, X && X.emit("unpipe", this, ae), this);
    if (!X) {
      var de = K.pipes, me = K.pipesCount;
      K.pipes = null, K.pipesCount = 0, K.flowing = !1;
      for (var pe = 0; pe < me; pe++) de[pe].emit("unpipe", this, {
        hasUnpiped: !1
      });
      return this;
    }
    var ge = se(K.pipes, X);
    return ge === -1 ? this : (K.pipes.splice(ge, 1), K.pipesCount -= 1, K.pipesCount === 1 && (K.pipes = K.pipes[0]), X.emit("unpipe", this, ae), this);
  }, V.prototype.on = function(X, K) {
    var ae = t.prototype.on.call(this, X, K), de = this._readableState;
    return X === "data" ? (de.readableListening = this.listenerCount("readable") > 0, de.flowing !== !1 && this.resume()) : X === "readable" && !de.endEmitted && !de.readableListening && (de.readableListening = de.needReadable = !0, de.flowing = !1, de.emittedReadable = !1, l("on readable", de.length, de.reading), de.length ? N(this) : de.reading || process$1.nextTick(z, this)), ae;
  }, V.prototype.addListener = V.prototype.on, V.prototype.removeListener = function(X, K) {
    var ae = t.prototype.removeListener.call(this, X, K);
    return X === "readable" && process$1.nextTick(P, this), ae;
  }, V.prototype.removeAllListeners = function(X) {
    var K = t.prototype.removeAllListeners.apply(this, arguments);
    return (X === "readable" || X === void 0) && process$1.nextTick(P, this), K;
  };
  function P(X) {
    var K = X._readableState;
    K.readableListening = X.listenerCount("readable") > 0, K.resumeScheduled && !K.paused ? K.flowing = !0 : X.listenerCount("data") > 0 && X.resume();
  }
  function z(X) {
    l("readable nexttick read 0"), X.read(0);
  }
  V.prototype.resume = function() {
    var X = this._readableState;
    return X.flowing || (l("resume"), X.flowing = !X.readableListening, J(this, X)), X.paused = !1, this;
  };
  function J(X, K) {
    K.resumeScheduled || (K.resumeScheduled = !0, process$1.nextTick(re, X, K));
  }
  function re(X, K) {
    l("resume", K.reading), K.reading || X.read(0), K.resumeScheduled = !1, X.emit("resume"), Q(X), K.flowing && !K.reading && X.read(0);
  }
  V.prototype.pause = function() {
    return l("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== !1 && (l("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;
  };
  function Q(X) {
    var K = X._readableState;
    for (l("flow", K.flowing); K.flowing && X.read() !== null; ) ;
  }
  V.prototype.wrap = function(X) {
    var K = this, ae = this._readableState, de = !1;
    X.on("end", function() {
      if (l("wrapped end"), ae.decoder && !ae.ended) {
        var ge = ae.decoder.end();
        ge && ge.length && K.push(ge);
      }
      K.push(null);
    }), X.on("data", function(ge) {
      if (l("wrapped data"), ae.decoder && (ge = ae.decoder.write(ge)), !(ae.objectMode && ge == null) && !(!ae.objectMode && (!ge || !ge.length))) {
        var ye = K.push(ge);
        ye || (de = !0, X.pause());
      }
    });
    for (var me in X)
      this[me] === void 0 && typeof X[me] == "function" && (this[me] = /* @__PURE__ */ function(ye) {
        return function() {
          return X[ye].apply(X, arguments);
        };
      }(me));
    for (var pe = 0; pe < F.length; pe++)
      X.on(F[pe], this.emit.bind(this, F[pe]));
    return this._read = function(ge) {
      l("wrapped _read", ge), de && (de = !1, X.resume());
    }, this;
  }, typeof Symbol == "function" && (V.prototype[Symbol.asyncIterator] = function() {
    return I === void 0 && (I = requireAsync_iterator()), I(this);
  }), Object.defineProperty(V.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.highWaterMark;
    }
  }), Object.defineProperty(V.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState && this._readableState.buffer;
    }
  }), Object.defineProperty(V.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.flowing;
    },
    set: function(K) {
      this._readableState && (this._readableState.flowing = K);
    }
  }), V._fromList = W, Object.defineProperty(V.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.length;
    }
  });
  function W(X, K) {
    if (K.length === 0) return null;
    var ae;
    return K.objectMode ? ae = K.buffer.shift() : !X || X >= K.length ? (K.decoder ? ae = K.buffer.join("") : K.buffer.length === 1 ? ae = K.buffer.first() : ae = K.buffer.concat(K.length), K.buffer.clear()) : ae = K.buffer.consume(X, K.decoder), ae;
  }
  function j(X) {
    var K = X._readableState;
    l("endReadable", K.endEmitted), K.endEmitted || (K.ended = !0, process$1.nextTick(te, K, X));
  }
  function te(X, K) {
    if (l("endReadableNT", X.endEmitted, X.length), !X.endEmitted && X.length === 0 && (X.endEmitted = !0, K.readable = !1, K.emit("end"), X.autoDestroy)) {
      var ae = K._writableState;
      (!ae || ae.autoDestroy && ae.finished) && K.destroy();
    }
  }
  typeof Symbol == "function" && (V.from = function(X, K) {
    return T === void 0 && (T = requireFromBrowser()), T(V, X, K);
  });
  function se(X, K) {
    for (var ae = 0, de = X.length; ae < de; ae++)
      if (X[ae] === K) return ae;
    return -1;
  }
  return _stream_readable$1;
}
var _stream_transform$1, hasRequired_stream_transform$1;
function require_stream_transform$1() {
  if (hasRequired_stream_transform$1) return _stream_transform$1;
  hasRequired_stream_transform$1 = 1, _stream_transform$1 = u;
  var r = requireErrorsBrowser().codes, e = r.ERR_METHOD_NOT_IMPLEMENTED, t = r.ERR_MULTIPLE_CALLBACK, n = r.ERR_TRANSFORM_ALREADY_TRANSFORMING, s = r.ERR_TRANSFORM_WITH_LENGTH_0, a = require_stream_duplex$1();
  requireInherits_browser()(u, a);
  function o(c, h) {
    var d = this._transformState;
    d.transforming = !1;
    var m = d.writecb;
    if (m === null)
      return this.emit("error", new t());
    d.writechunk = null, d.writecb = null, h != null && this.push(h), m(c);
    var g = this._readableState;
    g.reading = !1, (g.needReadable || g.length < g.highWaterMark) && this._read(g.highWaterMark);
  }
  function u(c) {
    if (!(this instanceof u)) return new u(c);
    a.call(this, c), this._transformState = {
      afterTransform: o.bind(this),
      needTransform: !1,
      transforming: !1,
      writecb: null,
      writechunk: null,
      writeencoding: null
    }, this._readableState.needReadable = !0, this._readableState.sync = !1, c && (typeof c.transform == "function" && (this._transform = c.transform), typeof c.flush == "function" && (this._flush = c.flush)), this.on("prefinish", l);
  }
  function l() {
    var c = this;
    typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(h, d) {
      f(c, h, d);
    }) : f(this, null, null);
  }
  u.prototype.push = function(c, h) {
    return this._transformState.needTransform = !1, a.prototype.push.call(this, c, h);
  }, u.prototype._transform = function(c, h, d) {
    d(new e("_transform()"));
  }, u.prototype._write = function(c, h, d) {
    var m = this._transformState;
    if (m.writecb = d, m.writechunk = c, m.writeencoding = h, !m.transforming) {
      var g = this._readableState;
      (m.needTransform || g.needReadable || g.length < g.highWaterMark) && this._read(g.highWaterMark);
    }
  }, u.prototype._read = function(c) {
    var h = this._transformState;
    h.writechunk !== null && !h.transforming ? (h.transforming = !0, this._transform(h.writechunk, h.writeencoding, h.afterTransform)) : h.needTransform = !0;
  }, u.prototype._destroy = function(c, h) {
    a.prototype._destroy.call(this, c, function(d) {
      h(d);
    });
  };
  function f(c, h, d) {
    if (h) return c.emit("error", h);
    if (d != null && c.push(d), c._writableState.length) throw new s();
    if (c._transformState.transforming) throw new n();
    return c.push(null);
  }
  return _stream_transform$1;
}
var _stream_passthrough$1, hasRequired_stream_passthrough$1;
function require_stream_passthrough$1() {
  if (hasRequired_stream_passthrough$1) return _stream_passthrough$1;
  hasRequired_stream_passthrough$1 = 1, _stream_passthrough$1 = e;
  var r = require_stream_transform$1();
  requireInherits_browser()(e, r);
  function e(t) {
    if (!(this instanceof e)) return new e(t);
    r.call(this, t);
  }
  return e.prototype._transform = function(t, n, s) {
    s(null, t);
  }, _stream_passthrough$1;
}
var pipeline_1, hasRequiredPipeline;
function requirePipeline() {
  if (hasRequiredPipeline) return pipeline_1;
  hasRequiredPipeline = 1;
  var r;
  function e(d) {
    var m = !1;
    return function() {
      m || (m = !0, d.apply(void 0, arguments));
    };
  }
  var t = requireErrorsBrowser().codes, n = t.ERR_MISSING_ARGS, s = t.ERR_STREAM_DESTROYED;
  function a(d) {
    if (d) throw d;
  }
  function o(d) {
    return d.setHeader && typeof d.abort == "function";
  }
  function u(d, m, g, y) {
    y = e(y);
    var b = !1;
    d.on("close", function() {
      b = !0;
    }), r === void 0 && (r = requireEndOfStream()), r(d, {
      readable: m,
      writable: g
    }, function(w) {
      if (w) return y(w);
      b = !0, y();
    });
    var v = !1;
    return function(w) {
      if (!b && !v) {
        if (v = !0, o(d)) return d.abort();
        if (typeof d.destroy == "function") return d.destroy();
        y(w || new s("pipe"));
      }
    };
  }
  function l(d) {
    d();
  }
  function f(d, m) {
    return d.pipe(m);
  }
  function c(d) {
    return !d.length || typeof d[d.length - 1] != "function" ? a : d.pop();
  }
  function h() {
    for (var d = arguments.length, m = new Array(d), g = 0; g < d; g++)
      m[g] = arguments[g];
    var y = c(m);
    if (Array.isArray(m[0]) && (m = m[0]), m.length < 2)
      throw new n("streams");
    var b, v = m.map(function(w, I) {
      var T = I < m.length - 1, _ = I > 0;
      return u(w, T, _, function(F) {
        b || (b = F), F && v.forEach(l), !T && (v.forEach(l), y(b));
      });
    });
    return m.reduce(f);
  }
  return pipeline_1 = h, pipeline_1;
}
var streamBrowserify, hasRequiredStreamBrowserify;
function requireStreamBrowserify() {
  if (hasRequiredStreamBrowserify) return streamBrowserify;
  hasRequiredStreamBrowserify = 1, streamBrowserify = t;
  var r = requireEvents().EventEmitter, e = requireInherits_browser();
  e(t, r), t.Readable = require_stream_readable$1(), t.Writable = require_stream_writable$1(), t.Duplex = require_stream_duplex$1(), t.Transform = require_stream_transform$1(), t.PassThrough = require_stream_passthrough$1(), t.finished = requireEndOfStream(), t.pipeline = requirePipeline(), t.Stream = t;
  function t() {
    r.call(this);
  }
  return t.prototype.pipe = function(n, s) {
    var a = this;
    function o(m) {
      n.writable && n.write(m) === !1 && a.pause && a.pause();
    }
    a.on("data", o);
    function u() {
      a.readable && a.resume && a.resume();
    }
    n.on("drain", u), !n._isStdio && (!s || s.end !== !1) && (a.on("end", f), a.on("close", c));
    var l = !1;
    function f() {
      l || (l = !0, n.end());
    }
    function c() {
      l || (l = !0, typeof n.destroy == "function" && n.destroy());
    }
    function h(m) {
      if (d(), r.listenerCount(this, "error") === 0)
        throw m;
    }
    a.on("error", h), n.on("error", h);
    function d() {
      a.removeListener("data", o), n.removeListener("drain", u), a.removeListener("end", f), a.removeListener("close", c), a.removeListener("error", h), n.removeListener("error", h), a.removeListener("end", d), a.removeListener("close", d), n.removeListener("close", d);
    }
    return a.on("end", d), a.on("close", d), n.on("close", d), n.emit("pipe", a), n;
  }, streamBrowserify;
}
var hashBase, hasRequiredHashBase;
function requireHashBase() {
  if (hasRequiredHashBase) return hashBase;
  hasRequiredHashBase = 1;
  var r = requireSafeBuffer$1().Buffer, e = requireStreamBrowserify().Transform, t = requireInherits_browser();
  function n(u) {
    e.call(this), this._block = r.allocUnsafe(u), this._blockSize = u, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = !1;
  }
  t(n, e), n.prototype._transform = function(u, l, f) {
    var c = null;
    try {
      this.update(u, l);
    } catch (h) {
      c = h;
    }
    f(c);
  }, n.prototype._flush = function(u) {
    var l = null;
    try {
      this.push(this.digest());
    } catch (f) {
      l = f;
    }
    u(l);
  };
  var s = typeof Uint8Array < "u", a = typeof ArrayBuffer < "u" && typeof Uint8Array < "u" && ArrayBuffer.isView && (r.prototype instanceof Uint8Array || r.TYPED_ARRAY_SUPPORT);
  function o(u, l) {
    if (u instanceof r) return u;
    if (typeof u == "string") return r.from(u, l);
    if (a && ArrayBuffer.isView(u)) {
      if (u.byteLength === 0) return r.alloc(0);
      var f = r.from(u.buffer, u.byteOffset, u.byteLength);
      if (f.byteLength === u.byteLength) return f;
    }
    if (s && u instanceof Uint8Array || r.isBuffer(u) && u.constructor && typeof u.constructor.isBuffer == "function" && u.constructor.isBuffer(u))
      return r.from(u);
    throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
  }
  return n.prototype.update = function(u, l) {
    if (this._finalized) throw new Error("Digest already called");
    u = o(u, l);
    for (var f = this._block, c = 0; this._blockOffset + u.length - c >= this._blockSize; ) {
      for (var h = this._blockOffset; h < this._blockSize; ) f[h++] = u[c++];
      this._update(), this._blockOffset = 0;
    }
    for (; c < u.length; ) f[this._blockOffset++] = u[c++];
    for (var d = 0, m = u.length * 8; m > 0; ++d)
      this._length[d] += m, m = this._length[d] / 4294967296 | 0, m > 0 && (this._length[d] -= 4294967296 * m);
    return this;
  }, n.prototype._update = function() {
    throw new Error("_update is not implemented");
  }, n.prototype.digest = function(u) {
    if (this._finalized) throw new Error("Digest already called");
    this._finalized = !0;
    var l = this._digest();
    u !== void 0 && (l = l.toString(u)), this._block.fill(0), this._blockOffset = 0;
    for (var f = 0; f < 4; ++f) this._length[f] = 0;
    return l;
  }, n.prototype._digest = function() {
    throw new Error("_digest is not implemented");
  }, hashBase = n, hashBase;
}
var md5_js, hasRequiredMd5_js;
function requireMd5_js() {
  if (hasRequiredMd5_js) return md5_js;
  hasRequiredMd5_js = 1;
  var r = requireInherits_browser(), e = requireHashBase(), t = requireSafeBuffer$1().Buffer, n = new Array(16);
  function s() {
    e.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
  }
  r(s, e), s.prototype._update = function() {
    for (var c = n, h = 0; h < 16; ++h) c[h] = this._block.readInt32LE(h * 4);
    var d = this._a, m = this._b, g = this._c, y = this._d;
    d = o(d, m, g, y, c[0], 3614090360, 7), y = o(y, d, m, g, c[1], 3905402710, 12), g = o(g, y, d, m, c[2], 606105819, 17), m = o(m, g, y, d, c[3], 3250441966, 22), d = o(d, m, g, y, c[4], 4118548399, 7), y = o(y, d, m, g, c[5], 1200080426, 12), g = o(g, y, d, m, c[6], 2821735955, 17), m = o(m, g, y, d, c[7], 4249261313, 22), d = o(d, m, g, y, c[8], 1770035416, 7), y = o(y, d, m, g, c[9], 2336552879, 12), g = o(g, y, d, m, c[10], 4294925233, 17), m = o(m, g, y, d, c[11], 2304563134, 22), d = o(d, m, g, y, c[12], 1804603682, 7), y = o(y, d, m, g, c[13], 4254626195, 12), g = o(g, y, d, m, c[14], 2792965006, 17), m = o(m, g, y, d, c[15], 1236535329, 22), d = u(d, m, g, y, c[1], 4129170786, 5), y = u(y, d, m, g, c[6], 3225465664, 9), g = u(g, y, d, m, c[11], 643717713, 14), m = u(m, g, y, d, c[0], 3921069994, 20), d = u(d, m, g, y, c[5], 3593408605, 5), y = u(y, d, m, g, c[10], 38016083, 9), g = u(g, y, d, m, c[15], 3634488961, 14), m = u(m, g, y, d, c[4], 3889429448, 20), d = u(d, m, g, y, c[9], 568446438, 5), y = u(y, d, m, g, c[14], 3275163606, 9), g = u(g, y, d, m, c[3], 4107603335, 14), m = u(m, g, y, d, c[8], 1163531501, 20), d = u(d, m, g, y, c[13], 2850285829, 5), y = u(y, d, m, g, c[2], 4243563512, 9), g = u(g, y, d, m, c[7], 1735328473, 14), m = u(m, g, y, d, c[12], 2368359562, 20), d = l(d, m, g, y, c[5], 4294588738, 4), y = l(y, d, m, g, c[8], 2272392833, 11), g = l(g, y, d, m, c[11], 1839030562, 16), m = l(m, g, y, d, c[14], 4259657740, 23), d = l(d, m, g, y, c[1], 2763975236, 4), y = l(y, d, m, g, c[4], 1272893353, 11), g = l(g, y, d, m, c[7], 4139469664, 16), m = l(m, g, y, d, c[10], 3200236656, 23), d = l(d, m, g, y, c[13], 681279174, 4), y = l(y, d, m, g, c[0], 3936430074, 11), g = l(g, y, d, m, c[3], 3572445317, 16), m = l(m, g, y, d, c[6], 76029189, 23), d = l(d, m, g, y, c[9], 3654602809, 4), y = l(y, d, m, g, c[12], 3873151461, 11), g = l(g, y, d, m, c[15], 530742520, 16), m = l(m, g, y, d, c[2], 3299628645, 23), d = f(d, m, g, y, c[0], 4096336452, 6), y = f(y, d, m, g, c[7], 1126891415, 10), g = f(g, y, d, m, c[14], 2878612391, 15), m = f(m, g, y, d, c[5], 4237533241, 21), d = f(d, m, g, y, c[12], 1700485571, 6), y = f(y, d, m, g, c[3], 2399980690, 10), g = f(g, y, d, m, c[10], 4293915773, 15), m = f(m, g, y, d, c[1], 2240044497, 21), d = f(d, m, g, y, c[8], 1873313359, 6), y = f(y, d, m, g, c[15], 4264355552, 10), g = f(g, y, d, m, c[6], 2734768916, 15), m = f(m, g, y, d, c[13], 1309151649, 21), d = f(d, m, g, y, c[4], 4149444226, 6), y = f(y, d, m, g, c[11], 3174756917, 10), g = f(g, y, d, m, c[2], 718787259, 15), m = f(m, g, y, d, c[9], 3951481745, 21), this._a = this._a + d | 0, this._b = this._b + m | 0, this._c = this._c + g | 0, this._d = this._d + y | 0;
  }, s.prototype._digest = function() {
    this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
    var c = t.allocUnsafe(16);
    return c.writeInt32LE(this._a, 0), c.writeInt32LE(this._b, 4), c.writeInt32LE(this._c, 8), c.writeInt32LE(this._d, 12), c;
  };
  function a(c, h) {
    return c << h | c >>> 32 - h;
  }
  function o(c, h, d, m, g, y, b) {
    return a(c + (h & d | ~h & m) + g + y | 0, b) + h | 0;
  }
  function u(c, h, d, m, g, y, b) {
    return a(c + (h & m | d & ~m) + g + y | 0, b) + h | 0;
  }
  function l(c, h, d, m, g, y, b) {
    return a(c + (h ^ d ^ m) + g + y | 0, b) + h | 0;
  }
  function f(c, h, d, m, g, y, b) {
    return a(c + (d ^ (h | ~m)) + g + y | 0, b) + h | 0;
  }
  return md5_js = s, md5_js;
}
var ripemd160, hasRequiredRipemd160;
function requireRipemd160() {
  if (hasRequiredRipemd160) return ripemd160;
  hasRequiredRipemd160 = 1;
  var r = requireDist().Buffer, e = requireInherits_browser(), t = requireHashBase(), n = new Array(16), s = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ], a = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ], o = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ], u = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ], l = [0, 1518500249, 1859775393, 2400959708, 2840853838], f = [1352829926, 1548603684, 1836072691, 2053994217, 0];
  function c() {
    t.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
  }
  e(c, t), c.prototype._update = function() {
    for (var v = n, w = 0; w < 16; ++w) v[w] = this._block.readInt32LE(w * 4);
    for (var I = this._a | 0, T = this._b | 0, _ = this._c | 0, F = this._d | 0, O = this._e | 0, q = this._a | 0, V = this._b | 0, H = this._c | 0, R = this._d | 0, $ = this._e | 0, S = 0; S < 80; S += 1) {
      var x, C;
      S < 16 ? (x = d(I, T, _, F, O, v[s[S]], l[0], o[S]), C = b(q, V, H, R, $, v[a[S]], f[0], u[S])) : S < 32 ? (x = m(I, T, _, F, O, v[s[S]], l[1], o[S]), C = y(q, V, H, R, $, v[a[S]], f[1], u[S])) : S < 48 ? (x = g(I, T, _, F, O, v[s[S]], l[2], o[S]), C = g(q, V, H, R, $, v[a[S]], f[2], u[S])) : S < 64 ? (x = y(I, T, _, F, O, v[s[S]], l[3], o[S]), C = m(q, V, H, R, $, v[a[S]], f[3], u[S])) : (x = b(I, T, _, F, O, v[s[S]], l[4], o[S]), C = d(q, V, H, R, $, v[a[S]], f[4], u[S])), I = O, O = F, F = h(_, 10), _ = T, T = x, q = $, $ = R, R = h(H, 10), H = V, V = C;
    }
    var A = this._b + _ + R | 0;
    this._b = this._c + F + $ | 0, this._c = this._d + O + q | 0, this._d = this._e + I + V | 0, this._e = this._a + T + H | 0, this._a = A;
  }, c.prototype._digest = function() {
    this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
    var v = r.alloc ? r.alloc(20) : new r(20);
    return v.writeInt32LE(this._a, 0), v.writeInt32LE(this._b, 4), v.writeInt32LE(this._c, 8), v.writeInt32LE(this._d, 12), v.writeInt32LE(this._e, 16), v;
  };
  function h(v, w) {
    return v << w | v >>> 32 - w;
  }
  function d(v, w, I, T, _, F, O, q) {
    return h(v + (w ^ I ^ T) + F + O | 0, q) + _ | 0;
  }
  function m(v, w, I, T, _, F, O, q) {
    return h(v + (w & I | ~w & T) + F + O | 0, q) + _ | 0;
  }
  function g(v, w, I, T, _, F, O, q) {
    return h(v + ((w | ~I) ^ T) + F + O | 0, q) + _ | 0;
  }
  function y(v, w, I, T, _, F, O, q) {
    return h(v + (w & T | I & ~T) + F + O | 0, q) + _ | 0;
  }
  function b(v, w, I, T, _, F, O, q) {
    return h(v + (w ^ (I | ~T)) + F + O | 0, q) + _ | 0;
  }
  return ripemd160 = c, ripemd160;
}
var sha_js = { exports: {} }, hash$1, hasRequiredHash$1;
function requireHash$1() {
  if (hasRequiredHash$1) return hash$1;
  hasRequiredHash$1 = 1;
  var r = requireSafeBuffer$1().Buffer;
  function e(t, n) {
    this._block = r.alloc(t), this._finalSize = n, this._blockSize = t, this._len = 0;
  }
  return e.prototype.update = function(t, n) {
    typeof t == "string" && (n = n || "utf8", t = r.from(t, n));
    for (var s = this._block, a = this._blockSize, o = t.length, u = this._len, l = 0; l < o; ) {
      for (var f = u % a, c = Math.min(o - l, a - f), h = 0; h < c; h++)
        s[f + h] = t[l + h];
      u += c, l += c, u % a === 0 && this._update(s);
    }
    return this._len += o, this;
  }, e.prototype.digest = function(t) {
    var n = this._len % this._blockSize;
    this._block[n] = 128, this._block.fill(0, n + 1), n >= this._finalSize && (this._update(this._block), this._block.fill(0));
    var s = this._len * 8;
    if (s <= 4294967295)
      this._block.writeUInt32BE(s, this._blockSize - 4);
    else {
      var a = (s & 4294967295) >>> 0, o = (s - a) / 4294967296;
      this._block.writeUInt32BE(o, this._blockSize - 8), this._block.writeUInt32BE(a, this._blockSize - 4);
    }
    this._update(this._block);
    var u = this._hash();
    return t ? u.toString(t) : u;
  }, e.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
  }, hash$1 = e, hash$1;
}
var sha$1, hasRequiredSha$1;
function requireSha$1() {
  if (hasRequiredSha$1) return sha$1;
  hasRequiredSha$1 = 1;
  var r = requireInherits_browser(), e = requireHash$1(), t = requireSafeBuffer$1().Buffer, n = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
  ], s = new Array(80);
  function a() {
    this.init(), this._w = s, e.call(this, 64, 56);
  }
  r(a, e), a.prototype.init = function() {
    return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
  };
  function o(f) {
    return f << 5 | f >>> 27;
  }
  function u(f) {
    return f << 30 | f >>> 2;
  }
  function l(f, c, h, d) {
    return f === 0 ? c & h | ~c & d : f === 2 ? c & h | c & d | h & d : c ^ h ^ d;
  }
  return a.prototype._update = function(f) {
    for (var c = this._w, h = this._a | 0, d = this._b | 0, m = this._c | 0, g = this._d | 0, y = this._e | 0, b = 0; b < 16; ++b) c[b] = f.readInt32BE(b * 4);
    for (; b < 80; ++b) c[b] = c[b - 3] ^ c[b - 8] ^ c[b - 14] ^ c[b - 16];
    for (var v = 0; v < 80; ++v) {
      var w = ~~(v / 20), I = o(h) + l(w, d, m, g) + y + c[v] + n[w] | 0;
      y = g, g = m, m = u(d), d = h, h = I;
    }
    this._a = h + this._a | 0, this._b = d + this._b | 0, this._c = m + this._c | 0, this._d = g + this._d | 0, this._e = y + this._e | 0;
  }, a.prototype._hash = function() {
    var f = t.allocUnsafe(20);
    return f.writeInt32BE(this._a | 0, 0), f.writeInt32BE(this._b | 0, 4), f.writeInt32BE(this._c | 0, 8), f.writeInt32BE(this._d | 0, 12), f.writeInt32BE(this._e | 0, 16), f;
  }, sha$1 = a, sha$1;
}
var sha1, hasRequiredSha1;
function requireSha1() {
  if (hasRequiredSha1) return sha1;
  hasRequiredSha1 = 1;
  var r = requireInherits_browser(), e = requireHash$1(), t = requireSafeBuffer$1().Buffer, n = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
  ], s = new Array(80);
  function a() {
    this.init(), this._w = s, e.call(this, 64, 56);
  }
  r(a, e), a.prototype.init = function() {
    return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
  };
  function o(c) {
    return c << 1 | c >>> 31;
  }
  function u(c) {
    return c << 5 | c >>> 27;
  }
  function l(c) {
    return c << 30 | c >>> 2;
  }
  function f(c, h, d, m) {
    return c === 0 ? h & d | ~h & m : c === 2 ? h & d | h & m | d & m : h ^ d ^ m;
  }
  return a.prototype._update = function(c) {
    for (var h = this._w, d = this._a | 0, m = this._b | 0, g = this._c | 0, y = this._d | 0, b = this._e | 0, v = 0; v < 16; ++v) h[v] = c.readInt32BE(v * 4);
    for (; v < 80; ++v) h[v] = o(h[v - 3] ^ h[v - 8] ^ h[v - 14] ^ h[v - 16]);
    for (var w = 0; w < 80; ++w) {
      var I = ~~(w / 20), T = u(d) + f(I, m, g, y) + b + h[w] + n[I] | 0;
      b = y, y = g, g = l(m), m = d, d = T;
    }
    this._a = d + this._a | 0, this._b = m + this._b | 0, this._c = g + this._c | 0, this._d = y + this._d | 0, this._e = b + this._e | 0;
  }, a.prototype._hash = function() {
    var c = t.allocUnsafe(20);
    return c.writeInt32BE(this._a | 0, 0), c.writeInt32BE(this._b | 0, 4), c.writeInt32BE(this._c | 0, 8), c.writeInt32BE(this._d | 0, 12), c.writeInt32BE(this._e | 0, 16), c;
  }, sha1 = a, sha1;
}
var sha256$1, hasRequiredSha256;
function requireSha256() {
  if (hasRequiredSha256) return sha256$1;
  hasRequiredSha256 = 1;
  var r = requireInherits_browser(), e = requireHash$1(), t = requireSafeBuffer$1().Buffer, n = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ], s = new Array(64);
  function a() {
    this.init(), this._w = s, e.call(this, 64, 56);
  }
  r(a, e), a.prototype.init = function() {
    return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
  };
  function o(d, m, g) {
    return g ^ d & (m ^ g);
  }
  function u(d, m, g) {
    return d & m | g & (d | m);
  }
  function l(d) {
    return (d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10);
  }
  function f(d) {
    return (d >>> 6 | d << 26) ^ (d >>> 11 | d << 21) ^ (d >>> 25 | d << 7);
  }
  function c(d) {
    return (d >>> 7 | d << 25) ^ (d >>> 18 | d << 14) ^ d >>> 3;
  }
  function h(d) {
    return (d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10;
  }
  return a.prototype._update = function(d) {
    for (var m = this._w, g = this._a | 0, y = this._b | 0, b = this._c | 0, v = this._d | 0, w = this._e | 0, I = this._f | 0, T = this._g | 0, _ = this._h | 0, F = 0; F < 16; ++F) m[F] = d.readInt32BE(F * 4);
    for (; F < 64; ++F) m[F] = h(m[F - 2]) + m[F - 7] + c(m[F - 15]) + m[F - 16] | 0;
    for (var O = 0; O < 64; ++O) {
      var q = _ + f(w) + o(w, I, T) + n[O] + m[O] | 0, V = l(g) + u(g, y, b) | 0;
      _ = T, T = I, I = w, w = v + q | 0, v = b, b = y, y = g, g = q + V | 0;
    }
    this._a = g + this._a | 0, this._b = y + this._b | 0, this._c = b + this._c | 0, this._d = v + this._d | 0, this._e = w + this._e | 0, this._f = I + this._f | 0, this._g = T + this._g | 0, this._h = _ + this._h | 0;
  }, a.prototype._hash = function() {
    var d = t.allocUnsafe(32);
    return d.writeInt32BE(this._a, 0), d.writeInt32BE(this._b, 4), d.writeInt32BE(this._c, 8), d.writeInt32BE(this._d, 12), d.writeInt32BE(this._e, 16), d.writeInt32BE(this._f, 20), d.writeInt32BE(this._g, 24), d.writeInt32BE(this._h, 28), d;
  }, sha256$1 = a, sha256$1;
}
var sha224$1, hasRequiredSha224;
function requireSha224() {
  if (hasRequiredSha224) return sha224$1;
  hasRequiredSha224 = 1;
  var r = requireInherits_browser(), e = requireSha256(), t = requireHash$1(), n = requireSafeBuffer$1().Buffer, s = new Array(64);
  function a() {
    this.init(), this._w = s, t.call(this, 64, 56);
  }
  return r(a, e), a.prototype.init = function() {
    return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
  }, a.prototype._hash = function() {
    var o = n.allocUnsafe(28);
    return o.writeInt32BE(this._a, 0), o.writeInt32BE(this._b, 4), o.writeInt32BE(this._c, 8), o.writeInt32BE(this._d, 12), o.writeInt32BE(this._e, 16), o.writeInt32BE(this._f, 20), o.writeInt32BE(this._g, 24), o;
  }, sha224$1 = a, sha224$1;
}
var sha512$1, hasRequiredSha512;
function requireSha512() {
  if (hasRequiredSha512) return sha512$1;
  hasRequiredSha512 = 1;
  var r = requireInherits_browser(), e = requireHash$1(), t = requireSafeBuffer$1().Buffer, n = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ], s = new Array(160);
  function a() {
    this.init(), this._w = s, e.call(this, 128, 112);
  }
  r(a, e), a.prototype.init = function() {
    return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
  };
  function o(y, b, v) {
    return v ^ y & (b ^ v);
  }
  function u(y, b, v) {
    return y & b | v & (y | b);
  }
  function l(y, b) {
    return (y >>> 28 | b << 4) ^ (b >>> 2 | y << 30) ^ (b >>> 7 | y << 25);
  }
  function f(y, b) {
    return (y >>> 14 | b << 18) ^ (y >>> 18 | b << 14) ^ (b >>> 9 | y << 23);
  }
  function c(y, b) {
    return (y >>> 1 | b << 31) ^ (y >>> 8 | b << 24) ^ y >>> 7;
  }
  function h(y, b) {
    return (y >>> 1 | b << 31) ^ (y >>> 8 | b << 24) ^ (y >>> 7 | b << 25);
  }
  function d(y, b) {
    return (y >>> 19 | b << 13) ^ (b >>> 29 | y << 3) ^ y >>> 6;
  }
  function m(y, b) {
    return (y >>> 19 | b << 13) ^ (b >>> 29 | y << 3) ^ (y >>> 6 | b << 26);
  }
  function g(y, b) {
    return y >>> 0 < b >>> 0 ? 1 : 0;
  }
  return a.prototype._update = function(y) {
    for (var b = this._w, v = this._ah | 0, w = this._bh | 0, I = this._ch | 0, T = this._dh | 0, _ = this._eh | 0, F = this._fh | 0, O = this._gh | 0, q = this._hh | 0, V = this._al | 0, H = this._bl | 0, R = this._cl | 0, $ = this._dl | 0, S = this._el | 0, x = this._fl | 0, C = this._gl | 0, A = this._hl | 0, N = 0; N < 32; N += 2)
      b[N] = y.readInt32BE(N * 4), b[N + 1] = y.readInt32BE(N * 4 + 4);
    for (; N < 160; N += 2) {
      var k = b[N - 30], D = b[N - 15 * 2 + 1], E = c(k, D), M = h(D, k);
      k = b[N - 2 * 2], D = b[N - 2 * 2 + 1];
      var P = d(k, D), z = m(D, k), J = b[N - 7 * 2], re = b[N - 7 * 2 + 1], Q = b[N - 16 * 2], W = b[N - 16 * 2 + 1], j = M + re | 0, te = E + J + g(j, M) | 0;
      j = j + z | 0, te = te + P + g(j, z) | 0, j = j + W | 0, te = te + Q + g(j, W) | 0, b[N] = te, b[N + 1] = j;
    }
    for (var se = 0; se < 160; se += 2) {
      te = b[se], j = b[se + 1];
      var X = u(v, w, I), K = u(V, H, R), ae = l(v, V), de = l(V, v), me = f(_, S), pe = f(S, _), ge = n[se], ye = n[se + 1], ce = o(_, F, O), $e = o(S, x, C), be = A + pe | 0, xe = q + me + g(be, A) | 0;
      be = be + $e | 0, xe = xe + ce + g(be, $e) | 0, be = be + ye | 0, xe = xe + ge + g(be, ye) | 0, be = be + j | 0, xe = xe + te + g(be, j) | 0;
      var we = de + K | 0, ve = ae + X + g(we, de) | 0;
      q = O, A = C, O = F, C = x, F = _, x = S, S = $ + be | 0, _ = T + xe + g(S, $) | 0, T = I, $ = R, I = w, R = H, w = v, H = V, V = be + we | 0, v = xe + ve + g(V, be) | 0;
    }
    this._al = this._al + V | 0, this._bl = this._bl + H | 0, this._cl = this._cl + R | 0, this._dl = this._dl + $ | 0, this._el = this._el + S | 0, this._fl = this._fl + x | 0, this._gl = this._gl + C | 0, this._hl = this._hl + A | 0, this._ah = this._ah + v + g(this._al, V) | 0, this._bh = this._bh + w + g(this._bl, H) | 0, this._ch = this._ch + I + g(this._cl, R) | 0, this._dh = this._dh + T + g(this._dl, $) | 0, this._eh = this._eh + _ + g(this._el, S) | 0, this._fh = this._fh + F + g(this._fl, x) | 0, this._gh = this._gh + O + g(this._gl, C) | 0, this._hh = this._hh + q + g(this._hl, A) | 0;
  }, a.prototype._hash = function() {
    var y = t.allocUnsafe(64);
    function b(v, w, I) {
      y.writeInt32BE(v, I), y.writeInt32BE(w, I + 4);
    }
    return b(this._ah, this._al, 0), b(this._bh, this._bl, 8), b(this._ch, this._cl, 16), b(this._dh, this._dl, 24), b(this._eh, this._el, 32), b(this._fh, this._fl, 40), b(this._gh, this._gl, 48), b(this._hh, this._hl, 56), y;
  }, sha512$1 = a, sha512$1;
}
var sha384$1, hasRequiredSha384;
function requireSha384() {
  if (hasRequiredSha384) return sha384$1;
  hasRequiredSha384 = 1;
  var r = requireInherits_browser(), e = requireSha512(), t = requireHash$1(), n = requireSafeBuffer$1().Buffer, s = new Array(160);
  function a() {
    this.init(), this._w = s, t.call(this, 128, 112);
  }
  return r(a, e), a.prototype.init = function() {
    return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
  }, a.prototype._hash = function() {
    var o = n.allocUnsafe(48);
    function u(l, f, c) {
      o.writeInt32BE(l, c), o.writeInt32BE(f, c + 4);
    }
    return u(this._ah, this._al, 0), u(this._bh, this._bl, 8), u(this._ch, this._cl, 16), u(this._dh, this._dl, 24), u(this._eh, this._el, 32), u(this._fh, this._fl, 40), o;
  }, sha384$1 = a, sha384$1;
}
var hasRequiredSha_js;
function requireSha_js() {
  if (hasRequiredSha_js) return sha_js.exports;
  hasRequiredSha_js = 1;
  var r = sha_js.exports = function(t) {
    t = t.toLowerCase();
    var n = r[t];
    if (!n) throw new Error(t + " is not supported (we accept pull requests)");
    return new n();
  };
  return r.sha = requireSha$1(), r.sha1 = requireSha1(), r.sha224 = requireSha224(), r.sha256 = requireSha256(), r.sha384 = requireSha384(), r.sha512 = requireSha512(), sha_js.exports;
}
var cipherBase, hasRequiredCipherBase;
function requireCipherBase() {
  if (hasRequiredCipherBase) return cipherBase;
  hasRequiredCipherBase = 1;
  var r = requireSafeBuffer$1().Buffer, e = requireStreamBrowserify().Transform, t = requireString_decoder().StringDecoder, n = requireInherits_browser();
  function s(l) {
    e.call(this), this.hashMode = typeof l == "string", this.hashMode ? this[l] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
  }
  n(s, e);
  var a = typeof Uint8Array < "u", o = typeof ArrayBuffer < "u" && typeof Uint8Array < "u" && ArrayBuffer.isView && (r.prototype instanceof Uint8Array || r.TYPED_ARRAY_SUPPORT);
  function u(l, f) {
    if (l instanceof r)
      return l;
    if (typeof l == "string")
      return r.from(l, f);
    if (o && ArrayBuffer.isView(l)) {
      if (l.byteLength === 0)
        return r.alloc(0);
      var c = r.from(l.buffer, l.byteOffset, l.byteLength);
      if (c.byteLength === l.byteLength)
        return c;
    }
    if (a && l instanceof Uint8Array || r.isBuffer(l) && l.constructor && typeof l.constructor.isBuffer == "function" && l.constructor.isBuffer(l))
      return r.from(l);
    throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
  }
  return s.prototype.update = function(l, f, c) {
    var h = u(l, f), d = this._update(h);
    return this.hashMode ? this : (c && (d = this._toString(d, c)), d);
  }, s.prototype.setAutoPadding = function() {
  }, s.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
  }, s.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
  }, s.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
  }, s.prototype._transform = function(l, f, c) {
    var h;
    try {
      this.hashMode ? this._update(l) : this.push(this._update(l));
    } catch (d) {
      h = d;
    } finally {
      c(h);
    }
  }, s.prototype._flush = function(l) {
    var f;
    try {
      this.push(this.__final());
    } catch (c) {
      f = c;
    }
    l(f);
  }, s.prototype._finalOrDigest = function(l) {
    var f = this.__final() || r.alloc(0);
    return l && (f = this._toString(f, l, !0)), f;
  }, s.prototype._toString = function(l, f, c) {
    if (this._decoder || (this._decoder = new t(f), this._encoding = f), this._encoding !== f)
      throw new Error("can’t switch encodings");
    var h = this._decoder.write(l);
    return c && (h += this._decoder.end()), h;
  }, cipherBase = s, cipherBase;
}
var browser$a, hasRequiredBrowser$9;
function requireBrowser$9() {
  if (hasRequiredBrowser$9) return browser$a;
  hasRequiredBrowser$9 = 1;
  var r = requireInherits_browser(), e = requireMd5_js(), t = requireRipemd160(), n = requireSha_js(), s = requireCipherBase();
  function a(o) {
    s.call(this, "digest"), this._hash = o;
  }
  return r(a, s), a.prototype._update = function(o) {
    this._hash.update(o);
  }, a.prototype._final = function() {
    return this._hash.digest();
  }, browser$a = function(u) {
    return u = u.toLowerCase(), u === "md5" ? new e() : u === "rmd160" || u === "ripemd160" ? new t() : new a(n(u));
  }, browser$a;
}
var legacy, hasRequiredLegacy;
function requireLegacy() {
  if (hasRequiredLegacy) return legacy;
  hasRequiredLegacy = 1;
  var r = requireInherits_browser(), e = requireSafeBuffer$1().Buffer, t = requireCipherBase(), n = e.alloc(128), s = 64;
  function a(o, u) {
    t.call(this, "digest"), typeof u == "string" && (u = e.from(u)), this._alg = o, this._key = u, u.length > s ? u = o(u) : u.length < s && (u = e.concat([u, n], s));
    for (var l = this._ipad = e.allocUnsafe(s), f = this._opad = e.allocUnsafe(s), c = 0; c < s; c++)
      l[c] = u[c] ^ 54, f[c] = u[c] ^ 92;
    this._hash = [l];
  }
  return r(a, t), a.prototype._update = function(o) {
    this._hash.push(o);
  }, a.prototype._final = function() {
    var o = this._alg(e.concat(this._hash));
    return this._alg(e.concat([this._opad, o]));
  }, legacy = a, legacy;
}
var md5, hasRequiredMd5;
function requireMd5() {
  if (hasRequiredMd5) return md5;
  hasRequiredMd5 = 1;
  var r = requireMd5_js();
  return md5 = function(e) {
    return new r().update(e).digest();
  }, md5;
}
var browser$9, hasRequiredBrowser$8;
function requireBrowser$8() {
  if (hasRequiredBrowser$8) return browser$9;
  hasRequiredBrowser$8 = 1;
  var r = requireInherits_browser(), e = requireLegacy(), t = requireCipherBase(), n = requireSafeBuffer$1().Buffer, s = requireMd5(), a = requireRipemd160(), o = requireSha_js(), u = n.alloc(128);
  function l(f, c) {
    t.call(this, "digest"), typeof c == "string" && (c = n.from(c));
    var h = f === "sha512" || f === "sha384" ? 128 : 64;
    if (this._alg = f, this._key = c, c.length > h) {
      var d = f === "rmd160" ? new a() : o(f);
      c = d.update(c).digest();
    } else c.length < h && (c = n.concat([c, u], h));
    for (var m = this._ipad = n.allocUnsafe(h), g = this._opad = n.allocUnsafe(h), y = 0; y < h; y++)
      m[y] = c[y] ^ 54, g[y] = c[y] ^ 92;
    this._hash = f === "rmd160" ? new a() : o(f), this._hash.update(m);
  }
  return r(l, t), l.prototype._update = function(f) {
    this._hash.update(f);
  }, l.prototype._final = function() {
    var f = this._hash.digest(), c = this._alg === "rmd160" ? new a() : o(this._alg);
    return c.update(this._opad).update(f).digest();
  }, browser$9 = function(c, h) {
    return c = c.toLowerCase(), c === "rmd160" || c === "ripemd160" ? new l("rmd160", h) : c === "md5" ? new e(s, h) : new l(c, h);
  }, browser$9;
}
const sha224WithRSAEncryption = { sign: "rsa", hash: "sha224", id: "302d300d06096086480165030402040500041c" }, sha256WithRSAEncryption = { sign: "rsa", hash: "sha256", id: "3031300d060960864801650304020105000420" }, sha384WithRSAEncryption = { sign: "rsa", hash: "sha384", id: "3041300d060960864801650304020205000430" }, sha512WithRSAEncryption = { sign: "rsa", hash: "sha512", id: "3051300d060960864801650304020305000440" }, sha256 = { sign: "ecdsa", hash: "sha256", id: "" }, sha224 = { sign: "ecdsa", hash: "sha224", id: "" }, sha384 = { sign: "ecdsa", hash: "sha384", id: "" }, sha512 = { sign: "ecdsa", hash: "sha512", id: "" }, DSA = { sign: "dsa", hash: "sha1", id: "" }, ripemd160WithRSA = { sign: "rsa", hash: "rmd160", id: "3021300906052b2403020105000414" }, md5WithRSAEncryption = { sign: "rsa", hash: "md5", id: "3020300c06082a864886f70d020505000410" }, require$$6 = {
  sha224WithRSAEncryption,
  "RSA-SHA224": { sign: "ecdsa/rsa", hash: "sha224", id: "302d300d06096086480165030402040500041c" },
  sha256WithRSAEncryption,
  "RSA-SHA256": { sign: "ecdsa/rsa", hash: "sha256", id: "3031300d060960864801650304020105000420" },
  sha384WithRSAEncryption,
  "RSA-SHA384": { sign: "ecdsa/rsa", hash: "sha384", id: "3041300d060960864801650304020205000430" },
  sha512WithRSAEncryption,
  "RSA-SHA512": { sign: "ecdsa/rsa", hash: "sha512", id: "3051300d060960864801650304020305000440" },
  "RSA-SHA1": { sign: "rsa", hash: "sha1", id: "3021300906052b0e03021a05000414" },
  "ecdsa-with-SHA1": { sign: "ecdsa", hash: "sha1", id: "" },
  sha256,
  sha224,
  sha384,
  sha512,
  "DSA-SHA": { sign: "dsa", hash: "sha1", id: "" },
  "DSA-SHA1": { sign: "dsa", hash: "sha1", id: "" },
  DSA,
  "DSA-WITH-SHA224": { sign: "dsa", hash: "sha224", id: "" },
  "DSA-SHA224": { sign: "dsa", hash: "sha224", id: "" },
  "DSA-WITH-SHA256": { sign: "dsa", hash: "sha256", id: "" },
  "DSA-SHA256": { sign: "dsa", hash: "sha256", id: "" },
  "DSA-WITH-SHA384": { sign: "dsa", hash: "sha384", id: "" },
  "DSA-SHA384": { sign: "dsa", hash: "sha384", id: "" },
  "DSA-WITH-SHA512": { sign: "dsa", hash: "sha512", id: "" },
  "DSA-SHA512": { sign: "dsa", hash: "sha512", id: "" },
  "DSA-RIPEMD160": { sign: "dsa", hash: "rmd160", id: "" },
  ripemd160WithRSA,
  "RSA-RIPEMD160": { sign: "rsa", hash: "rmd160", id: "3021300906052b2403020105000414" },
  md5WithRSAEncryption,
  "RSA-MD5": { sign: "rsa", hash: "md5", id: "3020300c06082a864886f70d020505000410" }
};
var algos, hasRequiredAlgos;
function requireAlgos() {
  return hasRequiredAlgos || (hasRequiredAlgos = 1, algos = require$$6), algos;
}
var browser$8 = {}, precondition, hasRequiredPrecondition;
function requirePrecondition() {
  if (hasRequiredPrecondition) return precondition;
  hasRequiredPrecondition = 1;
  var r = Math.pow(2, 30) - 1;
  return precondition = function(e, t) {
    if (typeof e != "number")
      throw new TypeError("Iterations not a number");
    if (e < 0)
      throw new TypeError("Bad iterations");
    if (typeof t != "number")
      throw new TypeError("Key length not a number");
    if (t < 0 || t > r || t !== t)
      throw new TypeError("Bad key length");
  }, precondition;
}
var defaultEncoding_1, hasRequiredDefaultEncoding;
function requireDefaultEncoding() {
  if (hasRequiredDefaultEncoding) return defaultEncoding_1;
  hasRequiredDefaultEncoding = 1;
  var r;
  if (commonjsGlobal.process && commonjsGlobal.process.browser)
    r = "utf-8";
  else if (commonjsGlobal.process && commonjsGlobal.process.version) {
    var e = parseInt(process$1.version.split(".")[0].slice(1), 10);
    r = e >= 6 ? "utf-8" : "binary";
  } else
    r = "utf-8";
  return defaultEncoding_1 = r, defaultEncoding_1;
}
var toBuffer, hasRequiredToBuffer;
function requireToBuffer() {
  if (hasRequiredToBuffer) return toBuffer;
  hasRequiredToBuffer = 1;
  var r = requireSafeBuffer$1().Buffer;
  return toBuffer = function(e, t, n) {
    if (r.isBuffer(e))
      return e;
    if (typeof e == "string")
      return r.from(e, t);
    if (ArrayBuffer.isView(e))
      return r.from(e.buffer);
    throw new TypeError(n + " must be a string, a Buffer, a typed array or a DataView");
  }, toBuffer;
}
var syncBrowser, hasRequiredSyncBrowser;
function requireSyncBrowser() {
  if (hasRequiredSyncBrowser) return syncBrowser;
  hasRequiredSyncBrowser = 1;
  var r = requireMd5(), e = requireRipemd160(), t = requireSha_js(), n = requireSafeBuffer$1().Buffer, s = requirePrecondition(), a = requireDefaultEncoding(), o = requireToBuffer(), u = n.alloc(128), l = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
  };
  function f(d, m, g) {
    var y = c(d), b = d === "sha512" || d === "sha384" ? 128 : 64;
    m.length > b ? m = y(m) : m.length < b && (m = n.concat([m, u], b));
    for (var v = n.allocUnsafe(b + l[d]), w = n.allocUnsafe(b + l[d]), I = 0; I < b; I++)
      v[I] = m[I] ^ 54, w[I] = m[I] ^ 92;
    var T = n.allocUnsafe(b + g + 4);
    v.copy(T, 0, 0, b), this.ipad1 = T, this.ipad2 = v, this.opad = w, this.alg = d, this.blocksize = b, this.hash = y, this.size = l[d];
  }
  f.prototype.run = function(d, m) {
    d.copy(m, this.blocksize);
    var g = this.hash(m);
    return g.copy(this.opad, this.blocksize), this.hash(this.opad);
  };
  function c(d) {
    function m(y) {
      return t(d).update(y).digest();
    }
    function g(y) {
      return new e().update(y).digest();
    }
    return d === "rmd160" || d === "ripemd160" ? g : d === "md5" ? r : m;
  }
  function h(d, m, g, y, b) {
    s(g, y), d = o(d, a, "Password"), m = o(m, a, "Salt"), b = b || "sha1";
    var v = new f(b, d, m.length), w = n.allocUnsafe(y), I = n.allocUnsafe(m.length + 4);
    m.copy(I, 0, 0, m.length);
    for (var T = 0, _ = l[b], F = Math.ceil(y / _), O = 1; O <= F; O++) {
      I.writeUInt32BE(O, m.length);
      for (var q = v.run(I, v.ipad1), V = q, H = 1; H < g; H++) {
        V = v.run(V, v.ipad2);
        for (var R = 0; R < _; R++) q[R] ^= V[R];
      }
      q.copy(w, T), T += _;
    }
    return w;
  }
  return syncBrowser = h, syncBrowser;
}
var async, hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync) return async;
  hasRequiredAsync = 1;
  var r = requireSafeBuffer$1().Buffer, e = requirePrecondition(), t = requireDefaultEncoding(), n = requireSyncBrowser(), s = requireToBuffer(), a, o = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle, u = {
    sha: "SHA-1",
    "sha-1": "SHA-1",
    sha1: "SHA-1",
    sha256: "SHA-256",
    "sha-256": "SHA-256",
    sha384: "SHA-384",
    "sha-384": "SHA-384",
    "sha-512": "SHA-512",
    sha512: "SHA-512"
  }, l = [];
  function f(g) {
    if (commonjsGlobal.process && !commonjsGlobal.process.browser || !o || !o.importKey || !o.deriveBits)
      return Promise.resolve(!1);
    if (l[g] !== void 0)
      return l[g];
    a = a || r.alloc(8);
    var y = d(a, a, 10, 128, g).then(function() {
      return !0;
    }).catch(function() {
      return !1;
    });
    return l[g] = y, y;
  }
  var c;
  function h() {
    return c || (commonjsGlobal.process && commonjsGlobal.process.nextTick ? c = commonjsGlobal.process.nextTick : commonjsGlobal.queueMicrotask ? c = commonjsGlobal.queueMicrotask : commonjsGlobal.setImmediate ? c = commonjsGlobal.setImmediate : c = commonjsGlobal.setTimeout, c);
  }
  function d(g, y, b, v, w) {
    return o.importKey(
      "raw",
      g,
      { name: "PBKDF2" },
      !1,
      ["deriveBits"]
    ).then(function(I) {
      return o.deriveBits({
        name: "PBKDF2",
        salt: y,
        iterations: b,
        hash: {
          name: w
        }
      }, I, v << 3);
    }).then(function(I) {
      return r.from(I);
    });
  }
  function m(g, y) {
    g.then(function(b) {
      h()(function() {
        y(null, b);
      });
    }, function(b) {
      h()(function() {
        y(b);
      });
    });
  }
  return async = function(g, y, b, v, w, I) {
    typeof w == "function" && (I = w, w = void 0), w = w || "sha1";
    var T = u[w.toLowerCase()];
    if (!T || typeof commonjsGlobal.Promise != "function") {
      h()(function() {
        var _;
        try {
          _ = n(g, y, b, v, w);
        } catch (F) {
          return I(F);
        }
        I(null, _);
      });
      return;
    }
    if (e(b, v), g = s(g, t, "Password"), y = s(y, t, "Salt"), typeof I != "function") throw new Error("No callback provided to pbkdf2");
    m(f(T).then(function(_) {
      return _ ? d(g, y, b, v, T) : n(g, y, b, v, w);
    }), I);
  }, async;
}
var hasRequiredBrowser$7;
function requireBrowser$7() {
  return hasRequiredBrowser$7 || (hasRequiredBrowser$7 = 1, browser$8.pbkdf2 = requireAsync(), browser$8.pbkdf2Sync = requireSyncBrowser()), browser$8;
}
var browser$7 = {}, des$1 = {}, utils$3 = {}, hasRequiredUtils$3;
function requireUtils$3() {
  if (hasRequiredUtils$3) return utils$3;
  hasRequiredUtils$3 = 1, utils$3.readUInt32BE = function(s, a) {
    var o = s[0 + a] << 24 | s[1 + a] << 16 | s[2 + a] << 8 | s[3 + a];
    return o >>> 0;
  }, utils$3.writeUInt32BE = function(s, a, o) {
    s[0 + o] = a >>> 24, s[1 + o] = a >>> 16 & 255, s[2 + o] = a >>> 8 & 255, s[3 + o] = a & 255;
  }, utils$3.ip = function(s, a, o, u) {
    for (var l = 0, f = 0, c = 6; c >= 0; c -= 2) {
      for (var h = 0; h <= 24; h += 8)
        l <<= 1, l |= a >>> h + c & 1;
      for (var h = 0; h <= 24; h += 8)
        l <<= 1, l |= s >>> h + c & 1;
    }
    for (var c = 6; c >= 0; c -= 2) {
      for (var h = 1; h <= 25; h += 8)
        f <<= 1, f |= a >>> h + c & 1;
      for (var h = 1; h <= 25; h += 8)
        f <<= 1, f |= s >>> h + c & 1;
    }
    o[u + 0] = l >>> 0, o[u + 1] = f >>> 0;
  }, utils$3.rip = function(s, a, o, u) {
    for (var l = 0, f = 0, c = 0; c < 4; c++)
      for (var h = 24; h >= 0; h -= 8)
        l <<= 1, l |= a >>> h + c & 1, l <<= 1, l |= s >>> h + c & 1;
    for (var c = 4; c < 8; c++)
      for (var h = 24; h >= 0; h -= 8)
        f <<= 1, f |= a >>> h + c & 1, f <<= 1, f |= s >>> h + c & 1;
    o[u + 0] = l >>> 0, o[u + 1] = f >>> 0;
  }, utils$3.pc1 = function(s, a, o, u) {
    for (var l = 0, f = 0, c = 7; c >= 5; c--) {
      for (var h = 0; h <= 24; h += 8)
        l <<= 1, l |= a >> h + c & 1;
      for (var h = 0; h <= 24; h += 8)
        l <<= 1, l |= s >> h + c & 1;
    }
    for (var h = 0; h <= 24; h += 8)
      l <<= 1, l |= a >> h + c & 1;
    for (var c = 1; c <= 3; c++) {
      for (var h = 0; h <= 24; h += 8)
        f <<= 1, f |= a >> h + c & 1;
      for (var h = 0; h <= 24; h += 8)
        f <<= 1, f |= s >> h + c & 1;
    }
    for (var h = 0; h <= 24; h += 8)
      f <<= 1, f |= s >> h + c & 1;
    o[u + 0] = l >>> 0, o[u + 1] = f >>> 0;
  }, utils$3.r28shl = function(s, a) {
    return s << a & 268435455 | s >>> 28 - a;
  };
  var r = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
  ];
  utils$3.pc2 = function(s, a, o, u) {
    for (var l = 0, f = 0, c = r.length >>> 1, h = 0; h < c; h++)
      l <<= 1, l |= s >>> r[h] & 1;
    for (var h = c; h < r.length; h++)
      f <<= 1, f |= a >>> r[h] & 1;
    o[u + 0] = l >>> 0, o[u + 1] = f >>> 0;
  }, utils$3.expand = function(s, a, o) {
    var u = 0, l = 0;
    u = (s & 1) << 5 | s >>> 27;
    for (var f = 23; f >= 15; f -= 4)
      u <<= 6, u |= s >>> f & 63;
    for (var f = 11; f >= 3; f -= 4)
      l |= s >>> f & 63, l <<= 6;
    l |= (s & 31) << 1 | s >>> 31, a[o + 0] = u >>> 0, a[o + 1] = l >>> 0;
  };
  var e = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
  ];
  utils$3.substitute = function(s, a) {
    for (var o = 0, u = 0; u < 4; u++) {
      var l = s >>> 18 - u * 6 & 63, f = e[u * 64 + l];
      o <<= 4, o |= f;
    }
    for (var u = 0; u < 4; u++) {
      var l = a >>> 18 - u * 6 & 63, f = e[4 * 64 + u * 64 + l];
      o <<= 4, o |= f;
    }
    return o >>> 0;
  };
  var t = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
  ];
  return utils$3.permute = function(s) {
    for (var a = 0, o = 0; o < t.length; o++)
      a <<= 1, a |= s >>> t[o] & 1;
    return a >>> 0;
  }, utils$3.padSplit = function(s, a, o) {
    for (var u = s.toString(2); u.length < a; )
      u = "0" + u;
    for (var l = [], f = 0; f < a; f += o)
      l.push(u.slice(f, f + o));
    return l.join(" ");
  }, utils$3;
}
var minimalisticAssert, hasRequiredMinimalisticAssert;
function requireMinimalisticAssert() {
  if (hasRequiredMinimalisticAssert) return minimalisticAssert;
  hasRequiredMinimalisticAssert = 1, minimalisticAssert = r;
  function r(e, t) {
    if (!e)
      throw new Error(t || "Assertion failed");
  }
  return r.equal = function(t, n, s) {
    if (t != n)
      throw new Error(s || "Assertion failed: " + t + " != " + n);
  }, minimalisticAssert;
}
var cipher, hasRequiredCipher;
function requireCipher() {
  if (hasRequiredCipher) return cipher;
  hasRequiredCipher = 1;
  var r = requireMinimalisticAssert();
  function e(t) {
    this.options = t, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0, this.padding = t.padding !== !1;
  }
  return cipher = e, e.prototype._init = function() {
  }, e.prototype.update = function(n) {
    return n.length === 0 ? [] : this.type === "decrypt" ? this._updateDecrypt(n) : this._updateEncrypt(n);
  }, e.prototype._buffer = function(n, s) {
    for (var a = Math.min(this.buffer.length - this.bufferOff, n.length - s), o = 0; o < a; o++)
      this.buffer[this.bufferOff + o] = n[s + o];
    return this.bufferOff += a, a;
  }, e.prototype._flushBuffer = function(n, s) {
    return this._update(this.buffer, 0, n, s), this.bufferOff = 0, this.blockSize;
  }, e.prototype._updateEncrypt = function(n) {
    var s = 0, a = 0, o = (this.bufferOff + n.length) / this.blockSize | 0, u = new Array(o * this.blockSize);
    this.bufferOff !== 0 && (s += this._buffer(n, s), this.bufferOff === this.buffer.length && (a += this._flushBuffer(u, a)));
    for (var l = n.length - (n.length - s) % this.blockSize; s < l; s += this.blockSize)
      this._update(n, s, u, a), a += this.blockSize;
    for (; s < n.length; s++, this.bufferOff++)
      this.buffer[this.bufferOff] = n[s];
    return u;
  }, e.prototype._updateDecrypt = function(n) {
    for (var s = 0, a = 0, o = Math.ceil((this.bufferOff + n.length) / this.blockSize) - 1, u = new Array(o * this.blockSize); o > 0; o--)
      s += this._buffer(n, s), a += this._flushBuffer(u, a);
    return s += this._buffer(n, s), u;
  }, e.prototype.final = function(n) {
    var s;
    n && (s = this.update(n));
    var a;
    return this.type === "encrypt" ? a = this._finalEncrypt() : a = this._finalDecrypt(), s ? s.concat(a) : a;
  }, e.prototype._pad = function(n, s) {
    if (s === 0)
      return !1;
    for (; s < n.length; )
      n[s++] = 0;
    return !0;
  }, e.prototype._finalEncrypt = function() {
    if (!this._pad(this.buffer, this.bufferOff))
      return [];
    var n = new Array(this.blockSize);
    return this._update(this.buffer, 0, n, 0), n;
  }, e.prototype._unpad = function(n) {
    return n;
  }, e.prototype._finalDecrypt = function() {
    r.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
    var n = new Array(this.blockSize);
    return this._flushBuffer(n, 0), this._unpad(n);
  }, cipher;
}
var des, hasRequiredDes$1;
function requireDes$1() {
  if (hasRequiredDes$1) return des;
  hasRequiredDes$1 = 1;
  var r = requireMinimalisticAssert(), e = requireInherits_browser(), t = requireUtils$3(), n = requireCipher();
  function s() {
    this.tmp = new Array(2), this.keys = null;
  }
  function a(u) {
    n.call(this, u);
    var l = new s();
    this._desState = l, this.deriveKeys(l, u.key);
  }
  e(a, n), des = a, a.create = function(l) {
    return new a(l);
  };
  var o = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
  ];
  return a.prototype.deriveKeys = function(l, f) {
    l.keys = new Array(16 * 2), r.equal(f.length, this.blockSize, "Invalid key length");
    var c = t.readUInt32BE(f, 0), h = t.readUInt32BE(f, 4);
    t.pc1(c, h, l.tmp, 0), c = l.tmp[0], h = l.tmp[1];
    for (var d = 0; d < l.keys.length; d += 2) {
      var m = o[d >>> 1];
      c = t.r28shl(c, m), h = t.r28shl(h, m), t.pc2(c, h, l.keys, d);
    }
  }, a.prototype._update = function(l, f, c, h) {
    var d = this._desState, m = t.readUInt32BE(l, f), g = t.readUInt32BE(l, f + 4);
    t.ip(m, g, d.tmp, 0), m = d.tmp[0], g = d.tmp[1], this.type === "encrypt" ? this._encrypt(d, m, g, d.tmp, 0) : this._decrypt(d, m, g, d.tmp, 0), m = d.tmp[0], g = d.tmp[1], t.writeUInt32BE(c, m, h), t.writeUInt32BE(c, g, h + 4);
  }, a.prototype._pad = function(l, f) {
    if (this.padding === !1)
      return !1;
    for (var c = l.length - f, h = f; h < l.length; h++)
      l[h] = c;
    return !0;
  }, a.prototype._unpad = function(l) {
    if (this.padding === !1)
      return l;
    for (var f = l[l.length - 1], c = l.length - f; c < l.length; c++)
      r.equal(l[c], f);
    return l.slice(0, l.length - f);
  }, a.prototype._encrypt = function(l, f, c, h, d) {
    for (var m = f, g = c, y = 0; y < l.keys.length; y += 2) {
      var b = l.keys[y], v = l.keys[y + 1];
      t.expand(g, l.tmp, 0), b ^= l.tmp[0], v ^= l.tmp[1];
      var w = t.substitute(b, v), I = t.permute(w), T = g;
      g = (m ^ I) >>> 0, m = T;
    }
    t.rip(g, m, h, d);
  }, a.prototype._decrypt = function(l, f, c, h, d) {
    for (var m = c, g = f, y = l.keys.length - 2; y >= 0; y -= 2) {
      var b = l.keys[y], v = l.keys[y + 1];
      t.expand(m, l.tmp, 0), b ^= l.tmp[0], v ^= l.tmp[1];
      var w = t.substitute(b, v), I = t.permute(w), T = m;
      m = (g ^ I) >>> 0, g = T;
    }
    t.rip(m, g, h, d);
  }, des;
}
var cbc$1 = {}, hasRequiredCbc$1;
function requireCbc$1() {
  if (hasRequiredCbc$1) return cbc$1;
  hasRequiredCbc$1 = 1;
  var r = requireMinimalisticAssert(), e = requireInherits_browser(), t = {};
  function n(a) {
    r.equal(a.length, 8, "Invalid IV length"), this.iv = new Array(8);
    for (var o = 0; o < this.iv.length; o++)
      this.iv[o] = a[o];
  }
  function s(a) {
    function o(c) {
      a.call(this, c), this._cbcInit();
    }
    e(o, a);
    for (var u = Object.keys(t), l = 0; l < u.length; l++) {
      var f = u[l];
      o.prototype[f] = t[f];
    }
    return o.create = function(h) {
      return new o(h);
    }, o;
  }
  return cbc$1.instantiate = s, t._cbcInit = function() {
    var o = new n(this.options.iv);
    this._cbcState = o;
  }, t._update = function(o, u, l, f) {
    var c = this._cbcState, h = this.constructor.super_.prototype, d = c.iv;
    if (this.type === "encrypt") {
      for (var m = 0; m < this.blockSize; m++)
        d[m] ^= o[u + m];
      h._update.call(this, d, 0, l, f);
      for (var m = 0; m < this.blockSize; m++)
        d[m] = l[f + m];
    } else {
      h._update.call(this, o, u, l, f);
      for (var m = 0; m < this.blockSize; m++)
        l[f + m] ^= d[m];
      for (var m = 0; m < this.blockSize; m++)
        d[m] = o[u + m];
    }
  }, cbc$1;
}
var ede, hasRequiredEde;
function requireEde() {
  if (hasRequiredEde) return ede;
  hasRequiredEde = 1;
  var r = requireMinimalisticAssert(), e = requireInherits_browser(), t = requireCipher(), n = requireDes$1();
  function s(o, u) {
    r.equal(u.length, 24, "Invalid key length");
    var l = u.slice(0, 8), f = u.slice(8, 16), c = u.slice(16, 24);
    o === "encrypt" ? this.ciphers = [
      n.create({ type: "encrypt", key: l }),
      n.create({ type: "decrypt", key: f }),
      n.create({ type: "encrypt", key: c })
    ] : this.ciphers = [
      n.create({ type: "decrypt", key: c }),
      n.create({ type: "encrypt", key: f }),
      n.create({ type: "decrypt", key: l })
    ];
  }
  function a(o) {
    t.call(this, o);
    var u = new s(this.type, this.options.key);
    this._edeState = u;
  }
  return e(a, t), ede = a, a.create = function(u) {
    return new a(u);
  }, a.prototype._update = function(u, l, f, c) {
    var h = this._edeState;
    h.ciphers[0]._update(u, l, f, c), h.ciphers[1]._update(f, c, f, c), h.ciphers[2]._update(f, c, f, c);
  }, a.prototype._pad = n.prototype._pad, a.prototype._unpad = n.prototype._unpad, ede;
}
var hasRequiredDes;
function requireDes() {
  return hasRequiredDes || (hasRequiredDes = 1, des$1.utils = requireUtils$3(), des$1.Cipher = requireCipher(), des$1.DES = requireDes$1(), des$1.CBC = requireCbc$1(), des$1.EDE = requireEde()), des$1;
}
var browserifyDes, hasRequiredBrowserifyDes;
function requireBrowserifyDes() {
  if (hasRequiredBrowserifyDes) return browserifyDes;
  hasRequiredBrowserifyDes = 1;
  var r = requireCipherBase(), e = requireDes(), t = requireInherits_browser(), n = requireSafeBuffer$1().Buffer, s = {
    "des-ede3-cbc": e.CBC.instantiate(e.EDE),
    "des-ede3": e.EDE,
    "des-ede-cbc": e.CBC.instantiate(e.EDE),
    "des-ede": e.EDE,
    "des-cbc": e.CBC.instantiate(e.DES),
    "des-ecb": e.DES
  };
  s.des = s["des-cbc"], s.des3 = s["des-ede3-cbc"], browserifyDes = a, t(a, r);
  function a(o) {
    r.call(this);
    var u = o.mode.toLowerCase(), l = s[u], f;
    o.decrypt ? f = "decrypt" : f = "encrypt";
    var c = o.key;
    n.isBuffer(c) || (c = n.from(c)), (u === "des-ede" || u === "des-ede-cbc") && (c = n.concat([c, c.slice(0, 8)]));
    var h = o.iv;
    n.isBuffer(h) || (h = n.from(h)), this._des = l.create({
      key: c,
      iv: h,
      type: f
    });
  }
  return a.prototype._update = function(o) {
    return n.from(this._des.update(o));
  }, a.prototype._final = function() {
    return n.from(this._des.final());
  }, browserifyDes;
}
var browser$6 = {}, encrypter = {}, ecb = {}, hasRequiredEcb;
function requireEcb() {
  return hasRequiredEcb || (hasRequiredEcb = 1, ecb.encrypt = function(r, e) {
    return r._cipher.encryptBlock(e);
  }, ecb.decrypt = function(r, e) {
    return r._cipher.decryptBlock(e);
  }), ecb;
}
var cbc = {}, bufferXor, hasRequiredBufferXor;
function requireBufferXor() {
  return hasRequiredBufferXor || (hasRequiredBufferXor = 1, bufferXor = function(e, t) {
    for (var n = Math.min(e.length, t.length), s = new Buffer(n), a = 0; a < n; ++a)
      s[a] = e[a] ^ t[a];
    return s;
  }), bufferXor;
}
var hasRequiredCbc;
function requireCbc() {
  if (hasRequiredCbc) return cbc;
  hasRequiredCbc = 1;
  var r = requireBufferXor();
  return cbc.encrypt = function(e, t) {
    var n = r(t, e._prev);
    return e._prev = e._cipher.encryptBlock(n), e._prev;
  }, cbc.decrypt = function(e, t) {
    var n = e._prev;
    e._prev = t;
    var s = e._cipher.decryptBlock(t);
    return r(s, n);
  }, cbc;
}
var cfb = {}, hasRequiredCfb;
function requireCfb() {
  if (hasRequiredCfb) return cfb;
  hasRequiredCfb = 1;
  var r = requireSafeBuffer$1().Buffer, e = requireBufferXor();
  function t(n, s, a) {
    var o = s.length, u = e(s, n._cache);
    return n._cache = n._cache.slice(o), n._prev = r.concat([n._prev, a ? s : u]), u;
  }
  return cfb.encrypt = function(n, s, a) {
    for (var o = r.allocUnsafe(0), u; s.length; )
      if (n._cache.length === 0 && (n._cache = n._cipher.encryptBlock(n._prev), n._prev = r.allocUnsafe(0)), n._cache.length <= s.length)
        u = n._cache.length, o = r.concat([o, t(n, s.slice(0, u), a)]), s = s.slice(u);
      else {
        o = r.concat([o, t(n, s, a)]);
        break;
      }
    return o;
  }, cfb;
}
var cfb8 = {}, hasRequiredCfb8;
function requireCfb8() {
  if (hasRequiredCfb8) return cfb8;
  hasRequiredCfb8 = 1;
  var r = requireSafeBuffer$1().Buffer;
  function e(t, n, s) {
    var a = t._cipher.encryptBlock(t._prev), o = a[0] ^ n;
    return t._prev = r.concat([
      t._prev.slice(1),
      r.from([s ? n : o])
    ]), o;
  }
  return cfb8.encrypt = function(t, n, s) {
    for (var a = n.length, o = r.allocUnsafe(a), u = -1; ++u < a; )
      o[u] = e(t, n[u], s);
    return o;
  }, cfb8;
}
var cfb1 = {}, hasRequiredCfb1;
function requireCfb1() {
  if (hasRequiredCfb1) return cfb1;
  hasRequiredCfb1 = 1;
  var r = requireSafeBuffer$1().Buffer;
  function e(n, s, a) {
    for (var o, u = -1, l = 8, f = 0, c, h; ++u < l; )
      o = n._cipher.encryptBlock(n._prev), c = s & 1 << 7 - u ? 128 : 0, h = o[0] ^ c, f += (h & 128) >> u % 8, n._prev = t(n._prev, a ? c : h);
    return f;
  }
  function t(n, s) {
    var a = n.length, o = -1, u = r.allocUnsafe(n.length);
    for (n = r.concat([n, r.from([s])]); ++o < a; )
      u[o] = n[o] << 1 | n[o + 1] >> 7;
    return u;
  }
  return cfb1.encrypt = function(n, s, a) {
    for (var o = s.length, u = r.allocUnsafe(o), l = -1; ++l < o; )
      u[l] = e(n, s[l], a);
    return u;
  }, cfb1;
}
var ofb = {}, hasRequiredOfb;
function requireOfb() {
  if (hasRequiredOfb) return ofb;
  hasRequiredOfb = 1;
  var r = requireBufferXor();
  function e(t) {
    return t._prev = t._cipher.encryptBlock(t._prev), t._prev;
  }
  return ofb.encrypt = function(t, n) {
    for (; t._cache.length < n.length; )
      t._cache = Buffer.concat([t._cache, e(t)]);
    var s = t._cache.slice(0, n.length);
    return t._cache = t._cache.slice(n.length), r(n, s);
  }, ofb;
}
var ctr = {}, incr32_1, hasRequiredIncr32;
function requireIncr32() {
  if (hasRequiredIncr32) return incr32_1;
  hasRequiredIncr32 = 1;
  function r(e) {
    for (var t = e.length, n; t--; )
      if (n = e.readUInt8(t), n === 255)
        e.writeUInt8(0, t);
      else {
        n++, e.writeUInt8(n, t);
        break;
      }
  }
  return incr32_1 = r, incr32_1;
}
var hasRequiredCtr;
function requireCtr() {
  if (hasRequiredCtr) return ctr;
  hasRequiredCtr = 1;
  var r = requireBufferXor(), e = requireSafeBuffer$1().Buffer, t = requireIncr32();
  function n(a) {
    var o = a._cipher.encryptBlockRaw(a._prev);
    return t(a._prev), o;
  }
  var s = 16;
  return ctr.encrypt = function(a, o) {
    var u = Math.ceil(o.length / s), l = a._cache.length;
    a._cache = e.concat([
      a._cache,
      e.allocUnsafe(u * s)
    ]);
    for (var f = 0; f < u; f++) {
      var c = n(a), h = l + f * s;
      a._cache.writeUInt32BE(c[0], h + 0), a._cache.writeUInt32BE(c[1], h + 4), a._cache.writeUInt32BE(c[2], h + 8), a._cache.writeUInt32BE(c[3], h + 12);
    }
    var d = a._cache.slice(0, o.length);
    return a._cache = a._cache.slice(o.length), r(o, d);
  }, ctr;
}
const aes128 = { cipher: "AES", key: 128, iv: 16, mode: "CBC", type: "block" }, aes192 = { cipher: "AES", key: 192, iv: 16, mode: "CBC", type: "block" }, aes256 = { cipher: "AES", key: 256, iv: 16, mode: "CBC", type: "block" }, require$$2 = {
  "aes-128-ecb": { cipher: "AES", key: 128, iv: 0, mode: "ECB", type: "block" },
  "aes-192-ecb": { cipher: "AES", key: 192, iv: 0, mode: "ECB", type: "block" },
  "aes-256-ecb": { cipher: "AES", key: 256, iv: 0, mode: "ECB", type: "block" },
  "aes-128-cbc": { cipher: "AES", key: 128, iv: 16, mode: "CBC", type: "block" },
  "aes-192-cbc": { cipher: "AES", key: 192, iv: 16, mode: "CBC", type: "block" },
  "aes-256-cbc": { cipher: "AES", key: 256, iv: 16, mode: "CBC", type: "block" },
  aes128,
  aes192,
  aes256,
  "aes-128-cfb": { cipher: "AES", key: 128, iv: 16, mode: "CFB", type: "stream" },
  "aes-192-cfb": { cipher: "AES", key: 192, iv: 16, mode: "CFB", type: "stream" },
  "aes-256-cfb": { cipher: "AES", key: 256, iv: 16, mode: "CFB", type: "stream" },
  "aes-128-cfb8": { cipher: "AES", key: 128, iv: 16, mode: "CFB8", type: "stream" },
  "aes-192-cfb8": { cipher: "AES", key: 192, iv: 16, mode: "CFB8", type: "stream" },
  "aes-256-cfb8": { cipher: "AES", key: 256, iv: 16, mode: "CFB8", type: "stream" },
  "aes-128-cfb1": { cipher: "AES", key: 128, iv: 16, mode: "CFB1", type: "stream" },
  "aes-192-cfb1": { cipher: "AES", key: 192, iv: 16, mode: "CFB1", type: "stream" },
  "aes-256-cfb1": { cipher: "AES", key: 256, iv: 16, mode: "CFB1", type: "stream" },
  "aes-128-ofb": { cipher: "AES", key: 128, iv: 16, mode: "OFB", type: "stream" },
  "aes-192-ofb": { cipher: "AES", key: 192, iv: 16, mode: "OFB", type: "stream" },
  "aes-256-ofb": { cipher: "AES", key: 256, iv: 16, mode: "OFB", type: "stream" },
  "aes-128-ctr": { cipher: "AES", key: 128, iv: 16, mode: "CTR", type: "stream" },
  "aes-192-ctr": { cipher: "AES", key: 192, iv: 16, mode: "CTR", type: "stream" },
  "aes-256-ctr": { cipher: "AES", key: 256, iv: 16, mode: "CTR", type: "stream" },
  "aes-128-gcm": { cipher: "AES", key: 128, iv: 12, mode: "GCM", type: "auth" },
  "aes-192-gcm": { cipher: "AES", key: 192, iv: 12, mode: "GCM", type: "auth" },
  "aes-256-gcm": { cipher: "AES", key: 256, iv: 12, mode: "GCM", type: "auth" }
};
var modes_1, hasRequiredModes$1;
function requireModes$1() {
  if (hasRequiredModes$1) return modes_1;
  hasRequiredModes$1 = 1;
  var r = {
    ECB: requireEcb(),
    CBC: requireCbc(),
    CFB: requireCfb(),
    CFB8: requireCfb8(),
    CFB1: requireCfb1(),
    OFB: requireOfb(),
    CTR: requireCtr(),
    GCM: requireCtr()
  }, e = require$$2;
  for (var t in e)
    e[t].module = r[e[t].mode];
  return modes_1 = e, modes_1;
}
var aes = {}, hasRequiredAes;
function requireAes() {
  if (hasRequiredAes) return aes;
  hasRequiredAes = 1;
  var r = requireSafeBuffer$1().Buffer;
  function e(u) {
    r.isBuffer(u) || (u = r.from(u));
    for (var l = u.length / 4 | 0, f = new Array(l), c = 0; c < l; c++)
      f[c] = u.readUInt32BE(c * 4);
    return f;
  }
  function t(u) {
    for (var l = 0; l < u.length; u++)
      u[l] = 0;
  }
  function n(u, l, f, c, h) {
    for (var d = f[0], m = f[1], g = f[2], y = f[3], b = u[0] ^ l[0], v = u[1] ^ l[1], w = u[2] ^ l[2], I = u[3] ^ l[3], T, _, F, O, q = 4, V = 1; V < h; V++)
      T = d[b >>> 24] ^ m[v >>> 16 & 255] ^ g[w >>> 8 & 255] ^ y[I & 255] ^ l[q++], _ = d[v >>> 24] ^ m[w >>> 16 & 255] ^ g[I >>> 8 & 255] ^ y[b & 255] ^ l[q++], F = d[w >>> 24] ^ m[I >>> 16 & 255] ^ g[b >>> 8 & 255] ^ y[v & 255] ^ l[q++], O = d[I >>> 24] ^ m[b >>> 16 & 255] ^ g[v >>> 8 & 255] ^ y[w & 255] ^ l[q++], b = T, v = _, w = F, I = O;
    return T = (c[b >>> 24] << 24 | c[v >>> 16 & 255] << 16 | c[w >>> 8 & 255] << 8 | c[I & 255]) ^ l[q++], _ = (c[v >>> 24] << 24 | c[w >>> 16 & 255] << 16 | c[I >>> 8 & 255] << 8 | c[b & 255]) ^ l[q++], F = (c[w >>> 24] << 24 | c[I >>> 16 & 255] << 16 | c[b >>> 8 & 255] << 8 | c[v & 255]) ^ l[q++], O = (c[I >>> 24] << 24 | c[b >>> 16 & 255] << 16 | c[v >>> 8 & 255] << 8 | c[w & 255]) ^ l[q++], T = T >>> 0, _ = _ >>> 0, F = F >>> 0, O = O >>> 0, [T, _, F, O];
  }
  var s = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], a = function() {
    for (var u = new Array(256), l = 0; l < 256; l++)
      l < 128 ? u[l] = l << 1 : u[l] = l << 1 ^ 283;
    for (var f = [], c = [], h = [[], [], [], []], d = [[], [], [], []], m = 0, g = 0, y = 0; y < 256; ++y) {
      var b = g ^ g << 1 ^ g << 2 ^ g << 3 ^ g << 4;
      b = b >>> 8 ^ b & 255 ^ 99, f[m] = b, c[b] = m;
      var v = u[m], w = u[v], I = u[w], T = u[b] * 257 ^ b * 16843008;
      h[0][m] = T << 24 | T >>> 8, h[1][m] = T << 16 | T >>> 16, h[2][m] = T << 8 | T >>> 24, h[3][m] = T, T = I * 16843009 ^ w * 65537 ^ v * 257 ^ m * 16843008, d[0][b] = T << 24 | T >>> 8, d[1][b] = T << 16 | T >>> 16, d[2][b] = T << 8 | T >>> 24, d[3][b] = T, m === 0 ? m = g = 1 : (m = v ^ u[u[u[I ^ v]]], g ^= u[u[g]]);
    }
    return {
      SBOX: f,
      INV_SBOX: c,
      SUB_MIX: h,
      INV_SUB_MIX: d
    };
  }();
  function o(u) {
    this._key = e(u), this._reset();
  }
  return o.blockSize = 4 * 4, o.keySize = 256 / 8, o.prototype.blockSize = o.blockSize, o.prototype.keySize = o.keySize, o.prototype._reset = function() {
    for (var u = this._key, l = u.length, f = l + 6, c = (f + 1) * 4, h = [], d = 0; d < l; d++)
      h[d] = u[d];
    for (d = l; d < c; d++) {
      var m = h[d - 1];
      d % l === 0 ? (m = m << 8 | m >>> 24, m = a.SBOX[m >>> 24] << 24 | a.SBOX[m >>> 16 & 255] << 16 | a.SBOX[m >>> 8 & 255] << 8 | a.SBOX[m & 255], m ^= s[d / l | 0] << 24) : l > 6 && d % l === 4 && (m = a.SBOX[m >>> 24] << 24 | a.SBOX[m >>> 16 & 255] << 16 | a.SBOX[m >>> 8 & 255] << 8 | a.SBOX[m & 255]), h[d] = h[d - l] ^ m;
    }
    for (var g = [], y = 0; y < c; y++) {
      var b = c - y, v = h[b - (y % 4 ? 0 : 4)];
      y < 4 || b <= 4 ? g[y] = v : g[y] = a.INV_SUB_MIX[0][a.SBOX[v >>> 24]] ^ a.INV_SUB_MIX[1][a.SBOX[v >>> 16 & 255]] ^ a.INV_SUB_MIX[2][a.SBOX[v >>> 8 & 255]] ^ a.INV_SUB_MIX[3][a.SBOX[v & 255]];
    }
    this._nRounds = f, this._keySchedule = h, this._invKeySchedule = g;
  }, o.prototype.encryptBlockRaw = function(u) {
    return u = e(u), n(u, this._keySchedule, a.SUB_MIX, a.SBOX, this._nRounds);
  }, o.prototype.encryptBlock = function(u) {
    var l = this.encryptBlockRaw(u), f = r.allocUnsafe(16);
    return f.writeUInt32BE(l[0], 0), f.writeUInt32BE(l[1], 4), f.writeUInt32BE(l[2], 8), f.writeUInt32BE(l[3], 12), f;
  }, o.prototype.decryptBlock = function(u) {
    u = e(u);
    var l = u[1];
    u[1] = u[3], u[3] = l;
    var f = n(u, this._invKeySchedule, a.INV_SUB_MIX, a.INV_SBOX, this._nRounds), c = r.allocUnsafe(16);
    return c.writeUInt32BE(f[0], 0), c.writeUInt32BE(f[3], 4), c.writeUInt32BE(f[2], 8), c.writeUInt32BE(f[1], 12), c;
  }, o.prototype.scrub = function() {
    t(this._keySchedule), t(this._invKeySchedule), t(this._key);
  }, aes.AES = o, aes;
}
var ghash, hasRequiredGhash;
function requireGhash() {
  if (hasRequiredGhash) return ghash;
  hasRequiredGhash = 1;
  var r = requireSafeBuffer$1().Buffer, e = r.alloc(16, 0);
  function t(a) {
    return [
      a.readUInt32BE(0),
      a.readUInt32BE(4),
      a.readUInt32BE(8),
      a.readUInt32BE(12)
    ];
  }
  function n(a) {
    var o = r.allocUnsafe(16);
    return o.writeUInt32BE(a[0] >>> 0, 0), o.writeUInt32BE(a[1] >>> 0, 4), o.writeUInt32BE(a[2] >>> 0, 8), o.writeUInt32BE(a[3] >>> 0, 12), o;
  }
  function s(a) {
    this.h = a, this.state = r.alloc(16, 0), this.cache = r.allocUnsafe(0);
  }
  return s.prototype.ghash = function(a) {
    for (var o = -1; ++o < a.length; )
      this.state[o] ^= a[o];
    this._multiply();
  }, s.prototype._multiply = function() {
    for (var a = t(this.h), o = [0, 0, 0, 0], u, l, f, c = -1; ++c < 128; ) {
      for (l = (this.state[~~(c / 8)] & 1 << 7 - c % 8) !== 0, l && (o[0] ^= a[0], o[1] ^= a[1], o[2] ^= a[2], o[3] ^= a[3]), f = (a[3] & 1) !== 0, u = 3; u > 0; u--)
        a[u] = a[u] >>> 1 | (a[u - 1] & 1) << 31;
      a[0] = a[0] >>> 1, f && (a[0] = a[0] ^ 225 << 24);
    }
    this.state = n(o);
  }, s.prototype.update = function(a) {
    this.cache = r.concat([this.cache, a]);
    for (var o; this.cache.length >= 16; )
      o = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(o);
  }, s.prototype.final = function(a, o) {
    return this.cache.length && this.ghash(r.concat([this.cache, e], 16)), this.ghash(n([0, a, 0, o])), this.state;
  }, ghash = s, ghash;
}
var authCipher, hasRequiredAuthCipher;
function requireAuthCipher() {
  if (hasRequiredAuthCipher) return authCipher;
  hasRequiredAuthCipher = 1;
  var r = requireAes(), e = requireSafeBuffer$1().Buffer, t = requireCipherBase(), n = requireInherits_browser(), s = requireGhash(), a = requireBufferXor(), o = requireIncr32();
  function u(c, h) {
    var d = 0;
    c.length !== h.length && d++;
    for (var m = Math.min(c.length, h.length), g = 0; g < m; ++g)
      d += c[g] ^ h[g];
    return d;
  }
  function l(c, h, d) {
    if (h.length === 12)
      return c._finID = e.concat([h, e.from([0, 0, 0, 1])]), e.concat([h, e.from([0, 0, 0, 2])]);
    var m = new s(d), g = h.length, y = g % 16;
    m.update(h), y && (y = 16 - y, m.update(e.alloc(y, 0))), m.update(e.alloc(8, 0));
    var b = g * 8, v = e.alloc(8);
    v.writeUIntBE(b, 0, 8), m.update(v), c._finID = m.state;
    var w = e.from(c._finID);
    return o(w), w;
  }
  function f(c, h, d, m) {
    t.call(this);
    var g = e.alloc(4, 0);
    this._cipher = new r.AES(h);
    var y = this._cipher.encryptBlock(g);
    this._ghash = new s(y), d = l(this, d, y), this._prev = e.from(d), this._cache = e.allocUnsafe(0), this._secCache = e.allocUnsafe(0), this._decrypt = m, this._alen = 0, this._len = 0, this._mode = c, this._authTag = null, this._called = !1;
  }
  return n(f, t), f.prototype._update = function(c) {
    if (!this._called && this._alen) {
      var h = 16 - this._alen % 16;
      h < 16 && (h = e.alloc(h, 0), this._ghash.update(h));
    }
    this._called = !0;
    var d = this._mode.encrypt(this, c);
    return this._decrypt ? this._ghash.update(c) : this._ghash.update(d), this._len += c.length, d;
  }, f.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
    var c = a(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && u(c, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
    this._authTag = c, this._cipher.scrub();
  }, f.prototype.getAuthTag = function() {
    if (this._decrypt || !e.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
    return this._authTag;
  }, f.prototype.setAuthTag = function(h) {
    if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
    this._authTag = h;
  }, f.prototype.setAAD = function(h) {
    if (this._called) throw new Error("Attempting to set AAD in unsupported state");
    this._ghash.update(h), this._alen += h.length;
  }, authCipher = f, authCipher;
}
var streamCipher, hasRequiredStreamCipher;
function requireStreamCipher() {
  if (hasRequiredStreamCipher) return streamCipher;
  hasRequiredStreamCipher = 1;
  var r = requireAes(), e = requireSafeBuffer$1().Buffer, t = requireCipherBase(), n = requireInherits_browser();
  function s(a, o, u, l) {
    t.call(this), this._cipher = new r.AES(o), this._prev = e.from(u), this._cache = e.allocUnsafe(0), this._secCache = e.allocUnsafe(0), this._decrypt = l, this._mode = a;
  }
  return n(s, t), s.prototype._update = function(a) {
    return this._mode.encrypt(this, a, this._decrypt);
  }, s.prototype._final = function() {
    this._cipher.scrub();
  }, streamCipher = s, streamCipher;
}
var evp_bytestokey, hasRequiredEvp_bytestokey;
function requireEvp_bytestokey() {
  if (hasRequiredEvp_bytestokey) return evp_bytestokey;
  hasRequiredEvp_bytestokey = 1;
  var r = requireSafeBuffer$1().Buffer, e = requireMd5_js();
  function t(n, s, a, o) {
    if (r.isBuffer(n) || (n = r.from(n, "binary")), s && (r.isBuffer(s) || (s = r.from(s, "binary")), s.length !== 8))
      throw new RangeError("salt should be Buffer with 8 byte length");
    for (var u = a / 8, l = r.alloc(u), f = r.alloc(o || 0), c = r.alloc(0); u > 0 || o > 0; ) {
      var h = new e();
      h.update(c), h.update(n), s && h.update(s), c = h.digest();
      var d = 0;
      if (u > 0) {
        var m = l.length - u;
        d = Math.min(u, c.length), c.copy(l, m, 0, d), u -= d;
      }
      if (d < c.length && o > 0) {
        var g = f.length - o, y = Math.min(o, c.length - d);
        c.copy(f, g, d, d + y), o -= y;
      }
    }
    return c.fill(0), { key: l, iv: f };
  }
  return evp_bytestokey = t, evp_bytestokey;
}
var hasRequiredEncrypter;
function requireEncrypter() {
  if (hasRequiredEncrypter) return encrypter;
  hasRequiredEncrypter = 1;
  var r = requireModes$1(), e = requireAuthCipher(), t = requireSafeBuffer$1().Buffer, n = requireStreamCipher(), s = requireCipherBase(), a = requireAes(), o = requireEvp_bytestokey(), u = requireInherits_browser();
  function l(m, g, y) {
    s.call(this), this._cache = new c(), this._cipher = new a.AES(g), this._prev = t.from(y), this._mode = m, this._autopadding = !0;
  }
  u(l, s), l.prototype._update = function(m) {
    this._cache.add(m);
    for (var g, y, b = []; g = this._cache.get(); )
      y = this._mode.encrypt(this, g), b.push(y);
    return t.concat(b);
  };
  var f = t.alloc(16, 16);
  l.prototype._final = function() {
    var m = this._cache.flush();
    if (this._autopadding)
      return m = this._mode.encrypt(this, m), this._cipher.scrub(), m;
    if (!m.equals(f))
      throw this._cipher.scrub(), new Error("data not multiple of block length");
  }, l.prototype.setAutoPadding = function(m) {
    return this._autopadding = !!m, this;
  };
  function c() {
    this.cache = t.allocUnsafe(0);
  }
  c.prototype.add = function(m) {
    this.cache = t.concat([this.cache, m]);
  }, c.prototype.get = function() {
    if (this.cache.length > 15) {
      var m = this.cache.slice(0, 16);
      return this.cache = this.cache.slice(16), m;
    }
    return null;
  }, c.prototype.flush = function() {
    for (var m = 16 - this.cache.length, g = t.allocUnsafe(m), y = -1; ++y < m; )
      g.writeUInt8(m, y);
    return t.concat([this.cache, g]);
  };
  function h(m, g, y) {
    var b = r[m.toLowerCase()];
    if (!b) throw new TypeError("invalid suite type");
    if (typeof g == "string" && (g = t.from(g)), g.length !== b.key / 8) throw new TypeError("invalid key length " + g.length);
    if (typeof y == "string" && (y = t.from(y)), b.mode !== "GCM" && y.length !== b.iv) throw new TypeError("invalid iv length " + y.length);
    return b.type === "stream" ? new n(b.module, g, y) : b.type === "auth" ? new e(b.module, g, y) : new l(b.module, g, y);
  }
  function d(m, g) {
    var y = r[m.toLowerCase()];
    if (!y) throw new TypeError("invalid suite type");
    var b = o(g, !1, y.key, y.iv);
    return h(m, b.key, b.iv);
  }
  return encrypter.createCipheriv = h, encrypter.createCipher = d, encrypter;
}
var decrypter = {}, hasRequiredDecrypter;
function requireDecrypter() {
  if (hasRequiredDecrypter) return decrypter;
  hasRequiredDecrypter = 1;
  var r = requireAuthCipher(), e = requireSafeBuffer$1().Buffer, t = requireModes$1(), n = requireStreamCipher(), s = requireCipherBase(), a = requireAes(), o = requireEvp_bytestokey(), u = requireInherits_browser();
  function l(m, g, y) {
    s.call(this), this._cache = new f(), this._last = void 0, this._cipher = new a.AES(g), this._prev = e.from(y), this._mode = m, this._autopadding = !0;
  }
  u(l, s), l.prototype._update = function(m) {
    this._cache.add(m);
    for (var g, y, b = []; g = this._cache.get(this._autopadding); )
      y = this._mode.decrypt(this, g), b.push(y);
    return e.concat(b);
  }, l.prototype._final = function() {
    var m = this._cache.flush();
    if (this._autopadding)
      return c(this._mode.decrypt(this, m));
    if (m)
      throw new Error("data not multiple of block length");
  }, l.prototype.setAutoPadding = function(m) {
    return this._autopadding = !!m, this;
  };
  function f() {
    this.cache = e.allocUnsafe(0);
  }
  f.prototype.add = function(m) {
    this.cache = e.concat([this.cache, m]);
  }, f.prototype.get = function(m) {
    var g;
    if (m) {
      if (this.cache.length > 16)
        return g = this.cache.slice(0, 16), this.cache = this.cache.slice(16), g;
    } else if (this.cache.length >= 16)
      return g = this.cache.slice(0, 16), this.cache = this.cache.slice(16), g;
    return null;
  }, f.prototype.flush = function() {
    if (this.cache.length) return this.cache;
  };
  function c(m) {
    var g = m[15];
    if (g < 1 || g > 16)
      throw new Error("unable to decrypt data");
    for (var y = -1; ++y < g; )
      if (m[y + (16 - g)] !== g)
        throw new Error("unable to decrypt data");
    if (g !== 16)
      return m.slice(0, 16 - g);
  }
  function h(m, g, y) {
    var b = t[m.toLowerCase()];
    if (!b) throw new TypeError("invalid suite type");
    if (typeof y == "string" && (y = e.from(y)), b.mode !== "GCM" && y.length !== b.iv) throw new TypeError("invalid iv length " + y.length);
    if (typeof g == "string" && (g = e.from(g)), g.length !== b.key / 8) throw new TypeError("invalid key length " + g.length);
    return b.type === "stream" ? new n(b.module, g, y, !0) : b.type === "auth" ? new r(b.module, g, y, !0) : new l(b.module, g, y);
  }
  function d(m, g) {
    var y = t[m.toLowerCase()];
    if (!y) throw new TypeError("invalid suite type");
    var b = o(g, !1, y.key, y.iv);
    return h(m, b.key, b.iv);
  }
  return decrypter.createDecipher = d, decrypter.createDecipheriv = h, decrypter;
}
var hasRequiredBrowser$6;
function requireBrowser$6() {
  if (hasRequiredBrowser$6) return browser$6;
  hasRequiredBrowser$6 = 1;
  var r = requireEncrypter(), e = requireDecrypter(), t = require$$2;
  function n() {
    return Object.keys(t);
  }
  return browser$6.createCipher = browser$6.Cipher = r.createCipher, browser$6.createCipheriv = browser$6.Cipheriv = r.createCipheriv, browser$6.createDecipher = browser$6.Decipher = e.createDecipher, browser$6.createDecipheriv = browser$6.Decipheriv = e.createDecipheriv, browser$6.listCiphers = browser$6.getCiphers = n, browser$6;
}
var modes = {}, hasRequiredModes;
function requireModes() {
  return hasRequiredModes || (hasRequiredModes = 1, function(r) {
    r["des-ecb"] = {
      key: 8,
      iv: 0
    }, r["des-cbc"] = r.des = {
      key: 8,
      iv: 8
    }, r["des-ede3-cbc"] = r.des3 = {
      key: 24,
      iv: 8
    }, r["des-ede3"] = {
      key: 24,
      iv: 0
    }, r["des-ede-cbc"] = {
      key: 16,
      iv: 8
    }, r["des-ede"] = {
      key: 16,
      iv: 0
    };
  }(modes)), modes;
}
var hasRequiredBrowser$5;
function requireBrowser$5() {
  if (hasRequiredBrowser$5) return browser$7;
  hasRequiredBrowser$5 = 1;
  var r = requireBrowserifyDes(), e = requireBrowser$6(), t = requireModes$1(), n = requireModes(), s = requireEvp_bytestokey();
  function a(c, h) {
    c = c.toLowerCase();
    var d, m;
    if (t[c])
      d = t[c].key, m = t[c].iv;
    else if (n[c])
      d = n[c].key * 8, m = n[c].iv;
    else
      throw new TypeError("invalid suite type");
    var g = s(h, !1, d, m);
    return u(c, g.key, g.iv);
  }
  function o(c, h) {
    c = c.toLowerCase();
    var d, m;
    if (t[c])
      d = t[c].key, m = t[c].iv;
    else if (n[c])
      d = n[c].key * 8, m = n[c].iv;
    else
      throw new TypeError("invalid suite type");
    var g = s(h, !1, d, m);
    return l(c, g.key, g.iv);
  }
  function u(c, h, d) {
    if (c = c.toLowerCase(), t[c]) return e.createCipheriv(c, h, d);
    if (n[c]) return new r({ key: h, iv: d, mode: c });
    throw new TypeError("invalid suite type");
  }
  function l(c, h, d) {
    if (c = c.toLowerCase(), t[c]) return e.createDecipheriv(c, h, d);
    if (n[c]) return new r({ key: h, iv: d, mode: c, decrypt: !0 });
    throw new TypeError("invalid suite type");
  }
  function f() {
    return Object.keys(n).concat(e.getCiphers());
  }
  return browser$7.createCipher = browser$7.Cipher = a, browser$7.createCipheriv = browser$7.Cipheriv = u, browser$7.createDecipher = browser$7.Decipher = o, browser$7.createDecipheriv = browser$7.Decipheriv = l, browser$7.listCiphers = browser$7.getCiphers = f, browser$7;
}
var browser$5 = {}, bn$3 = { exports: {} }, bn$2 = bn$3.exports, hasRequiredBn$1;
function requireBn$1() {
  return hasRequiredBn$1 || (hasRequiredBn$1 = 1, function(r) {
    (function(e, t) {
      function n(R, $) {
        if (!R) throw new Error($ || "Assertion failed");
      }
      function s(R, $) {
        R.super_ = $;
        var S = function() {
        };
        S.prototype = $.prototype, R.prototype = new S(), R.prototype.constructor = R;
      }
      function a(R, $, S) {
        if (a.isBN(R))
          return R;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, R !== null && (($ === "le" || $ === "be") && (S = $, $ = 10), this._init(R || 0, $ || 10, S || "be"));
      }
      typeof e == "object" ? e.exports = a : t.BN = a, a.BN = a, a.wordSize = 26;
      var o;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? o = window.Buffer : o = requireDist().Buffer;
      } catch {
      }
      a.isBN = function($) {
        return $ instanceof a ? !0 : $ !== null && typeof $ == "object" && $.constructor.wordSize === a.wordSize && Array.isArray($.words);
      }, a.max = function($, S) {
        return $.cmp(S) > 0 ? $ : S;
      }, a.min = function($, S) {
        return $.cmp(S) < 0 ? $ : S;
      }, a.prototype._init = function($, S, x) {
        if (typeof $ == "number")
          return this._initNumber($, S, x);
        if (typeof $ == "object")
          return this._initArray($, S, x);
        S === "hex" && (S = 16), n(S === (S | 0) && S >= 2 && S <= 36), $ = $.toString().replace(/\s+/g, "");
        var C = 0;
        $[0] === "-" && (C++, this.negative = 1), C < $.length && (S === 16 ? this._parseHex($, C, x) : (this._parseBase($, S, C), x === "le" && this._initArray(this.toArray(), S, x)));
      }, a.prototype._initNumber = function($, S, x) {
        $ < 0 && (this.negative = 1, $ = -$), $ < 67108864 ? (this.words = [$ & 67108863], this.length = 1) : $ < 4503599627370496 ? (this.words = [
          $ & 67108863,
          $ / 67108864 & 67108863
        ], this.length = 2) : (n($ < 9007199254740992), this.words = [
          $ & 67108863,
          $ / 67108864 & 67108863,
          1
        ], this.length = 3), x === "le" && this._initArray(this.toArray(), S, x);
      }, a.prototype._initArray = function($, S, x) {
        if (n(typeof $.length == "number"), $.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil($.length / 3), this.words = new Array(this.length);
        for (var C = 0; C < this.length; C++)
          this.words[C] = 0;
        var A, N, k = 0;
        if (x === "be")
          for (C = $.length - 1, A = 0; C >= 0; C -= 3)
            N = $[C] | $[C - 1] << 8 | $[C - 2] << 16, this.words[A] |= N << k & 67108863, this.words[A + 1] = N >>> 26 - k & 67108863, k += 24, k >= 26 && (k -= 26, A++);
        else if (x === "le")
          for (C = 0, A = 0; C < $.length; C += 3)
            N = $[C] | $[C + 1] << 8 | $[C + 2] << 16, this.words[A] |= N << k & 67108863, this.words[A + 1] = N >>> 26 - k & 67108863, k += 24, k >= 26 && (k -= 26, A++);
        return this.strip();
      };
      function u(R, $) {
        var S = R.charCodeAt($);
        return S >= 65 && S <= 70 ? S - 55 : S >= 97 && S <= 102 ? S - 87 : S - 48 & 15;
      }
      function l(R, $, S) {
        var x = u(R, S);
        return S - 1 >= $ && (x |= u(R, S - 1) << 4), x;
      }
      a.prototype._parseHex = function($, S, x) {
        this.length = Math.ceil(($.length - S) / 6), this.words = new Array(this.length);
        for (var C = 0; C < this.length; C++)
          this.words[C] = 0;
        var A = 0, N = 0, k;
        if (x === "be")
          for (C = $.length - 1; C >= S; C -= 2)
            k = l($, S, C) << A, this.words[N] |= k & 67108863, A >= 18 ? (A -= 18, N += 1, this.words[N] |= k >>> 26) : A += 8;
        else {
          var D = $.length - S;
          for (C = D % 2 === 0 ? S + 1 : S; C < $.length; C += 2)
            k = l($, S, C) << A, this.words[N] |= k & 67108863, A >= 18 ? (A -= 18, N += 1, this.words[N] |= k >>> 26) : A += 8;
        }
        this.strip();
      };
      function f(R, $, S, x) {
        for (var C = 0, A = Math.min(R.length, S), N = $; N < A; N++) {
          var k = R.charCodeAt(N) - 48;
          C *= x, k >= 49 ? C += k - 49 + 10 : k >= 17 ? C += k - 17 + 10 : C += k;
        }
        return C;
      }
      a.prototype._parseBase = function($, S, x) {
        this.words = [0], this.length = 1;
        for (var C = 0, A = 1; A <= 67108863; A *= S)
          C++;
        C--, A = A / S | 0;
        for (var N = $.length - x, k = N % C, D = Math.min(N, N - k) + x, E = 0, M = x; M < D; M += C)
          E = f($, M, M + C, S), this.imuln(A), this.words[0] + E < 67108864 ? this.words[0] += E : this._iaddn(E);
        if (k !== 0) {
          var P = 1;
          for (E = f($, M, $.length, S), M = 0; M < k; M++)
            P *= S;
          this.imuln(P), this.words[0] + E < 67108864 ? this.words[0] += E : this._iaddn(E);
        }
        this.strip();
      }, a.prototype.copy = function($) {
        $.words = new Array(this.length);
        for (var S = 0; S < this.length; S++)
          $.words[S] = this.words[S];
        $.length = this.length, $.negative = this.negative, $.red = this.red;
      }, a.prototype.clone = function() {
        var $ = new a(null);
        return this.copy($), $;
      }, a.prototype._expand = function($) {
        for (; this.length < $; )
          this.words[this.length++] = 0;
        return this;
      }, a.prototype.strip = function() {
        for (; this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, a.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, a.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var c = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ], h = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ], d = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      a.prototype.toString = function($, S) {
        $ = $ || 10, S = S | 0 || 1;
        var x;
        if ($ === 16 || $ === "hex") {
          x = "";
          for (var C = 0, A = 0, N = 0; N < this.length; N++) {
            var k = this.words[N], D = ((k << C | A) & 16777215).toString(16);
            A = k >>> 24 - C & 16777215, C += 2, C >= 26 && (C -= 26, N--), A !== 0 || N !== this.length - 1 ? x = c[6 - D.length] + D + x : x = D + x;
          }
          for (A !== 0 && (x = A.toString(16) + x); x.length % S !== 0; )
            x = "0" + x;
          return this.negative !== 0 && (x = "-" + x), x;
        }
        if ($ === ($ | 0) && $ >= 2 && $ <= 36) {
          var E = h[$], M = d[$];
          x = "";
          var P = this.clone();
          for (P.negative = 0; !P.isZero(); ) {
            var z = P.modn(M).toString($);
            P = P.idivn(M), P.isZero() ? x = z + x : x = c[E - z.length] + z + x;
          }
          for (this.isZero() && (x = "0" + x); x.length % S !== 0; )
            x = "0" + x;
          return this.negative !== 0 && (x = "-" + x), x;
        }
        n(!1, "Base should be between 2 and 36");
      }, a.prototype.toNumber = function() {
        var $ = this.words[0];
        return this.length === 2 ? $ += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? $ += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && n(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -$ : $;
      }, a.prototype.toJSON = function() {
        return this.toString(16);
      }, a.prototype.toBuffer = function($, S) {
        return n(typeof o < "u"), this.toArrayLike(o, $, S);
      }, a.prototype.toArray = function($, S) {
        return this.toArrayLike(Array, $, S);
      }, a.prototype.toArrayLike = function($, S, x) {
        var C = this.byteLength(), A = x || Math.max(1, C);
        n(C <= A, "byte array longer than desired length"), n(A > 0, "Requested array length <= 0"), this.strip();
        var N = S === "le", k = new $(A), D, E, M = this.clone();
        if (N) {
          for (E = 0; !M.isZero(); E++)
            D = M.andln(255), M.iushrn(8), k[E] = D;
          for (; E < A; E++)
            k[E] = 0;
        } else {
          for (E = 0; E < A - C; E++)
            k[E] = 0;
          for (E = 0; !M.isZero(); E++)
            D = M.andln(255), M.iushrn(8), k[A - E - 1] = D;
        }
        return k;
      }, Math.clz32 ? a.prototype._countBits = function($) {
        return 32 - Math.clz32($);
      } : a.prototype._countBits = function($) {
        var S = $, x = 0;
        return S >= 4096 && (x += 13, S >>>= 13), S >= 64 && (x += 7, S >>>= 7), S >= 8 && (x += 4, S >>>= 4), S >= 2 && (x += 2, S >>>= 2), x + S;
      }, a.prototype._zeroBits = function($) {
        if ($ === 0) return 26;
        var S = $, x = 0;
        return S & 8191 || (x += 13, S >>>= 13), S & 127 || (x += 7, S >>>= 7), S & 15 || (x += 4, S >>>= 4), S & 3 || (x += 2, S >>>= 2), S & 1 || x++, x;
      }, a.prototype.bitLength = function() {
        var $ = this.words[this.length - 1], S = this._countBits($);
        return (this.length - 1) * 26 + S;
      };
      function m(R) {
        for (var $ = new Array(R.bitLength()), S = 0; S < $.length; S++) {
          var x = S / 26 | 0, C = S % 26;
          $[S] = (R.words[x] & 1 << C) >>> C;
        }
        return $;
      }
      a.prototype.zeroBits = function() {
        if (this.isZero()) return 0;
        for (var $ = 0, S = 0; S < this.length; S++) {
          var x = this._zeroBits(this.words[S]);
          if ($ += x, x !== 26) break;
        }
        return $;
      }, a.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, a.prototype.toTwos = function($) {
        return this.negative !== 0 ? this.abs().inotn($).iaddn(1) : this.clone();
      }, a.prototype.fromTwos = function($) {
        return this.testn($ - 1) ? this.notn($).iaddn(1).ineg() : this.clone();
      }, a.prototype.isNeg = function() {
        return this.negative !== 0;
      }, a.prototype.neg = function() {
        return this.clone().ineg();
      }, a.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, a.prototype.iuor = function($) {
        for (; this.length < $.length; )
          this.words[this.length++] = 0;
        for (var S = 0; S < $.length; S++)
          this.words[S] = this.words[S] | $.words[S];
        return this.strip();
      }, a.prototype.ior = function($) {
        return n((this.negative | $.negative) === 0), this.iuor($);
      }, a.prototype.or = function($) {
        return this.length > $.length ? this.clone().ior($) : $.clone().ior(this);
      }, a.prototype.uor = function($) {
        return this.length > $.length ? this.clone().iuor($) : $.clone().iuor(this);
      }, a.prototype.iuand = function($) {
        var S;
        this.length > $.length ? S = $ : S = this;
        for (var x = 0; x < S.length; x++)
          this.words[x] = this.words[x] & $.words[x];
        return this.length = S.length, this.strip();
      }, a.prototype.iand = function($) {
        return n((this.negative | $.negative) === 0), this.iuand($);
      }, a.prototype.and = function($) {
        return this.length > $.length ? this.clone().iand($) : $.clone().iand(this);
      }, a.prototype.uand = function($) {
        return this.length > $.length ? this.clone().iuand($) : $.clone().iuand(this);
      }, a.prototype.iuxor = function($) {
        var S, x;
        this.length > $.length ? (S = this, x = $) : (S = $, x = this);
        for (var C = 0; C < x.length; C++)
          this.words[C] = S.words[C] ^ x.words[C];
        if (this !== S)
          for (; C < S.length; C++)
            this.words[C] = S.words[C];
        return this.length = S.length, this.strip();
      }, a.prototype.ixor = function($) {
        return n((this.negative | $.negative) === 0), this.iuxor($);
      }, a.prototype.xor = function($) {
        return this.length > $.length ? this.clone().ixor($) : $.clone().ixor(this);
      }, a.prototype.uxor = function($) {
        return this.length > $.length ? this.clone().iuxor($) : $.clone().iuxor(this);
      }, a.prototype.inotn = function($) {
        n(typeof $ == "number" && $ >= 0);
        var S = Math.ceil($ / 26) | 0, x = $ % 26;
        this._expand(S), x > 0 && S--;
        for (var C = 0; C < S; C++)
          this.words[C] = ~this.words[C] & 67108863;
        return x > 0 && (this.words[C] = ~this.words[C] & 67108863 >> 26 - x), this.strip();
      }, a.prototype.notn = function($) {
        return this.clone().inotn($);
      }, a.prototype.setn = function($, S) {
        n(typeof $ == "number" && $ >= 0);
        var x = $ / 26 | 0, C = $ % 26;
        return this._expand(x + 1), S ? this.words[x] = this.words[x] | 1 << C : this.words[x] = this.words[x] & ~(1 << C), this.strip();
      }, a.prototype.iadd = function($) {
        var S;
        if (this.negative !== 0 && $.negative === 0)
          return this.negative = 0, S = this.isub($), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && $.negative !== 0)
          return $.negative = 0, S = this.isub($), $.negative = 1, S._normSign();
        var x, C;
        this.length > $.length ? (x = this, C = $) : (x = $, C = this);
        for (var A = 0, N = 0; N < C.length; N++)
          S = (x.words[N] | 0) + (C.words[N] | 0) + A, this.words[N] = S & 67108863, A = S >>> 26;
        for (; A !== 0 && N < x.length; N++)
          S = (x.words[N] | 0) + A, this.words[N] = S & 67108863, A = S >>> 26;
        if (this.length = x.length, A !== 0)
          this.words[this.length] = A, this.length++;
        else if (x !== this)
          for (; N < x.length; N++)
            this.words[N] = x.words[N];
        return this;
      }, a.prototype.add = function($) {
        var S;
        return $.negative !== 0 && this.negative === 0 ? ($.negative = 0, S = this.sub($), $.negative ^= 1, S) : $.negative === 0 && this.negative !== 0 ? (this.negative = 0, S = $.sub(this), this.negative = 1, S) : this.length > $.length ? this.clone().iadd($) : $.clone().iadd(this);
      }, a.prototype.isub = function($) {
        if ($.negative !== 0) {
          $.negative = 0;
          var S = this.iadd($);
          return $.negative = 1, S._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd($), this.negative = 1, this._normSign();
        var x = this.cmp($);
        if (x === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var C, A;
        x > 0 ? (C = this, A = $) : (C = $, A = this);
        for (var N = 0, k = 0; k < A.length; k++)
          S = (C.words[k] | 0) - (A.words[k] | 0) + N, N = S >> 26, this.words[k] = S & 67108863;
        for (; N !== 0 && k < C.length; k++)
          S = (C.words[k] | 0) + N, N = S >> 26, this.words[k] = S & 67108863;
        if (N === 0 && k < C.length && C !== this)
          for (; k < C.length; k++)
            this.words[k] = C.words[k];
        return this.length = Math.max(this.length, k), C !== this && (this.negative = 1), this.strip();
      }, a.prototype.sub = function($) {
        return this.clone().isub($);
      };
      function g(R, $, S) {
        S.negative = $.negative ^ R.negative;
        var x = R.length + $.length | 0;
        S.length = x, x = x - 1 | 0;
        var C = R.words[0] | 0, A = $.words[0] | 0, N = C * A, k = N & 67108863, D = N / 67108864 | 0;
        S.words[0] = k;
        for (var E = 1; E < x; E++) {
          for (var M = D >>> 26, P = D & 67108863, z = Math.min(E, $.length - 1), J = Math.max(0, E - R.length + 1); J <= z; J++) {
            var re = E - J | 0;
            C = R.words[re] | 0, A = $.words[J] | 0, N = C * A + P, M += N / 67108864 | 0, P = N & 67108863;
          }
          S.words[E] = P | 0, D = M | 0;
        }
        return D !== 0 ? S.words[E] = D | 0 : S.length--, S.strip();
      }
      var y = function($, S, x) {
        var C = $.words, A = S.words, N = x.words, k = 0, D, E, M, P = C[0] | 0, z = P & 8191, J = P >>> 13, re = C[1] | 0, Q = re & 8191, W = re >>> 13, j = C[2] | 0, te = j & 8191, se = j >>> 13, X = C[3] | 0, K = X & 8191, ae = X >>> 13, de = C[4] | 0, me = de & 8191, pe = de >>> 13, ge = C[5] | 0, ye = ge & 8191, ce = ge >>> 13, $e = C[6] | 0, be = $e & 8191, xe = $e >>> 13, we = C[7] | 0, ve = we & 8191, Ee = we >>> 13, De = C[8] | 0, Ce = De & 8191, _e = De >>> 13, ze = C[9] | 0, Y = ze & 8191, B = ze >>> 13, U = A[0] | 0, ee = U & 8191, ie = U >>> 13, ue = A[1] | 0, fe = ue & 8191, Ie = ue >>> 13, Re = A[2] | 0, Se = Re & 8191, Pe = Re >>> 13, Ae = A[3] | 0, Fe = Ae & 8191, Ve = Ae >>> 13, Ue = A[4] | 0, Be = Ue & 8191, qe = Ue >>> 13, Ge = A[5] | 0, Z = Ge & 8191, L = Ge >>> 13, G = A[6] | 0, ne = G & 8191, oe = G >>> 13, le = A[7] | 0, he = le & 8191, Ne = le >>> 13, Me = A[8] | 0, Te = Me & 8191, Oe = Me >>> 13, ke = A[9] | 0, Le = ke & 8191, je = ke >>> 13;
        x.negative = $.negative ^ S.negative, x.length = 19, D = Math.imul(z, ee), E = Math.imul(z, ie), E = E + Math.imul(J, ee) | 0, M = Math.imul(J, ie);
        var We = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, D = Math.imul(Q, ee), E = Math.imul(Q, ie), E = E + Math.imul(W, ee) | 0, M = Math.imul(W, ie), D = D + Math.imul(z, fe) | 0, E = E + Math.imul(z, Ie) | 0, E = E + Math.imul(J, fe) | 0, M = M + Math.imul(J, Ie) | 0;
        var He = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, D = Math.imul(te, ee), E = Math.imul(te, ie), E = E + Math.imul(se, ee) | 0, M = Math.imul(se, ie), D = D + Math.imul(Q, fe) | 0, E = E + Math.imul(Q, Ie) | 0, E = E + Math.imul(W, fe) | 0, M = M + Math.imul(W, Ie) | 0, D = D + Math.imul(z, Se) | 0, E = E + Math.imul(z, Pe) | 0, E = E + Math.imul(J, Se) | 0, M = M + Math.imul(J, Pe) | 0;
        var Ke = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, D = Math.imul(K, ee), E = Math.imul(K, ie), E = E + Math.imul(ae, ee) | 0, M = Math.imul(ae, ie), D = D + Math.imul(te, fe) | 0, E = E + Math.imul(te, Ie) | 0, E = E + Math.imul(se, fe) | 0, M = M + Math.imul(se, Ie) | 0, D = D + Math.imul(Q, Se) | 0, E = E + Math.imul(Q, Pe) | 0, E = E + Math.imul(W, Se) | 0, M = M + Math.imul(W, Pe) | 0, D = D + Math.imul(z, Fe) | 0, E = E + Math.imul(z, Ve) | 0, E = E + Math.imul(J, Fe) | 0, M = M + Math.imul(J, Ve) | 0;
        var Xe = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, D = Math.imul(me, ee), E = Math.imul(me, ie), E = E + Math.imul(pe, ee) | 0, M = Math.imul(pe, ie), D = D + Math.imul(K, fe) | 0, E = E + Math.imul(K, Ie) | 0, E = E + Math.imul(ae, fe) | 0, M = M + Math.imul(ae, Ie) | 0, D = D + Math.imul(te, Se) | 0, E = E + Math.imul(te, Pe) | 0, E = E + Math.imul(se, Se) | 0, M = M + Math.imul(se, Pe) | 0, D = D + Math.imul(Q, Fe) | 0, E = E + Math.imul(Q, Ve) | 0, E = E + Math.imul(W, Fe) | 0, M = M + Math.imul(W, Ve) | 0, D = D + Math.imul(z, Be) | 0, E = E + Math.imul(z, qe) | 0, E = E + Math.imul(J, Be) | 0, M = M + Math.imul(J, qe) | 0;
        var Ye = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, D = Math.imul(ye, ee), E = Math.imul(ye, ie), E = E + Math.imul(ce, ee) | 0, M = Math.imul(ce, ie), D = D + Math.imul(me, fe) | 0, E = E + Math.imul(me, Ie) | 0, E = E + Math.imul(pe, fe) | 0, M = M + Math.imul(pe, Ie) | 0, D = D + Math.imul(K, Se) | 0, E = E + Math.imul(K, Pe) | 0, E = E + Math.imul(ae, Se) | 0, M = M + Math.imul(ae, Pe) | 0, D = D + Math.imul(te, Fe) | 0, E = E + Math.imul(te, Ve) | 0, E = E + Math.imul(se, Fe) | 0, M = M + Math.imul(se, Ve) | 0, D = D + Math.imul(Q, Be) | 0, E = E + Math.imul(Q, qe) | 0, E = E + Math.imul(W, Be) | 0, M = M + Math.imul(W, qe) | 0, D = D + Math.imul(z, Z) | 0, E = E + Math.imul(z, L) | 0, E = E + Math.imul(J, Z) | 0, M = M + Math.imul(J, L) | 0;
        var Ze = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, D = Math.imul(be, ee), E = Math.imul(be, ie), E = E + Math.imul(xe, ee) | 0, M = Math.imul(xe, ie), D = D + Math.imul(ye, fe) | 0, E = E + Math.imul(ye, Ie) | 0, E = E + Math.imul(ce, fe) | 0, M = M + Math.imul(ce, Ie) | 0, D = D + Math.imul(me, Se) | 0, E = E + Math.imul(me, Pe) | 0, E = E + Math.imul(pe, Se) | 0, M = M + Math.imul(pe, Pe) | 0, D = D + Math.imul(K, Fe) | 0, E = E + Math.imul(K, Ve) | 0, E = E + Math.imul(ae, Fe) | 0, M = M + Math.imul(ae, Ve) | 0, D = D + Math.imul(te, Be) | 0, E = E + Math.imul(te, qe) | 0, E = E + Math.imul(se, Be) | 0, M = M + Math.imul(se, qe) | 0, D = D + Math.imul(Q, Z) | 0, E = E + Math.imul(Q, L) | 0, E = E + Math.imul(W, Z) | 0, M = M + Math.imul(W, L) | 0, D = D + Math.imul(z, ne) | 0, E = E + Math.imul(z, oe) | 0, E = E + Math.imul(J, ne) | 0, M = M + Math.imul(J, oe) | 0;
        var Je = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, D = Math.imul(ve, ee), E = Math.imul(ve, ie), E = E + Math.imul(Ee, ee) | 0, M = Math.imul(Ee, ie), D = D + Math.imul(be, fe) | 0, E = E + Math.imul(be, Ie) | 0, E = E + Math.imul(xe, fe) | 0, M = M + Math.imul(xe, Ie) | 0, D = D + Math.imul(ye, Se) | 0, E = E + Math.imul(ye, Pe) | 0, E = E + Math.imul(ce, Se) | 0, M = M + Math.imul(ce, Pe) | 0, D = D + Math.imul(me, Fe) | 0, E = E + Math.imul(me, Ve) | 0, E = E + Math.imul(pe, Fe) | 0, M = M + Math.imul(pe, Ve) | 0, D = D + Math.imul(K, Be) | 0, E = E + Math.imul(K, qe) | 0, E = E + Math.imul(ae, Be) | 0, M = M + Math.imul(ae, qe) | 0, D = D + Math.imul(te, Z) | 0, E = E + Math.imul(te, L) | 0, E = E + Math.imul(se, Z) | 0, M = M + Math.imul(se, L) | 0, D = D + Math.imul(Q, ne) | 0, E = E + Math.imul(Q, oe) | 0, E = E + Math.imul(W, ne) | 0, M = M + Math.imul(W, oe) | 0, D = D + Math.imul(z, he) | 0, E = E + Math.imul(z, Ne) | 0, E = E + Math.imul(J, he) | 0, M = M + Math.imul(J, Ne) | 0;
        var Qe = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, D = Math.imul(Ce, ee), E = Math.imul(Ce, ie), E = E + Math.imul(_e, ee) | 0, M = Math.imul(_e, ie), D = D + Math.imul(ve, fe) | 0, E = E + Math.imul(ve, Ie) | 0, E = E + Math.imul(Ee, fe) | 0, M = M + Math.imul(Ee, Ie) | 0, D = D + Math.imul(be, Se) | 0, E = E + Math.imul(be, Pe) | 0, E = E + Math.imul(xe, Se) | 0, M = M + Math.imul(xe, Pe) | 0, D = D + Math.imul(ye, Fe) | 0, E = E + Math.imul(ye, Ve) | 0, E = E + Math.imul(ce, Fe) | 0, M = M + Math.imul(ce, Ve) | 0, D = D + Math.imul(me, Be) | 0, E = E + Math.imul(me, qe) | 0, E = E + Math.imul(pe, Be) | 0, M = M + Math.imul(pe, qe) | 0, D = D + Math.imul(K, Z) | 0, E = E + Math.imul(K, L) | 0, E = E + Math.imul(ae, Z) | 0, M = M + Math.imul(ae, L) | 0, D = D + Math.imul(te, ne) | 0, E = E + Math.imul(te, oe) | 0, E = E + Math.imul(se, ne) | 0, M = M + Math.imul(se, oe) | 0, D = D + Math.imul(Q, he) | 0, E = E + Math.imul(Q, Ne) | 0, E = E + Math.imul(W, he) | 0, M = M + Math.imul(W, Ne) | 0, D = D + Math.imul(z, Te) | 0, E = E + Math.imul(z, Oe) | 0, E = E + Math.imul(J, Te) | 0, M = M + Math.imul(J, Oe) | 0;
        var et = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, D = Math.imul(Y, ee), E = Math.imul(Y, ie), E = E + Math.imul(B, ee) | 0, M = Math.imul(B, ie), D = D + Math.imul(Ce, fe) | 0, E = E + Math.imul(Ce, Ie) | 0, E = E + Math.imul(_e, fe) | 0, M = M + Math.imul(_e, Ie) | 0, D = D + Math.imul(ve, Se) | 0, E = E + Math.imul(ve, Pe) | 0, E = E + Math.imul(Ee, Se) | 0, M = M + Math.imul(Ee, Pe) | 0, D = D + Math.imul(be, Fe) | 0, E = E + Math.imul(be, Ve) | 0, E = E + Math.imul(xe, Fe) | 0, M = M + Math.imul(xe, Ve) | 0, D = D + Math.imul(ye, Be) | 0, E = E + Math.imul(ye, qe) | 0, E = E + Math.imul(ce, Be) | 0, M = M + Math.imul(ce, qe) | 0, D = D + Math.imul(me, Z) | 0, E = E + Math.imul(me, L) | 0, E = E + Math.imul(pe, Z) | 0, M = M + Math.imul(pe, L) | 0, D = D + Math.imul(K, ne) | 0, E = E + Math.imul(K, oe) | 0, E = E + Math.imul(ae, ne) | 0, M = M + Math.imul(ae, oe) | 0, D = D + Math.imul(te, he) | 0, E = E + Math.imul(te, Ne) | 0, E = E + Math.imul(se, he) | 0, M = M + Math.imul(se, Ne) | 0, D = D + Math.imul(Q, Te) | 0, E = E + Math.imul(Q, Oe) | 0, E = E + Math.imul(W, Te) | 0, M = M + Math.imul(W, Oe) | 0, D = D + Math.imul(z, Le) | 0, E = E + Math.imul(z, je) | 0, E = E + Math.imul(J, Le) | 0, M = M + Math.imul(J, je) | 0;
        var tt = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, D = Math.imul(Y, fe), E = Math.imul(Y, Ie), E = E + Math.imul(B, fe) | 0, M = Math.imul(B, Ie), D = D + Math.imul(Ce, Se) | 0, E = E + Math.imul(Ce, Pe) | 0, E = E + Math.imul(_e, Se) | 0, M = M + Math.imul(_e, Pe) | 0, D = D + Math.imul(ve, Fe) | 0, E = E + Math.imul(ve, Ve) | 0, E = E + Math.imul(Ee, Fe) | 0, M = M + Math.imul(Ee, Ve) | 0, D = D + Math.imul(be, Be) | 0, E = E + Math.imul(be, qe) | 0, E = E + Math.imul(xe, Be) | 0, M = M + Math.imul(xe, qe) | 0, D = D + Math.imul(ye, Z) | 0, E = E + Math.imul(ye, L) | 0, E = E + Math.imul(ce, Z) | 0, M = M + Math.imul(ce, L) | 0, D = D + Math.imul(me, ne) | 0, E = E + Math.imul(me, oe) | 0, E = E + Math.imul(pe, ne) | 0, M = M + Math.imul(pe, oe) | 0, D = D + Math.imul(K, he) | 0, E = E + Math.imul(K, Ne) | 0, E = E + Math.imul(ae, he) | 0, M = M + Math.imul(ae, Ne) | 0, D = D + Math.imul(te, Te) | 0, E = E + Math.imul(te, Oe) | 0, E = E + Math.imul(se, Te) | 0, M = M + Math.imul(se, Oe) | 0, D = D + Math.imul(Q, Le) | 0, E = E + Math.imul(Q, je) | 0, E = E + Math.imul(W, Le) | 0, M = M + Math.imul(W, je) | 0;
        var rt = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, D = Math.imul(Y, Se), E = Math.imul(Y, Pe), E = E + Math.imul(B, Se) | 0, M = Math.imul(B, Pe), D = D + Math.imul(Ce, Fe) | 0, E = E + Math.imul(Ce, Ve) | 0, E = E + Math.imul(_e, Fe) | 0, M = M + Math.imul(_e, Ve) | 0, D = D + Math.imul(ve, Be) | 0, E = E + Math.imul(ve, qe) | 0, E = E + Math.imul(Ee, Be) | 0, M = M + Math.imul(Ee, qe) | 0, D = D + Math.imul(be, Z) | 0, E = E + Math.imul(be, L) | 0, E = E + Math.imul(xe, Z) | 0, M = M + Math.imul(xe, L) | 0, D = D + Math.imul(ye, ne) | 0, E = E + Math.imul(ye, oe) | 0, E = E + Math.imul(ce, ne) | 0, M = M + Math.imul(ce, oe) | 0, D = D + Math.imul(me, he) | 0, E = E + Math.imul(me, Ne) | 0, E = E + Math.imul(pe, he) | 0, M = M + Math.imul(pe, Ne) | 0, D = D + Math.imul(K, Te) | 0, E = E + Math.imul(K, Oe) | 0, E = E + Math.imul(ae, Te) | 0, M = M + Math.imul(ae, Oe) | 0, D = D + Math.imul(te, Le) | 0, E = E + Math.imul(te, je) | 0, E = E + Math.imul(se, Le) | 0, M = M + Math.imul(se, je) | 0;
        var nt = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (nt >>> 26) | 0, nt &= 67108863, D = Math.imul(Y, Fe), E = Math.imul(Y, Ve), E = E + Math.imul(B, Fe) | 0, M = Math.imul(B, Ve), D = D + Math.imul(Ce, Be) | 0, E = E + Math.imul(Ce, qe) | 0, E = E + Math.imul(_e, Be) | 0, M = M + Math.imul(_e, qe) | 0, D = D + Math.imul(ve, Z) | 0, E = E + Math.imul(ve, L) | 0, E = E + Math.imul(Ee, Z) | 0, M = M + Math.imul(Ee, L) | 0, D = D + Math.imul(be, ne) | 0, E = E + Math.imul(be, oe) | 0, E = E + Math.imul(xe, ne) | 0, M = M + Math.imul(xe, oe) | 0, D = D + Math.imul(ye, he) | 0, E = E + Math.imul(ye, Ne) | 0, E = E + Math.imul(ce, he) | 0, M = M + Math.imul(ce, Ne) | 0, D = D + Math.imul(me, Te) | 0, E = E + Math.imul(me, Oe) | 0, E = E + Math.imul(pe, Te) | 0, M = M + Math.imul(pe, Oe) | 0, D = D + Math.imul(K, Le) | 0, E = E + Math.imul(K, je) | 0, E = E + Math.imul(ae, Le) | 0, M = M + Math.imul(ae, je) | 0;
        var st = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (st >>> 26) | 0, st &= 67108863, D = Math.imul(Y, Be), E = Math.imul(Y, qe), E = E + Math.imul(B, Be) | 0, M = Math.imul(B, qe), D = D + Math.imul(Ce, Z) | 0, E = E + Math.imul(Ce, L) | 0, E = E + Math.imul(_e, Z) | 0, M = M + Math.imul(_e, L) | 0, D = D + Math.imul(ve, ne) | 0, E = E + Math.imul(ve, oe) | 0, E = E + Math.imul(Ee, ne) | 0, M = M + Math.imul(Ee, oe) | 0, D = D + Math.imul(be, he) | 0, E = E + Math.imul(be, Ne) | 0, E = E + Math.imul(xe, he) | 0, M = M + Math.imul(xe, Ne) | 0, D = D + Math.imul(ye, Te) | 0, E = E + Math.imul(ye, Oe) | 0, E = E + Math.imul(ce, Te) | 0, M = M + Math.imul(ce, Oe) | 0, D = D + Math.imul(me, Le) | 0, E = E + Math.imul(me, je) | 0, E = E + Math.imul(pe, Le) | 0, M = M + Math.imul(pe, je) | 0;
        var at = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (at >>> 26) | 0, at &= 67108863, D = Math.imul(Y, Z), E = Math.imul(Y, L), E = E + Math.imul(B, Z) | 0, M = Math.imul(B, L), D = D + Math.imul(Ce, ne) | 0, E = E + Math.imul(Ce, oe) | 0, E = E + Math.imul(_e, ne) | 0, M = M + Math.imul(_e, oe) | 0, D = D + Math.imul(ve, he) | 0, E = E + Math.imul(ve, Ne) | 0, E = E + Math.imul(Ee, he) | 0, M = M + Math.imul(Ee, Ne) | 0, D = D + Math.imul(be, Te) | 0, E = E + Math.imul(be, Oe) | 0, E = E + Math.imul(xe, Te) | 0, M = M + Math.imul(xe, Oe) | 0, D = D + Math.imul(ye, Le) | 0, E = E + Math.imul(ye, je) | 0, E = E + Math.imul(ce, Le) | 0, M = M + Math.imul(ce, je) | 0;
        var it = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (it >>> 26) | 0, it &= 67108863, D = Math.imul(Y, ne), E = Math.imul(Y, oe), E = E + Math.imul(B, ne) | 0, M = Math.imul(B, oe), D = D + Math.imul(Ce, he) | 0, E = E + Math.imul(Ce, Ne) | 0, E = E + Math.imul(_e, he) | 0, M = M + Math.imul(_e, Ne) | 0, D = D + Math.imul(ve, Te) | 0, E = E + Math.imul(ve, Oe) | 0, E = E + Math.imul(Ee, Te) | 0, M = M + Math.imul(Ee, Oe) | 0, D = D + Math.imul(be, Le) | 0, E = E + Math.imul(be, je) | 0, E = E + Math.imul(xe, Le) | 0, M = M + Math.imul(xe, je) | 0;
        var ot = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (ot >>> 26) | 0, ot &= 67108863, D = Math.imul(Y, he), E = Math.imul(Y, Ne), E = E + Math.imul(B, he) | 0, M = Math.imul(B, Ne), D = D + Math.imul(Ce, Te) | 0, E = E + Math.imul(Ce, Oe) | 0, E = E + Math.imul(_e, Te) | 0, M = M + Math.imul(_e, Oe) | 0, D = D + Math.imul(ve, Le) | 0, E = E + Math.imul(ve, je) | 0, E = E + Math.imul(Ee, Le) | 0, M = M + Math.imul(Ee, je) | 0;
        var ut = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (ut >>> 26) | 0, ut &= 67108863, D = Math.imul(Y, Te), E = Math.imul(Y, Oe), E = E + Math.imul(B, Te) | 0, M = Math.imul(B, Oe), D = D + Math.imul(Ce, Le) | 0, E = E + Math.imul(Ce, je) | 0, E = E + Math.imul(_e, Le) | 0, M = M + Math.imul(_e, je) | 0;
        var lt = (k + D | 0) + ((E & 8191) << 13) | 0;
        k = (M + (E >>> 13) | 0) + (lt >>> 26) | 0, lt &= 67108863, D = Math.imul(Y, Le), E = Math.imul(Y, je), E = E + Math.imul(B, Le) | 0, M = Math.imul(B, je);
        var ct = (k + D | 0) + ((E & 8191) << 13) | 0;
        return k = (M + (E >>> 13) | 0) + (ct >>> 26) | 0, ct &= 67108863, N[0] = We, N[1] = He, N[2] = Ke, N[3] = Xe, N[4] = Ye, N[5] = Ze, N[6] = Je, N[7] = Qe, N[8] = et, N[9] = tt, N[10] = rt, N[11] = nt, N[12] = st, N[13] = at, N[14] = it, N[15] = ot, N[16] = ut, N[17] = lt, N[18] = ct, k !== 0 && (N[19] = k, x.length++), x;
      };
      Math.imul || (y = g);
      function b(R, $, S) {
        S.negative = $.negative ^ R.negative, S.length = R.length + $.length;
        for (var x = 0, C = 0, A = 0; A < S.length - 1; A++) {
          var N = C;
          C = 0;
          for (var k = x & 67108863, D = Math.min(A, $.length - 1), E = Math.max(0, A - R.length + 1); E <= D; E++) {
            var M = A - E, P = R.words[M] | 0, z = $.words[E] | 0, J = P * z, re = J & 67108863;
            N = N + (J / 67108864 | 0) | 0, re = re + k | 0, k = re & 67108863, N = N + (re >>> 26) | 0, C += N >>> 26, N &= 67108863;
          }
          S.words[A] = k, x = N, N = C;
        }
        return x !== 0 ? S.words[A] = x : S.length--, S.strip();
      }
      function v(R, $, S) {
        var x = new w();
        return x.mulp(R, $, S);
      }
      a.prototype.mulTo = function($, S) {
        var x, C = this.length + $.length;
        return this.length === 10 && $.length === 10 ? x = y(this, $, S) : C < 63 ? x = g(this, $, S) : C < 1024 ? x = b(this, $, S) : x = v(this, $, S), x;
      };
      function w(R, $) {
        this.x = R, this.y = $;
      }
      w.prototype.makeRBT = function($) {
        for (var S = new Array($), x = a.prototype._countBits($) - 1, C = 0; C < $; C++)
          S[C] = this.revBin(C, x, $);
        return S;
      }, w.prototype.revBin = function($, S, x) {
        if ($ === 0 || $ === x - 1) return $;
        for (var C = 0, A = 0; A < S; A++)
          C |= ($ & 1) << S - A - 1, $ >>= 1;
        return C;
      }, w.prototype.permute = function($, S, x, C, A, N) {
        for (var k = 0; k < N; k++)
          C[k] = S[$[k]], A[k] = x[$[k]];
      }, w.prototype.transform = function($, S, x, C, A, N) {
        this.permute(N, $, S, x, C, A);
        for (var k = 1; k < A; k <<= 1)
          for (var D = k << 1, E = Math.cos(2 * Math.PI / D), M = Math.sin(2 * Math.PI / D), P = 0; P < A; P += D)
            for (var z = E, J = M, re = 0; re < k; re++) {
              var Q = x[P + re], W = C[P + re], j = x[P + re + k], te = C[P + re + k], se = z * j - J * te;
              te = z * te + J * j, j = se, x[P + re] = Q + j, C[P + re] = W + te, x[P + re + k] = Q - j, C[P + re + k] = W - te, re !== D && (se = E * z - M * J, J = E * J + M * z, z = se);
            }
      }, w.prototype.guessLen13b = function($, S) {
        var x = Math.max(S, $) | 1, C = x & 1, A = 0;
        for (x = x / 2 | 0; x; x = x >>> 1)
          A++;
        return 1 << A + 1 + C;
      }, w.prototype.conjugate = function($, S, x) {
        if (!(x <= 1))
          for (var C = 0; C < x / 2; C++) {
            var A = $[C];
            $[C] = $[x - C - 1], $[x - C - 1] = A, A = S[C], S[C] = -S[x - C - 1], S[x - C - 1] = -A;
          }
      }, w.prototype.normalize13b = function($, S) {
        for (var x = 0, C = 0; C < S / 2; C++) {
          var A = Math.round($[2 * C + 1] / S) * 8192 + Math.round($[2 * C] / S) + x;
          $[C] = A & 67108863, A < 67108864 ? x = 0 : x = A / 67108864 | 0;
        }
        return $;
      }, w.prototype.convert13b = function($, S, x, C) {
        for (var A = 0, N = 0; N < S; N++)
          A = A + ($[N] | 0), x[2 * N] = A & 8191, A = A >>> 13, x[2 * N + 1] = A & 8191, A = A >>> 13;
        for (N = 2 * S; N < C; ++N)
          x[N] = 0;
        n(A === 0), n((A & -8192) === 0);
      }, w.prototype.stub = function($) {
        for (var S = new Array($), x = 0; x < $; x++)
          S[x] = 0;
        return S;
      }, w.prototype.mulp = function($, S, x) {
        var C = 2 * this.guessLen13b($.length, S.length), A = this.makeRBT(C), N = this.stub(C), k = new Array(C), D = new Array(C), E = new Array(C), M = new Array(C), P = new Array(C), z = new Array(C), J = x.words;
        J.length = C, this.convert13b($.words, $.length, k, C), this.convert13b(S.words, S.length, M, C), this.transform(k, N, D, E, C, A), this.transform(M, N, P, z, C, A);
        for (var re = 0; re < C; re++) {
          var Q = D[re] * P[re] - E[re] * z[re];
          E[re] = D[re] * z[re] + E[re] * P[re], D[re] = Q;
        }
        return this.conjugate(D, E, C), this.transform(D, E, J, N, C, A), this.conjugate(J, N, C), this.normalize13b(J, C), x.negative = $.negative ^ S.negative, x.length = $.length + S.length, x.strip();
      }, a.prototype.mul = function($) {
        var S = new a(null);
        return S.words = new Array(this.length + $.length), this.mulTo($, S);
      }, a.prototype.mulf = function($) {
        var S = new a(null);
        return S.words = new Array(this.length + $.length), v(this, $, S);
      }, a.prototype.imul = function($) {
        return this.clone().mulTo($, this);
      }, a.prototype.imuln = function($) {
        n(typeof $ == "number"), n($ < 67108864);
        for (var S = 0, x = 0; x < this.length; x++) {
          var C = (this.words[x] | 0) * $, A = (C & 67108863) + (S & 67108863);
          S >>= 26, S += C / 67108864 | 0, S += A >>> 26, this.words[x] = A & 67108863;
        }
        return S !== 0 && (this.words[x] = S, this.length++), this;
      }, a.prototype.muln = function($) {
        return this.clone().imuln($);
      }, a.prototype.sqr = function() {
        return this.mul(this);
      }, a.prototype.isqr = function() {
        return this.imul(this.clone());
      }, a.prototype.pow = function($) {
        var S = m($);
        if (S.length === 0) return new a(1);
        for (var x = this, C = 0; C < S.length && S[C] === 0; C++, x = x.sqr())
          ;
        if (++C < S.length)
          for (var A = x.sqr(); C < S.length; C++, A = A.sqr())
            S[C] !== 0 && (x = x.mul(A));
        return x;
      }, a.prototype.iushln = function($) {
        n(typeof $ == "number" && $ >= 0);
        var S = $ % 26, x = ($ - S) / 26, C = 67108863 >>> 26 - S << 26 - S, A;
        if (S !== 0) {
          var N = 0;
          for (A = 0; A < this.length; A++) {
            var k = this.words[A] & C, D = (this.words[A] | 0) - k << S;
            this.words[A] = D | N, N = k >>> 26 - S;
          }
          N && (this.words[A] = N, this.length++);
        }
        if (x !== 0) {
          for (A = this.length - 1; A >= 0; A--)
            this.words[A + x] = this.words[A];
          for (A = 0; A < x; A++)
            this.words[A] = 0;
          this.length += x;
        }
        return this.strip();
      }, a.prototype.ishln = function($) {
        return n(this.negative === 0), this.iushln($);
      }, a.prototype.iushrn = function($, S, x) {
        n(typeof $ == "number" && $ >= 0);
        var C;
        S ? C = (S - S % 26) / 26 : C = 0;
        var A = $ % 26, N = Math.min(($ - A) / 26, this.length), k = 67108863 ^ 67108863 >>> A << A, D = x;
        if (C -= N, C = Math.max(0, C), D) {
          for (var E = 0; E < N; E++)
            D.words[E] = this.words[E];
          D.length = N;
        }
        if (N !== 0) if (this.length > N)
          for (this.length -= N, E = 0; E < this.length; E++)
            this.words[E] = this.words[E + N];
        else
          this.words[0] = 0, this.length = 1;
        var M = 0;
        for (E = this.length - 1; E >= 0 && (M !== 0 || E >= C); E--) {
          var P = this.words[E] | 0;
          this.words[E] = M << 26 - A | P >>> A, M = P & k;
        }
        return D && M !== 0 && (D.words[D.length++] = M), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, a.prototype.ishrn = function($, S, x) {
        return n(this.negative === 0), this.iushrn($, S, x);
      }, a.prototype.shln = function($) {
        return this.clone().ishln($);
      }, a.prototype.ushln = function($) {
        return this.clone().iushln($);
      }, a.prototype.shrn = function($) {
        return this.clone().ishrn($);
      }, a.prototype.ushrn = function($) {
        return this.clone().iushrn($);
      }, a.prototype.testn = function($) {
        n(typeof $ == "number" && $ >= 0);
        var S = $ % 26, x = ($ - S) / 26, C = 1 << S;
        if (this.length <= x) return !1;
        var A = this.words[x];
        return !!(A & C);
      }, a.prototype.imaskn = function($) {
        n(typeof $ == "number" && $ >= 0);
        var S = $ % 26, x = ($ - S) / 26;
        if (n(this.negative === 0, "imaskn works only with positive numbers"), this.length <= x)
          return this;
        if (S !== 0 && x++, this.length = Math.min(x, this.length), S !== 0) {
          var C = 67108863 ^ 67108863 >>> S << S;
          this.words[this.length - 1] &= C;
        }
        return this.strip();
      }, a.prototype.maskn = function($) {
        return this.clone().imaskn($);
      }, a.prototype.iaddn = function($) {
        return n(typeof $ == "number"), n($ < 67108864), $ < 0 ? this.isubn(-$) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < $ ? (this.words[0] = $ - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn($), this.negative = 1, this) : this._iaddn($);
      }, a.prototype._iaddn = function($) {
        this.words[0] += $;
        for (var S = 0; S < this.length && this.words[S] >= 67108864; S++)
          this.words[S] -= 67108864, S === this.length - 1 ? this.words[S + 1] = 1 : this.words[S + 1]++;
        return this.length = Math.max(this.length, S + 1), this;
      }, a.prototype.isubn = function($) {
        if (n(typeof $ == "number"), n($ < 67108864), $ < 0) return this.iaddn(-$);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn($), this.negative = 1, this;
        if (this.words[0] -= $, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var S = 0; S < this.length && this.words[S] < 0; S++)
            this.words[S] += 67108864, this.words[S + 1] -= 1;
        return this.strip();
      }, a.prototype.addn = function($) {
        return this.clone().iaddn($);
      }, a.prototype.subn = function($) {
        return this.clone().isubn($);
      }, a.prototype.iabs = function() {
        return this.negative = 0, this;
      }, a.prototype.abs = function() {
        return this.clone().iabs();
      }, a.prototype._ishlnsubmul = function($, S, x) {
        var C = $.length + x, A;
        this._expand(C);
        var N, k = 0;
        for (A = 0; A < $.length; A++) {
          N = (this.words[A + x] | 0) + k;
          var D = ($.words[A] | 0) * S;
          N -= D & 67108863, k = (N >> 26) - (D / 67108864 | 0), this.words[A + x] = N & 67108863;
        }
        for (; A < this.length - x; A++)
          N = (this.words[A + x] | 0) + k, k = N >> 26, this.words[A + x] = N & 67108863;
        if (k === 0) return this.strip();
        for (n(k === -1), k = 0, A = 0; A < this.length; A++)
          N = -(this.words[A] | 0) + k, k = N >> 26, this.words[A] = N & 67108863;
        return this.negative = 1, this.strip();
      }, a.prototype._wordDiv = function($, S) {
        var x = this.length - $.length, C = this.clone(), A = $, N = A.words[A.length - 1] | 0, k = this._countBits(N);
        x = 26 - k, x !== 0 && (A = A.ushln(x), C.iushln(x), N = A.words[A.length - 1] | 0);
        var D = C.length - A.length, E;
        if (S !== "mod") {
          E = new a(null), E.length = D + 1, E.words = new Array(E.length);
          for (var M = 0; M < E.length; M++)
            E.words[M] = 0;
        }
        var P = C.clone()._ishlnsubmul(A, 1, D);
        P.negative === 0 && (C = P, E && (E.words[D] = 1));
        for (var z = D - 1; z >= 0; z--) {
          var J = (C.words[A.length + z] | 0) * 67108864 + (C.words[A.length + z - 1] | 0);
          for (J = Math.min(J / N | 0, 67108863), C._ishlnsubmul(A, J, z); C.negative !== 0; )
            J--, C.negative = 0, C._ishlnsubmul(A, 1, z), C.isZero() || (C.negative ^= 1);
          E && (E.words[z] = J);
        }
        return E && E.strip(), C.strip(), S !== "div" && x !== 0 && C.iushrn(x), {
          div: E || null,
          mod: C
        };
      }, a.prototype.divmod = function($, S, x) {
        if (n(!$.isZero()), this.isZero())
          return {
            div: new a(0),
            mod: new a(0)
          };
        var C, A, N;
        return this.negative !== 0 && $.negative === 0 ? (N = this.neg().divmod($, S), S !== "mod" && (C = N.div.neg()), S !== "div" && (A = N.mod.neg(), x && A.negative !== 0 && A.iadd($)), {
          div: C,
          mod: A
        }) : this.negative === 0 && $.negative !== 0 ? (N = this.divmod($.neg(), S), S !== "mod" && (C = N.div.neg()), {
          div: C,
          mod: N.mod
        }) : this.negative & $.negative ? (N = this.neg().divmod($.neg(), S), S !== "div" && (A = N.mod.neg(), x && A.negative !== 0 && A.isub($)), {
          div: N.div,
          mod: A
        }) : $.length > this.length || this.cmp($) < 0 ? {
          div: new a(0),
          mod: this
        } : $.length === 1 ? S === "div" ? {
          div: this.divn($.words[0]),
          mod: null
        } : S === "mod" ? {
          div: null,
          mod: new a(this.modn($.words[0]))
        } : {
          div: this.divn($.words[0]),
          mod: new a(this.modn($.words[0]))
        } : this._wordDiv($, S);
      }, a.prototype.div = function($) {
        return this.divmod($, "div", !1).div;
      }, a.prototype.mod = function($) {
        return this.divmod($, "mod", !1).mod;
      }, a.prototype.umod = function($) {
        return this.divmod($, "mod", !0).mod;
      }, a.prototype.divRound = function($) {
        var S = this.divmod($);
        if (S.mod.isZero()) return S.div;
        var x = S.div.negative !== 0 ? S.mod.isub($) : S.mod, C = $.ushrn(1), A = $.andln(1), N = x.cmp(C);
        return N < 0 || A === 1 && N === 0 ? S.div : S.div.negative !== 0 ? S.div.isubn(1) : S.div.iaddn(1);
      }, a.prototype.modn = function($) {
        n($ <= 67108863);
        for (var S = (1 << 26) % $, x = 0, C = this.length - 1; C >= 0; C--)
          x = (S * x + (this.words[C] | 0)) % $;
        return x;
      }, a.prototype.idivn = function($) {
        n($ <= 67108863);
        for (var S = 0, x = this.length - 1; x >= 0; x--) {
          var C = (this.words[x] | 0) + S * 67108864;
          this.words[x] = C / $ | 0, S = C % $;
        }
        return this.strip();
      }, a.prototype.divn = function($) {
        return this.clone().idivn($);
      }, a.prototype.egcd = function($) {
        n($.negative === 0), n(!$.isZero());
        var S = this, x = $.clone();
        S.negative !== 0 ? S = S.umod($) : S = S.clone();
        for (var C = new a(1), A = new a(0), N = new a(0), k = new a(1), D = 0; S.isEven() && x.isEven(); )
          S.iushrn(1), x.iushrn(1), ++D;
        for (var E = x.clone(), M = S.clone(); !S.isZero(); ) {
          for (var P = 0, z = 1; !(S.words[0] & z) && P < 26; ++P, z <<= 1) ;
          if (P > 0)
            for (S.iushrn(P); P-- > 0; )
              (C.isOdd() || A.isOdd()) && (C.iadd(E), A.isub(M)), C.iushrn(1), A.iushrn(1);
          for (var J = 0, re = 1; !(x.words[0] & re) && J < 26; ++J, re <<= 1) ;
          if (J > 0)
            for (x.iushrn(J); J-- > 0; )
              (N.isOdd() || k.isOdd()) && (N.iadd(E), k.isub(M)), N.iushrn(1), k.iushrn(1);
          S.cmp(x) >= 0 ? (S.isub(x), C.isub(N), A.isub(k)) : (x.isub(S), N.isub(C), k.isub(A));
        }
        return {
          a: N,
          b: k,
          gcd: x.iushln(D)
        };
      }, a.prototype._invmp = function($) {
        n($.negative === 0), n(!$.isZero());
        var S = this, x = $.clone();
        S.negative !== 0 ? S = S.umod($) : S = S.clone();
        for (var C = new a(1), A = new a(0), N = x.clone(); S.cmpn(1) > 0 && x.cmpn(1) > 0; ) {
          for (var k = 0, D = 1; !(S.words[0] & D) && k < 26; ++k, D <<= 1) ;
          if (k > 0)
            for (S.iushrn(k); k-- > 0; )
              C.isOdd() && C.iadd(N), C.iushrn(1);
          for (var E = 0, M = 1; !(x.words[0] & M) && E < 26; ++E, M <<= 1) ;
          if (E > 0)
            for (x.iushrn(E); E-- > 0; )
              A.isOdd() && A.iadd(N), A.iushrn(1);
          S.cmp(x) >= 0 ? (S.isub(x), C.isub(A)) : (x.isub(S), A.isub(C));
        }
        var P;
        return S.cmpn(1) === 0 ? P = C : P = A, P.cmpn(0) < 0 && P.iadd($), P;
      }, a.prototype.gcd = function($) {
        if (this.isZero()) return $.abs();
        if ($.isZero()) return this.abs();
        var S = this.clone(), x = $.clone();
        S.negative = 0, x.negative = 0;
        for (var C = 0; S.isEven() && x.isEven(); C++)
          S.iushrn(1), x.iushrn(1);
        do {
          for (; S.isEven(); )
            S.iushrn(1);
          for (; x.isEven(); )
            x.iushrn(1);
          var A = S.cmp(x);
          if (A < 0) {
            var N = S;
            S = x, x = N;
          } else if (A === 0 || x.cmpn(1) === 0)
            break;
          S.isub(x);
        } while (!0);
        return x.iushln(C);
      }, a.prototype.invm = function($) {
        return this.egcd($).a.umod($);
      }, a.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, a.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, a.prototype.andln = function($) {
        return this.words[0] & $;
      }, a.prototype.bincn = function($) {
        n(typeof $ == "number");
        var S = $ % 26, x = ($ - S) / 26, C = 1 << S;
        if (this.length <= x)
          return this._expand(x + 1), this.words[x] |= C, this;
        for (var A = C, N = x; A !== 0 && N < this.length; N++) {
          var k = this.words[N] | 0;
          k += A, A = k >>> 26, k &= 67108863, this.words[N] = k;
        }
        return A !== 0 && (this.words[N] = A, this.length++), this;
      }, a.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, a.prototype.cmpn = function($) {
        var S = $ < 0;
        if (this.negative !== 0 && !S) return -1;
        if (this.negative === 0 && S) return 1;
        this.strip();
        var x;
        if (this.length > 1)
          x = 1;
        else {
          S && ($ = -$), n($ <= 67108863, "Number is too big");
          var C = this.words[0] | 0;
          x = C === $ ? 0 : C < $ ? -1 : 1;
        }
        return this.negative !== 0 ? -x | 0 : x;
      }, a.prototype.cmp = function($) {
        if (this.negative !== 0 && $.negative === 0) return -1;
        if (this.negative === 0 && $.negative !== 0) return 1;
        var S = this.ucmp($);
        return this.negative !== 0 ? -S | 0 : S;
      }, a.prototype.ucmp = function($) {
        if (this.length > $.length) return 1;
        if (this.length < $.length) return -1;
        for (var S = 0, x = this.length - 1; x >= 0; x--) {
          var C = this.words[x] | 0, A = $.words[x] | 0;
          if (C !== A) {
            C < A ? S = -1 : C > A && (S = 1);
            break;
          }
        }
        return S;
      }, a.prototype.gtn = function($) {
        return this.cmpn($) === 1;
      }, a.prototype.gt = function($) {
        return this.cmp($) === 1;
      }, a.prototype.gten = function($) {
        return this.cmpn($) >= 0;
      }, a.prototype.gte = function($) {
        return this.cmp($) >= 0;
      }, a.prototype.ltn = function($) {
        return this.cmpn($) === -1;
      }, a.prototype.lt = function($) {
        return this.cmp($) === -1;
      }, a.prototype.lten = function($) {
        return this.cmpn($) <= 0;
      }, a.prototype.lte = function($) {
        return this.cmp($) <= 0;
      }, a.prototype.eqn = function($) {
        return this.cmpn($) === 0;
      }, a.prototype.eq = function($) {
        return this.cmp($) === 0;
      }, a.red = function($) {
        return new V($);
      }, a.prototype.toRed = function($) {
        return n(!this.red, "Already a number in reduction context"), n(this.negative === 0, "red works only with positives"), $.convertTo(this)._forceRed($);
      }, a.prototype.fromRed = function() {
        return n(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, a.prototype._forceRed = function($) {
        return this.red = $, this;
      }, a.prototype.forceRed = function($) {
        return n(!this.red, "Already a number in reduction context"), this._forceRed($);
      }, a.prototype.redAdd = function($) {
        return n(this.red, "redAdd works only with red numbers"), this.red.add(this, $);
      }, a.prototype.redIAdd = function($) {
        return n(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, $);
      }, a.prototype.redSub = function($) {
        return n(this.red, "redSub works only with red numbers"), this.red.sub(this, $);
      }, a.prototype.redISub = function($) {
        return n(this.red, "redISub works only with red numbers"), this.red.isub(this, $);
      }, a.prototype.redShl = function($) {
        return n(this.red, "redShl works only with red numbers"), this.red.shl(this, $);
      }, a.prototype.redMul = function($) {
        return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, $), this.red.mul(this, $);
      }, a.prototype.redIMul = function($) {
        return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, $), this.red.imul(this, $);
      }, a.prototype.redSqr = function() {
        return n(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, a.prototype.redISqr = function() {
        return n(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, a.prototype.redSqrt = function() {
        return n(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, a.prototype.redInvm = function() {
        return n(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, a.prototype.redNeg = function() {
        return n(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, a.prototype.redPow = function($) {
        return n(this.red && !$.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, $);
      };
      var I = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function T(R, $) {
        this.name = R, this.p = new a($, 16), this.n = this.p.bitLength(), this.k = new a(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      T.prototype._tmp = function() {
        var $ = new a(null);
        return $.words = new Array(Math.ceil(this.n / 13)), $;
      }, T.prototype.ireduce = function($) {
        var S = $, x;
        do
          this.split(S, this.tmp), S = this.imulK(S), S = S.iadd(this.tmp), x = S.bitLength();
        while (x > this.n);
        var C = x < this.n ? -1 : S.ucmp(this.p);
        return C === 0 ? (S.words[0] = 0, S.length = 1) : C > 0 ? S.isub(this.p) : S.strip !== void 0 ? S.strip() : S._strip(), S;
      }, T.prototype.split = function($, S) {
        $.iushrn(this.n, 0, S);
      }, T.prototype.imulK = function($) {
        return $.imul(this.k);
      };
      function _() {
        T.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      s(_, T), _.prototype.split = function($, S) {
        for (var x = 4194303, C = Math.min($.length, 9), A = 0; A < C; A++)
          S.words[A] = $.words[A];
        if (S.length = C, $.length <= 9) {
          $.words[0] = 0, $.length = 1;
          return;
        }
        var N = $.words[9];
        for (S.words[S.length++] = N & x, A = 10; A < $.length; A++) {
          var k = $.words[A] | 0;
          $.words[A - 10] = (k & x) << 4 | N >>> 22, N = k;
        }
        N >>>= 22, $.words[A - 10] = N, N === 0 && $.length > 10 ? $.length -= 10 : $.length -= 9;
      }, _.prototype.imulK = function($) {
        $.words[$.length] = 0, $.words[$.length + 1] = 0, $.length += 2;
        for (var S = 0, x = 0; x < $.length; x++) {
          var C = $.words[x] | 0;
          S += C * 977, $.words[x] = S & 67108863, S = C * 64 + (S / 67108864 | 0);
        }
        return $.words[$.length - 1] === 0 && ($.length--, $.words[$.length - 1] === 0 && $.length--), $;
      };
      function F() {
        T.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      s(F, T);
      function O() {
        T.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      s(O, T);
      function q() {
        T.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      s(q, T), q.prototype.imulK = function($) {
        for (var S = 0, x = 0; x < $.length; x++) {
          var C = ($.words[x] | 0) * 19 + S, A = C & 67108863;
          C >>>= 26, $.words[x] = A, S = C;
        }
        return S !== 0 && ($.words[$.length++] = S), $;
      }, a._prime = function($) {
        if (I[$]) return I[$];
        var S;
        if ($ === "k256")
          S = new _();
        else if ($ === "p224")
          S = new F();
        else if ($ === "p192")
          S = new O();
        else if ($ === "p25519")
          S = new q();
        else
          throw new Error("Unknown prime " + $);
        return I[$] = S, S;
      };
      function V(R) {
        if (typeof R == "string") {
          var $ = a._prime(R);
          this.m = $.p, this.prime = $;
        } else
          n(R.gtn(1), "modulus must be greater than 1"), this.m = R, this.prime = null;
      }
      V.prototype._verify1 = function($) {
        n($.negative === 0, "red works only with positives"), n($.red, "red works only with red numbers");
      }, V.prototype._verify2 = function($, S) {
        n(($.negative | S.negative) === 0, "red works only with positives"), n(
          $.red && $.red === S.red,
          "red works only with red numbers"
        );
      }, V.prototype.imod = function($) {
        return this.prime ? this.prime.ireduce($)._forceRed(this) : $.umod(this.m)._forceRed(this);
      }, V.prototype.neg = function($) {
        return $.isZero() ? $.clone() : this.m.sub($)._forceRed(this);
      }, V.prototype.add = function($, S) {
        this._verify2($, S);
        var x = $.add(S);
        return x.cmp(this.m) >= 0 && x.isub(this.m), x._forceRed(this);
      }, V.prototype.iadd = function($, S) {
        this._verify2($, S);
        var x = $.iadd(S);
        return x.cmp(this.m) >= 0 && x.isub(this.m), x;
      }, V.prototype.sub = function($, S) {
        this._verify2($, S);
        var x = $.sub(S);
        return x.cmpn(0) < 0 && x.iadd(this.m), x._forceRed(this);
      }, V.prototype.isub = function($, S) {
        this._verify2($, S);
        var x = $.isub(S);
        return x.cmpn(0) < 0 && x.iadd(this.m), x;
      }, V.prototype.shl = function($, S) {
        return this._verify1($), this.imod($.ushln(S));
      }, V.prototype.imul = function($, S) {
        return this._verify2($, S), this.imod($.imul(S));
      }, V.prototype.mul = function($, S) {
        return this._verify2($, S), this.imod($.mul(S));
      }, V.prototype.isqr = function($) {
        return this.imul($, $.clone());
      }, V.prototype.sqr = function($) {
        return this.mul($, $);
      }, V.prototype.sqrt = function($) {
        if ($.isZero()) return $.clone();
        var S = this.m.andln(3);
        if (n(S % 2 === 1), S === 3) {
          var x = this.m.add(new a(1)).iushrn(2);
          return this.pow($, x);
        }
        for (var C = this.m.subn(1), A = 0; !C.isZero() && C.andln(1) === 0; )
          A++, C.iushrn(1);
        n(!C.isZero());
        var N = new a(1).toRed(this), k = N.redNeg(), D = this.m.subn(1).iushrn(1), E = this.m.bitLength();
        for (E = new a(2 * E * E).toRed(this); this.pow(E, D).cmp(k) !== 0; )
          E.redIAdd(k);
        for (var M = this.pow(E, C), P = this.pow($, C.addn(1).iushrn(1)), z = this.pow($, C), J = A; z.cmp(N) !== 0; ) {
          for (var re = z, Q = 0; re.cmp(N) !== 0; Q++)
            re = re.redSqr();
          n(Q < J);
          var W = this.pow(M, new a(1).iushln(J - Q - 1));
          P = P.redMul(W), M = W.redSqr(), z = z.redMul(M), J = Q;
        }
        return P;
      }, V.prototype.invm = function($) {
        var S = $._invmp(this.m);
        return S.negative !== 0 ? (S.negative = 0, this.imod(S).redNeg()) : this.imod(S);
      }, V.prototype.pow = function($, S) {
        if (S.isZero()) return new a(1).toRed(this);
        if (S.cmpn(1) === 0) return $.clone();
        var x = 4, C = new Array(1 << x);
        C[0] = new a(1).toRed(this), C[1] = $;
        for (var A = 2; A < C.length; A++)
          C[A] = this.mul(C[A - 1], $);
        var N = C[0], k = 0, D = 0, E = S.bitLength() % 26;
        for (E === 0 && (E = 26), A = S.length - 1; A >= 0; A--) {
          for (var M = S.words[A], P = E - 1; P >= 0; P--) {
            var z = M >> P & 1;
            if (N !== C[0] && (N = this.sqr(N)), z === 0 && k === 0) {
              D = 0;
              continue;
            }
            k <<= 1, k |= z, D++, !(D !== x && (A !== 0 || P !== 0)) && (N = this.mul(N, C[k]), D = 0, k = 0);
          }
          E = 26;
        }
        return N;
      }, V.prototype.convertTo = function($) {
        var S = $.umod(this.m);
        return S === $ ? S.clone() : S;
      }, V.prototype.convertFrom = function($) {
        var S = $.clone();
        return S.red = null, S;
      }, a.mont = function($) {
        return new H($);
      };
      function H(R) {
        V.call(this, R), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new a(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      s(H, V), H.prototype.convertTo = function($) {
        return this.imod($.ushln(this.shift));
      }, H.prototype.convertFrom = function($) {
        var S = this.imod($.mul(this.rinv));
        return S.red = null, S;
      }, H.prototype.imul = function($, S) {
        if ($.isZero() || S.isZero())
          return $.words[0] = 0, $.length = 1, $;
        var x = $.imul(S), C = x.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), A = x.isub(C).iushrn(this.shift), N = A;
        return A.cmp(this.m) >= 0 ? N = A.isub(this.m) : A.cmpn(0) < 0 && (N = A.iadd(this.m)), N._forceRed(this);
      }, H.prototype.mul = function($, S) {
        if ($.isZero() || S.isZero()) return new a(0)._forceRed(this);
        var x = $.mul(S), C = x.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), A = x.isub(C).iushrn(this.shift), N = A;
        return A.cmp(this.m) >= 0 ? N = A.isub(this.m) : A.cmpn(0) < 0 && (N = A.iadd(this.m)), N._forceRed(this);
      }, H.prototype.invm = function($) {
        var S = this.imod($._invmp(this.m).mul(this.r2));
        return S._forceRed(this);
      };
    })(r, bn$2);
  }(bn$3)), bn$3.exports;
}
var brorand = { exports: {} }, hasRequiredBrorand;
function requireBrorand() {
  if (hasRequiredBrorand) return brorand.exports;
  hasRequiredBrorand = 1;
  var r;
  brorand.exports = function(s) {
    return r || (r = new e(null)), r.generate(s);
  };
  function e(n) {
    this.rand = n;
  }
  if (brorand.exports.Rand = e, e.prototype.generate = function(s) {
    return this._rand(s);
  }, e.prototype._rand = function(s) {
    if (this.rand.getBytes)
      return this.rand.getBytes(s);
    for (var a = new Uint8Array(s), o = 0; o < a.length; o++)
      a[o] = this.rand.getByte();
    return a;
  }, typeof self == "object")
    self.crypto && self.crypto.getRandomValues ? e.prototype._rand = function(s) {
      var a = new Uint8Array(s);
      return self.crypto.getRandomValues(a), a;
    } : self.msCrypto && self.msCrypto.getRandomValues ? e.prototype._rand = function(s) {
      var a = new Uint8Array(s);
      return self.msCrypto.getRandomValues(a), a;
    } : typeof window == "object" && (e.prototype._rand = function() {
      throw new Error("Not implemented yet");
    });
  else
    try {
      var t = requireCryptoBrowserify();
      if (typeof t.randomBytes != "function")
        throw new Error("Not supported");
      e.prototype._rand = function(s) {
        return t.randomBytes(s);
      };
    } catch {
    }
  return brorand.exports;
}
var mr, hasRequiredMr;
function requireMr() {
  if (hasRequiredMr) return mr;
  hasRequiredMr = 1;
  var r = requireBn$1(), e = requireBrorand();
  function t(n) {
    this.rand = n || new e.Rand();
  }
  return mr = t, t.create = function(s) {
    return new t(s);
  }, t.prototype._randbelow = function(s) {
    var a = s.bitLength(), o = Math.ceil(a / 8);
    do
      var u = new r(this.rand.generate(o));
    while (u.cmp(s) >= 0);
    return u;
  }, t.prototype._randrange = function(s, a) {
    var o = a.sub(s);
    return s.add(this._randbelow(o));
  }, t.prototype.test = function(s, a, o) {
    var u = s.bitLength(), l = r.mont(s), f = new r(1).toRed(l);
    a || (a = Math.max(1, u / 48 | 0));
    for (var c = s.subn(1), h = 0; !c.testn(h); h++)
      ;
    for (var d = s.shrn(h), m = c.toRed(l), g = !0; a > 0; a--) {
      var y = this._randrange(new r(2), c);
      o && o(y);
      var b = y.toRed(l).redPow(d);
      if (!(b.cmp(f) === 0 || b.cmp(m) === 0)) {
        for (var v = 1; v < h; v++) {
          if (b = b.redSqr(), b.cmp(f) === 0)
            return !1;
          if (b.cmp(m) === 0)
            break;
        }
        if (v === h)
          return !1;
      }
    }
    return g;
  }, t.prototype.getDivisor = function(s, a) {
    var o = s.bitLength(), u = r.mont(s), l = new r(1).toRed(u);
    a || (a = Math.max(1, o / 48 | 0));
    for (var f = s.subn(1), c = 0; !f.testn(c); c++)
      ;
    for (var h = s.shrn(c), d = f.toRed(u); a > 0; a--) {
      var m = this._randrange(new r(2), f), g = s.gcd(m);
      if (g.cmpn(1) !== 0)
        return g;
      var y = m.toRed(u).redPow(h);
      if (!(y.cmp(l) === 0 || y.cmp(d) === 0)) {
        for (var b = 1; b < c; b++) {
          if (y = y.redSqr(), y.cmp(l) === 0)
            return y.fromRed().subn(1).gcd(s);
          if (y.cmp(d) === 0)
            break;
        }
        if (b === c)
          return y = y.redSqr(), y.fromRed().subn(1).gcd(s);
      }
    }
    return !1;
  }, mr;
}
var generatePrime, hasRequiredGeneratePrime;
function requireGeneratePrime() {
  if (hasRequiredGeneratePrime) return generatePrime;
  hasRequiredGeneratePrime = 1;
  var r = requireBrowser$b();
  generatePrime = b, b.simpleSieve = g, b.fermatTest = y;
  var e = requireBn$1(), t = new e(24), n = requireMr(), s = new n(), a = new e(1), o = new e(2), u = new e(5);
  new e(16), new e(8);
  var l = new e(10), f = new e(3);
  new e(7);
  var c = new e(11), h = new e(4);
  new e(12);
  var d = null;
  function m() {
    if (d !== null)
      return d;
    var v = 1048576, w = [];
    w[0] = 2;
    for (var I = 1, T = 3; T < v; T += 2) {
      for (var _ = Math.ceil(Math.sqrt(T)), F = 0; F < I && w[F] <= _ && T % w[F] !== 0; F++)
        ;
      I !== F && w[F] <= _ || (w[I++] = T);
    }
    return d = w, w;
  }
  function g(v) {
    for (var w = m(), I = 0; I < w.length; I++)
      if (v.modn(w[I]) === 0)
        return v.cmpn(w[I]) === 0;
    return !0;
  }
  function y(v) {
    var w = e.mont(v);
    return o.toRed(w).redPow(v.subn(1)).fromRed().cmpn(1) === 0;
  }
  function b(v, w) {
    if (v < 16)
      return w === 2 || w === 5 ? new e([140, 123]) : new e([140, 39]);
    w = new e(w);
    for (var I, T; ; ) {
      for (I = new e(r(Math.ceil(v / 8))); I.bitLength() > v; )
        I.ishrn(1);
      if (I.isEven() && I.iadd(a), I.testn(1) || I.iadd(o), w.cmp(o)) {
        if (!w.cmp(u))
          for (; I.mod(l).cmp(f); )
            I.iadd(h);
      } else for (; I.mod(t).cmp(c); )
        I.iadd(h);
      if (T = I.shrn(1), g(T) && g(I) && y(T) && y(I) && s.test(T) && s.test(I))
        return I;
    }
  }
  return generatePrime;
}
const modp1 = { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff" }, modp2 = { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff" }, modp5 = { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff" }, modp14 = { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff" }, modp15 = { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff" }, modp16 = { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff" }, modp17 = { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff" }, modp18 = { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff" }, require$$1$1 = {
  modp1,
  modp2,
  modp5,
  modp14,
  modp15,
  modp16,
  modp17,
  modp18
};
var dh, hasRequiredDh;
function requireDh() {
  if (hasRequiredDh) return dh;
  hasRequiredDh = 1;
  var r = requireBn$1(), e = requireMr(), t = new e(), n = new r(24), s = new r(11), a = new r(10), o = new r(3), u = new r(7), l = requireGeneratePrime(), f = requireBrowser$b();
  dh = g;
  function c(b, v) {
    return v = v || "utf8", Buffer.isBuffer(b) || (b = new Buffer(b, v)), this._pub = new r(b), this;
  }
  function h(b, v) {
    return v = v || "utf8", Buffer.isBuffer(b) || (b = new Buffer(b, v)), this._priv = new r(b), this;
  }
  var d = {};
  function m(b, v) {
    var w = v.toString("hex"), I = [w, b.toString(16)].join("_");
    if (I in d)
      return d[I];
    var T = 0;
    if (b.isEven() || !l.simpleSieve || !l.fermatTest(b) || !t.test(b))
      return T += 1, w === "02" || w === "05" ? T += 8 : T += 4, d[I] = T, T;
    t.test(b.shrn(1)) || (T += 2);
    var _;
    switch (w) {
      case "02":
        b.mod(n).cmp(s) && (T += 8);
        break;
      case "05":
        _ = b.mod(a), _.cmp(o) && _.cmp(u) && (T += 8);
        break;
      default:
        T += 4;
    }
    return d[I] = T, T;
  }
  function g(b, v, w) {
    this.setGenerator(v), this.__prime = new r(b), this._prime = r.mont(this.__prime), this._primeLen = b.length, this._pub = void 0, this._priv = void 0, this._primeCode = void 0, w ? (this.setPublicKey = c, this.setPrivateKey = h) : this._primeCode = 8;
  }
  Object.defineProperty(g.prototype, "verifyError", {
    enumerable: !0,
    get: function() {
      return typeof this._primeCode != "number" && (this._primeCode = m(this.__prime, this.__gen)), this._primeCode;
    }
  }), g.prototype.generateKeys = function() {
    return this._priv || (this._priv = new r(f(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
  }, g.prototype.computeSecret = function(b) {
    b = new r(b), b = b.toRed(this._prime);
    var v = b.redPow(this._priv).fromRed(), w = new Buffer(v.toArray()), I = this.getPrime();
    if (w.length < I.length) {
      var T = new Buffer(I.length - w.length);
      T.fill(0), w = Buffer.concat([T, w]);
    }
    return w;
  }, g.prototype.getPublicKey = function(v) {
    return y(this._pub, v);
  }, g.prototype.getPrivateKey = function(v) {
    return y(this._priv, v);
  }, g.prototype.getPrime = function(b) {
    return y(this.__prime, b);
  }, g.prototype.getGenerator = function(b) {
    return y(this._gen, b);
  }, g.prototype.setGenerator = function(b, v) {
    return v = v || "utf8", Buffer.isBuffer(b) || (b = new Buffer(b, v)), this.__gen = b, this._gen = new r(b), this;
  };
  function y(b, v) {
    var w = new Buffer(b.toArray());
    return v ? w.toString(v) : w;
  }
  return dh;
}
var hasRequiredBrowser$4;
function requireBrowser$4() {
  if (hasRequiredBrowser$4) return browser$5;
  hasRequiredBrowser$4 = 1;
  var r = requireGeneratePrime(), e = require$$1$1, t = requireDh();
  function n(o) {
    var u = new Buffer(e[o].prime, "hex"), l = new Buffer(e[o].gen, "hex");
    return new t(u, l);
  }
  var s = {
    binary: !0,
    hex: !0,
    base64: !0
  };
  function a(o, u, l, f) {
    return Buffer.isBuffer(u) || s[u] === void 0 ? a(o, "binary", u, l) : (u = u || "binary", f = f || "binary", l = l || new Buffer([2]), Buffer.isBuffer(l) || (l = new Buffer(l, f)), typeof o == "number" ? new t(r(o, l), l, !0) : (Buffer.isBuffer(o) || (o = new Buffer(o, u)), new t(o, l, !0)));
  }
  return browser$5.DiffieHellmanGroup = browser$5.createDiffieHellmanGroup = browser$5.getDiffieHellman = n, browser$5.createDiffieHellman = browser$5.DiffieHellman = a, browser$5;
}
var readableBrowser = { exports: {} }, processNextickArgs = { exports: {} }, hasRequiredProcessNextickArgs;
function requireProcessNextickArgs() {
  if (hasRequiredProcessNextickArgs) return processNextickArgs.exports;
  hasRequiredProcessNextickArgs = 1, typeof process$1 > "u" || !process$1.version || process$1.version.indexOf("v0.") === 0 || process$1.version.indexOf("v1.") === 0 && process$1.version.indexOf("v1.8.") !== 0 ? processNextickArgs.exports = { nextTick: r } : processNextickArgs.exports = process$1;
  function r(e, t, n, s) {
    if (typeof e != "function")
      throw new TypeError('"callback" argument must be a function');
    var a = arguments.length, o, u;
    switch (a) {
      case 0:
      case 1:
        return process$1.nextTick(e);
      case 2:
        return process$1.nextTick(function() {
          e.call(null, t);
        });
      case 3:
        return process$1.nextTick(function() {
          e.call(null, t, n);
        });
      case 4:
        return process$1.nextTick(function() {
          e.call(null, t, n, s);
        });
      default:
        for (o = new Array(a - 1), u = 0; u < o.length; )
          o[u++] = arguments[u];
        return process$1.nextTick(function() {
          e.apply(null, o);
        });
    }
  }
  return processNextickArgs.exports;
}
var isarray, hasRequiredIsarray;
function requireIsarray() {
  if (hasRequiredIsarray) return isarray;
  hasRequiredIsarray = 1;
  var r = {}.toString;
  return isarray = Array.isArray || function(e) {
    return r.call(e) == "[object Array]";
  }, isarray;
}
var streamBrowser, hasRequiredStreamBrowser;
function requireStreamBrowser() {
  return hasRequiredStreamBrowser || (hasRequiredStreamBrowser = 1, streamBrowser = requireEvents().EventEmitter), streamBrowser;
}
var safeBuffer = { exports: {} }, hasRequiredSafeBuffer;
function requireSafeBuffer() {
  return hasRequiredSafeBuffer || (hasRequiredSafeBuffer = 1, function(r, e) {
    var t = requireDist(), n = t.Buffer;
    function s(o, u) {
      for (var l in o)
        u[l] = o[l];
    }
    n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow ? r.exports = t : (s(t, e), e.Buffer = a);
    function a(o, u, l) {
      return n(o, u, l);
    }
    s(n, a), a.from = function(o, u, l) {
      if (typeof o == "number")
        throw new TypeError("Argument must not be a number");
      return n(o, u, l);
    }, a.alloc = function(o, u, l) {
      if (typeof o != "number")
        throw new TypeError("Argument must be a number");
      var f = n(o);
      return u !== void 0 ? typeof l == "string" ? f.fill(u, l) : f.fill(u) : f.fill(0), f;
    }, a.allocUnsafe = function(o) {
      if (typeof o != "number")
        throw new TypeError("Argument must be a number");
      return n(o);
    }, a.allocUnsafeSlow = function(o) {
      if (typeof o != "number")
        throw new TypeError("Argument must be a number");
      return t.SlowBuffer(o);
    };
  }(safeBuffer, safeBuffer.exports)), safeBuffer.exports;
}
var util = {}, hasRequiredUtil;
function requireUtil() {
  if (hasRequiredUtil) return util;
  hasRequiredUtil = 1;
  function r(y) {
    return Array.isArray ? Array.isArray(y) : g(y) === "[object Array]";
  }
  util.isArray = r;
  function e(y) {
    return typeof y == "boolean";
  }
  util.isBoolean = e;
  function t(y) {
    return y === null;
  }
  util.isNull = t;
  function n(y) {
    return y == null;
  }
  util.isNullOrUndefined = n;
  function s(y) {
    return typeof y == "number";
  }
  util.isNumber = s;
  function a(y) {
    return typeof y == "string";
  }
  util.isString = a;
  function o(y) {
    return typeof y == "symbol";
  }
  util.isSymbol = o;
  function u(y) {
    return y === void 0;
  }
  util.isUndefined = u;
  function l(y) {
    return g(y) === "[object RegExp]";
  }
  util.isRegExp = l;
  function f(y) {
    return typeof y == "object" && y !== null;
  }
  util.isObject = f;
  function c(y) {
    return g(y) === "[object Date]";
  }
  util.isDate = c;
  function h(y) {
    return g(y) === "[object Error]" || y instanceof Error;
  }
  util.isError = h;
  function d(y) {
    return typeof y == "function";
  }
  util.isFunction = d;
  function m(y) {
    return y === null || typeof y == "boolean" || typeof y == "number" || typeof y == "string" || typeof y == "symbol" || // ES6 symbol
    typeof y > "u";
  }
  util.isPrimitive = m, util.isBuffer = requireDist().Buffer.isBuffer;
  function g(y) {
    return Object.prototype.toString.call(y);
  }
  return util;
}
var BufferList = { exports: {} }, hasRequiredBufferList;
function requireBufferList() {
  return hasRequiredBufferList || (hasRequiredBufferList = 1, function(r) {
    function e(a, o) {
      if (!(a instanceof o))
        throw new TypeError("Cannot call a class as a function");
    }
    var t = requireSafeBuffer().Buffer, n = requireUtil$1();
    function s(a, o, u) {
      a.copy(o, u);
    }
    r.exports = function() {
      function a() {
        e(this, a), this.head = null, this.tail = null, this.length = 0;
      }
      return a.prototype.push = function(u) {
        var l = { data: u, next: null };
        this.length > 0 ? this.tail.next = l : this.head = l, this.tail = l, ++this.length;
      }, a.prototype.unshift = function(u) {
        var l = { data: u, next: this.head };
        this.length === 0 && (this.tail = l), this.head = l, ++this.length;
      }, a.prototype.shift = function() {
        if (this.length !== 0) {
          var u = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, u;
        }
      }, a.prototype.clear = function() {
        this.head = this.tail = null, this.length = 0;
      }, a.prototype.join = function(u) {
        if (this.length === 0) return "";
        for (var l = this.head, f = "" + l.data; l = l.next; )
          f += u + l.data;
        return f;
      }, a.prototype.concat = function(u) {
        if (this.length === 0) return t.alloc(0);
        for (var l = t.allocUnsafe(u >>> 0), f = this.head, c = 0; f; )
          s(f.data, l, c), c += f.data.length, f = f.next;
        return l;
      }, a;
    }(), n && n.inspect && n.inspect.custom && (r.exports.prototype[n.inspect.custom] = function() {
      var a = n.inspect({ length: this.length });
      return this.constructor.name + " " + a;
    });
  }(BufferList)), BufferList.exports;
}
var destroy_1, hasRequiredDestroy;
function requireDestroy() {
  if (hasRequiredDestroy) return destroy_1;
  hasRequiredDestroy = 1;
  var r = requireProcessNextickArgs();
  function e(s, a) {
    var o = this, u = this._readableState && this._readableState.destroyed, l = this._writableState && this._writableState.destroyed;
    return u || l ? (a ? a(s) : s && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, r.nextTick(n, this, s)) : r.nextTick(n, this, s)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(s || null, function(f) {
      !a && f ? o._writableState ? o._writableState.errorEmitted || (o._writableState.errorEmitted = !0, r.nextTick(n, o, f)) : r.nextTick(n, o, f) : a && a(f);
    }), this);
  }
  function t() {
    this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
  }
  function n(s, a) {
    s.emit("error", a);
  }
  return destroy_1 = {
    destroy: e,
    undestroy: t
  }, destroy_1;
}
var _stream_writable, hasRequired_stream_writable;
function require_stream_writable() {
  if (hasRequired_stream_writable) return _stream_writable;
  hasRequired_stream_writable = 1;
  var r = requireProcessNextickArgs();
  _stream_writable = y;
  function e(N) {
    var k = this;
    this.next = null, this.entry = null, this.finish = function() {
      A(k, N);
    };
  }
  var t = !process$1.browser && ["v0.10", "v0.9."].indexOf(process$1.version.slice(0, 5)) > -1 ? setImmediate : r.nextTick, n;
  y.WritableState = m;
  var s = Object.create(requireUtil());
  s.inherits = requireInherits_browser();
  var a = {
    deprecate: requireBrowser$a()
  }, o = requireStreamBrowser(), u = requireSafeBuffer().Buffer, l = (typeof commonjsGlobal < "u" ? commonjsGlobal : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function f(N) {
    return u.from(N);
  }
  function c(N) {
    return u.isBuffer(N) || N instanceof l;
  }
  var h = requireDestroy();
  s.inherits(y, o);
  function d() {
  }
  function m(N, k) {
    n = n || require_stream_duplex(), N = N || {};
    var D = k instanceof n;
    this.objectMode = !!N.objectMode, D && (this.objectMode = this.objectMode || !!N.writableObjectMode);
    var E = N.highWaterMark, M = N.writableHighWaterMark, P = this.objectMode ? 16 : 16 * 1024;
    E || E === 0 ? this.highWaterMark = E : D && (M || M === 0) ? this.highWaterMark = M : this.highWaterMark = P, this.highWaterMark = Math.floor(this.highWaterMark), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
    var z = N.decodeStrings === !1;
    this.decodeStrings = !z, this.defaultEncoding = N.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(J) {
      O(k, J);
    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new e(this);
  }
  m.prototype.getBuffer = function() {
    for (var k = this.bufferedRequest, D = []; k; )
      D.push(k), k = k.next;
    return D;
  }, function() {
    try {
      Object.defineProperty(m.prototype, "buffer", {
        get: a.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch {
    }
  }();
  var g;
  typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (g = Function.prototype[Symbol.hasInstance], Object.defineProperty(y, Symbol.hasInstance, {
    value: function(N) {
      return g.call(this, N) ? !0 : this !== y ? !1 : N && N._writableState instanceof m;
    }
  })) : g = function(N) {
    return N instanceof this;
  };
  function y(N) {
    if (n = n || require_stream_duplex(), !g.call(y, this) && !(this instanceof n))
      return new y(N);
    this._writableState = new m(N, this), this.writable = !0, N && (typeof N.write == "function" && (this._write = N.write), typeof N.writev == "function" && (this._writev = N.writev), typeof N.destroy == "function" && (this._destroy = N.destroy), typeof N.final == "function" && (this._final = N.final)), o.call(this);
  }
  y.prototype.pipe = function() {
    this.emit("error", new Error("Cannot pipe, not readable"));
  };
  function b(N, k) {
    var D = new Error("write after end");
    N.emit("error", D), r.nextTick(k, D);
  }
  function v(N, k, D, E) {
    var M = !0, P = !1;
    return D === null ? P = new TypeError("May not write null values to stream") : typeof D != "string" && D !== void 0 && !k.objectMode && (P = new TypeError("Invalid non-string/buffer chunk")), P && (N.emit("error", P), r.nextTick(E, P), M = !1), M;
  }
  y.prototype.write = function(N, k, D) {
    var E = this._writableState, M = !1, P = !E.objectMode && c(N);
    return P && !u.isBuffer(N) && (N = f(N)), typeof k == "function" && (D = k, k = null), P ? k = "buffer" : k || (k = E.defaultEncoding), typeof D != "function" && (D = d), E.ended ? b(this, D) : (P || v(this, E, N, D)) && (E.pendingcb++, M = I(this, E, P, N, k, D)), M;
  }, y.prototype.cork = function() {
    var N = this._writableState;
    N.corked++;
  }, y.prototype.uncork = function() {
    var N = this._writableState;
    N.corked && (N.corked--, !N.writing && !N.corked && !N.bufferProcessing && N.bufferedRequest && H(this, N));
  }, y.prototype.setDefaultEncoding = function(k) {
    if (typeof k == "string" && (k = k.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((k + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + k);
    return this._writableState.defaultEncoding = k, this;
  };
  function w(N, k, D) {
    return !N.objectMode && N.decodeStrings !== !1 && typeof k == "string" && (k = u.from(k, D)), k;
  }
  Object.defineProperty(y.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function I(N, k, D, E, M, P) {
    if (!D) {
      var z = w(k, E, M);
      E !== z && (D = !0, M = "buffer", E = z);
    }
    var J = k.objectMode ? 1 : E.length;
    k.length += J;
    var re = k.length < k.highWaterMark;
    if (re || (k.needDrain = !0), k.writing || k.corked) {
      var Q = k.lastBufferedRequest;
      k.lastBufferedRequest = {
        chunk: E,
        encoding: M,
        isBuf: D,
        callback: P,
        next: null
      }, Q ? Q.next = k.lastBufferedRequest : k.bufferedRequest = k.lastBufferedRequest, k.bufferedRequestCount += 1;
    } else
      T(N, k, !1, J, E, M, P);
    return re;
  }
  function T(N, k, D, E, M, P, z) {
    k.writelen = E, k.writecb = z, k.writing = !0, k.sync = !0, D ? N._writev(M, k.onwrite) : N._write(M, P, k.onwrite), k.sync = !1;
  }
  function _(N, k, D, E, M) {
    --k.pendingcb, D ? (r.nextTick(M, E), r.nextTick(x, N, k), N._writableState.errorEmitted = !0, N.emit("error", E)) : (M(E), N._writableState.errorEmitted = !0, N.emit("error", E), x(N, k));
  }
  function F(N) {
    N.writing = !1, N.writecb = null, N.length -= N.writelen, N.writelen = 0;
  }
  function O(N, k) {
    var D = N._writableState, E = D.sync, M = D.writecb;
    if (F(D), k) _(N, D, E, k, M);
    else {
      var P = R(D);
      !P && !D.corked && !D.bufferProcessing && D.bufferedRequest && H(N, D), E ? t(q, N, D, P, M) : q(N, D, P, M);
    }
  }
  function q(N, k, D, E) {
    D || V(N, k), k.pendingcb--, E(), x(N, k);
  }
  function V(N, k) {
    k.length === 0 && k.needDrain && (k.needDrain = !1, N.emit("drain"));
  }
  function H(N, k) {
    k.bufferProcessing = !0;
    var D = k.bufferedRequest;
    if (N._writev && D && D.next) {
      var E = k.bufferedRequestCount, M = new Array(E), P = k.corkedRequestsFree;
      P.entry = D;
      for (var z = 0, J = !0; D; )
        M[z] = D, D.isBuf || (J = !1), D = D.next, z += 1;
      M.allBuffers = J, T(N, k, !0, k.length, M, "", P.finish), k.pendingcb++, k.lastBufferedRequest = null, P.next ? (k.corkedRequestsFree = P.next, P.next = null) : k.corkedRequestsFree = new e(k), k.bufferedRequestCount = 0;
    } else {
      for (; D; ) {
        var re = D.chunk, Q = D.encoding, W = D.callback, j = k.objectMode ? 1 : re.length;
        if (T(N, k, !1, j, re, Q, W), D = D.next, k.bufferedRequestCount--, k.writing)
          break;
      }
      D === null && (k.lastBufferedRequest = null);
    }
    k.bufferedRequest = D, k.bufferProcessing = !1;
  }
  y.prototype._write = function(N, k, D) {
    D(new Error("_write() is not implemented"));
  }, y.prototype._writev = null, y.prototype.end = function(N, k, D) {
    var E = this._writableState;
    typeof N == "function" ? (D = N, N = null, k = null) : typeof k == "function" && (D = k, k = null), N != null && this.write(N, k), E.corked && (E.corked = 1, this.uncork()), E.ending || C(this, E, D);
  };
  function R(N) {
    return N.ending && N.length === 0 && N.bufferedRequest === null && !N.finished && !N.writing;
  }
  function $(N, k) {
    N._final(function(D) {
      k.pendingcb--, D && N.emit("error", D), k.prefinished = !0, N.emit("prefinish"), x(N, k);
    });
  }
  function S(N, k) {
    !k.prefinished && !k.finalCalled && (typeof N._final == "function" ? (k.pendingcb++, k.finalCalled = !0, r.nextTick($, N, k)) : (k.prefinished = !0, N.emit("prefinish")));
  }
  function x(N, k) {
    var D = R(k);
    return D && (S(N, k), k.pendingcb === 0 && (k.finished = !0, N.emit("finish"))), D;
  }
  function C(N, k, D) {
    k.ending = !0, x(N, k), D && (k.finished ? r.nextTick(D) : N.once("finish", D)), k.ended = !0, N.writable = !1;
  }
  function A(N, k, D) {
    var E = N.entry;
    for (N.entry = null; E; ) {
      var M = E.callback;
      k.pendingcb--, M(D), E = E.next;
    }
    k.corkedRequestsFree.next = N;
  }
  return Object.defineProperty(y.prototype, "destroyed", {
    get: function() {
      return this._writableState === void 0 ? !1 : this._writableState.destroyed;
    },
    set: function(N) {
      this._writableState && (this._writableState.destroyed = N);
    }
  }), y.prototype.destroy = h.destroy, y.prototype._undestroy = h.undestroy, y.prototype._destroy = function(N, k) {
    this.end(), k(N);
  }, _stream_writable;
}
var _stream_duplex, hasRequired_stream_duplex;
function require_stream_duplex() {
  if (hasRequired_stream_duplex) return _stream_duplex;
  hasRequired_stream_duplex = 1;
  var r = requireProcessNextickArgs(), e = Object.keys || function(h) {
    var d = [];
    for (var m in h)
      d.push(m);
    return d;
  };
  _stream_duplex = l;
  var t = Object.create(requireUtil());
  t.inherits = requireInherits_browser();
  var n = require_stream_readable(), s = require_stream_writable();
  t.inherits(l, n);
  for (var a = e(s.prototype), o = 0; o < a.length; o++) {
    var u = a[o];
    l.prototype[u] || (l.prototype[u] = s.prototype[u]);
  }
  function l(h) {
    if (!(this instanceof l)) return new l(h);
    n.call(this, h), s.call(this, h), h && h.readable === !1 && (this.readable = !1), h && h.writable === !1 && (this.writable = !1), this.allowHalfOpen = !0, h && h.allowHalfOpen === !1 && (this.allowHalfOpen = !1), this.once("end", f);
  }
  Object.defineProperty(l.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function f() {
    this.allowHalfOpen || this._writableState.ended || r.nextTick(c, this);
  }
  function c(h) {
    h.end();
  }
  return Object.defineProperty(l.prototype, "destroyed", {
    get: function() {
      return this._readableState === void 0 || this._writableState === void 0 ? !1 : this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(h) {
      this._readableState === void 0 || this._writableState === void 0 || (this._readableState.destroyed = h, this._writableState.destroyed = h);
    }
  }), l.prototype._destroy = function(h, d) {
    this.push(null), this.end(), r.nextTick(d, h);
  }, _stream_duplex;
}
var _stream_readable, hasRequired_stream_readable;
function require_stream_readable() {
  if (hasRequired_stream_readable) return _stream_readable;
  hasRequired_stream_readable = 1;
  var r = requireProcessNextickArgs();
  _stream_readable = w;
  var e = requireIsarray(), t;
  w.ReadableState = v, requireEvents().EventEmitter;
  var n = function(W, j) {
    return W.listeners(j).length;
  }, s = requireStreamBrowser(), a = requireSafeBuffer().Buffer, o = (typeof commonjsGlobal < "u" ? commonjsGlobal : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function u(W) {
    return a.from(W);
  }
  function l(W) {
    return a.isBuffer(W) || W instanceof o;
  }
  var f = Object.create(requireUtil());
  f.inherits = requireInherits_browser();
  var c = requireUtil$1(), h = void 0;
  c && c.debuglog ? h = c.debuglog("stream") : h = function() {
  };
  var d = requireBufferList(), m = requireDestroy(), g;
  f.inherits(w, s);
  var y = ["error", "close", "destroy", "pause", "resume"];
  function b(W, j, te) {
    if (typeof W.prependListener == "function") return W.prependListener(j, te);
    !W._events || !W._events[j] ? W.on(j, te) : e(W._events[j]) ? W._events[j].unshift(te) : W._events[j] = [te, W._events[j]];
  }
  function v(W, j) {
    t = t || require_stream_duplex(), W = W || {};
    var te = j instanceof t;
    this.objectMode = !!W.objectMode, te && (this.objectMode = this.objectMode || !!W.readableObjectMode);
    var se = W.highWaterMark, X = W.readableHighWaterMark, K = this.objectMode ? 16 : 16 * 1024;
    se || se === 0 ? this.highWaterMark = se : te && (X || X === 0) ? this.highWaterMark = X : this.highWaterMark = K, this.highWaterMark = Math.floor(this.highWaterMark), this.buffer = new d(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.destroyed = !1, this.defaultEncoding = W.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, W.encoding && (g || (g = requireString_decoder().StringDecoder), this.decoder = new g(W.encoding), this.encoding = W.encoding);
  }
  function w(W) {
    if (t = t || require_stream_duplex(), !(this instanceof w)) return new w(W);
    this._readableState = new v(W, this), this.readable = !0, W && (typeof W.read == "function" && (this._read = W.read), typeof W.destroy == "function" && (this._destroy = W.destroy)), s.call(this);
  }
  Object.defineProperty(w.prototype, "destroyed", {
    get: function() {
      return this._readableState === void 0 ? !1 : this._readableState.destroyed;
    },
    set: function(W) {
      this._readableState && (this._readableState.destroyed = W);
    }
  }), w.prototype.destroy = m.destroy, w.prototype._undestroy = m.undestroy, w.prototype._destroy = function(W, j) {
    this.push(null), j(W);
  }, w.prototype.push = function(W, j) {
    var te = this._readableState, se;
    return te.objectMode ? se = !0 : typeof W == "string" && (j = j || te.defaultEncoding, j !== te.encoding && (W = a.from(W, j), j = ""), se = !0), I(this, W, j, !1, se);
  }, w.prototype.unshift = function(W) {
    return I(this, W, null, !0, !1);
  };
  function I(W, j, te, se, X) {
    var K = W._readableState;
    if (j === null)
      K.reading = !1, H(W, K);
    else {
      var ae;
      X || (ae = _(K, j)), ae ? W.emit("error", ae) : K.objectMode || j && j.length > 0 ? (typeof j != "string" && !K.objectMode && Object.getPrototypeOf(j) !== a.prototype && (j = u(j)), se ? K.endEmitted ? W.emit("error", new Error("stream.unshift() after end event")) : T(W, K, j, !0) : K.ended ? W.emit("error", new Error("stream.push() after EOF")) : (K.reading = !1, K.decoder && !te ? (j = K.decoder.write(j), K.objectMode || j.length !== 0 ? T(W, K, j, !1) : S(W, K)) : T(W, K, j, !1))) : se || (K.reading = !1);
    }
    return F(K);
  }
  function T(W, j, te, se) {
    j.flowing && j.length === 0 && !j.sync ? (W.emit("data", te), W.read(0)) : (j.length += j.objectMode ? 1 : te.length, se ? j.buffer.unshift(te) : j.buffer.push(te), j.needReadable && R(W)), S(W, j);
  }
  function _(W, j) {
    var te;
    return !l(j) && typeof j != "string" && j !== void 0 && !W.objectMode && (te = new TypeError("Invalid non-string/buffer chunk")), te;
  }
  function F(W) {
    return !W.ended && (W.needReadable || W.length < W.highWaterMark || W.length === 0);
  }
  w.prototype.isPaused = function() {
    return this._readableState.flowing === !1;
  }, w.prototype.setEncoding = function(W) {
    return g || (g = requireString_decoder().StringDecoder), this._readableState.decoder = new g(W), this._readableState.encoding = W, this;
  };
  var O = 8388608;
  function q(W) {
    return W >= O ? W = O : (W--, W |= W >>> 1, W |= W >>> 2, W |= W >>> 4, W |= W >>> 8, W |= W >>> 16, W++), W;
  }
  function V(W, j) {
    return W <= 0 || j.length === 0 && j.ended ? 0 : j.objectMode ? 1 : W !== W ? j.flowing && j.length ? j.buffer.head.data.length : j.length : (W > j.highWaterMark && (j.highWaterMark = q(W)), W <= j.length ? W : j.ended ? j.length : (j.needReadable = !0, 0));
  }
  w.prototype.read = function(W) {
    h("read", W), W = parseInt(W, 10);
    var j = this._readableState, te = W;
    if (W !== 0 && (j.emittedReadable = !1), W === 0 && j.needReadable && (j.length >= j.highWaterMark || j.ended))
      return h("read: emitReadable", j.length, j.ended), j.length === 0 && j.ended ? J(this) : R(this), null;
    if (W = V(W, j), W === 0 && j.ended)
      return j.length === 0 && J(this), null;
    var se = j.needReadable;
    h("need readable", se), (j.length === 0 || j.length - W < j.highWaterMark) && (se = !0, h("length less than watermark", se)), j.ended || j.reading ? (se = !1, h("reading or ended", se)) : se && (h("do read"), j.reading = !0, j.sync = !0, j.length === 0 && (j.needReadable = !0), this._read(j.highWaterMark), j.sync = !1, j.reading || (W = V(te, j)));
    var X;
    return W > 0 ? X = E(W, j) : X = null, X === null ? (j.needReadable = !0, W = 0) : j.length -= W, j.length === 0 && (j.ended || (j.needReadable = !0), te !== W && j.ended && J(this)), X !== null && this.emit("data", X), X;
  };
  function H(W, j) {
    if (!j.ended) {
      if (j.decoder) {
        var te = j.decoder.end();
        te && te.length && (j.buffer.push(te), j.length += j.objectMode ? 1 : te.length);
      }
      j.ended = !0, R(W);
    }
  }
  function R(W) {
    var j = W._readableState;
    j.needReadable = !1, j.emittedReadable || (h("emitReadable", j.flowing), j.emittedReadable = !0, j.sync ? r.nextTick($, W) : $(W));
  }
  function $(W) {
    h("emit readable"), W.emit("readable"), D(W);
  }
  function S(W, j) {
    j.readingMore || (j.readingMore = !0, r.nextTick(x, W, j));
  }
  function x(W, j) {
    for (var te = j.length; !j.reading && !j.flowing && !j.ended && j.length < j.highWaterMark && (h("maybeReadMore read 0"), W.read(0), te !== j.length); )
      te = j.length;
    j.readingMore = !1;
  }
  w.prototype._read = function(W) {
    this.emit("error", new Error("_read() is not implemented"));
  }, w.prototype.pipe = function(W, j) {
    var te = this, se = this._readableState;
    switch (se.pipesCount) {
      case 0:
        se.pipes = W;
        break;
      case 1:
        se.pipes = [se.pipes, W];
        break;
      default:
        se.pipes.push(W);
        break;
    }
    se.pipesCount += 1, h("pipe count=%d opts=%j", se.pipesCount, j);
    var X = (!j || j.end !== !1) && W !== process$1.stdout && W !== process$1.stderr, K = X ? de : we;
    se.endEmitted ? r.nextTick(K) : te.once("end", K), W.on("unpipe", ae);
    function ae(ve, Ee) {
      h("onunpipe"), ve === te && Ee && Ee.hasUnpiped === !1 && (Ee.hasUnpiped = !0, ge());
    }
    function de() {
      h("onend"), W.end();
    }
    var me = C(te);
    W.on("drain", me);
    var pe = !1;
    function ge() {
      h("cleanup"), W.removeListener("close", be), W.removeListener("finish", xe), W.removeListener("drain", me), W.removeListener("error", $e), W.removeListener("unpipe", ae), te.removeListener("end", de), te.removeListener("end", we), te.removeListener("data", ce), pe = !0, se.awaitDrain && (!W._writableState || W._writableState.needDrain) && me();
    }
    var ye = !1;
    te.on("data", ce);
    function ce(ve) {
      h("ondata"), ye = !1;
      var Ee = W.write(ve);
      Ee === !1 && !ye && ((se.pipesCount === 1 && se.pipes === W || se.pipesCount > 1 && Q(se.pipes, W) !== -1) && !pe && (h("false write response, pause", se.awaitDrain), se.awaitDrain++, ye = !0), te.pause());
    }
    function $e(ve) {
      h("onerror", ve), we(), W.removeListener("error", $e), n(W, "error") === 0 && W.emit("error", ve);
    }
    b(W, "error", $e);
    function be() {
      W.removeListener("finish", xe), we();
    }
    W.once("close", be);
    function xe() {
      h("onfinish"), W.removeListener("close", be), we();
    }
    W.once("finish", xe);
    function we() {
      h("unpipe"), te.unpipe(W);
    }
    return W.emit("pipe", te), se.flowing || (h("pipe resume"), te.resume()), W;
  };
  function C(W) {
    return function() {
      var j = W._readableState;
      h("pipeOnDrain", j.awaitDrain), j.awaitDrain && j.awaitDrain--, j.awaitDrain === 0 && n(W, "data") && (j.flowing = !0, D(W));
    };
  }
  w.prototype.unpipe = function(W) {
    var j = this._readableState, te = { hasUnpiped: !1 };
    if (j.pipesCount === 0) return this;
    if (j.pipesCount === 1)
      return W && W !== j.pipes ? this : (W || (W = j.pipes), j.pipes = null, j.pipesCount = 0, j.flowing = !1, W && W.emit("unpipe", this, te), this);
    if (!W) {
      var se = j.pipes, X = j.pipesCount;
      j.pipes = null, j.pipesCount = 0, j.flowing = !1;
      for (var K = 0; K < X; K++)
        se[K].emit("unpipe", this, { hasUnpiped: !1 });
      return this;
    }
    var ae = Q(j.pipes, W);
    return ae === -1 ? this : (j.pipes.splice(ae, 1), j.pipesCount -= 1, j.pipesCount === 1 && (j.pipes = j.pipes[0]), W.emit("unpipe", this, te), this);
  }, w.prototype.on = function(W, j) {
    var te = s.prototype.on.call(this, W, j);
    if (W === "data")
      this._readableState.flowing !== !1 && this.resume();
    else if (W === "readable") {
      var se = this._readableState;
      !se.endEmitted && !se.readableListening && (se.readableListening = se.needReadable = !0, se.emittedReadable = !1, se.reading ? se.length && R(this) : r.nextTick(A, this));
    }
    return te;
  }, w.prototype.addListener = w.prototype.on;
  function A(W) {
    h("readable nexttick read 0"), W.read(0);
  }
  w.prototype.resume = function() {
    var W = this._readableState;
    return W.flowing || (h("resume"), W.flowing = !0, N(this, W)), this;
  };
  function N(W, j) {
    j.resumeScheduled || (j.resumeScheduled = !0, r.nextTick(k, W, j));
  }
  function k(W, j) {
    j.reading || (h("resume read 0"), W.read(0)), j.resumeScheduled = !1, j.awaitDrain = 0, W.emit("resume"), D(W), j.flowing && !j.reading && W.read(0);
  }
  w.prototype.pause = function() {
    return h("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== !1 && (h("pause"), this._readableState.flowing = !1, this.emit("pause")), this;
  };
  function D(W) {
    var j = W._readableState;
    for (h("flow", j.flowing); j.flowing && W.read() !== null; )
      ;
  }
  w.prototype.wrap = function(W) {
    var j = this, te = this._readableState, se = !1;
    W.on("end", function() {
      if (h("wrapped end"), te.decoder && !te.ended) {
        var ae = te.decoder.end();
        ae && ae.length && j.push(ae);
      }
      j.push(null);
    }), W.on("data", function(ae) {
      if (h("wrapped data"), te.decoder && (ae = te.decoder.write(ae)), !(te.objectMode && ae == null) && !(!te.objectMode && (!ae || !ae.length))) {
        var de = j.push(ae);
        de || (se = !0, W.pause());
      }
    });
    for (var X in W)
      this[X] === void 0 && typeof W[X] == "function" && (this[X] = /* @__PURE__ */ function(ae) {
        return function() {
          return W[ae].apply(W, arguments);
        };
      }(X));
    for (var K = 0; K < y.length; K++)
      W.on(y[K], this.emit.bind(this, y[K]));
    return this._read = function(ae) {
      h("wrapped _read", ae), se && (se = !1, W.resume());
    }, this;
  }, Object.defineProperty(w.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.highWaterMark;
    }
  }), w._fromList = E;
  function E(W, j) {
    if (j.length === 0) return null;
    var te;
    return j.objectMode ? te = j.buffer.shift() : !W || W >= j.length ? (j.decoder ? te = j.buffer.join("") : j.buffer.length === 1 ? te = j.buffer.head.data : te = j.buffer.concat(j.length), j.buffer.clear()) : te = M(W, j.buffer, j.decoder), te;
  }
  function M(W, j, te) {
    var se;
    return W < j.head.data.length ? (se = j.head.data.slice(0, W), j.head.data = j.head.data.slice(W)) : W === j.head.data.length ? se = j.shift() : se = te ? P(W, j) : z(W, j), se;
  }
  function P(W, j) {
    var te = j.head, se = 1, X = te.data;
    for (W -= X.length; te = te.next; ) {
      var K = te.data, ae = W > K.length ? K.length : W;
      if (ae === K.length ? X += K : X += K.slice(0, W), W -= ae, W === 0) {
        ae === K.length ? (++se, te.next ? j.head = te.next : j.head = j.tail = null) : (j.head = te, te.data = K.slice(ae));
        break;
      }
      ++se;
    }
    return j.length -= se, X;
  }
  function z(W, j) {
    var te = a.allocUnsafe(W), se = j.head, X = 1;
    for (se.data.copy(te), W -= se.data.length; se = se.next; ) {
      var K = se.data, ae = W > K.length ? K.length : W;
      if (K.copy(te, te.length - W, 0, ae), W -= ae, W === 0) {
        ae === K.length ? (++X, se.next ? j.head = se.next : j.head = j.tail = null) : (j.head = se, se.data = K.slice(ae));
        break;
      }
      ++X;
    }
    return j.length -= X, te;
  }
  function J(W) {
    var j = W._readableState;
    if (j.length > 0) throw new Error('"endReadable()" called on non-empty stream');
    j.endEmitted || (j.ended = !0, r.nextTick(re, j, W));
  }
  function re(W, j) {
    !W.endEmitted && W.length === 0 && (W.endEmitted = !0, j.readable = !1, j.emit("end"));
  }
  function Q(W, j) {
    for (var te = 0, se = W.length; te < se; te++)
      if (W[te] === j) return te;
    return -1;
  }
  return _stream_readable;
}
var _stream_transform, hasRequired_stream_transform;
function require_stream_transform() {
  if (hasRequired_stream_transform) return _stream_transform;
  hasRequired_stream_transform = 1, _stream_transform = n;
  var r = require_stream_duplex(), e = Object.create(requireUtil());
  e.inherits = requireInherits_browser(), e.inherits(n, r);
  function t(o, u) {
    var l = this._transformState;
    l.transforming = !1;
    var f = l.writecb;
    if (!f)
      return this.emit("error", new Error("write callback called multiple times"));
    l.writechunk = null, l.writecb = null, u != null && this.push(u), f(o);
    var c = this._readableState;
    c.reading = !1, (c.needReadable || c.length < c.highWaterMark) && this._read(c.highWaterMark);
  }
  function n(o) {
    if (!(this instanceof n)) return new n(o);
    r.call(this, o), this._transformState = {
      afterTransform: t.bind(this),
      needTransform: !1,
      transforming: !1,
      writecb: null,
      writechunk: null,
      writeencoding: null
    }, this._readableState.needReadable = !0, this._readableState.sync = !1, o && (typeof o.transform == "function" && (this._transform = o.transform), typeof o.flush == "function" && (this._flush = o.flush)), this.on("prefinish", s);
  }
  function s() {
    var o = this;
    typeof this._flush == "function" ? this._flush(function(u, l) {
      a(o, u, l);
    }) : a(this, null, null);
  }
  n.prototype.push = function(o, u) {
    return this._transformState.needTransform = !1, r.prototype.push.call(this, o, u);
  }, n.prototype._transform = function(o, u, l) {
    throw new Error("_transform() is not implemented");
  }, n.prototype._write = function(o, u, l) {
    var f = this._transformState;
    if (f.writecb = l, f.writechunk = o, f.writeencoding = u, !f.transforming) {
      var c = this._readableState;
      (f.needTransform || c.needReadable || c.length < c.highWaterMark) && this._read(c.highWaterMark);
    }
  }, n.prototype._read = function(o) {
    var u = this._transformState;
    u.writechunk !== null && u.writecb && !u.transforming ? (u.transforming = !0, this._transform(u.writechunk, u.writeencoding, u.afterTransform)) : u.needTransform = !0;
  }, n.prototype._destroy = function(o, u) {
    var l = this;
    r.prototype._destroy.call(this, o, function(f) {
      u(f), l.emit("close");
    });
  };
  function a(o, u, l) {
    if (u) return o.emit("error", u);
    if (l != null && o.push(l), o._writableState.length) throw new Error("Calling transform done when ws.length != 0");
    if (o._transformState.transforming) throw new Error("Calling transform done when still transforming");
    return o.push(null);
  }
  return _stream_transform;
}
var _stream_passthrough, hasRequired_stream_passthrough;
function require_stream_passthrough() {
  if (hasRequired_stream_passthrough) return _stream_passthrough;
  hasRequired_stream_passthrough = 1, _stream_passthrough = t;
  var r = require_stream_transform(), e = Object.create(requireUtil());
  e.inherits = requireInherits_browser(), e.inherits(t, r);
  function t(n) {
    if (!(this instanceof t)) return new t(n);
    r.call(this, n);
  }
  return t.prototype._transform = function(n, s, a) {
    a(null, n);
  }, _stream_passthrough;
}
var hasRequiredReadableBrowser;
function requireReadableBrowser() {
  return hasRequiredReadableBrowser || (hasRequiredReadableBrowser = 1, function(r, e) {
    e = r.exports = require_stream_readable(), e.Stream = e, e.Readable = e, e.Writable = require_stream_writable(), e.Duplex = require_stream_duplex(), e.Transform = require_stream_transform(), e.PassThrough = require_stream_passthrough();
  }(readableBrowser, readableBrowser.exports)), readableBrowser.exports;
}
var sign$3 = { exports: {} }, bn$1 = { exports: {} }, bn = bn$1.exports, hasRequiredBn;
function requireBn() {
  return hasRequiredBn || (hasRequiredBn = 1, function(r) {
    (function(e, t) {
      function n(S, x) {
        if (!S) throw new Error(x || "Assertion failed");
      }
      function s(S, x) {
        S.super_ = x;
        var C = function() {
        };
        C.prototype = x.prototype, S.prototype = new C(), S.prototype.constructor = S;
      }
      function a(S, x, C) {
        if (a.isBN(S))
          return S;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, S !== null && ((x === "le" || x === "be") && (C = x, x = 10), this._init(S || 0, x || 10, C || "be"));
      }
      typeof e == "object" ? e.exports = a : t.BN = a, a.BN = a, a.wordSize = 26;
      var o;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? o = window.Buffer : o = requireDist().Buffer;
      } catch {
      }
      a.isBN = function(x) {
        return x instanceof a ? !0 : x !== null && typeof x == "object" && x.constructor.wordSize === a.wordSize && Array.isArray(x.words);
      }, a.max = function(x, C) {
        return x.cmp(C) > 0 ? x : C;
      }, a.min = function(x, C) {
        return x.cmp(C) < 0 ? x : C;
      }, a.prototype._init = function(x, C, A) {
        if (typeof x == "number")
          return this._initNumber(x, C, A);
        if (typeof x == "object")
          return this._initArray(x, C, A);
        C === "hex" && (C = 16), n(C === (C | 0) && C >= 2 && C <= 36), x = x.toString().replace(/\s+/g, "");
        var N = 0;
        x[0] === "-" && (N++, this.negative = 1), N < x.length && (C === 16 ? this._parseHex(x, N, A) : (this._parseBase(x, C, N), A === "le" && this._initArray(this.toArray(), C, A)));
      }, a.prototype._initNumber = function(x, C, A) {
        x < 0 && (this.negative = 1, x = -x), x < 67108864 ? (this.words = [x & 67108863], this.length = 1) : x < 4503599627370496 ? (this.words = [
          x & 67108863,
          x / 67108864 & 67108863
        ], this.length = 2) : (n(x < 9007199254740992), this.words = [
          x & 67108863,
          x / 67108864 & 67108863,
          1
        ], this.length = 3), A === "le" && this._initArray(this.toArray(), C, A);
      }, a.prototype._initArray = function(x, C, A) {
        if (n(typeof x.length == "number"), x.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(x.length / 3), this.words = new Array(this.length);
        for (var N = 0; N < this.length; N++)
          this.words[N] = 0;
        var k, D, E = 0;
        if (A === "be")
          for (N = x.length - 1, k = 0; N >= 0; N -= 3)
            D = x[N] | x[N - 1] << 8 | x[N - 2] << 16, this.words[k] |= D << E & 67108863, this.words[k + 1] = D >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, k++);
        else if (A === "le")
          for (N = 0, k = 0; N < x.length; N += 3)
            D = x[N] | x[N + 1] << 8 | x[N + 2] << 16, this.words[k] |= D << E & 67108863, this.words[k + 1] = D >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, k++);
        return this._strip();
      };
      function u(S, x) {
        var C = S.charCodeAt(x);
        if (C >= 48 && C <= 57)
          return C - 48;
        if (C >= 65 && C <= 70)
          return C - 55;
        if (C >= 97 && C <= 102)
          return C - 87;
        n(!1, "Invalid character in " + S);
      }
      function l(S, x, C) {
        var A = u(S, C);
        return C - 1 >= x && (A |= u(S, C - 1) << 4), A;
      }
      a.prototype._parseHex = function(x, C, A) {
        this.length = Math.ceil((x.length - C) / 6), this.words = new Array(this.length);
        for (var N = 0; N < this.length; N++)
          this.words[N] = 0;
        var k = 0, D = 0, E;
        if (A === "be")
          for (N = x.length - 1; N >= C; N -= 2)
            E = l(x, C, N) << k, this.words[D] |= E & 67108863, k >= 18 ? (k -= 18, D += 1, this.words[D] |= E >>> 26) : k += 8;
        else {
          var M = x.length - C;
          for (N = M % 2 === 0 ? C + 1 : C; N < x.length; N += 2)
            E = l(x, C, N) << k, this.words[D] |= E & 67108863, k >= 18 ? (k -= 18, D += 1, this.words[D] |= E >>> 26) : k += 8;
        }
        this._strip();
      };
      function f(S, x, C, A) {
        for (var N = 0, k = 0, D = Math.min(S.length, C), E = x; E < D; E++) {
          var M = S.charCodeAt(E) - 48;
          N *= A, M >= 49 ? k = M - 49 + 10 : M >= 17 ? k = M - 17 + 10 : k = M, n(M >= 0 && k < A, "Invalid character"), N += k;
        }
        return N;
      }
      a.prototype._parseBase = function(x, C, A) {
        this.words = [0], this.length = 1;
        for (var N = 0, k = 1; k <= 67108863; k *= C)
          N++;
        N--, k = k / C | 0;
        for (var D = x.length - A, E = D % N, M = Math.min(D, D - E) + A, P = 0, z = A; z < M; z += N)
          P = f(x, z, z + N, C), this.imuln(k), this.words[0] + P < 67108864 ? this.words[0] += P : this._iaddn(P);
        if (E !== 0) {
          var J = 1;
          for (P = f(x, z, x.length, C), z = 0; z < E; z++)
            J *= C;
          this.imuln(J), this.words[0] + P < 67108864 ? this.words[0] += P : this._iaddn(P);
        }
        this._strip();
      }, a.prototype.copy = function(x) {
        x.words = new Array(this.length);
        for (var C = 0; C < this.length; C++)
          x.words[C] = this.words[C];
        x.length = this.length, x.negative = this.negative, x.red = this.red;
      };
      function c(S, x) {
        S.words = x.words, S.length = x.length, S.negative = x.negative, S.red = x.red;
      }
      if (a.prototype._move = function(x) {
        c(x, this);
      }, a.prototype.clone = function() {
        var x = new a(null);
        return this.copy(x), x;
      }, a.prototype._expand = function(x) {
        for (; this.length < x; )
          this.words[this.length++] = 0;
        return this;
      }, a.prototype._strip = function() {
        for (; this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, a.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, typeof Symbol < "u" && typeof Symbol.for == "function")
        try {
          a.prototype[Symbol.for("nodejs.util.inspect.custom")] = h;
        } catch {
          a.prototype.inspect = h;
        }
      else
        a.prototype.inspect = h;
      function h() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var d = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ], m = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ], g = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      a.prototype.toString = function(x, C) {
        x = x || 10, C = C | 0 || 1;
        var A;
        if (x === 16 || x === "hex") {
          A = "";
          for (var N = 0, k = 0, D = 0; D < this.length; D++) {
            var E = this.words[D], M = ((E << N | k) & 16777215).toString(16);
            k = E >>> 24 - N & 16777215, N += 2, N >= 26 && (N -= 26, D--), k !== 0 || D !== this.length - 1 ? A = d[6 - M.length] + M + A : A = M + A;
          }
          for (k !== 0 && (A = k.toString(16) + A); A.length % C !== 0; )
            A = "0" + A;
          return this.negative !== 0 && (A = "-" + A), A;
        }
        if (x === (x | 0) && x >= 2 && x <= 36) {
          var P = m[x], z = g[x];
          A = "";
          var J = this.clone();
          for (J.negative = 0; !J.isZero(); ) {
            var re = J.modrn(z).toString(x);
            J = J.idivn(z), J.isZero() ? A = re + A : A = d[P - re.length] + re + A;
          }
          for (this.isZero() && (A = "0" + A); A.length % C !== 0; )
            A = "0" + A;
          return this.negative !== 0 && (A = "-" + A), A;
        }
        n(!1, "Base should be between 2 and 36");
      }, a.prototype.toNumber = function() {
        var x = this.words[0];
        return this.length === 2 ? x += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? x += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && n(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -x : x;
      }, a.prototype.toJSON = function() {
        return this.toString(16, 2);
      }, o && (a.prototype.toBuffer = function(x, C) {
        return this.toArrayLike(o, x, C);
      }), a.prototype.toArray = function(x, C) {
        return this.toArrayLike(Array, x, C);
      };
      var y = function(x, C) {
        return x.allocUnsafe ? x.allocUnsafe(C) : new x(C);
      };
      a.prototype.toArrayLike = function(x, C, A) {
        this._strip();
        var N = this.byteLength(), k = A || Math.max(1, N);
        n(N <= k, "byte array longer than desired length"), n(k > 0, "Requested array length <= 0");
        var D = y(x, k), E = C === "le" ? "LE" : "BE";
        return this["_toArrayLike" + E](D, N), D;
      }, a.prototype._toArrayLikeLE = function(x, C) {
        for (var A = 0, N = 0, k = 0, D = 0; k < this.length; k++) {
          var E = this.words[k] << D | N;
          x[A++] = E & 255, A < x.length && (x[A++] = E >> 8 & 255), A < x.length && (x[A++] = E >> 16 & 255), D === 6 ? (A < x.length && (x[A++] = E >> 24 & 255), N = 0, D = 0) : (N = E >>> 24, D += 2);
        }
        if (A < x.length)
          for (x[A++] = N; A < x.length; )
            x[A++] = 0;
      }, a.prototype._toArrayLikeBE = function(x, C) {
        for (var A = x.length - 1, N = 0, k = 0, D = 0; k < this.length; k++) {
          var E = this.words[k] << D | N;
          x[A--] = E & 255, A >= 0 && (x[A--] = E >> 8 & 255), A >= 0 && (x[A--] = E >> 16 & 255), D === 6 ? (A >= 0 && (x[A--] = E >> 24 & 255), N = 0, D = 0) : (N = E >>> 24, D += 2);
        }
        if (A >= 0)
          for (x[A--] = N; A >= 0; )
            x[A--] = 0;
      }, Math.clz32 ? a.prototype._countBits = function(x) {
        return 32 - Math.clz32(x);
      } : a.prototype._countBits = function(x) {
        var C = x, A = 0;
        return C >= 4096 && (A += 13, C >>>= 13), C >= 64 && (A += 7, C >>>= 7), C >= 8 && (A += 4, C >>>= 4), C >= 2 && (A += 2, C >>>= 2), A + C;
      }, a.prototype._zeroBits = function(x) {
        if (x === 0) return 26;
        var C = x, A = 0;
        return C & 8191 || (A += 13, C >>>= 13), C & 127 || (A += 7, C >>>= 7), C & 15 || (A += 4, C >>>= 4), C & 3 || (A += 2, C >>>= 2), C & 1 || A++, A;
      }, a.prototype.bitLength = function() {
        var x = this.words[this.length - 1], C = this._countBits(x);
        return (this.length - 1) * 26 + C;
      };
      function b(S) {
        for (var x = new Array(S.bitLength()), C = 0; C < x.length; C++) {
          var A = C / 26 | 0, N = C % 26;
          x[C] = S.words[A] >>> N & 1;
        }
        return x;
      }
      a.prototype.zeroBits = function() {
        if (this.isZero()) return 0;
        for (var x = 0, C = 0; C < this.length; C++) {
          var A = this._zeroBits(this.words[C]);
          if (x += A, A !== 26) break;
        }
        return x;
      }, a.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, a.prototype.toTwos = function(x) {
        return this.negative !== 0 ? this.abs().inotn(x).iaddn(1) : this.clone();
      }, a.prototype.fromTwos = function(x) {
        return this.testn(x - 1) ? this.notn(x).iaddn(1).ineg() : this.clone();
      }, a.prototype.isNeg = function() {
        return this.negative !== 0;
      }, a.prototype.neg = function() {
        return this.clone().ineg();
      }, a.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, a.prototype.iuor = function(x) {
        for (; this.length < x.length; )
          this.words[this.length++] = 0;
        for (var C = 0; C < x.length; C++)
          this.words[C] = this.words[C] | x.words[C];
        return this._strip();
      }, a.prototype.ior = function(x) {
        return n((this.negative | x.negative) === 0), this.iuor(x);
      }, a.prototype.or = function(x) {
        return this.length > x.length ? this.clone().ior(x) : x.clone().ior(this);
      }, a.prototype.uor = function(x) {
        return this.length > x.length ? this.clone().iuor(x) : x.clone().iuor(this);
      }, a.prototype.iuand = function(x) {
        var C;
        this.length > x.length ? C = x : C = this;
        for (var A = 0; A < C.length; A++)
          this.words[A] = this.words[A] & x.words[A];
        return this.length = C.length, this._strip();
      }, a.prototype.iand = function(x) {
        return n((this.negative | x.negative) === 0), this.iuand(x);
      }, a.prototype.and = function(x) {
        return this.length > x.length ? this.clone().iand(x) : x.clone().iand(this);
      }, a.prototype.uand = function(x) {
        return this.length > x.length ? this.clone().iuand(x) : x.clone().iuand(this);
      }, a.prototype.iuxor = function(x) {
        var C, A;
        this.length > x.length ? (C = this, A = x) : (C = x, A = this);
        for (var N = 0; N < A.length; N++)
          this.words[N] = C.words[N] ^ A.words[N];
        if (this !== C)
          for (; N < C.length; N++)
            this.words[N] = C.words[N];
        return this.length = C.length, this._strip();
      }, a.prototype.ixor = function(x) {
        return n((this.negative | x.negative) === 0), this.iuxor(x);
      }, a.prototype.xor = function(x) {
        return this.length > x.length ? this.clone().ixor(x) : x.clone().ixor(this);
      }, a.prototype.uxor = function(x) {
        return this.length > x.length ? this.clone().iuxor(x) : x.clone().iuxor(this);
      }, a.prototype.inotn = function(x) {
        n(typeof x == "number" && x >= 0);
        var C = Math.ceil(x / 26) | 0, A = x % 26;
        this._expand(C), A > 0 && C--;
        for (var N = 0; N < C; N++)
          this.words[N] = ~this.words[N] & 67108863;
        return A > 0 && (this.words[N] = ~this.words[N] & 67108863 >> 26 - A), this._strip();
      }, a.prototype.notn = function(x) {
        return this.clone().inotn(x);
      }, a.prototype.setn = function(x, C) {
        n(typeof x == "number" && x >= 0);
        var A = x / 26 | 0, N = x % 26;
        return this._expand(A + 1), C ? this.words[A] = this.words[A] | 1 << N : this.words[A] = this.words[A] & ~(1 << N), this._strip();
      }, a.prototype.iadd = function(x) {
        var C;
        if (this.negative !== 0 && x.negative === 0)
          return this.negative = 0, C = this.isub(x), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && x.negative !== 0)
          return x.negative = 0, C = this.isub(x), x.negative = 1, C._normSign();
        var A, N;
        this.length > x.length ? (A = this, N = x) : (A = x, N = this);
        for (var k = 0, D = 0; D < N.length; D++)
          C = (A.words[D] | 0) + (N.words[D] | 0) + k, this.words[D] = C & 67108863, k = C >>> 26;
        for (; k !== 0 && D < A.length; D++)
          C = (A.words[D] | 0) + k, this.words[D] = C & 67108863, k = C >>> 26;
        if (this.length = A.length, k !== 0)
          this.words[this.length] = k, this.length++;
        else if (A !== this)
          for (; D < A.length; D++)
            this.words[D] = A.words[D];
        return this;
      }, a.prototype.add = function(x) {
        var C;
        return x.negative !== 0 && this.negative === 0 ? (x.negative = 0, C = this.sub(x), x.negative ^= 1, C) : x.negative === 0 && this.negative !== 0 ? (this.negative = 0, C = x.sub(this), this.negative = 1, C) : this.length > x.length ? this.clone().iadd(x) : x.clone().iadd(this);
      }, a.prototype.isub = function(x) {
        if (x.negative !== 0) {
          x.negative = 0;
          var C = this.iadd(x);
          return x.negative = 1, C._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(x), this.negative = 1, this._normSign();
        var A = this.cmp(x);
        if (A === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var N, k;
        A > 0 ? (N = this, k = x) : (N = x, k = this);
        for (var D = 0, E = 0; E < k.length; E++)
          C = (N.words[E] | 0) - (k.words[E] | 0) + D, D = C >> 26, this.words[E] = C & 67108863;
        for (; D !== 0 && E < N.length; E++)
          C = (N.words[E] | 0) + D, D = C >> 26, this.words[E] = C & 67108863;
        if (D === 0 && E < N.length && N !== this)
          for (; E < N.length; E++)
            this.words[E] = N.words[E];
        return this.length = Math.max(this.length, E), N !== this && (this.negative = 1), this._strip();
      }, a.prototype.sub = function(x) {
        return this.clone().isub(x);
      };
      function v(S, x, C) {
        C.negative = x.negative ^ S.negative;
        var A = S.length + x.length | 0;
        C.length = A, A = A - 1 | 0;
        var N = S.words[0] | 0, k = x.words[0] | 0, D = N * k, E = D & 67108863, M = D / 67108864 | 0;
        C.words[0] = E;
        for (var P = 1; P < A; P++) {
          for (var z = M >>> 26, J = M & 67108863, re = Math.min(P, x.length - 1), Q = Math.max(0, P - S.length + 1); Q <= re; Q++) {
            var W = P - Q | 0;
            N = S.words[W] | 0, k = x.words[Q] | 0, D = N * k + J, z += D / 67108864 | 0, J = D & 67108863;
          }
          C.words[P] = J | 0, M = z | 0;
        }
        return M !== 0 ? C.words[P] = M | 0 : C.length--, C._strip();
      }
      var w = function(x, C, A) {
        var N = x.words, k = C.words, D = A.words, E = 0, M, P, z, J = N[0] | 0, re = J & 8191, Q = J >>> 13, W = N[1] | 0, j = W & 8191, te = W >>> 13, se = N[2] | 0, X = se & 8191, K = se >>> 13, ae = N[3] | 0, de = ae & 8191, me = ae >>> 13, pe = N[4] | 0, ge = pe & 8191, ye = pe >>> 13, ce = N[5] | 0, $e = ce & 8191, be = ce >>> 13, xe = N[6] | 0, we = xe & 8191, ve = xe >>> 13, Ee = N[7] | 0, De = Ee & 8191, Ce = Ee >>> 13, _e = N[8] | 0, ze = _e & 8191, Y = _e >>> 13, B = N[9] | 0, U = B & 8191, ee = B >>> 13, ie = k[0] | 0, ue = ie & 8191, fe = ie >>> 13, Ie = k[1] | 0, Re = Ie & 8191, Se = Ie >>> 13, Pe = k[2] | 0, Ae = Pe & 8191, Fe = Pe >>> 13, Ve = k[3] | 0, Ue = Ve & 8191, Be = Ve >>> 13, qe = k[4] | 0, Ge = qe & 8191, Z = qe >>> 13, L = k[5] | 0, G = L & 8191, ne = L >>> 13, oe = k[6] | 0, le = oe & 8191, he = oe >>> 13, Ne = k[7] | 0, Me = Ne & 8191, Te = Ne >>> 13, Oe = k[8] | 0, ke = Oe & 8191, Le = Oe >>> 13, je = k[9] | 0, We = je & 8191, He = je >>> 13;
        A.negative = x.negative ^ C.negative, A.length = 19, M = Math.imul(re, ue), P = Math.imul(re, fe), P = P + Math.imul(Q, ue) | 0, z = Math.imul(Q, fe);
        var Ke = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, M = Math.imul(j, ue), P = Math.imul(j, fe), P = P + Math.imul(te, ue) | 0, z = Math.imul(te, fe), M = M + Math.imul(re, Re) | 0, P = P + Math.imul(re, Se) | 0, P = P + Math.imul(Q, Re) | 0, z = z + Math.imul(Q, Se) | 0;
        var Xe = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, M = Math.imul(X, ue), P = Math.imul(X, fe), P = P + Math.imul(K, ue) | 0, z = Math.imul(K, fe), M = M + Math.imul(j, Re) | 0, P = P + Math.imul(j, Se) | 0, P = P + Math.imul(te, Re) | 0, z = z + Math.imul(te, Se) | 0, M = M + Math.imul(re, Ae) | 0, P = P + Math.imul(re, Fe) | 0, P = P + Math.imul(Q, Ae) | 0, z = z + Math.imul(Q, Fe) | 0;
        var Ye = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, M = Math.imul(de, ue), P = Math.imul(de, fe), P = P + Math.imul(me, ue) | 0, z = Math.imul(me, fe), M = M + Math.imul(X, Re) | 0, P = P + Math.imul(X, Se) | 0, P = P + Math.imul(K, Re) | 0, z = z + Math.imul(K, Se) | 0, M = M + Math.imul(j, Ae) | 0, P = P + Math.imul(j, Fe) | 0, P = P + Math.imul(te, Ae) | 0, z = z + Math.imul(te, Fe) | 0, M = M + Math.imul(re, Ue) | 0, P = P + Math.imul(re, Be) | 0, P = P + Math.imul(Q, Ue) | 0, z = z + Math.imul(Q, Be) | 0;
        var Ze = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, M = Math.imul(ge, ue), P = Math.imul(ge, fe), P = P + Math.imul(ye, ue) | 0, z = Math.imul(ye, fe), M = M + Math.imul(de, Re) | 0, P = P + Math.imul(de, Se) | 0, P = P + Math.imul(me, Re) | 0, z = z + Math.imul(me, Se) | 0, M = M + Math.imul(X, Ae) | 0, P = P + Math.imul(X, Fe) | 0, P = P + Math.imul(K, Ae) | 0, z = z + Math.imul(K, Fe) | 0, M = M + Math.imul(j, Ue) | 0, P = P + Math.imul(j, Be) | 0, P = P + Math.imul(te, Ue) | 0, z = z + Math.imul(te, Be) | 0, M = M + Math.imul(re, Ge) | 0, P = P + Math.imul(re, Z) | 0, P = P + Math.imul(Q, Ge) | 0, z = z + Math.imul(Q, Z) | 0;
        var Je = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, M = Math.imul($e, ue), P = Math.imul($e, fe), P = P + Math.imul(be, ue) | 0, z = Math.imul(be, fe), M = M + Math.imul(ge, Re) | 0, P = P + Math.imul(ge, Se) | 0, P = P + Math.imul(ye, Re) | 0, z = z + Math.imul(ye, Se) | 0, M = M + Math.imul(de, Ae) | 0, P = P + Math.imul(de, Fe) | 0, P = P + Math.imul(me, Ae) | 0, z = z + Math.imul(me, Fe) | 0, M = M + Math.imul(X, Ue) | 0, P = P + Math.imul(X, Be) | 0, P = P + Math.imul(K, Ue) | 0, z = z + Math.imul(K, Be) | 0, M = M + Math.imul(j, Ge) | 0, P = P + Math.imul(j, Z) | 0, P = P + Math.imul(te, Ge) | 0, z = z + Math.imul(te, Z) | 0, M = M + Math.imul(re, G) | 0, P = P + Math.imul(re, ne) | 0, P = P + Math.imul(Q, G) | 0, z = z + Math.imul(Q, ne) | 0;
        var Qe = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, M = Math.imul(we, ue), P = Math.imul(we, fe), P = P + Math.imul(ve, ue) | 0, z = Math.imul(ve, fe), M = M + Math.imul($e, Re) | 0, P = P + Math.imul($e, Se) | 0, P = P + Math.imul(be, Re) | 0, z = z + Math.imul(be, Se) | 0, M = M + Math.imul(ge, Ae) | 0, P = P + Math.imul(ge, Fe) | 0, P = P + Math.imul(ye, Ae) | 0, z = z + Math.imul(ye, Fe) | 0, M = M + Math.imul(de, Ue) | 0, P = P + Math.imul(de, Be) | 0, P = P + Math.imul(me, Ue) | 0, z = z + Math.imul(me, Be) | 0, M = M + Math.imul(X, Ge) | 0, P = P + Math.imul(X, Z) | 0, P = P + Math.imul(K, Ge) | 0, z = z + Math.imul(K, Z) | 0, M = M + Math.imul(j, G) | 0, P = P + Math.imul(j, ne) | 0, P = P + Math.imul(te, G) | 0, z = z + Math.imul(te, ne) | 0, M = M + Math.imul(re, le) | 0, P = P + Math.imul(re, he) | 0, P = P + Math.imul(Q, le) | 0, z = z + Math.imul(Q, he) | 0;
        var et = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, M = Math.imul(De, ue), P = Math.imul(De, fe), P = P + Math.imul(Ce, ue) | 0, z = Math.imul(Ce, fe), M = M + Math.imul(we, Re) | 0, P = P + Math.imul(we, Se) | 0, P = P + Math.imul(ve, Re) | 0, z = z + Math.imul(ve, Se) | 0, M = M + Math.imul($e, Ae) | 0, P = P + Math.imul($e, Fe) | 0, P = P + Math.imul(be, Ae) | 0, z = z + Math.imul(be, Fe) | 0, M = M + Math.imul(ge, Ue) | 0, P = P + Math.imul(ge, Be) | 0, P = P + Math.imul(ye, Ue) | 0, z = z + Math.imul(ye, Be) | 0, M = M + Math.imul(de, Ge) | 0, P = P + Math.imul(de, Z) | 0, P = P + Math.imul(me, Ge) | 0, z = z + Math.imul(me, Z) | 0, M = M + Math.imul(X, G) | 0, P = P + Math.imul(X, ne) | 0, P = P + Math.imul(K, G) | 0, z = z + Math.imul(K, ne) | 0, M = M + Math.imul(j, le) | 0, P = P + Math.imul(j, he) | 0, P = P + Math.imul(te, le) | 0, z = z + Math.imul(te, he) | 0, M = M + Math.imul(re, Me) | 0, P = P + Math.imul(re, Te) | 0, P = P + Math.imul(Q, Me) | 0, z = z + Math.imul(Q, Te) | 0;
        var tt = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, M = Math.imul(ze, ue), P = Math.imul(ze, fe), P = P + Math.imul(Y, ue) | 0, z = Math.imul(Y, fe), M = M + Math.imul(De, Re) | 0, P = P + Math.imul(De, Se) | 0, P = P + Math.imul(Ce, Re) | 0, z = z + Math.imul(Ce, Se) | 0, M = M + Math.imul(we, Ae) | 0, P = P + Math.imul(we, Fe) | 0, P = P + Math.imul(ve, Ae) | 0, z = z + Math.imul(ve, Fe) | 0, M = M + Math.imul($e, Ue) | 0, P = P + Math.imul($e, Be) | 0, P = P + Math.imul(be, Ue) | 0, z = z + Math.imul(be, Be) | 0, M = M + Math.imul(ge, Ge) | 0, P = P + Math.imul(ge, Z) | 0, P = P + Math.imul(ye, Ge) | 0, z = z + Math.imul(ye, Z) | 0, M = M + Math.imul(de, G) | 0, P = P + Math.imul(de, ne) | 0, P = P + Math.imul(me, G) | 0, z = z + Math.imul(me, ne) | 0, M = M + Math.imul(X, le) | 0, P = P + Math.imul(X, he) | 0, P = P + Math.imul(K, le) | 0, z = z + Math.imul(K, he) | 0, M = M + Math.imul(j, Me) | 0, P = P + Math.imul(j, Te) | 0, P = P + Math.imul(te, Me) | 0, z = z + Math.imul(te, Te) | 0, M = M + Math.imul(re, ke) | 0, P = P + Math.imul(re, Le) | 0, P = P + Math.imul(Q, ke) | 0, z = z + Math.imul(Q, Le) | 0;
        var rt = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, M = Math.imul(U, ue), P = Math.imul(U, fe), P = P + Math.imul(ee, ue) | 0, z = Math.imul(ee, fe), M = M + Math.imul(ze, Re) | 0, P = P + Math.imul(ze, Se) | 0, P = P + Math.imul(Y, Re) | 0, z = z + Math.imul(Y, Se) | 0, M = M + Math.imul(De, Ae) | 0, P = P + Math.imul(De, Fe) | 0, P = P + Math.imul(Ce, Ae) | 0, z = z + Math.imul(Ce, Fe) | 0, M = M + Math.imul(we, Ue) | 0, P = P + Math.imul(we, Be) | 0, P = P + Math.imul(ve, Ue) | 0, z = z + Math.imul(ve, Be) | 0, M = M + Math.imul($e, Ge) | 0, P = P + Math.imul($e, Z) | 0, P = P + Math.imul(be, Ge) | 0, z = z + Math.imul(be, Z) | 0, M = M + Math.imul(ge, G) | 0, P = P + Math.imul(ge, ne) | 0, P = P + Math.imul(ye, G) | 0, z = z + Math.imul(ye, ne) | 0, M = M + Math.imul(de, le) | 0, P = P + Math.imul(de, he) | 0, P = P + Math.imul(me, le) | 0, z = z + Math.imul(me, he) | 0, M = M + Math.imul(X, Me) | 0, P = P + Math.imul(X, Te) | 0, P = P + Math.imul(K, Me) | 0, z = z + Math.imul(K, Te) | 0, M = M + Math.imul(j, ke) | 0, P = P + Math.imul(j, Le) | 0, P = P + Math.imul(te, ke) | 0, z = z + Math.imul(te, Le) | 0, M = M + Math.imul(re, We) | 0, P = P + Math.imul(re, He) | 0, P = P + Math.imul(Q, We) | 0, z = z + Math.imul(Q, He) | 0;
        var nt = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (nt >>> 26) | 0, nt &= 67108863, M = Math.imul(U, Re), P = Math.imul(U, Se), P = P + Math.imul(ee, Re) | 0, z = Math.imul(ee, Se), M = M + Math.imul(ze, Ae) | 0, P = P + Math.imul(ze, Fe) | 0, P = P + Math.imul(Y, Ae) | 0, z = z + Math.imul(Y, Fe) | 0, M = M + Math.imul(De, Ue) | 0, P = P + Math.imul(De, Be) | 0, P = P + Math.imul(Ce, Ue) | 0, z = z + Math.imul(Ce, Be) | 0, M = M + Math.imul(we, Ge) | 0, P = P + Math.imul(we, Z) | 0, P = P + Math.imul(ve, Ge) | 0, z = z + Math.imul(ve, Z) | 0, M = M + Math.imul($e, G) | 0, P = P + Math.imul($e, ne) | 0, P = P + Math.imul(be, G) | 0, z = z + Math.imul(be, ne) | 0, M = M + Math.imul(ge, le) | 0, P = P + Math.imul(ge, he) | 0, P = P + Math.imul(ye, le) | 0, z = z + Math.imul(ye, he) | 0, M = M + Math.imul(de, Me) | 0, P = P + Math.imul(de, Te) | 0, P = P + Math.imul(me, Me) | 0, z = z + Math.imul(me, Te) | 0, M = M + Math.imul(X, ke) | 0, P = P + Math.imul(X, Le) | 0, P = P + Math.imul(K, ke) | 0, z = z + Math.imul(K, Le) | 0, M = M + Math.imul(j, We) | 0, P = P + Math.imul(j, He) | 0, P = P + Math.imul(te, We) | 0, z = z + Math.imul(te, He) | 0;
        var st = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (st >>> 26) | 0, st &= 67108863, M = Math.imul(U, Ae), P = Math.imul(U, Fe), P = P + Math.imul(ee, Ae) | 0, z = Math.imul(ee, Fe), M = M + Math.imul(ze, Ue) | 0, P = P + Math.imul(ze, Be) | 0, P = P + Math.imul(Y, Ue) | 0, z = z + Math.imul(Y, Be) | 0, M = M + Math.imul(De, Ge) | 0, P = P + Math.imul(De, Z) | 0, P = P + Math.imul(Ce, Ge) | 0, z = z + Math.imul(Ce, Z) | 0, M = M + Math.imul(we, G) | 0, P = P + Math.imul(we, ne) | 0, P = P + Math.imul(ve, G) | 0, z = z + Math.imul(ve, ne) | 0, M = M + Math.imul($e, le) | 0, P = P + Math.imul($e, he) | 0, P = P + Math.imul(be, le) | 0, z = z + Math.imul(be, he) | 0, M = M + Math.imul(ge, Me) | 0, P = P + Math.imul(ge, Te) | 0, P = P + Math.imul(ye, Me) | 0, z = z + Math.imul(ye, Te) | 0, M = M + Math.imul(de, ke) | 0, P = P + Math.imul(de, Le) | 0, P = P + Math.imul(me, ke) | 0, z = z + Math.imul(me, Le) | 0, M = M + Math.imul(X, We) | 0, P = P + Math.imul(X, He) | 0, P = P + Math.imul(K, We) | 0, z = z + Math.imul(K, He) | 0;
        var at = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (at >>> 26) | 0, at &= 67108863, M = Math.imul(U, Ue), P = Math.imul(U, Be), P = P + Math.imul(ee, Ue) | 0, z = Math.imul(ee, Be), M = M + Math.imul(ze, Ge) | 0, P = P + Math.imul(ze, Z) | 0, P = P + Math.imul(Y, Ge) | 0, z = z + Math.imul(Y, Z) | 0, M = M + Math.imul(De, G) | 0, P = P + Math.imul(De, ne) | 0, P = P + Math.imul(Ce, G) | 0, z = z + Math.imul(Ce, ne) | 0, M = M + Math.imul(we, le) | 0, P = P + Math.imul(we, he) | 0, P = P + Math.imul(ve, le) | 0, z = z + Math.imul(ve, he) | 0, M = M + Math.imul($e, Me) | 0, P = P + Math.imul($e, Te) | 0, P = P + Math.imul(be, Me) | 0, z = z + Math.imul(be, Te) | 0, M = M + Math.imul(ge, ke) | 0, P = P + Math.imul(ge, Le) | 0, P = P + Math.imul(ye, ke) | 0, z = z + Math.imul(ye, Le) | 0, M = M + Math.imul(de, We) | 0, P = P + Math.imul(de, He) | 0, P = P + Math.imul(me, We) | 0, z = z + Math.imul(me, He) | 0;
        var it = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (it >>> 26) | 0, it &= 67108863, M = Math.imul(U, Ge), P = Math.imul(U, Z), P = P + Math.imul(ee, Ge) | 0, z = Math.imul(ee, Z), M = M + Math.imul(ze, G) | 0, P = P + Math.imul(ze, ne) | 0, P = P + Math.imul(Y, G) | 0, z = z + Math.imul(Y, ne) | 0, M = M + Math.imul(De, le) | 0, P = P + Math.imul(De, he) | 0, P = P + Math.imul(Ce, le) | 0, z = z + Math.imul(Ce, he) | 0, M = M + Math.imul(we, Me) | 0, P = P + Math.imul(we, Te) | 0, P = P + Math.imul(ve, Me) | 0, z = z + Math.imul(ve, Te) | 0, M = M + Math.imul($e, ke) | 0, P = P + Math.imul($e, Le) | 0, P = P + Math.imul(be, ke) | 0, z = z + Math.imul(be, Le) | 0, M = M + Math.imul(ge, We) | 0, P = P + Math.imul(ge, He) | 0, P = P + Math.imul(ye, We) | 0, z = z + Math.imul(ye, He) | 0;
        var ot = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (ot >>> 26) | 0, ot &= 67108863, M = Math.imul(U, G), P = Math.imul(U, ne), P = P + Math.imul(ee, G) | 0, z = Math.imul(ee, ne), M = M + Math.imul(ze, le) | 0, P = P + Math.imul(ze, he) | 0, P = P + Math.imul(Y, le) | 0, z = z + Math.imul(Y, he) | 0, M = M + Math.imul(De, Me) | 0, P = P + Math.imul(De, Te) | 0, P = P + Math.imul(Ce, Me) | 0, z = z + Math.imul(Ce, Te) | 0, M = M + Math.imul(we, ke) | 0, P = P + Math.imul(we, Le) | 0, P = P + Math.imul(ve, ke) | 0, z = z + Math.imul(ve, Le) | 0, M = M + Math.imul($e, We) | 0, P = P + Math.imul($e, He) | 0, P = P + Math.imul(be, We) | 0, z = z + Math.imul(be, He) | 0;
        var ut = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (ut >>> 26) | 0, ut &= 67108863, M = Math.imul(U, le), P = Math.imul(U, he), P = P + Math.imul(ee, le) | 0, z = Math.imul(ee, he), M = M + Math.imul(ze, Me) | 0, P = P + Math.imul(ze, Te) | 0, P = P + Math.imul(Y, Me) | 0, z = z + Math.imul(Y, Te) | 0, M = M + Math.imul(De, ke) | 0, P = P + Math.imul(De, Le) | 0, P = P + Math.imul(Ce, ke) | 0, z = z + Math.imul(Ce, Le) | 0, M = M + Math.imul(we, We) | 0, P = P + Math.imul(we, He) | 0, P = P + Math.imul(ve, We) | 0, z = z + Math.imul(ve, He) | 0;
        var lt = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (lt >>> 26) | 0, lt &= 67108863, M = Math.imul(U, Me), P = Math.imul(U, Te), P = P + Math.imul(ee, Me) | 0, z = Math.imul(ee, Te), M = M + Math.imul(ze, ke) | 0, P = P + Math.imul(ze, Le) | 0, P = P + Math.imul(Y, ke) | 0, z = z + Math.imul(Y, Le) | 0, M = M + Math.imul(De, We) | 0, P = P + Math.imul(De, He) | 0, P = P + Math.imul(Ce, We) | 0, z = z + Math.imul(Ce, He) | 0;
        var ct = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (ct >>> 26) | 0, ct &= 67108863, M = Math.imul(U, ke), P = Math.imul(U, Le), P = P + Math.imul(ee, ke) | 0, z = Math.imul(ee, Le), M = M + Math.imul(ze, We) | 0, P = P + Math.imul(ze, He) | 0, P = P + Math.imul(Y, We) | 0, z = z + Math.imul(Y, He) | 0;
        var ft = (E + M | 0) + ((P & 8191) << 13) | 0;
        E = (z + (P >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, M = Math.imul(U, We), P = Math.imul(U, He), P = P + Math.imul(ee, We) | 0, z = Math.imul(ee, He);
        var ht = (E + M | 0) + ((P & 8191) << 13) | 0;
        return E = (z + (P >>> 13) | 0) + (ht >>> 26) | 0, ht &= 67108863, D[0] = Ke, D[1] = Xe, D[2] = Ye, D[3] = Ze, D[4] = Je, D[5] = Qe, D[6] = et, D[7] = tt, D[8] = rt, D[9] = nt, D[10] = st, D[11] = at, D[12] = it, D[13] = ot, D[14] = ut, D[15] = lt, D[16] = ct, D[17] = ft, D[18] = ht, E !== 0 && (D[19] = E, A.length++), A;
      };
      Math.imul || (w = v);
      function I(S, x, C) {
        C.negative = x.negative ^ S.negative, C.length = S.length + x.length;
        for (var A = 0, N = 0, k = 0; k < C.length - 1; k++) {
          var D = N;
          N = 0;
          for (var E = A & 67108863, M = Math.min(k, x.length - 1), P = Math.max(0, k - S.length + 1); P <= M; P++) {
            var z = k - P, J = S.words[z] | 0, re = x.words[P] | 0, Q = J * re, W = Q & 67108863;
            D = D + (Q / 67108864 | 0) | 0, W = W + E | 0, E = W & 67108863, D = D + (W >>> 26) | 0, N += D >>> 26, D &= 67108863;
          }
          C.words[k] = E, A = D, D = N;
        }
        return A !== 0 ? C.words[k] = A : C.length--, C._strip();
      }
      function T(S, x, C) {
        return I(S, x, C);
      }
      a.prototype.mulTo = function(x, C) {
        var A, N = this.length + x.length;
        return this.length === 10 && x.length === 10 ? A = w(this, x, C) : N < 63 ? A = v(this, x, C) : N < 1024 ? A = I(this, x, C) : A = T(this, x, C), A;
      }, a.prototype.mul = function(x) {
        var C = new a(null);
        return C.words = new Array(this.length + x.length), this.mulTo(x, C);
      }, a.prototype.mulf = function(x) {
        var C = new a(null);
        return C.words = new Array(this.length + x.length), T(this, x, C);
      }, a.prototype.imul = function(x) {
        return this.clone().mulTo(x, this);
      }, a.prototype.imuln = function(x) {
        var C = x < 0;
        C && (x = -x), n(typeof x == "number"), n(x < 67108864);
        for (var A = 0, N = 0; N < this.length; N++) {
          var k = (this.words[N] | 0) * x, D = (k & 67108863) + (A & 67108863);
          A >>= 26, A += k / 67108864 | 0, A += D >>> 26, this.words[N] = D & 67108863;
        }
        return A !== 0 && (this.words[N] = A, this.length++), this.length = x === 0 ? 1 : this.length, C ? this.ineg() : this;
      }, a.prototype.muln = function(x) {
        return this.clone().imuln(x);
      }, a.prototype.sqr = function() {
        return this.mul(this);
      }, a.prototype.isqr = function() {
        return this.imul(this.clone());
      }, a.prototype.pow = function(x) {
        var C = b(x);
        if (C.length === 0) return new a(1);
        for (var A = this, N = 0; N < C.length && C[N] === 0; N++, A = A.sqr())
          ;
        if (++N < C.length)
          for (var k = A.sqr(); N < C.length; N++, k = k.sqr())
            C[N] !== 0 && (A = A.mul(k));
        return A;
      }, a.prototype.iushln = function(x) {
        n(typeof x == "number" && x >= 0);
        var C = x % 26, A = (x - C) / 26, N = 67108863 >>> 26 - C << 26 - C, k;
        if (C !== 0) {
          var D = 0;
          for (k = 0; k < this.length; k++) {
            var E = this.words[k] & N, M = (this.words[k] | 0) - E << C;
            this.words[k] = M | D, D = E >>> 26 - C;
          }
          D && (this.words[k] = D, this.length++);
        }
        if (A !== 0) {
          for (k = this.length - 1; k >= 0; k--)
            this.words[k + A] = this.words[k];
          for (k = 0; k < A; k++)
            this.words[k] = 0;
          this.length += A;
        }
        return this._strip();
      }, a.prototype.ishln = function(x) {
        return n(this.negative === 0), this.iushln(x);
      }, a.prototype.iushrn = function(x, C, A) {
        n(typeof x == "number" && x >= 0);
        var N;
        C ? N = (C - C % 26) / 26 : N = 0;
        var k = x % 26, D = Math.min((x - k) / 26, this.length), E = 67108863 ^ 67108863 >>> k << k, M = A;
        if (N -= D, N = Math.max(0, N), M) {
          for (var P = 0; P < D; P++)
            M.words[P] = this.words[P];
          M.length = D;
        }
        if (D !== 0) if (this.length > D)
          for (this.length -= D, P = 0; P < this.length; P++)
            this.words[P] = this.words[P + D];
        else
          this.words[0] = 0, this.length = 1;
        var z = 0;
        for (P = this.length - 1; P >= 0 && (z !== 0 || P >= N); P--) {
          var J = this.words[P] | 0;
          this.words[P] = z << 26 - k | J >>> k, z = J & E;
        }
        return M && z !== 0 && (M.words[M.length++] = z), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();
      }, a.prototype.ishrn = function(x, C, A) {
        return n(this.negative === 0), this.iushrn(x, C, A);
      }, a.prototype.shln = function(x) {
        return this.clone().ishln(x);
      }, a.prototype.ushln = function(x) {
        return this.clone().iushln(x);
      }, a.prototype.shrn = function(x) {
        return this.clone().ishrn(x);
      }, a.prototype.ushrn = function(x) {
        return this.clone().iushrn(x);
      }, a.prototype.testn = function(x) {
        n(typeof x == "number" && x >= 0);
        var C = x % 26, A = (x - C) / 26, N = 1 << C;
        if (this.length <= A) return !1;
        var k = this.words[A];
        return !!(k & N);
      }, a.prototype.imaskn = function(x) {
        n(typeof x == "number" && x >= 0);
        var C = x % 26, A = (x - C) / 26;
        if (n(this.negative === 0, "imaskn works only with positive numbers"), this.length <= A)
          return this;
        if (C !== 0 && A++, this.length = Math.min(A, this.length), C !== 0) {
          var N = 67108863 ^ 67108863 >>> C << C;
          this.words[this.length - 1] &= N;
        }
        return this._strip();
      }, a.prototype.maskn = function(x) {
        return this.clone().imaskn(x);
      }, a.prototype.iaddn = function(x) {
        return n(typeof x == "number"), n(x < 67108864), x < 0 ? this.isubn(-x) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= x ? (this.words[0] = x - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(x), this.negative = 1, this) : this._iaddn(x);
      }, a.prototype._iaddn = function(x) {
        this.words[0] += x;
        for (var C = 0; C < this.length && this.words[C] >= 67108864; C++)
          this.words[C] -= 67108864, C === this.length - 1 ? this.words[C + 1] = 1 : this.words[C + 1]++;
        return this.length = Math.max(this.length, C + 1), this;
      }, a.prototype.isubn = function(x) {
        if (n(typeof x == "number"), n(x < 67108864), x < 0) return this.iaddn(-x);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(x), this.negative = 1, this;
        if (this.words[0] -= x, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var C = 0; C < this.length && this.words[C] < 0; C++)
            this.words[C] += 67108864, this.words[C + 1] -= 1;
        return this._strip();
      }, a.prototype.addn = function(x) {
        return this.clone().iaddn(x);
      }, a.prototype.subn = function(x) {
        return this.clone().isubn(x);
      }, a.prototype.iabs = function() {
        return this.negative = 0, this;
      }, a.prototype.abs = function() {
        return this.clone().iabs();
      }, a.prototype._ishlnsubmul = function(x, C, A) {
        var N = x.length + A, k;
        this._expand(N);
        var D, E = 0;
        for (k = 0; k < x.length; k++) {
          D = (this.words[k + A] | 0) + E;
          var M = (x.words[k] | 0) * C;
          D -= M & 67108863, E = (D >> 26) - (M / 67108864 | 0), this.words[k + A] = D & 67108863;
        }
        for (; k < this.length - A; k++)
          D = (this.words[k + A] | 0) + E, E = D >> 26, this.words[k + A] = D & 67108863;
        if (E === 0) return this._strip();
        for (n(E === -1), E = 0, k = 0; k < this.length; k++)
          D = -(this.words[k] | 0) + E, E = D >> 26, this.words[k] = D & 67108863;
        return this.negative = 1, this._strip();
      }, a.prototype._wordDiv = function(x, C) {
        var A = this.length - x.length, N = this.clone(), k = x, D = k.words[k.length - 1] | 0, E = this._countBits(D);
        A = 26 - E, A !== 0 && (k = k.ushln(A), N.iushln(A), D = k.words[k.length - 1] | 0);
        var M = N.length - k.length, P;
        if (C !== "mod") {
          P = new a(null), P.length = M + 1, P.words = new Array(P.length);
          for (var z = 0; z < P.length; z++)
            P.words[z] = 0;
        }
        var J = N.clone()._ishlnsubmul(k, 1, M);
        J.negative === 0 && (N = J, P && (P.words[M] = 1));
        for (var re = M - 1; re >= 0; re--) {
          var Q = (N.words[k.length + re] | 0) * 67108864 + (N.words[k.length + re - 1] | 0);
          for (Q = Math.min(Q / D | 0, 67108863), N._ishlnsubmul(k, Q, re); N.negative !== 0; )
            Q--, N.negative = 0, N._ishlnsubmul(k, 1, re), N.isZero() || (N.negative ^= 1);
          P && (P.words[re] = Q);
        }
        return P && P._strip(), N._strip(), C !== "div" && A !== 0 && N.iushrn(A), {
          div: P || null,
          mod: N
        };
      }, a.prototype.divmod = function(x, C, A) {
        if (n(!x.isZero()), this.isZero())
          return {
            div: new a(0),
            mod: new a(0)
          };
        var N, k, D;
        return this.negative !== 0 && x.negative === 0 ? (D = this.neg().divmod(x, C), C !== "mod" && (N = D.div.neg()), C !== "div" && (k = D.mod.neg(), A && k.negative !== 0 && k.iadd(x)), {
          div: N,
          mod: k
        }) : this.negative === 0 && x.negative !== 0 ? (D = this.divmod(x.neg(), C), C !== "mod" && (N = D.div.neg()), {
          div: N,
          mod: D.mod
        }) : this.negative & x.negative ? (D = this.neg().divmod(x.neg(), C), C !== "div" && (k = D.mod.neg(), A && k.negative !== 0 && k.isub(x)), {
          div: D.div,
          mod: k
        }) : x.length > this.length || this.cmp(x) < 0 ? {
          div: new a(0),
          mod: this
        } : x.length === 1 ? C === "div" ? {
          div: this.divn(x.words[0]),
          mod: null
        } : C === "mod" ? {
          div: null,
          mod: new a(this.modrn(x.words[0]))
        } : {
          div: this.divn(x.words[0]),
          mod: new a(this.modrn(x.words[0]))
        } : this._wordDiv(x, C);
      }, a.prototype.div = function(x) {
        return this.divmod(x, "div", !1).div;
      }, a.prototype.mod = function(x) {
        return this.divmod(x, "mod", !1).mod;
      }, a.prototype.umod = function(x) {
        return this.divmod(x, "mod", !0).mod;
      }, a.prototype.divRound = function(x) {
        var C = this.divmod(x);
        if (C.mod.isZero()) return C.div;
        var A = C.div.negative !== 0 ? C.mod.isub(x) : C.mod, N = x.ushrn(1), k = x.andln(1), D = A.cmp(N);
        return D < 0 || k === 1 && D === 0 ? C.div : C.div.negative !== 0 ? C.div.isubn(1) : C.div.iaddn(1);
      }, a.prototype.modrn = function(x) {
        var C = x < 0;
        C && (x = -x), n(x <= 67108863);
        for (var A = (1 << 26) % x, N = 0, k = this.length - 1; k >= 0; k--)
          N = (A * N + (this.words[k] | 0)) % x;
        return C ? -N : N;
      }, a.prototype.modn = function(x) {
        return this.modrn(x);
      }, a.prototype.idivn = function(x) {
        var C = x < 0;
        C && (x = -x), n(x <= 67108863);
        for (var A = 0, N = this.length - 1; N >= 0; N--) {
          var k = (this.words[N] | 0) + A * 67108864;
          this.words[N] = k / x | 0, A = k % x;
        }
        return this._strip(), C ? this.ineg() : this;
      }, a.prototype.divn = function(x) {
        return this.clone().idivn(x);
      }, a.prototype.egcd = function(x) {
        n(x.negative === 0), n(!x.isZero());
        var C = this, A = x.clone();
        C.negative !== 0 ? C = C.umod(x) : C = C.clone();
        for (var N = new a(1), k = new a(0), D = new a(0), E = new a(1), M = 0; C.isEven() && A.isEven(); )
          C.iushrn(1), A.iushrn(1), ++M;
        for (var P = A.clone(), z = C.clone(); !C.isZero(); ) {
          for (var J = 0, re = 1; !(C.words[0] & re) && J < 26; ++J, re <<= 1) ;
          if (J > 0)
            for (C.iushrn(J); J-- > 0; )
              (N.isOdd() || k.isOdd()) && (N.iadd(P), k.isub(z)), N.iushrn(1), k.iushrn(1);
          for (var Q = 0, W = 1; !(A.words[0] & W) && Q < 26; ++Q, W <<= 1) ;
          if (Q > 0)
            for (A.iushrn(Q); Q-- > 0; )
              (D.isOdd() || E.isOdd()) && (D.iadd(P), E.isub(z)), D.iushrn(1), E.iushrn(1);
          C.cmp(A) >= 0 ? (C.isub(A), N.isub(D), k.isub(E)) : (A.isub(C), D.isub(N), E.isub(k));
        }
        return {
          a: D,
          b: E,
          gcd: A.iushln(M)
        };
      }, a.prototype._invmp = function(x) {
        n(x.negative === 0), n(!x.isZero());
        var C = this, A = x.clone();
        C.negative !== 0 ? C = C.umod(x) : C = C.clone();
        for (var N = new a(1), k = new a(0), D = A.clone(); C.cmpn(1) > 0 && A.cmpn(1) > 0; ) {
          for (var E = 0, M = 1; !(C.words[0] & M) && E < 26; ++E, M <<= 1) ;
          if (E > 0)
            for (C.iushrn(E); E-- > 0; )
              N.isOdd() && N.iadd(D), N.iushrn(1);
          for (var P = 0, z = 1; !(A.words[0] & z) && P < 26; ++P, z <<= 1) ;
          if (P > 0)
            for (A.iushrn(P); P-- > 0; )
              k.isOdd() && k.iadd(D), k.iushrn(1);
          C.cmp(A) >= 0 ? (C.isub(A), N.isub(k)) : (A.isub(C), k.isub(N));
        }
        var J;
        return C.cmpn(1) === 0 ? J = N : J = k, J.cmpn(0) < 0 && J.iadd(x), J;
      }, a.prototype.gcd = function(x) {
        if (this.isZero()) return x.abs();
        if (x.isZero()) return this.abs();
        var C = this.clone(), A = x.clone();
        C.negative = 0, A.negative = 0;
        for (var N = 0; C.isEven() && A.isEven(); N++)
          C.iushrn(1), A.iushrn(1);
        do {
          for (; C.isEven(); )
            C.iushrn(1);
          for (; A.isEven(); )
            A.iushrn(1);
          var k = C.cmp(A);
          if (k < 0) {
            var D = C;
            C = A, A = D;
          } else if (k === 0 || A.cmpn(1) === 0)
            break;
          C.isub(A);
        } while (!0);
        return A.iushln(N);
      }, a.prototype.invm = function(x) {
        return this.egcd(x).a.umod(x);
      }, a.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, a.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, a.prototype.andln = function(x) {
        return this.words[0] & x;
      }, a.prototype.bincn = function(x) {
        n(typeof x == "number");
        var C = x % 26, A = (x - C) / 26, N = 1 << C;
        if (this.length <= A)
          return this._expand(A + 1), this.words[A] |= N, this;
        for (var k = N, D = A; k !== 0 && D < this.length; D++) {
          var E = this.words[D] | 0;
          E += k, k = E >>> 26, E &= 67108863, this.words[D] = E;
        }
        return k !== 0 && (this.words[D] = k, this.length++), this;
      }, a.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, a.prototype.cmpn = function(x) {
        var C = x < 0;
        if (this.negative !== 0 && !C) return -1;
        if (this.negative === 0 && C) return 1;
        this._strip();
        var A;
        if (this.length > 1)
          A = 1;
        else {
          C && (x = -x), n(x <= 67108863, "Number is too big");
          var N = this.words[0] | 0;
          A = N === x ? 0 : N < x ? -1 : 1;
        }
        return this.negative !== 0 ? -A | 0 : A;
      }, a.prototype.cmp = function(x) {
        if (this.negative !== 0 && x.negative === 0) return -1;
        if (this.negative === 0 && x.negative !== 0) return 1;
        var C = this.ucmp(x);
        return this.negative !== 0 ? -C | 0 : C;
      }, a.prototype.ucmp = function(x) {
        if (this.length > x.length) return 1;
        if (this.length < x.length) return -1;
        for (var C = 0, A = this.length - 1; A >= 0; A--) {
          var N = this.words[A] | 0, k = x.words[A] | 0;
          if (N !== k) {
            N < k ? C = -1 : N > k && (C = 1);
            break;
          }
        }
        return C;
      }, a.prototype.gtn = function(x) {
        return this.cmpn(x) === 1;
      }, a.prototype.gt = function(x) {
        return this.cmp(x) === 1;
      }, a.prototype.gten = function(x) {
        return this.cmpn(x) >= 0;
      }, a.prototype.gte = function(x) {
        return this.cmp(x) >= 0;
      }, a.prototype.ltn = function(x) {
        return this.cmpn(x) === -1;
      }, a.prototype.lt = function(x) {
        return this.cmp(x) === -1;
      }, a.prototype.lten = function(x) {
        return this.cmpn(x) <= 0;
      }, a.prototype.lte = function(x) {
        return this.cmp(x) <= 0;
      }, a.prototype.eqn = function(x) {
        return this.cmpn(x) === 0;
      }, a.prototype.eq = function(x) {
        return this.cmp(x) === 0;
      }, a.red = function(x) {
        return new R(x);
      }, a.prototype.toRed = function(x) {
        return n(!this.red, "Already a number in reduction context"), n(this.negative === 0, "red works only with positives"), x.convertTo(this)._forceRed(x);
      }, a.prototype.fromRed = function() {
        return n(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, a.prototype._forceRed = function(x) {
        return this.red = x, this;
      }, a.prototype.forceRed = function(x) {
        return n(!this.red, "Already a number in reduction context"), this._forceRed(x);
      }, a.prototype.redAdd = function(x) {
        return n(this.red, "redAdd works only with red numbers"), this.red.add(this, x);
      }, a.prototype.redIAdd = function(x) {
        return n(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, x);
      }, a.prototype.redSub = function(x) {
        return n(this.red, "redSub works only with red numbers"), this.red.sub(this, x);
      }, a.prototype.redISub = function(x) {
        return n(this.red, "redISub works only with red numbers"), this.red.isub(this, x);
      }, a.prototype.redShl = function(x) {
        return n(this.red, "redShl works only with red numbers"), this.red.shl(this, x);
      }, a.prototype.redMul = function(x) {
        return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, x), this.red.mul(this, x);
      }, a.prototype.redIMul = function(x) {
        return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, x), this.red.imul(this, x);
      }, a.prototype.redSqr = function() {
        return n(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, a.prototype.redISqr = function() {
        return n(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, a.prototype.redSqrt = function() {
        return n(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, a.prototype.redInvm = function() {
        return n(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, a.prototype.redNeg = function() {
        return n(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, a.prototype.redPow = function(x) {
        return n(this.red && !x.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, x);
      };
      var _ = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function F(S, x) {
        this.name = S, this.p = new a(x, 16), this.n = this.p.bitLength(), this.k = new a(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      F.prototype._tmp = function() {
        var x = new a(null);
        return x.words = new Array(Math.ceil(this.n / 13)), x;
      }, F.prototype.ireduce = function(x) {
        var C = x, A;
        do
          this.split(C, this.tmp), C = this.imulK(C), C = C.iadd(this.tmp), A = C.bitLength();
        while (A > this.n);
        var N = A < this.n ? -1 : C.ucmp(this.p);
        return N === 0 ? (C.words[0] = 0, C.length = 1) : N > 0 ? C.isub(this.p) : C.strip !== void 0 ? C.strip() : C._strip(), C;
      }, F.prototype.split = function(x, C) {
        x.iushrn(this.n, 0, C);
      }, F.prototype.imulK = function(x) {
        return x.imul(this.k);
      };
      function O() {
        F.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      s(O, F), O.prototype.split = function(x, C) {
        for (var A = 4194303, N = Math.min(x.length, 9), k = 0; k < N; k++)
          C.words[k] = x.words[k];
        if (C.length = N, x.length <= 9) {
          x.words[0] = 0, x.length = 1;
          return;
        }
        var D = x.words[9];
        for (C.words[C.length++] = D & A, k = 10; k < x.length; k++) {
          var E = x.words[k] | 0;
          x.words[k - 10] = (E & A) << 4 | D >>> 22, D = E;
        }
        D >>>= 22, x.words[k - 10] = D, D === 0 && x.length > 10 ? x.length -= 10 : x.length -= 9;
      }, O.prototype.imulK = function(x) {
        x.words[x.length] = 0, x.words[x.length + 1] = 0, x.length += 2;
        for (var C = 0, A = 0; A < x.length; A++) {
          var N = x.words[A] | 0;
          C += N * 977, x.words[A] = C & 67108863, C = N * 64 + (C / 67108864 | 0);
        }
        return x.words[x.length - 1] === 0 && (x.length--, x.words[x.length - 1] === 0 && x.length--), x;
      };
      function q() {
        F.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      s(q, F);
      function V() {
        F.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      s(V, F);
      function H() {
        F.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      s(H, F), H.prototype.imulK = function(x) {
        for (var C = 0, A = 0; A < x.length; A++) {
          var N = (x.words[A] | 0) * 19 + C, k = N & 67108863;
          N >>>= 26, x.words[A] = k, C = N;
        }
        return C !== 0 && (x.words[x.length++] = C), x;
      }, a._prime = function(x) {
        if (_[x]) return _[x];
        var C;
        if (x === "k256")
          C = new O();
        else if (x === "p224")
          C = new q();
        else if (x === "p192")
          C = new V();
        else if (x === "p25519")
          C = new H();
        else
          throw new Error("Unknown prime " + x);
        return _[x] = C, C;
      };
      function R(S) {
        if (typeof S == "string") {
          var x = a._prime(S);
          this.m = x.p, this.prime = x;
        } else
          n(S.gtn(1), "modulus must be greater than 1"), this.m = S, this.prime = null;
      }
      R.prototype._verify1 = function(x) {
        n(x.negative === 0, "red works only with positives"), n(x.red, "red works only with red numbers");
      }, R.prototype._verify2 = function(x, C) {
        n((x.negative | C.negative) === 0, "red works only with positives"), n(
          x.red && x.red === C.red,
          "red works only with red numbers"
        );
      }, R.prototype.imod = function(x) {
        return this.prime ? this.prime.ireduce(x)._forceRed(this) : (c(x, x.umod(this.m)._forceRed(this)), x);
      }, R.prototype.neg = function(x) {
        return x.isZero() ? x.clone() : this.m.sub(x)._forceRed(this);
      }, R.prototype.add = function(x, C) {
        this._verify2(x, C);
        var A = x.add(C);
        return A.cmp(this.m) >= 0 && A.isub(this.m), A._forceRed(this);
      }, R.prototype.iadd = function(x, C) {
        this._verify2(x, C);
        var A = x.iadd(C);
        return A.cmp(this.m) >= 0 && A.isub(this.m), A;
      }, R.prototype.sub = function(x, C) {
        this._verify2(x, C);
        var A = x.sub(C);
        return A.cmpn(0) < 0 && A.iadd(this.m), A._forceRed(this);
      }, R.prototype.isub = function(x, C) {
        this._verify2(x, C);
        var A = x.isub(C);
        return A.cmpn(0) < 0 && A.iadd(this.m), A;
      }, R.prototype.shl = function(x, C) {
        return this._verify1(x), this.imod(x.ushln(C));
      }, R.prototype.imul = function(x, C) {
        return this._verify2(x, C), this.imod(x.imul(C));
      }, R.prototype.mul = function(x, C) {
        return this._verify2(x, C), this.imod(x.mul(C));
      }, R.prototype.isqr = function(x) {
        return this.imul(x, x.clone());
      }, R.prototype.sqr = function(x) {
        return this.mul(x, x);
      }, R.prototype.sqrt = function(x) {
        if (x.isZero()) return x.clone();
        var C = this.m.andln(3);
        if (n(C % 2 === 1), C === 3) {
          var A = this.m.add(new a(1)).iushrn(2);
          return this.pow(x, A);
        }
        for (var N = this.m.subn(1), k = 0; !N.isZero() && N.andln(1) === 0; )
          k++, N.iushrn(1);
        n(!N.isZero());
        var D = new a(1).toRed(this), E = D.redNeg(), M = this.m.subn(1).iushrn(1), P = this.m.bitLength();
        for (P = new a(2 * P * P).toRed(this); this.pow(P, M).cmp(E) !== 0; )
          P.redIAdd(E);
        for (var z = this.pow(P, N), J = this.pow(x, N.addn(1).iushrn(1)), re = this.pow(x, N), Q = k; re.cmp(D) !== 0; ) {
          for (var W = re, j = 0; W.cmp(D) !== 0; j++)
            W = W.redSqr();
          n(j < Q);
          var te = this.pow(z, new a(1).iushln(Q - j - 1));
          J = J.redMul(te), z = te.redSqr(), re = re.redMul(z), Q = j;
        }
        return J;
      }, R.prototype.invm = function(x) {
        var C = x._invmp(this.m);
        return C.negative !== 0 ? (C.negative = 0, this.imod(C).redNeg()) : this.imod(C);
      }, R.prototype.pow = function(x, C) {
        if (C.isZero()) return new a(1).toRed(this);
        if (C.cmpn(1) === 0) return x.clone();
        var A = 4, N = new Array(1 << A);
        N[0] = new a(1).toRed(this), N[1] = x;
        for (var k = 2; k < N.length; k++)
          N[k] = this.mul(N[k - 1], x);
        var D = N[0], E = 0, M = 0, P = C.bitLength() % 26;
        for (P === 0 && (P = 26), k = C.length - 1; k >= 0; k--) {
          for (var z = C.words[k], J = P - 1; J >= 0; J--) {
            var re = z >> J & 1;
            if (D !== N[0] && (D = this.sqr(D)), re === 0 && E === 0) {
              M = 0;
              continue;
            }
            E <<= 1, E |= re, M++, !(M !== A && (k !== 0 || J !== 0)) && (D = this.mul(D, N[E]), M = 0, E = 0);
          }
          P = 26;
        }
        return D;
      }, R.prototype.convertTo = function(x) {
        var C = x.umod(this.m);
        return C === x ? C.clone() : C;
      }, R.prototype.convertFrom = function(x) {
        var C = x.clone();
        return C.red = null, C;
      }, a.mont = function(x) {
        return new $(x);
      };
      function $(S) {
        R.call(this, S), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new a(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      s($, R), $.prototype.convertTo = function(x) {
        return this.imod(x.ushln(this.shift));
      }, $.prototype.convertFrom = function(x) {
        var C = this.imod(x.mul(this.rinv));
        return C.red = null, C;
      }, $.prototype.imul = function(x, C) {
        if (x.isZero() || C.isZero())
          return x.words[0] = 0, x.length = 1, x;
        var A = x.imul(C), N = A.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), k = A.isub(N).iushrn(this.shift), D = k;
        return k.cmp(this.m) >= 0 ? D = k.isub(this.m) : k.cmpn(0) < 0 && (D = k.iadd(this.m)), D._forceRed(this);
      }, $.prototype.mul = function(x, C) {
        if (x.isZero() || C.isZero()) return new a(0)._forceRed(this);
        var A = x.mul(C), N = A.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), k = A.isub(N).iushrn(this.shift), D = k;
        return k.cmp(this.m) >= 0 ? D = k.isub(this.m) : k.cmpn(0) < 0 && (D = k.iadd(this.m)), D._forceRed(this);
      }, $.prototype.invm = function(x) {
        var C = this.imod(x._invmp(this.m).mul(this.r2));
        return C._forceRed(this);
      };
    })(r, bn);
  }(bn$1)), bn$1.exports;
}
var browserifyRsa, hasRequiredBrowserifyRsa;
function requireBrowserifyRsa() {
  if (hasRequiredBrowserifyRsa) return browserifyRsa;
  hasRequiredBrowserifyRsa = 1;
  var r = requireBn(), e = requireBrowser$b(), t = requireSafeBuffer$1().Buffer;
  function n(o) {
    var u = o.modulus.byteLength(), l;
    do
      l = new r(e(u));
    while (l.cmp(o.modulus) >= 0 || !l.umod(o.prime1) || !l.umod(o.prime2));
    return l;
  }
  function s(o) {
    var u = n(o), l = u.toRed(r.mont(o.modulus)).redPow(new r(o.publicExponent)).fromRed();
    return { blinder: l, unblinder: u.invm(o.modulus) };
  }
  function a(o, u) {
    var l = s(u), f = u.modulus.byteLength(), c = new r(o).mul(l.blinder).umod(u.modulus), h = c.toRed(r.mont(u.prime1)), d = c.toRed(r.mont(u.prime2)), m = u.coefficient, g = u.prime1, y = u.prime2, b = h.redPow(u.exponent1).fromRed(), v = d.redPow(u.exponent2).fromRed(), w = b.isub(v).imul(m).umod(g).imul(y);
    return v.iadd(w).imul(l.unblinder).umod(u.modulus).toArrayLike(t, "be", f);
  }
  return a.getr = n, browserifyRsa = a, browserifyRsa;
}
var elliptic = {};
const version$8 = "6.6.1", require$$0 = {
  version: version$8
};
var utils$2 = {}, utils$1 = {}, hasRequiredUtils$2;
function requireUtils$2() {
  return hasRequiredUtils$2 || (hasRequiredUtils$2 = 1, function(r) {
    var e = r;
    function t(a, o) {
      if (Array.isArray(a))
        return a.slice();
      if (!a)
        return [];
      var u = [];
      if (typeof a != "string") {
        for (var l = 0; l < a.length; l++)
          u[l] = a[l] | 0;
        return u;
      }
      if (o === "hex") {
        a = a.replace(/[^a-z0-9]+/ig, ""), a.length % 2 !== 0 && (a = "0" + a);
        for (var l = 0; l < a.length; l += 2)
          u.push(parseInt(a[l] + a[l + 1], 16));
      } else
        for (var l = 0; l < a.length; l++) {
          var f = a.charCodeAt(l), c = f >> 8, h = f & 255;
          c ? u.push(c, h) : u.push(h);
        }
      return u;
    }
    e.toArray = t;
    function n(a) {
      return a.length === 1 ? "0" + a : a;
    }
    e.zero2 = n;
    function s(a) {
      for (var o = "", u = 0; u < a.length; u++)
        o += n(a[u].toString(16));
      return o;
    }
    e.toHex = s, e.encode = function(o, u) {
      return u === "hex" ? s(o) : o;
    };
  }(utils$1)), utils$1;
}
var hasRequiredUtils$1;
function requireUtils$1() {
  return hasRequiredUtils$1 || (hasRequiredUtils$1 = 1, function(r) {
    var e = r, t = requireBn$1(), n = requireMinimalisticAssert(), s = requireUtils$2();
    e.assert = n, e.toArray = s.toArray, e.zero2 = s.zero2, e.toHex = s.toHex, e.encode = s.encode;
    function a(c, h, d) {
      var m = new Array(Math.max(c.bitLength(), d) + 1), g;
      for (g = 0; g < m.length; g += 1)
        m[g] = 0;
      var y = 1 << h + 1, b = c.clone();
      for (g = 0; g < m.length; g++) {
        var v, w = b.andln(y - 1);
        b.isOdd() ? (w > (y >> 1) - 1 ? v = (y >> 1) - w : v = w, b.isubn(v)) : v = 0, m[g] = v, b.iushrn(1);
      }
      return m;
    }
    e.getNAF = a;
    function o(c, h) {
      var d = [
        [],
        []
      ];
      c = c.clone(), h = h.clone();
      for (var m = 0, g = 0, y; c.cmpn(-m) > 0 || h.cmpn(-g) > 0; ) {
        var b = c.andln(3) + m & 3, v = h.andln(3) + g & 3;
        b === 3 && (b = -1), v === 3 && (v = -1);
        var w;
        b & 1 ? (y = c.andln(7) + m & 7, (y === 3 || y === 5) && v === 2 ? w = -b : w = b) : w = 0, d[0].push(w);
        var I;
        v & 1 ? (y = h.andln(7) + g & 7, (y === 3 || y === 5) && b === 2 ? I = -v : I = v) : I = 0, d[1].push(I), 2 * m === w + 1 && (m = 1 - m), 2 * g === I + 1 && (g = 1 - g), c.iushrn(1), h.iushrn(1);
      }
      return d;
    }
    e.getJSF = o;
    function u(c, h, d) {
      var m = "_" + h;
      c.prototype[h] = function() {
        return this[m] !== void 0 ? this[m] : this[m] = d.call(this);
      };
    }
    e.cachedProperty = u;
    function l(c) {
      return typeof c == "string" ? e.toArray(c, "hex") : c;
    }
    e.parseBytes = l;
    function f(c) {
      return new t(c, "hex", "le");
    }
    e.intFromLE = f;
  }(utils$2)), utils$2;
}
var curve = {}, base$1, hasRequiredBase$1;
function requireBase$1() {
  if (hasRequiredBase$1) return base$1;
  hasRequiredBase$1 = 1;
  var r = requireBn$1(), e = requireUtils$1(), t = e.getNAF, n = e.getJSF, s = e.assert;
  function a(u, l) {
    this.type = u, this.p = new r(l.p, 16), this.red = l.prime ? r.red(l.prime) : r.mont(this.p), this.zero = new r(0).toRed(this.red), this.one = new r(1).toRed(this.red), this.two = new r(2).toRed(this.red), this.n = l.n && new r(l.n, 16), this.g = l.g && this.pointFromJSON(l.g, l.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
    var f = this.n && this.p.div(this.n);
    !f || f.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
  }
  base$1 = a, a.prototype.point = function() {
    throw new Error("Not implemented");
  }, a.prototype.validate = function() {
    throw new Error("Not implemented");
  }, a.prototype._fixedNafMul = function(l, f) {
    s(l.precomputed);
    var c = l._getDoubles(), h = t(f, 1, this._bitLength), d = (1 << c.step + 1) - (c.step % 2 === 0 ? 2 : 1);
    d /= 3;
    var m = [], g, y;
    for (g = 0; g < h.length; g += c.step) {
      y = 0;
      for (var b = g + c.step - 1; b >= g; b--)
        y = (y << 1) + h[b];
      m.push(y);
    }
    for (var v = this.jpoint(null, null, null), w = this.jpoint(null, null, null), I = d; I > 0; I--) {
      for (g = 0; g < m.length; g++)
        y = m[g], y === I ? w = w.mixedAdd(c.points[g]) : y === -I && (w = w.mixedAdd(c.points[g].neg()));
      v = v.add(w);
    }
    return v.toP();
  }, a.prototype._wnafMul = function(l, f) {
    var c = 4, h = l._getNAFPoints(c);
    c = h.wnd;
    for (var d = h.points, m = t(f, c, this._bitLength), g = this.jpoint(null, null, null), y = m.length - 1; y >= 0; y--) {
      for (var b = 0; y >= 0 && m[y] === 0; y--)
        b++;
      if (y >= 0 && b++, g = g.dblp(b), y < 0)
        break;
      var v = m[y];
      s(v !== 0), l.type === "affine" ? v > 0 ? g = g.mixedAdd(d[v - 1 >> 1]) : g = g.mixedAdd(d[-v - 1 >> 1].neg()) : v > 0 ? g = g.add(d[v - 1 >> 1]) : g = g.add(d[-v - 1 >> 1].neg());
    }
    return l.type === "affine" ? g.toP() : g;
  }, a.prototype._wnafMulAdd = function(l, f, c, h, d) {
    var m = this._wnafT1, g = this._wnafT2, y = this._wnafT3, b = 0, v, w, I;
    for (v = 0; v < h; v++) {
      I = f[v];
      var T = I._getNAFPoints(l);
      m[v] = T.wnd, g[v] = T.points;
    }
    for (v = h - 1; v >= 1; v -= 2) {
      var _ = v - 1, F = v;
      if (m[_] !== 1 || m[F] !== 1) {
        y[_] = t(c[_], m[_], this._bitLength), y[F] = t(c[F], m[F], this._bitLength), b = Math.max(y[_].length, b), b = Math.max(y[F].length, b);
        continue;
      }
      var O = [
        f[_],
        /* 1 */
        null,
        /* 3 */
        null,
        /* 5 */
        f[F]
        /* 7 */
      ];
      f[_].y.cmp(f[F].y) === 0 ? (O[1] = f[_].add(f[F]), O[2] = f[_].toJ().mixedAdd(f[F].neg())) : f[_].y.cmp(f[F].y.redNeg()) === 0 ? (O[1] = f[_].toJ().mixedAdd(f[F]), O[2] = f[_].add(f[F].neg())) : (O[1] = f[_].toJ().mixedAdd(f[F]), O[2] = f[_].toJ().mixedAdd(f[F].neg()));
      var q = [
        -3,
        /* -1 -1 */
        -1,
        /* -1 0 */
        -5,
        /* -1 1 */
        -7,
        /* 0 -1 */
        0,
        /* 0 0 */
        7,
        /* 0 1 */
        5,
        /* 1 -1 */
        1,
        /* 1 0 */
        3
        /* 1 1 */
      ], V = n(c[_], c[F]);
      for (b = Math.max(V[0].length, b), y[_] = new Array(b), y[F] = new Array(b), w = 0; w < b; w++) {
        var H = V[0][w] | 0, R = V[1][w] | 0;
        y[_][w] = q[(H + 1) * 3 + (R + 1)], y[F][w] = 0, g[_] = O;
      }
    }
    var $ = this.jpoint(null, null, null), S = this._wnafT4;
    for (v = b; v >= 0; v--) {
      for (var x = 0; v >= 0; ) {
        var C = !0;
        for (w = 0; w < h; w++)
          S[w] = y[w][v] | 0, S[w] !== 0 && (C = !1);
        if (!C)
          break;
        x++, v--;
      }
      if (v >= 0 && x++, $ = $.dblp(x), v < 0)
        break;
      for (w = 0; w < h; w++) {
        var A = S[w];
        A !== 0 && (A > 0 ? I = g[w][A - 1 >> 1] : A < 0 && (I = g[w][-A - 1 >> 1].neg()), I.type === "affine" ? $ = $.mixedAdd(I) : $ = $.add(I));
      }
    }
    for (v = 0; v < h; v++)
      g[v] = null;
    return d ? $ : $.toP();
  };
  function o(u, l) {
    this.curve = u, this.type = l, this.precomputed = null;
  }
  return a.BasePoint = o, o.prototype.eq = function() {
    throw new Error("Not implemented");
  }, o.prototype.validate = function() {
    return this.curve.validate(this);
  }, a.prototype.decodePoint = function(l, f) {
    l = e.toArray(l, f);
    var c = this.p.byteLength();
    if ((l[0] === 4 || l[0] === 6 || l[0] === 7) && l.length - 1 === 2 * c) {
      l[0] === 6 ? s(l[l.length - 1] % 2 === 0) : l[0] === 7 && s(l[l.length - 1] % 2 === 1);
      var h = this.point(
        l.slice(1, 1 + c),
        l.slice(1 + c, 1 + 2 * c)
      );
      return h;
    } else if ((l[0] === 2 || l[0] === 3) && l.length - 1 === c)
      return this.pointFromX(l.slice(1, 1 + c), l[0] === 3);
    throw new Error("Unknown point format");
  }, o.prototype.encodeCompressed = function(l) {
    return this.encode(l, !0);
  }, o.prototype._encode = function(l) {
    var f = this.curve.p.byteLength(), c = this.getX().toArray("be", f);
    return l ? [this.getY().isEven() ? 2 : 3].concat(c) : [4].concat(c, this.getY().toArray("be", f));
  }, o.prototype.encode = function(l, f) {
    return e.encode(this._encode(f), l);
  }, o.prototype.precompute = function(l) {
    if (this.precomputed)
      return this;
    var f = {
      doubles: null,
      naf: null,
      beta: null
    };
    return f.naf = this._getNAFPoints(8), f.doubles = this._getDoubles(4, l), f.beta = this._getBeta(), this.precomputed = f, this;
  }, o.prototype._hasDoubles = function(l) {
    if (!this.precomputed)
      return !1;
    var f = this.precomputed.doubles;
    return f ? f.points.length >= Math.ceil((l.bitLength() + 1) / f.step) : !1;
  }, o.prototype._getDoubles = function(l, f) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    for (var c = [this], h = this, d = 0; d < f; d += l) {
      for (var m = 0; m < l; m++)
        h = h.dbl();
      c.push(h);
    }
    return {
      step: l,
      points: c
    };
  }, o.prototype._getNAFPoints = function(l) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    for (var f = [this], c = (1 << l) - 1, h = c === 1 ? null : this.dbl(), d = 1; d < c; d++)
      f[d] = f[d - 1].add(h);
    return {
      wnd: l,
      points: f
    };
  }, o.prototype._getBeta = function() {
    return null;
  }, o.prototype.dblp = function(l) {
    for (var f = this, c = 0; c < l; c++)
      f = f.dbl();
    return f;
  }, base$1;
}
var short, hasRequiredShort;
function requireShort() {
  if (hasRequiredShort) return short;
  hasRequiredShort = 1;
  var r = requireUtils$1(), e = requireBn$1(), t = requireInherits_browser(), n = requireBase$1(), s = r.assert;
  function a(l) {
    n.call(this, "short", l), this.a = new e(l.a, 16).toRed(this.red), this.b = new e(l.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(l), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
  }
  t(a, n), short = a, a.prototype._getEndomorphism = function(f) {
    if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {
      var c, h;
      if (f.beta)
        c = new e(f.beta, 16).toRed(this.red);
      else {
        var d = this._getEndoRoots(this.p);
        c = d[0].cmp(d[1]) < 0 ? d[0] : d[1], c = c.toRed(this.red);
      }
      if (f.lambda)
        h = new e(f.lambda, 16);
      else {
        var m = this._getEndoRoots(this.n);
        this.g.mul(m[0]).x.cmp(this.g.x.redMul(c)) === 0 ? h = m[0] : (h = m[1], s(this.g.mul(h).x.cmp(this.g.x.redMul(c)) === 0));
      }
      var g;
      return f.basis ? g = f.basis.map(function(y) {
        return {
          a: new e(y.a, 16),
          b: new e(y.b, 16)
        };
      }) : g = this._getEndoBasis(h), {
        beta: c,
        lambda: h,
        basis: g
      };
    }
  }, a.prototype._getEndoRoots = function(f) {
    var c = f === this.p ? this.red : e.mont(f), h = new e(2).toRed(c).redInvm(), d = h.redNeg(), m = new e(3).toRed(c).redNeg().redSqrt().redMul(h), g = d.redAdd(m).fromRed(), y = d.redSub(m).fromRed();
    return [g, y];
  }, a.prototype._getEndoBasis = function(f) {
    for (var c = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), h = f, d = this.n.clone(), m = new e(1), g = new e(0), y = new e(0), b = new e(1), v, w, I, T, _, F, O, q = 0, V, H; h.cmpn(0) !== 0; ) {
      var R = d.div(h);
      V = d.sub(R.mul(h)), H = y.sub(R.mul(m));
      var $ = b.sub(R.mul(g));
      if (!I && V.cmp(c) < 0)
        v = O.neg(), w = m, I = V.neg(), T = H;
      else if (I && ++q === 2)
        break;
      O = V, d = h, h = V, y = m, m = H, b = g, g = $;
    }
    _ = V.neg(), F = H;
    var S = I.sqr().add(T.sqr()), x = _.sqr().add(F.sqr());
    return x.cmp(S) >= 0 && (_ = v, F = w), I.negative && (I = I.neg(), T = T.neg()), _.negative && (_ = _.neg(), F = F.neg()), [
      { a: I, b: T },
      { a: _, b: F }
    ];
  }, a.prototype._endoSplit = function(f) {
    var c = this.endo.basis, h = c[0], d = c[1], m = d.b.mul(f).divRound(this.n), g = h.b.neg().mul(f).divRound(this.n), y = m.mul(h.a), b = g.mul(d.a), v = m.mul(h.b), w = g.mul(d.b), I = f.sub(y).sub(b), T = v.add(w).neg();
    return { k1: I, k2: T };
  }, a.prototype.pointFromX = function(f, c) {
    f = new e(f, 16), f.red || (f = f.toRed(this.red));
    var h = f.redSqr().redMul(f).redIAdd(f.redMul(this.a)).redIAdd(this.b), d = h.redSqrt();
    if (d.redSqr().redSub(h).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var m = d.fromRed().isOdd();
    return (c && !m || !c && m) && (d = d.redNeg()), this.point(f, d);
  }, a.prototype.validate = function(f) {
    if (f.inf)
      return !0;
    var c = f.x, h = f.y, d = this.a.redMul(c), m = c.redSqr().redMul(c).redIAdd(d).redIAdd(this.b);
    return h.redSqr().redISub(m).cmpn(0) === 0;
  }, a.prototype._endoWnafMulAdd = function(f, c, h) {
    for (var d = this._endoWnafT1, m = this._endoWnafT2, g = 0; g < f.length; g++) {
      var y = this._endoSplit(c[g]), b = f[g], v = b._getBeta();
      y.k1.negative && (y.k1.ineg(), b = b.neg(!0)), y.k2.negative && (y.k2.ineg(), v = v.neg(!0)), d[g * 2] = b, d[g * 2 + 1] = v, m[g * 2] = y.k1, m[g * 2 + 1] = y.k2;
    }
    for (var w = this._wnafMulAdd(1, d, m, g * 2, h), I = 0; I < g * 2; I++)
      d[I] = null, m[I] = null;
    return w;
  };
  function o(l, f, c, h) {
    n.BasePoint.call(this, l, "affine"), f === null && c === null ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new e(f, 16), this.y = new e(c, 16), h && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
  }
  t(o, n.BasePoint), a.prototype.point = function(f, c, h) {
    return new o(this, f, c, h);
  }, a.prototype.pointFromJSON = function(f, c) {
    return o.fromJSON(this, f, c);
  }, o.prototype._getBeta = function() {
    if (this.curve.endo) {
      var f = this.precomputed;
      if (f && f.beta)
        return f.beta;
      var c = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (f) {
        var h = this.curve, d = function(m) {
          return h.point(m.x.redMul(h.endo.beta), m.y);
        };
        f.beta = c, c.precomputed = {
          beta: null,
          naf: f.naf && {
            wnd: f.naf.wnd,
            points: f.naf.points.map(d)
          },
          doubles: f.doubles && {
            step: f.doubles.step,
            points: f.doubles.points.map(d)
          }
        };
      }
      return c;
    }
  }, o.prototype.toJSON = function() {
    return this.precomputed ? [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }] : [this.x, this.y];
  }, o.fromJSON = function(f, c, h) {
    typeof c == "string" && (c = JSON.parse(c));
    var d = f.point(c[0], c[1], h);
    if (!c[2])
      return d;
    function m(y) {
      return f.point(y[0], y[1], h);
    }
    var g = c[2];
    return d.precomputed = {
      beta: null,
      doubles: g.doubles && {
        step: g.doubles.step,
        points: [d].concat(g.doubles.points.map(m))
      },
      naf: g.naf && {
        wnd: g.naf.wnd,
        points: [d].concat(g.naf.points.map(m))
      }
    }, d;
  }, o.prototype.inspect = function() {
    return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  }, o.prototype.isInfinity = function() {
    return this.inf;
  }, o.prototype.add = function(f) {
    if (this.inf)
      return f;
    if (f.inf)
      return this;
    if (this.eq(f))
      return this.dbl();
    if (this.neg().eq(f))
      return this.curve.point(null, null);
    if (this.x.cmp(f.x) === 0)
      return this.curve.point(null, null);
    var c = this.y.redSub(f.y);
    c.cmpn(0) !== 0 && (c = c.redMul(this.x.redSub(f.x).redInvm()));
    var h = c.redSqr().redISub(this.x).redISub(f.x), d = c.redMul(this.x.redSub(h)).redISub(this.y);
    return this.curve.point(h, d);
  }, o.prototype.dbl = function() {
    if (this.inf)
      return this;
    var f = this.y.redAdd(this.y);
    if (f.cmpn(0) === 0)
      return this.curve.point(null, null);
    var c = this.curve.a, h = this.x.redSqr(), d = f.redInvm(), m = h.redAdd(h).redIAdd(h).redIAdd(c).redMul(d), g = m.redSqr().redISub(this.x.redAdd(this.x)), y = m.redMul(this.x.redSub(g)).redISub(this.y);
    return this.curve.point(g, y);
  }, o.prototype.getX = function() {
    return this.x.fromRed();
  }, o.prototype.getY = function() {
    return this.y.fromRed();
  }, o.prototype.mul = function(f) {
    return f = new e(f, 16), this.isInfinity() ? this : this._hasDoubles(f) ? this.curve._fixedNafMul(this, f) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [f]) : this.curve._wnafMul(this, f);
  }, o.prototype.mulAdd = function(f, c, h) {
    var d = [this, c], m = [f, h];
    return this.curve.endo ? this.curve._endoWnafMulAdd(d, m) : this.curve._wnafMulAdd(1, d, m, 2);
  }, o.prototype.jmulAdd = function(f, c, h) {
    var d = [this, c], m = [f, h];
    return this.curve.endo ? this.curve._endoWnafMulAdd(d, m, !0) : this.curve._wnafMulAdd(1, d, m, 2, !0);
  }, o.prototype.eq = function(f) {
    return this === f || this.inf === f.inf && (this.inf || this.x.cmp(f.x) === 0 && this.y.cmp(f.y) === 0);
  }, o.prototype.neg = function(f) {
    if (this.inf)
      return this;
    var c = this.curve.point(this.x, this.y.redNeg());
    if (f && this.precomputed) {
      var h = this.precomputed, d = function(m) {
        return m.neg();
      };
      c.precomputed = {
        naf: h.naf && {
          wnd: h.naf.wnd,
          points: h.naf.points.map(d)
        },
        doubles: h.doubles && {
          step: h.doubles.step,
          points: h.doubles.points.map(d)
        }
      };
    }
    return c;
  }, o.prototype.toJ = function() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var f = this.curve.jpoint(this.x, this.y, this.curve.one);
    return f;
  };
  function u(l, f, c, h) {
    n.BasePoint.call(this, l, "jacobian"), f === null && c === null && h === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new e(0)) : (this.x = new e(f, 16), this.y = new e(c, 16), this.z = new e(h, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
  }
  return t(u, n.BasePoint), a.prototype.jpoint = function(f, c, h) {
    return new u(this, f, c, h);
  }, u.prototype.toP = function() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var f = this.z.redInvm(), c = f.redSqr(), h = this.x.redMul(c), d = this.y.redMul(c).redMul(f);
    return this.curve.point(h, d);
  }, u.prototype.neg = function() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  }, u.prototype.add = function(f) {
    if (this.isInfinity())
      return f;
    if (f.isInfinity())
      return this;
    var c = f.z.redSqr(), h = this.z.redSqr(), d = this.x.redMul(c), m = f.x.redMul(h), g = this.y.redMul(c.redMul(f.z)), y = f.y.redMul(h.redMul(this.z)), b = d.redSub(m), v = g.redSub(y);
    if (b.cmpn(0) === 0)
      return v.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
    var w = b.redSqr(), I = w.redMul(b), T = d.redMul(w), _ = v.redSqr().redIAdd(I).redISub(T).redISub(T), F = v.redMul(T.redISub(_)).redISub(g.redMul(I)), O = this.z.redMul(f.z).redMul(b);
    return this.curve.jpoint(_, F, O);
  }, u.prototype.mixedAdd = function(f) {
    if (this.isInfinity())
      return f.toJ();
    if (f.isInfinity())
      return this;
    var c = this.z.redSqr(), h = this.x, d = f.x.redMul(c), m = this.y, g = f.y.redMul(c).redMul(this.z), y = h.redSub(d), b = m.redSub(g);
    if (y.cmpn(0) === 0)
      return b.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
    var v = y.redSqr(), w = v.redMul(y), I = h.redMul(v), T = b.redSqr().redIAdd(w).redISub(I).redISub(I), _ = b.redMul(I.redISub(T)).redISub(m.redMul(w)), F = this.z.redMul(y);
    return this.curve.jpoint(T, _, F);
  }, u.prototype.dblp = function(f) {
    if (f === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!f)
      return this.dbl();
    var c;
    if (this.curve.zeroA || this.curve.threeA) {
      var h = this;
      for (c = 0; c < f; c++)
        h = h.dbl();
      return h;
    }
    var d = this.curve.a, m = this.curve.tinv, g = this.x, y = this.y, b = this.z, v = b.redSqr().redSqr(), w = y.redAdd(y);
    for (c = 0; c < f; c++) {
      var I = g.redSqr(), T = w.redSqr(), _ = T.redSqr(), F = I.redAdd(I).redIAdd(I).redIAdd(d.redMul(v)), O = g.redMul(T), q = F.redSqr().redISub(O.redAdd(O)), V = O.redISub(q), H = F.redMul(V);
      H = H.redIAdd(H).redISub(_);
      var R = w.redMul(b);
      c + 1 < f && (v = v.redMul(_)), g = q, b = R, w = H;
    }
    return this.curve.jpoint(g, w.redMul(m), b);
  }, u.prototype.dbl = function() {
    return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
  }, u.prototype._zeroDbl = function() {
    var f, c, h;
    if (this.zOne) {
      var d = this.x.redSqr(), m = this.y.redSqr(), g = m.redSqr(), y = this.x.redAdd(m).redSqr().redISub(d).redISub(g);
      y = y.redIAdd(y);
      var b = d.redAdd(d).redIAdd(d), v = b.redSqr().redISub(y).redISub(y), w = g.redIAdd(g);
      w = w.redIAdd(w), w = w.redIAdd(w), f = v, c = b.redMul(y.redISub(v)).redISub(w), h = this.y.redAdd(this.y);
    } else {
      var I = this.x.redSqr(), T = this.y.redSqr(), _ = T.redSqr(), F = this.x.redAdd(T).redSqr().redISub(I).redISub(_);
      F = F.redIAdd(F);
      var O = I.redAdd(I).redIAdd(I), q = O.redSqr(), V = _.redIAdd(_);
      V = V.redIAdd(V), V = V.redIAdd(V), f = q.redISub(F).redISub(F), c = O.redMul(F.redISub(f)).redISub(V), h = this.y.redMul(this.z), h = h.redIAdd(h);
    }
    return this.curve.jpoint(f, c, h);
  }, u.prototype._threeDbl = function() {
    var f, c, h;
    if (this.zOne) {
      var d = this.x.redSqr(), m = this.y.redSqr(), g = m.redSqr(), y = this.x.redAdd(m).redSqr().redISub(d).redISub(g);
      y = y.redIAdd(y);
      var b = d.redAdd(d).redIAdd(d).redIAdd(this.curve.a), v = b.redSqr().redISub(y).redISub(y);
      f = v;
      var w = g.redIAdd(g);
      w = w.redIAdd(w), w = w.redIAdd(w), c = b.redMul(y.redISub(v)).redISub(w), h = this.y.redAdd(this.y);
    } else {
      var I = this.z.redSqr(), T = this.y.redSqr(), _ = this.x.redMul(T), F = this.x.redSub(I).redMul(this.x.redAdd(I));
      F = F.redAdd(F).redIAdd(F);
      var O = _.redIAdd(_);
      O = O.redIAdd(O);
      var q = O.redAdd(O);
      f = F.redSqr().redISub(q), h = this.y.redAdd(this.z).redSqr().redISub(T).redISub(I);
      var V = T.redSqr();
      V = V.redIAdd(V), V = V.redIAdd(V), V = V.redIAdd(V), c = F.redMul(O.redISub(f)).redISub(V);
    }
    return this.curve.jpoint(f, c, h);
  }, u.prototype._dbl = function() {
    var f = this.curve.a, c = this.x, h = this.y, d = this.z, m = d.redSqr().redSqr(), g = c.redSqr(), y = h.redSqr(), b = g.redAdd(g).redIAdd(g).redIAdd(f.redMul(m)), v = c.redAdd(c);
    v = v.redIAdd(v);
    var w = v.redMul(y), I = b.redSqr().redISub(w.redAdd(w)), T = w.redISub(I), _ = y.redSqr();
    _ = _.redIAdd(_), _ = _.redIAdd(_), _ = _.redIAdd(_);
    var F = b.redMul(T).redISub(_), O = h.redAdd(h).redMul(d);
    return this.curve.jpoint(I, F, O);
  }, u.prototype.trpl = function() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var f = this.x.redSqr(), c = this.y.redSqr(), h = this.z.redSqr(), d = c.redSqr(), m = f.redAdd(f).redIAdd(f), g = m.redSqr(), y = this.x.redAdd(c).redSqr().redISub(f).redISub(d);
    y = y.redIAdd(y), y = y.redAdd(y).redIAdd(y), y = y.redISub(g);
    var b = y.redSqr(), v = d.redIAdd(d);
    v = v.redIAdd(v), v = v.redIAdd(v), v = v.redIAdd(v);
    var w = m.redIAdd(y).redSqr().redISub(g).redISub(b).redISub(v), I = c.redMul(w);
    I = I.redIAdd(I), I = I.redIAdd(I);
    var T = this.x.redMul(b).redISub(I);
    T = T.redIAdd(T), T = T.redIAdd(T);
    var _ = this.y.redMul(w.redMul(v.redISub(w)).redISub(y.redMul(b)));
    _ = _.redIAdd(_), _ = _.redIAdd(_), _ = _.redIAdd(_);
    var F = this.z.redAdd(y).redSqr().redISub(h).redISub(b);
    return this.curve.jpoint(T, _, F);
  }, u.prototype.mul = function(f, c) {
    return f = new e(f, c), this.curve._wnafMul(this, f);
  }, u.prototype.eq = function(f) {
    if (f.type === "affine")
      return this.eq(f.toJ());
    if (this === f)
      return !0;
    var c = this.z.redSqr(), h = f.z.redSqr();
    if (this.x.redMul(h).redISub(f.x.redMul(c)).cmpn(0) !== 0)
      return !1;
    var d = c.redMul(this.z), m = h.redMul(f.z);
    return this.y.redMul(m).redISub(f.y.redMul(d)).cmpn(0) === 0;
  }, u.prototype.eqXToP = function(f) {
    var c = this.z.redSqr(), h = f.toRed(this.curve.red).redMul(c);
    if (this.x.cmp(h) === 0)
      return !0;
    for (var d = f.clone(), m = this.curve.redN.redMul(c); ; ) {
      if (d.iadd(this.curve.n), d.cmp(this.curve.p) >= 0)
        return !1;
      if (h.redIAdd(m), this.x.cmp(h) === 0)
        return !0;
    }
  }, u.prototype.inspect = function() {
    return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  }, u.prototype.isInfinity = function() {
    return this.z.cmpn(0) === 0;
  }, short;
}
var mont, hasRequiredMont;
function requireMont() {
  if (hasRequiredMont) return mont;
  hasRequiredMont = 1;
  var r = requireBn$1(), e = requireInherits_browser(), t = requireBase$1(), n = requireUtils$1();
  function s(o) {
    t.call(this, "mont", o), this.a = new r(o.a, 16).toRed(this.red), this.b = new r(o.b, 16).toRed(this.red), this.i4 = new r(4).toRed(this.red).redInvm(), this.two = new r(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  e(s, t), mont = s, s.prototype.validate = function(u) {
    var l = u.normalize().x, f = l.redSqr(), c = f.redMul(l).redAdd(f.redMul(this.a)).redAdd(l), h = c.redSqrt();
    return h.redSqr().cmp(c) === 0;
  };
  function a(o, u, l) {
    t.BasePoint.call(this, o, "projective"), u === null && l === null ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new r(u, 16), this.z = new r(l, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
  }
  return e(a, t.BasePoint), s.prototype.decodePoint = function(u, l) {
    return this.point(n.toArray(u, l), 1);
  }, s.prototype.point = function(u, l) {
    return new a(this, u, l);
  }, s.prototype.pointFromJSON = function(u) {
    return a.fromJSON(this, u);
  }, a.prototype.precompute = function() {
  }, a.prototype._encode = function() {
    return this.getX().toArray("be", this.curve.p.byteLength());
  }, a.fromJSON = function(u, l) {
    return new a(u, l[0], l[1] || u.one);
  }, a.prototype.inspect = function() {
    return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  }, a.prototype.isInfinity = function() {
    return this.z.cmpn(0) === 0;
  }, a.prototype.dbl = function() {
    var u = this.x.redAdd(this.z), l = u.redSqr(), f = this.x.redSub(this.z), c = f.redSqr(), h = l.redSub(c), d = l.redMul(c), m = h.redMul(c.redAdd(this.curve.a24.redMul(h)));
    return this.curve.point(d, m);
  }, a.prototype.add = function() {
    throw new Error("Not supported on Montgomery curve");
  }, a.prototype.diffAdd = function(u, l) {
    var f = this.x.redAdd(this.z), c = this.x.redSub(this.z), h = u.x.redAdd(u.z), d = u.x.redSub(u.z), m = d.redMul(f), g = h.redMul(c), y = l.z.redMul(m.redAdd(g).redSqr()), b = l.x.redMul(m.redISub(g).redSqr());
    return this.curve.point(y, b);
  }, a.prototype.mul = function(u) {
    for (var l = u.clone(), f = this, c = this.curve.point(null, null), h = this, d = []; l.cmpn(0) !== 0; l.iushrn(1))
      d.push(l.andln(1));
    for (var m = d.length - 1; m >= 0; m--)
      d[m] === 0 ? (f = f.diffAdd(c, h), c = c.dbl()) : (c = f.diffAdd(c, h), f = f.dbl());
    return c;
  }, a.prototype.mulAdd = function() {
    throw new Error("Not supported on Montgomery curve");
  }, a.prototype.jumlAdd = function() {
    throw new Error("Not supported on Montgomery curve");
  }, a.prototype.eq = function(u) {
    return this.getX().cmp(u.getX()) === 0;
  }, a.prototype.normalize = function() {
    return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
  }, a.prototype.getX = function() {
    return this.normalize(), this.x.fromRed();
  }, mont;
}
var edwards, hasRequiredEdwards;
function requireEdwards() {
  if (hasRequiredEdwards) return edwards;
  hasRequiredEdwards = 1;
  var r = requireUtils$1(), e = requireBn$1(), t = requireInherits_browser(), n = requireBase$1(), s = r.assert;
  function a(u) {
    this.twisted = (u.a | 0) !== 1, this.mOneA = this.twisted && (u.a | 0) === -1, this.extended = this.mOneA, n.call(this, "edwards", u), this.a = new e(u.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new e(u.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new e(u.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), s(!this.twisted || this.c.fromRed().cmpn(1) === 0), this.oneC = (u.c | 0) === 1;
  }
  t(a, n), edwards = a, a.prototype._mulA = function(l) {
    return this.mOneA ? l.redNeg() : this.a.redMul(l);
  }, a.prototype._mulC = function(l) {
    return this.oneC ? l : this.c.redMul(l);
  }, a.prototype.jpoint = function(l, f, c, h) {
    return this.point(l, f, c, h);
  }, a.prototype.pointFromX = function(l, f) {
    l = new e(l, 16), l.red || (l = l.toRed(this.red));
    var c = l.redSqr(), h = this.c2.redSub(this.a.redMul(c)), d = this.one.redSub(this.c2.redMul(this.d).redMul(c)), m = h.redMul(d.redInvm()), g = m.redSqrt();
    if (g.redSqr().redSub(m).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var y = g.fromRed().isOdd();
    return (f && !y || !f && y) && (g = g.redNeg()), this.point(l, g);
  }, a.prototype.pointFromY = function(l, f) {
    l = new e(l, 16), l.red || (l = l.toRed(this.red));
    var c = l.redSqr(), h = c.redSub(this.c2), d = c.redMul(this.d).redMul(this.c2).redSub(this.a), m = h.redMul(d.redInvm());
    if (m.cmp(this.zero) === 0) {
      if (f)
        throw new Error("invalid point");
      return this.point(this.zero, l);
    }
    var g = m.redSqrt();
    if (g.redSqr().redSub(m).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    return g.fromRed().isOdd() !== f && (g = g.redNeg()), this.point(g, l);
  }, a.prototype.validate = function(l) {
    if (l.isInfinity())
      return !0;
    l.normalize();
    var f = l.x.redSqr(), c = l.y.redSqr(), h = f.redMul(this.a).redAdd(c), d = this.c2.redMul(this.one.redAdd(this.d.redMul(f).redMul(c)));
    return h.cmp(d) === 0;
  };
  function o(u, l, f, c, h) {
    n.BasePoint.call(this, u, "projective"), l === null && f === null && c === null ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = !0) : (this.x = new e(l, 16), this.y = new e(f, 16), this.z = c ? new e(c, 16) : this.curve.one, this.t = h && new e(h, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
  }
  return t(o, n.BasePoint), a.prototype.pointFromJSON = function(l) {
    return o.fromJSON(this, l);
  }, a.prototype.point = function(l, f, c, h) {
    return new o(this, l, f, c, h);
  }, o.fromJSON = function(l, f) {
    return new o(l, f[0], f[1], f[2]);
  }, o.prototype.inspect = function() {
    return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  }, o.prototype.isInfinity = function() {
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
  }, o.prototype._extDbl = function() {
    var l = this.x.redSqr(), f = this.y.redSqr(), c = this.z.redSqr();
    c = c.redIAdd(c);
    var h = this.curve._mulA(l), d = this.x.redAdd(this.y).redSqr().redISub(l).redISub(f), m = h.redAdd(f), g = m.redSub(c), y = h.redSub(f), b = d.redMul(g), v = m.redMul(y), w = d.redMul(y), I = g.redMul(m);
    return this.curve.point(b, v, I, w);
  }, o.prototype._projDbl = function() {
    var l = this.x.redAdd(this.y).redSqr(), f = this.x.redSqr(), c = this.y.redSqr(), h, d, m, g, y, b;
    if (this.curve.twisted) {
      g = this.curve._mulA(f);
      var v = g.redAdd(c);
      this.zOne ? (h = l.redSub(f).redSub(c).redMul(v.redSub(this.curve.two)), d = v.redMul(g.redSub(c)), m = v.redSqr().redSub(v).redSub(v)) : (y = this.z.redSqr(), b = v.redSub(y).redISub(y), h = l.redSub(f).redISub(c).redMul(b), d = v.redMul(g.redSub(c)), m = v.redMul(b));
    } else
      g = f.redAdd(c), y = this.curve._mulC(this.z).redSqr(), b = g.redSub(y).redSub(y), h = this.curve._mulC(l.redISub(g)).redMul(b), d = this.curve._mulC(g).redMul(f.redISub(c)), m = g.redMul(b);
    return this.curve.point(h, d, m);
  }, o.prototype.dbl = function() {
    return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
  }, o.prototype._extAdd = function(l) {
    var f = this.y.redSub(this.x).redMul(l.y.redSub(l.x)), c = this.y.redAdd(this.x).redMul(l.y.redAdd(l.x)), h = this.t.redMul(this.curve.dd).redMul(l.t), d = this.z.redMul(l.z.redAdd(l.z)), m = c.redSub(f), g = d.redSub(h), y = d.redAdd(h), b = c.redAdd(f), v = m.redMul(g), w = y.redMul(b), I = m.redMul(b), T = g.redMul(y);
    return this.curve.point(v, w, T, I);
  }, o.prototype._projAdd = function(l) {
    var f = this.z.redMul(l.z), c = f.redSqr(), h = this.x.redMul(l.x), d = this.y.redMul(l.y), m = this.curve.d.redMul(h).redMul(d), g = c.redSub(m), y = c.redAdd(m), b = this.x.redAdd(this.y).redMul(l.x.redAdd(l.y)).redISub(h).redISub(d), v = f.redMul(g).redMul(b), w, I;
    return this.curve.twisted ? (w = f.redMul(y).redMul(d.redSub(this.curve._mulA(h))), I = g.redMul(y)) : (w = f.redMul(y).redMul(d.redSub(h)), I = this.curve._mulC(g).redMul(y)), this.curve.point(v, w, I);
  }, o.prototype.add = function(l) {
    return this.isInfinity() ? l : l.isInfinity() ? this : this.curve.extended ? this._extAdd(l) : this._projAdd(l);
  }, o.prototype.mul = function(l) {
    return this._hasDoubles(l) ? this.curve._fixedNafMul(this, l) : this.curve._wnafMul(this, l);
  }, o.prototype.mulAdd = function(l, f, c) {
    return this.curve._wnafMulAdd(1, [this, f], [l, c], 2, !1);
  }, o.prototype.jmulAdd = function(l, f, c) {
    return this.curve._wnafMulAdd(1, [this, f], [l, c], 2, !0);
  }, o.prototype.normalize = function() {
    if (this.zOne)
      return this;
    var l = this.z.redInvm();
    return this.x = this.x.redMul(l), this.y = this.y.redMul(l), this.t && (this.t = this.t.redMul(l)), this.z = this.curve.one, this.zOne = !0, this;
  }, o.prototype.neg = function() {
    return this.curve.point(
      this.x.redNeg(),
      this.y,
      this.z,
      this.t && this.t.redNeg()
    );
  }, o.prototype.getX = function() {
    return this.normalize(), this.x.fromRed();
  }, o.prototype.getY = function() {
    return this.normalize(), this.y.fromRed();
  }, o.prototype.eq = function(l) {
    return this === l || this.getX().cmp(l.getX()) === 0 && this.getY().cmp(l.getY()) === 0;
  }, o.prototype.eqXToP = function(l) {
    var f = l.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(f) === 0)
      return !0;
    for (var c = l.clone(), h = this.curve.redN.redMul(this.z); ; ) {
      if (c.iadd(this.curve.n), c.cmp(this.curve.p) >= 0)
        return !1;
      if (f.redIAdd(h), this.x.cmp(f) === 0)
        return !0;
    }
  }, o.prototype.toP = o.prototype.normalize, o.prototype.mixedAdd = o.prototype.add, edwards;
}
var hasRequiredCurve;
function requireCurve() {
  return hasRequiredCurve || (hasRequiredCurve = 1, function(r) {
    var e = r;
    e.base = requireBase$1(), e.short = requireShort(), e.mont = requireMont(), e.edwards = requireEdwards();
  }(curve)), curve;
}
var curves = {}, hash = {}, utils = {}, hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils;
  hasRequiredUtils = 1;
  var r = requireMinimalisticAssert(), e = requireInherits_browser();
  utils.inherits = e;
  function t($, S) {
    return ($.charCodeAt(S) & 64512) !== 55296 || S < 0 || S + 1 >= $.length ? !1 : ($.charCodeAt(S + 1) & 64512) === 56320;
  }
  function n($, S) {
    if (Array.isArray($))
      return $.slice();
    if (!$)
      return [];
    var x = [];
    if (typeof $ == "string")
      if (S) {
        if (S === "hex")
          for ($ = $.replace(/[^a-z0-9]+/ig, ""), $.length % 2 !== 0 && ($ = "0" + $), A = 0; A < $.length; A += 2)
            x.push(parseInt($[A] + $[A + 1], 16));
      } else for (var C = 0, A = 0; A < $.length; A++) {
        var N = $.charCodeAt(A);
        N < 128 ? x[C++] = N : N < 2048 ? (x[C++] = N >> 6 | 192, x[C++] = N & 63 | 128) : t($, A) ? (N = 65536 + ((N & 1023) << 10) + ($.charCodeAt(++A) & 1023), x[C++] = N >> 18 | 240, x[C++] = N >> 12 & 63 | 128, x[C++] = N >> 6 & 63 | 128, x[C++] = N & 63 | 128) : (x[C++] = N >> 12 | 224, x[C++] = N >> 6 & 63 | 128, x[C++] = N & 63 | 128);
      }
    else
      for (A = 0; A < $.length; A++)
        x[A] = $[A] | 0;
    return x;
  }
  utils.toArray = n;
  function s($) {
    for (var S = "", x = 0; x < $.length; x++)
      S += u($[x].toString(16));
    return S;
  }
  utils.toHex = s;
  function a($) {
    var S = $ >>> 24 | $ >>> 8 & 65280 | $ << 8 & 16711680 | ($ & 255) << 24;
    return S >>> 0;
  }
  utils.htonl = a;
  function o($, S) {
    for (var x = "", C = 0; C < $.length; C++) {
      var A = $[C];
      S === "little" && (A = a(A)), x += l(A.toString(16));
    }
    return x;
  }
  utils.toHex32 = o;
  function u($) {
    return $.length === 1 ? "0" + $ : $;
  }
  utils.zero2 = u;
  function l($) {
    return $.length === 7 ? "0" + $ : $.length === 6 ? "00" + $ : $.length === 5 ? "000" + $ : $.length === 4 ? "0000" + $ : $.length === 3 ? "00000" + $ : $.length === 2 ? "000000" + $ : $.length === 1 ? "0000000" + $ : $;
  }
  utils.zero8 = l;
  function f($, S, x, C) {
    var A = x - S;
    r(A % 4 === 0);
    for (var N = new Array(A / 4), k = 0, D = S; k < N.length; k++, D += 4) {
      var E;
      C === "big" ? E = $[D] << 24 | $[D + 1] << 16 | $[D + 2] << 8 | $[D + 3] : E = $[D + 3] << 24 | $[D + 2] << 16 | $[D + 1] << 8 | $[D], N[k] = E >>> 0;
    }
    return N;
  }
  utils.join32 = f;
  function c($, S) {
    for (var x = new Array($.length * 4), C = 0, A = 0; C < $.length; C++, A += 4) {
      var N = $[C];
      S === "big" ? (x[A] = N >>> 24, x[A + 1] = N >>> 16 & 255, x[A + 2] = N >>> 8 & 255, x[A + 3] = N & 255) : (x[A + 3] = N >>> 24, x[A + 2] = N >>> 16 & 255, x[A + 1] = N >>> 8 & 255, x[A] = N & 255);
    }
    return x;
  }
  utils.split32 = c;
  function h($, S) {
    return $ >>> S | $ << 32 - S;
  }
  utils.rotr32 = h;
  function d($, S) {
    return $ << S | $ >>> 32 - S;
  }
  utils.rotl32 = d;
  function m($, S) {
    return $ + S >>> 0;
  }
  utils.sum32 = m;
  function g($, S, x) {
    return $ + S + x >>> 0;
  }
  utils.sum32_3 = g;
  function y($, S, x, C) {
    return $ + S + x + C >>> 0;
  }
  utils.sum32_4 = y;
  function b($, S, x, C, A) {
    return $ + S + x + C + A >>> 0;
  }
  utils.sum32_5 = b;
  function v($, S, x, C) {
    var A = $[S], N = $[S + 1], k = C + N >>> 0, D = (k < C ? 1 : 0) + x + A;
    $[S] = D >>> 0, $[S + 1] = k;
  }
  utils.sum64 = v;
  function w($, S, x, C) {
    var A = S + C >>> 0, N = (A < S ? 1 : 0) + $ + x;
    return N >>> 0;
  }
  utils.sum64_hi = w;
  function I($, S, x, C) {
    var A = S + C;
    return A >>> 0;
  }
  utils.sum64_lo = I;
  function T($, S, x, C, A, N, k, D) {
    var E = 0, M = S;
    M = M + C >>> 0, E += M < S ? 1 : 0, M = M + N >>> 0, E += M < N ? 1 : 0, M = M + D >>> 0, E += M < D ? 1 : 0;
    var P = $ + x + A + k + E;
    return P >>> 0;
  }
  utils.sum64_4_hi = T;
  function _($, S, x, C, A, N, k, D) {
    var E = S + C + N + D;
    return E >>> 0;
  }
  utils.sum64_4_lo = _;
  function F($, S, x, C, A, N, k, D, E, M) {
    var P = 0, z = S;
    z = z + C >>> 0, P += z < S ? 1 : 0, z = z + N >>> 0, P += z < N ? 1 : 0, z = z + D >>> 0, P += z < D ? 1 : 0, z = z + M >>> 0, P += z < M ? 1 : 0;
    var J = $ + x + A + k + E + P;
    return J >>> 0;
  }
  utils.sum64_5_hi = F;
  function O($, S, x, C, A, N, k, D, E, M) {
    var P = S + C + N + D + M;
    return P >>> 0;
  }
  utils.sum64_5_lo = O;
  function q($, S, x) {
    var C = S << 32 - x | $ >>> x;
    return C >>> 0;
  }
  utils.rotr64_hi = q;
  function V($, S, x) {
    var C = $ << 32 - x | S >>> x;
    return C >>> 0;
  }
  utils.rotr64_lo = V;
  function H($, S, x) {
    return $ >>> x;
  }
  utils.shr64_hi = H;
  function R($, S, x) {
    var C = $ << 32 - x | S >>> x;
    return C >>> 0;
  }
  return utils.shr64_lo = R, utils;
}
var common$1 = {}, hasRequiredCommon$1;
function requireCommon$1() {
  if (hasRequiredCommon$1) return common$1;
  hasRequiredCommon$1 = 1;
  var r = requireUtils(), e = requireMinimalisticAssert();
  function t() {
    this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
  }
  return common$1.BlockHash = t, t.prototype.update = function(s, a) {
    if (s = r.toArray(s, a), this.pending ? this.pending = this.pending.concat(s) : this.pending = s, this.pendingTotal += s.length, this.pending.length >= this._delta8) {
      s = this.pending;
      var o = s.length % this._delta8;
      this.pending = s.slice(s.length - o, s.length), this.pending.length === 0 && (this.pending = null), s = r.join32(s, 0, s.length - o, this.endian);
      for (var u = 0; u < s.length; u += this._delta32)
        this._update(s, u, u + this._delta32);
    }
    return this;
  }, t.prototype.digest = function(s) {
    return this.update(this._pad()), e(this.pending === null), this._digest(s);
  }, t.prototype._pad = function() {
    var s = this.pendingTotal, a = this._delta8, o = a - (s + this.padLength) % a, u = new Array(o + this.padLength);
    u[0] = 128;
    for (var l = 1; l < o; l++)
      u[l] = 0;
    if (s <<= 3, this.endian === "big") {
      for (var f = 8; f < this.padLength; f++)
        u[l++] = 0;
      u[l++] = 0, u[l++] = 0, u[l++] = 0, u[l++] = 0, u[l++] = s >>> 24 & 255, u[l++] = s >>> 16 & 255, u[l++] = s >>> 8 & 255, u[l++] = s & 255;
    } else
      for (u[l++] = s & 255, u[l++] = s >>> 8 & 255, u[l++] = s >>> 16 & 255, u[l++] = s >>> 24 & 255, u[l++] = 0, u[l++] = 0, u[l++] = 0, u[l++] = 0, f = 8; f < this.padLength; f++)
        u[l++] = 0;
    return u;
  }, common$1;
}
var sha = {}, common = {}, hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon) return common;
  hasRequiredCommon = 1;
  var r = requireUtils(), e = r.rotr32;
  function t(c, h, d, m) {
    if (c === 0)
      return n(h, d, m);
    if (c === 1 || c === 3)
      return a(h, d, m);
    if (c === 2)
      return s(h, d, m);
  }
  common.ft_1 = t;
  function n(c, h, d) {
    return c & h ^ ~c & d;
  }
  common.ch32 = n;
  function s(c, h, d) {
    return c & h ^ c & d ^ h & d;
  }
  common.maj32 = s;
  function a(c, h, d) {
    return c ^ h ^ d;
  }
  common.p32 = a;
  function o(c) {
    return e(c, 2) ^ e(c, 13) ^ e(c, 22);
  }
  common.s0_256 = o;
  function u(c) {
    return e(c, 6) ^ e(c, 11) ^ e(c, 25);
  }
  common.s1_256 = u;
  function l(c) {
    return e(c, 7) ^ e(c, 18) ^ c >>> 3;
  }
  common.g0_256 = l;
  function f(c) {
    return e(c, 17) ^ e(c, 19) ^ c >>> 10;
  }
  return common.g1_256 = f, common;
}
var _1, hasRequired_1;
function require_1() {
  if (hasRequired_1) return _1;
  hasRequired_1 = 1;
  var r = requireUtils(), e = requireCommon$1(), t = requireCommon(), n = r.rotl32, s = r.sum32, a = r.sum32_5, o = t.ft_1, u = e.BlockHash, l = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
  ];
  function f() {
    if (!(this instanceof f))
      return new f();
    u.call(this), this.h = [
      1732584193,
      4023233417,
      2562383102,
      271733878,
      3285377520
    ], this.W = new Array(80);
  }
  return r.inherits(f, u), _1 = f, f.blockSize = 512, f.outSize = 160, f.hmacStrength = 80, f.padLength = 64, f.prototype._update = function(h, d) {
    for (var m = this.W, g = 0; g < 16; g++)
      m[g] = h[d + g];
    for (; g < m.length; g++)
      m[g] = n(m[g - 3] ^ m[g - 8] ^ m[g - 14] ^ m[g - 16], 1);
    var y = this.h[0], b = this.h[1], v = this.h[2], w = this.h[3], I = this.h[4];
    for (g = 0; g < m.length; g++) {
      var T = ~~(g / 20), _ = a(n(y, 5), o(T, b, v, w), I, m[g], l[T]);
      I = w, w = v, v = n(b, 30), b = y, y = _;
    }
    this.h[0] = s(this.h[0], y), this.h[1] = s(this.h[1], b), this.h[2] = s(this.h[2], v), this.h[3] = s(this.h[3], w), this.h[4] = s(this.h[4], I);
  }, f.prototype._digest = function(h) {
    return h === "hex" ? r.toHex32(this.h, "big") : r.split32(this.h, "big");
  }, _1;
}
var _256, hasRequired_256;
function require_256() {
  if (hasRequired_256) return _256;
  hasRequired_256 = 1;
  var r = requireUtils(), e = requireCommon$1(), t = requireCommon(), n = requireMinimalisticAssert(), s = r.sum32, a = r.sum32_4, o = r.sum32_5, u = t.ch32, l = t.maj32, f = t.s0_256, c = t.s1_256, h = t.g0_256, d = t.g1_256, m = e.BlockHash, g = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ];
  function y() {
    if (!(this instanceof y))
      return new y();
    m.call(this), this.h = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ], this.k = g, this.W = new Array(64);
  }
  return r.inherits(y, m), _256 = y, y.blockSize = 512, y.outSize = 256, y.hmacStrength = 192, y.padLength = 64, y.prototype._update = function(v, w) {
    for (var I = this.W, T = 0; T < 16; T++)
      I[T] = v[w + T];
    for (; T < I.length; T++)
      I[T] = a(d(I[T - 2]), I[T - 7], h(I[T - 15]), I[T - 16]);
    var _ = this.h[0], F = this.h[1], O = this.h[2], q = this.h[3], V = this.h[4], H = this.h[5], R = this.h[6], $ = this.h[7];
    for (n(this.k.length === I.length), T = 0; T < I.length; T++) {
      var S = o($, c(V), u(V, H, R), this.k[T], I[T]), x = s(f(_), l(_, F, O));
      $ = R, R = H, H = V, V = s(q, S), q = O, O = F, F = _, _ = s(S, x);
    }
    this.h[0] = s(this.h[0], _), this.h[1] = s(this.h[1], F), this.h[2] = s(this.h[2], O), this.h[3] = s(this.h[3], q), this.h[4] = s(this.h[4], V), this.h[5] = s(this.h[5], H), this.h[6] = s(this.h[6], R), this.h[7] = s(this.h[7], $);
  }, y.prototype._digest = function(v) {
    return v === "hex" ? r.toHex32(this.h, "big") : r.split32(this.h, "big");
  }, _256;
}
var _224, hasRequired_224;
function require_224() {
  if (hasRequired_224) return _224;
  hasRequired_224 = 1;
  var r = requireUtils(), e = require_256();
  function t() {
    if (!(this instanceof t))
      return new t();
    e.call(this), this.h = [
      3238371032,
      914150663,
      812702999,
      4144912697,
      4290775857,
      1750603025,
      1694076839,
      3204075428
    ];
  }
  return r.inherits(t, e), _224 = t, t.blockSize = 512, t.outSize = 224, t.hmacStrength = 192, t.padLength = 64, t.prototype._digest = function(s) {
    return s === "hex" ? r.toHex32(this.h.slice(0, 7), "big") : r.split32(this.h.slice(0, 7), "big");
  }, _224;
}
var _512, hasRequired_512;
function require_512() {
  if (hasRequired_512) return _512;
  hasRequired_512 = 1;
  var r = requireUtils(), e = requireCommon$1(), t = requireMinimalisticAssert(), n = r.rotr64_hi, s = r.rotr64_lo, a = r.shr64_hi, o = r.shr64_lo, u = r.sum64, l = r.sum64_hi, f = r.sum64_lo, c = r.sum64_4_hi, h = r.sum64_4_lo, d = r.sum64_5_hi, m = r.sum64_5_lo, g = e.BlockHash, y = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ];
  function b() {
    if (!(this instanceof b))
      return new b();
    g.call(this), this.h = [
      1779033703,
      4089235720,
      3144134277,
      2227873595,
      1013904242,
      4271175723,
      2773480762,
      1595750129,
      1359893119,
      2917565137,
      2600822924,
      725511199,
      528734635,
      4215389547,
      1541459225,
      327033209
    ], this.k = y, this.W = new Array(160);
  }
  r.inherits(b, g), _512 = b, b.blockSize = 1024, b.outSize = 512, b.hmacStrength = 192, b.padLength = 128, b.prototype._prepareBlock = function(x, C) {
    for (var A = this.W, N = 0; N < 32; N++)
      A[N] = x[C + N];
    for (; N < A.length; N += 2) {
      var k = R(A[N - 4], A[N - 3]), D = $(A[N - 4], A[N - 3]), E = A[N - 14], M = A[N - 13], P = V(A[N - 30], A[N - 29]), z = H(A[N - 30], A[N - 29]), J = A[N - 32], re = A[N - 31];
      A[N] = c(
        k,
        D,
        E,
        M,
        P,
        z,
        J,
        re
      ), A[N + 1] = h(
        k,
        D,
        E,
        M,
        P,
        z,
        J,
        re
      );
    }
  }, b.prototype._update = function(x, C) {
    this._prepareBlock(x, C);
    var A = this.W, N = this.h[0], k = this.h[1], D = this.h[2], E = this.h[3], M = this.h[4], P = this.h[5], z = this.h[6], J = this.h[7], re = this.h[8], Q = this.h[9], W = this.h[10], j = this.h[11], te = this.h[12], se = this.h[13], X = this.h[14], K = this.h[15];
    t(this.k.length === A.length);
    for (var ae = 0; ae < A.length; ae += 2) {
      var de = X, me = K, pe = O(re, Q), ge = q(re, Q), ye = v(re, Q, W, j, te), ce = w(re, Q, W, j, te, se), $e = this.k[ae], be = this.k[ae + 1], xe = A[ae], we = A[ae + 1], ve = d(
        de,
        me,
        pe,
        ge,
        ye,
        ce,
        $e,
        be,
        xe,
        we
      ), Ee = m(
        de,
        me,
        pe,
        ge,
        ye,
        ce,
        $e,
        be,
        xe,
        we
      );
      de = _(N, k), me = F(N, k), pe = I(N, k, D, E, M), ge = T(N, k, D, E, M, P);
      var De = l(de, me, pe, ge), Ce = f(de, me, pe, ge);
      X = te, K = se, te = W, se = j, W = re, j = Q, re = l(z, J, ve, Ee), Q = f(J, J, ve, Ee), z = M, J = P, M = D, P = E, D = N, E = k, N = l(ve, Ee, De, Ce), k = f(ve, Ee, De, Ce);
    }
    u(this.h, 0, N, k), u(this.h, 2, D, E), u(this.h, 4, M, P), u(this.h, 6, z, J), u(this.h, 8, re, Q), u(this.h, 10, W, j), u(this.h, 12, te, se), u(this.h, 14, X, K);
  }, b.prototype._digest = function(x) {
    return x === "hex" ? r.toHex32(this.h, "big") : r.split32(this.h, "big");
  };
  function v(S, x, C, A, N) {
    var k = S & C ^ ~S & N;
    return k < 0 && (k += 4294967296), k;
  }
  function w(S, x, C, A, N, k) {
    var D = x & A ^ ~x & k;
    return D < 0 && (D += 4294967296), D;
  }
  function I(S, x, C, A, N) {
    var k = S & C ^ S & N ^ C & N;
    return k < 0 && (k += 4294967296), k;
  }
  function T(S, x, C, A, N, k) {
    var D = x & A ^ x & k ^ A & k;
    return D < 0 && (D += 4294967296), D;
  }
  function _(S, x) {
    var C = n(S, x, 28), A = n(x, S, 2), N = n(x, S, 7), k = C ^ A ^ N;
    return k < 0 && (k += 4294967296), k;
  }
  function F(S, x) {
    var C = s(S, x, 28), A = s(x, S, 2), N = s(x, S, 7), k = C ^ A ^ N;
    return k < 0 && (k += 4294967296), k;
  }
  function O(S, x) {
    var C = n(S, x, 14), A = n(S, x, 18), N = n(x, S, 9), k = C ^ A ^ N;
    return k < 0 && (k += 4294967296), k;
  }
  function q(S, x) {
    var C = s(S, x, 14), A = s(S, x, 18), N = s(x, S, 9), k = C ^ A ^ N;
    return k < 0 && (k += 4294967296), k;
  }
  function V(S, x) {
    var C = n(S, x, 1), A = n(S, x, 8), N = a(S, x, 7), k = C ^ A ^ N;
    return k < 0 && (k += 4294967296), k;
  }
  function H(S, x) {
    var C = s(S, x, 1), A = s(S, x, 8), N = o(S, x, 7), k = C ^ A ^ N;
    return k < 0 && (k += 4294967296), k;
  }
  function R(S, x) {
    var C = n(S, x, 19), A = n(x, S, 29), N = a(S, x, 6), k = C ^ A ^ N;
    return k < 0 && (k += 4294967296), k;
  }
  function $(S, x) {
    var C = s(S, x, 19), A = s(x, S, 29), N = o(S, x, 6), k = C ^ A ^ N;
    return k < 0 && (k += 4294967296), k;
  }
  return _512;
}
var _384, hasRequired_384;
function require_384() {
  if (hasRequired_384) return _384;
  hasRequired_384 = 1;
  var r = requireUtils(), e = require_512();
  function t() {
    if (!(this instanceof t))
      return new t();
    e.call(this), this.h = [
      3418070365,
      3238371032,
      1654270250,
      914150663,
      2438529370,
      812702999,
      355462360,
      4144912697,
      1731405415,
      4290775857,
      2394180231,
      1750603025,
      3675008525,
      1694076839,
      1203062813,
      3204075428
    ];
  }
  return r.inherits(t, e), _384 = t, t.blockSize = 1024, t.outSize = 384, t.hmacStrength = 192, t.padLength = 128, t.prototype._digest = function(s) {
    return s === "hex" ? r.toHex32(this.h.slice(0, 12), "big") : r.split32(this.h.slice(0, 12), "big");
  }, _384;
}
var hasRequiredSha;
function requireSha() {
  return hasRequiredSha || (hasRequiredSha = 1, sha.sha1 = require_1(), sha.sha224 = require_224(), sha.sha256 = require_256(), sha.sha384 = require_384(), sha.sha512 = require_512()), sha;
}
var ripemd = {}, hasRequiredRipemd;
function requireRipemd() {
  if (hasRequiredRipemd) return ripemd;
  hasRequiredRipemd = 1;
  var r = requireUtils(), e = requireCommon$1(), t = r.rotl32, n = r.sum32, s = r.sum32_3, a = r.sum32_4, o = e.BlockHash;
  function u() {
    if (!(this instanceof u))
      return new u();
    o.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
  }
  r.inherits(u, o), ripemd.ripemd160 = u, u.blockSize = 512, u.outSize = 160, u.hmacStrength = 192, u.padLength = 64, u.prototype._update = function(b, v) {
    for (var w = this.h[0], I = this.h[1], T = this.h[2], _ = this.h[3], F = this.h[4], O = w, q = I, V = T, H = _, R = F, $ = 0; $ < 80; $++) {
      var S = n(
        t(
          a(w, l($, I, T, _), b[h[$] + v], f($)),
          m[$]
        ),
        F
      );
      w = F, F = _, _ = t(T, 10), T = I, I = S, S = n(
        t(
          a(O, l(79 - $, q, V, H), b[d[$] + v], c($)),
          g[$]
        ),
        R
      ), O = R, R = H, H = t(V, 10), V = q, q = S;
    }
    S = s(this.h[1], T, H), this.h[1] = s(this.h[2], _, R), this.h[2] = s(this.h[3], F, O), this.h[3] = s(this.h[4], w, q), this.h[4] = s(this.h[0], I, V), this.h[0] = S;
  }, u.prototype._digest = function(b) {
    return b === "hex" ? r.toHex32(this.h, "little") : r.split32(this.h, "little");
  };
  function l(y, b, v, w) {
    return y <= 15 ? b ^ v ^ w : y <= 31 ? b & v | ~b & w : y <= 47 ? (b | ~v) ^ w : y <= 63 ? b & w | v & ~w : b ^ (v | ~w);
  }
  function f(y) {
    return y <= 15 ? 0 : y <= 31 ? 1518500249 : y <= 47 ? 1859775393 : y <= 63 ? 2400959708 : 2840853838;
  }
  function c(y) {
    return y <= 15 ? 1352829926 : y <= 31 ? 1548603684 : y <= 47 ? 1836072691 : y <= 63 ? 2053994217 : 0;
  }
  var h = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ], d = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ], m = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ], g = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ];
  return ripemd;
}
var hmac, hasRequiredHmac;
function requireHmac() {
  if (hasRequiredHmac) return hmac;
  hasRequiredHmac = 1;
  var r = requireUtils(), e = requireMinimalisticAssert();
  function t(n, s, a) {
    if (!(this instanceof t))
      return new t(n, s, a);
    this.Hash = n, this.blockSize = n.blockSize / 8, this.outSize = n.outSize / 8, this.inner = null, this.outer = null, this._init(r.toArray(s, a));
  }
  return hmac = t, t.prototype._init = function(s) {
    s.length > this.blockSize && (s = new this.Hash().update(s).digest()), e(s.length <= this.blockSize);
    for (var a = s.length; a < this.blockSize; a++)
      s.push(0);
    for (a = 0; a < s.length; a++)
      s[a] ^= 54;
    for (this.inner = new this.Hash().update(s), a = 0; a < s.length; a++)
      s[a] ^= 106;
    this.outer = new this.Hash().update(s);
  }, t.prototype.update = function(s, a) {
    return this.inner.update(s, a), this;
  }, t.prototype.digest = function(s) {
    return this.outer.update(this.inner.digest()), this.outer.digest(s);
  }, hmac;
}
var hasRequiredHash;
function requireHash() {
  return hasRequiredHash || (hasRequiredHash = 1, function(r) {
    var e = r;
    e.utils = requireUtils(), e.common = requireCommon$1(), e.sha = requireSha(), e.ripemd = requireRipemd(), e.hmac = requireHmac(), e.sha1 = e.sha.sha1, e.sha256 = e.sha.sha256, e.sha224 = e.sha.sha224, e.sha384 = e.sha.sha384, e.sha512 = e.sha.sha512, e.ripemd160 = e.ripemd.ripemd160;
  }(hash)), hash;
}
var secp256k1, hasRequiredSecp256k1;
function requireSecp256k1() {
  return hasRequiredSecp256k1 || (hasRequiredSecp256k1 = 1, secp256k1 = {
    doubles: {
      step: 4,
      points: [
        [
          "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
          "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
        ],
        [
          "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
          "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
        ],
        [
          "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
          "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
        ],
        [
          "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
          "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
        ],
        [
          "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
          "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
        ],
        [
          "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
          "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
        ],
        [
          "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
          "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
        ],
        [
          "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
          "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
        ],
        [
          "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
          "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
        ],
        [
          "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
          "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
        ],
        [
          "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
          "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
        ],
        [
          "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
          "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
        ],
        [
          "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
          "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
        ],
        [
          "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
          "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
        ],
        [
          "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
          "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
        ],
        [
          "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
          "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
        ],
        [
          "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
          "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
        ],
        [
          "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
          "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
        ],
        [
          "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
          "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
        ],
        [
          "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
          "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
        ],
        [
          "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
          "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
        ],
        [
          "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
          "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
        ],
        [
          "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
          "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
        ],
        [
          "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
          "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
        ],
        [
          "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
          "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
        ],
        [
          "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
          "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
        ],
        [
          "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
          "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
        ],
        [
          "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
          "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
        ],
        [
          "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
          "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
        ],
        [
          "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
          "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
        ],
        [
          "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
          "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
        ],
        [
          "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
          "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
        ],
        [
          "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
          "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
        ],
        [
          "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
          "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
        ],
        [
          "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
          "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
        ],
        [
          "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
          "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
        ],
        [
          "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
          "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
        ],
        [
          "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
          "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
        ],
        [
          "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
          "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
        ],
        [
          "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
          "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
        ],
        [
          "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
          "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
        ],
        [
          "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
          "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
        ],
        [
          "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
          "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
        ],
        [
          "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
          "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
        ],
        [
          "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
          "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
        ],
        [
          "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
          "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
        ],
        [
          "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
          "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
        ],
        [
          "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
          "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
        ],
        [
          "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
          "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
        ],
        [
          "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
          "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
        ],
        [
          "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
          "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
        ],
        [
          "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
          "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
        ],
        [
          "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
          "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
        ],
        [
          "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
          "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
        ],
        [
          "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
          "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
        ],
        [
          "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
          "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
        ],
        [
          "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
          "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
        ],
        [
          "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
          "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
        ],
        [
          "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
          "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
        ],
        [
          "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
          "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
        ],
        [
          "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
          "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
        ],
        [
          "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
          "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
        ],
        [
          "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
          "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
        ],
        [
          "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
          "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
        ],
        [
          "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
          "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
        ]
      ]
    },
    naf: {
      wnd: 7,
      points: [
        [
          "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
          "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
        ],
        [
          "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
          "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
        ],
        [
          "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
          "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
        ],
        [
          "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
          "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
        ],
        [
          "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
          "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
        ],
        [
          "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
          "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
        ],
        [
          "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
          "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
        ],
        [
          "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
          "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
        ],
        [
          "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
          "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
        ],
        [
          "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
          "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
        ],
        [
          "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
          "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
        ],
        [
          "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
          "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
        ],
        [
          "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
          "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
        ],
        [
          "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
          "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
        ],
        [
          "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
          "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
        ],
        [
          "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
          "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
        ],
        [
          "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
          "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
        ],
        [
          "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
          "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
        ],
        [
          "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
          "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
        ],
        [
          "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
          "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
        ],
        [
          "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
          "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
        ],
        [
          "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
          "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
        ],
        [
          "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
          "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
        ],
        [
          "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
          "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
        ],
        [
          "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
          "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
        ],
        [
          "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
          "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
        ],
        [
          "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
          "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
        ],
        [
          "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
          "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
        ],
        [
          "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
          "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
        ],
        [
          "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
          "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
        ],
        [
          "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
          "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
        ],
        [
          "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
          "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
        ],
        [
          "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
          "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
        ],
        [
          "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
          "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
        ],
        [
          "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
          "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
        ],
        [
          "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
          "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
        ],
        [
          "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
          "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
        ],
        [
          "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
          "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
        ],
        [
          "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
          "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
        ],
        [
          "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
          "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
        ],
        [
          "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
          "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
        ],
        [
          "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
          "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
        ],
        [
          "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
          "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
        ],
        [
          "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
          "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
        ],
        [
          "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
          "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
        ],
        [
          "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
          "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
        ],
        [
          "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
          "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
        ],
        [
          "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
          "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
        ],
        [
          "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
          "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
        ],
        [
          "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
          "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
        ],
        [
          "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
          "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
        ],
        [
          "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
          "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
        ],
        [
          "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
          "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
        ],
        [
          "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
          "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
        ],
        [
          "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
          "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
        ],
        [
          "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
          "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
        ],
        [
          "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
          "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
        ],
        [
          "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
          "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
        ],
        [
          "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
          "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
        ],
        [
          "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
          "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
        ],
        [
          "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
          "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
        ],
        [
          "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
          "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
        ],
        [
          "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
          "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
        ],
        [
          "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
          "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
        ],
        [
          "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
          "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
        ],
        [
          "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
          "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
        ],
        [
          "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
          "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
        ],
        [
          "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
          "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
        ],
        [
          "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
          "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
        ],
        [
          "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
          "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
        ],
        [
          "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
          "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
        ],
        [
          "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
          "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
        ],
        [
          "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
          "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
        ],
        [
          "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
          "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
        ],
        [
          "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
          "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
        ],
        [
          "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
          "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
        ],
        [
          "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
          "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
        ],
        [
          "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
          "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
        ],
        [
          "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
          "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
        ],
        [
          "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
          "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
        ],
        [
          "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
          "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
        ],
        [
          "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
          "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
        ],
        [
          "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
          "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
        ],
        [
          "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
          "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
        ],
        [
          "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
          "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
        ],
        [
          "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
          "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
        ],
        [
          "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
          "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
        ],
        [
          "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
          "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
        ],
        [
          "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
          "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
        ],
        [
          "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
          "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
        ],
        [
          "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
          "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
        ],
        [
          "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
          "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
        ],
        [
          "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
          "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
        ],
        [
          "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
          "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
        ],
        [
          "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
          "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
        ],
        [
          "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
          "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
        ],
        [
          "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
          "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
        ],
        [
          "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
          "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
        ],
        [
          "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
          "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
        ],
        [
          "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
          "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
        ],
        [
          "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
          "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
        ],
        [
          "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
          "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
        ],
        [
          "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
          "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
        ],
        [
          "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
          "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
        ],
        [
          "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
          "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
        ],
        [
          "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
          "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
        ],
        [
          "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
          "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
        ],
        [
          "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
          "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
        ],
        [
          "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
          "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
        ],
        [
          "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
          "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
        ],
        [
          "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
          "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
        ],
        [
          "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
          "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
        ],
        [
          "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
          "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
        ],
        [
          "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
          "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
        ],
        [
          "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
          "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
        ],
        [
          "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
          "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
        ],
        [
          "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
          "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
        ],
        [
          "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
          "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
        ],
        [
          "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
          "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
        ],
        [
          "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
          "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
        ],
        [
          "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
          "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
        ],
        [
          "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
          "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
        ],
        [
          "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
          "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
        ],
        [
          "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
          "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
        ],
        [
          "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
          "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
        ],
        [
          "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
          "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
        ],
        [
          "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
          "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
        ]
      ]
    }
  }), secp256k1;
}
var hasRequiredCurves;
function requireCurves() {
  return hasRequiredCurves || (hasRequiredCurves = 1, function(r) {
    var e = r, t = requireHash(), n = requireCurve(), s = requireUtils$1(), a = s.assert;
    function o(f) {
      f.type === "short" ? this.curve = new n.short(f) : f.type === "edwards" ? this.curve = new n.edwards(f) : this.curve = new n.mont(f), this.g = this.curve.g, this.n = this.curve.n, this.hash = f.hash, a(this.g.validate(), "Invalid curve"), a(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    e.PresetCurve = o;
    function u(f, c) {
      Object.defineProperty(e, f, {
        configurable: !0,
        enumerable: !0,
        get: function() {
          var h = new o(c);
          return Object.defineProperty(e, f, {
            configurable: !0,
            enumerable: !0,
            value: h
          }), h;
        }
      });
    }
    u("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: t.sha256,
      gRed: !1,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    }), u("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: t.sha256,
      gRed: !1,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    }), u("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: t.sha256,
      gRed: !1,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    }), u("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: t.sha384,
      gRed: !1,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    }), u("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: t.sha512,
      gRed: !1,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    }), u("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: t.sha256,
      gRed: !1,
      g: [
        "9"
      ]
    }), u("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: t.sha256,
      gRed: !1,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var l;
    try {
      l = requireSecp256k1();
    } catch {
      l = void 0;
    }
    u("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: t.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: !1,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        l
      ]
    });
  }(curves)), curves;
}
var hmacDrbg, hasRequiredHmacDrbg;
function requireHmacDrbg() {
  if (hasRequiredHmacDrbg) return hmacDrbg;
  hasRequiredHmacDrbg = 1;
  var r = requireHash(), e = requireUtils$2(), t = requireMinimalisticAssert();
  function n(s) {
    if (!(this instanceof n))
      return new n(s);
    this.hash = s.hash, this.predResist = !!s.predResist, this.outLen = this.hash.outSize, this.minEntropy = s.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
    var a = e.toArray(s.entropy, s.entropyEnc || "hex"), o = e.toArray(s.nonce, s.nonceEnc || "hex"), u = e.toArray(s.pers, s.persEnc || "hex");
    t(
      a.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    ), this._init(a, o, u);
  }
  return hmacDrbg = n, n.prototype._init = function(a, o, u) {
    var l = a.concat(o).concat(u);
    this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
    for (var f = 0; f < this.V.length; f++)
      this.K[f] = 0, this.V[f] = 1;
    this._update(l), this._reseed = 1, this.reseedInterval = 281474976710656;
  }, n.prototype._hmac = function() {
    return new r.hmac(this.hash, this.K);
  }, n.prototype._update = function(a) {
    var o = this._hmac().update(this.V).update([0]);
    a && (o = o.update(a)), this.K = o.digest(), this.V = this._hmac().update(this.V).digest(), a && (this.K = this._hmac().update(this.V).update([1]).update(a).digest(), this.V = this._hmac().update(this.V).digest());
  }, n.prototype.reseed = function(a, o, u, l) {
    typeof o != "string" && (l = u, u = o, o = null), a = e.toArray(a, o), u = e.toArray(u, l), t(
      a.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    ), this._update(a.concat(u || [])), this._reseed = 1;
  }, n.prototype.generate = function(a, o, u, l) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    typeof o != "string" && (l = u, u = o, o = null), u && (u = e.toArray(u, l || "hex"), this._update(u));
    for (var f = []; f.length < a; )
      this.V = this._hmac().update(this.V).digest(), f = f.concat(this.V);
    var c = f.slice(0, a);
    return this._update(u), this._reseed++, e.encode(c, o);
  }, hmacDrbg;
}
var key$1, hasRequiredKey$1;
function requireKey$1() {
  if (hasRequiredKey$1) return key$1;
  hasRequiredKey$1 = 1;
  var r = requireBn$1(), e = requireUtils$1(), t = e.assert;
  function n(s, a) {
    this.ec = s, this.priv = null, this.pub = null, a.priv && this._importPrivate(a.priv, a.privEnc), a.pub && this._importPublic(a.pub, a.pubEnc);
  }
  return key$1 = n, n.fromPublic = function(a, o, u) {
    return o instanceof n ? o : new n(a, {
      pub: o,
      pubEnc: u
    });
  }, n.fromPrivate = function(a, o, u) {
    return o instanceof n ? o : new n(a, {
      priv: o,
      privEnc: u
    });
  }, n.prototype.validate = function() {
    var a = this.getPublic();
    return a.isInfinity() ? { result: !1, reason: "Invalid public key" } : a.validate() ? a.mul(this.ec.curve.n).isInfinity() ? { result: !0, reason: null } : { result: !1, reason: "Public key * N != O" } : { result: !1, reason: "Public key is not a point" };
  }, n.prototype.getPublic = function(a, o) {
    return typeof a == "string" && (o = a, a = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), o ? this.pub.encode(o, a) : this.pub;
  }, n.prototype.getPrivate = function(a) {
    return a === "hex" ? this.priv.toString(16, 2) : this.priv;
  }, n.prototype._importPrivate = function(a, o) {
    this.priv = new r(a, o || 16), this.priv = this.priv.umod(this.ec.curve.n);
  }, n.prototype._importPublic = function(a, o) {
    if (a.x || a.y) {
      this.ec.curve.type === "mont" ? t(a.x, "Need x coordinate") : (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") && t(a.x && a.y, "Need both x and y coordinate"), this.pub = this.ec.curve.point(a.x, a.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(a, o);
  }, n.prototype.derive = function(a) {
    return a.validate() || t(a.validate(), "public point not validated"), a.mul(this.priv).getX();
  }, n.prototype.sign = function(a, o, u) {
    return this.ec.sign(a, this, o, u);
  }, n.prototype.verify = function(a, o, u) {
    return this.ec.verify(a, o, this, void 0, u);
  }, n.prototype.inspect = function() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  }, key$1;
}
var signature$1, hasRequiredSignature$1;
function requireSignature$1() {
  if (hasRequiredSignature$1) return signature$1;
  hasRequiredSignature$1 = 1;
  var r = requireBn$1(), e = requireUtils$1(), t = e.assert;
  function n(l, f) {
    if (l instanceof n)
      return l;
    this._importDER(l, f) || (t(l.r && l.s, "Signature without r or s"), this.r = new r(l.r, 16), this.s = new r(l.s, 16), l.recoveryParam === void 0 ? this.recoveryParam = null : this.recoveryParam = l.recoveryParam);
  }
  signature$1 = n;
  function s() {
    this.place = 0;
  }
  function a(l, f) {
    var c = l[f.place++];
    if (!(c & 128))
      return c;
    var h = c & 15;
    if (h === 0 || h > 4 || l[f.place] === 0)
      return !1;
    for (var d = 0, m = 0, g = f.place; m < h; m++, g++)
      d <<= 8, d |= l[g], d >>>= 0;
    return d <= 127 ? !1 : (f.place = g, d);
  }
  function o(l) {
    for (var f = 0, c = l.length - 1; !l[f] && !(l[f + 1] & 128) && f < c; )
      f++;
    return f === 0 ? l : l.slice(f);
  }
  n.prototype._importDER = function(f, c) {
    f = e.toArray(f, c);
    var h = new s();
    if (f[h.place++] !== 48)
      return !1;
    var d = a(f, h);
    if (d === !1 || d + h.place !== f.length || f[h.place++] !== 2)
      return !1;
    var m = a(f, h);
    if (m === !1 || f[h.place] & 128)
      return !1;
    var g = f.slice(h.place, m + h.place);
    if (h.place += m, f[h.place++] !== 2)
      return !1;
    var y = a(f, h);
    if (y === !1 || f.length !== y + h.place || f[h.place] & 128)
      return !1;
    var b = f.slice(h.place, y + h.place);
    if (g[0] === 0)
      if (g[1] & 128)
        g = g.slice(1);
      else
        return !1;
    if (b[0] === 0)
      if (b[1] & 128)
        b = b.slice(1);
      else
        return !1;
    return this.r = new r(g), this.s = new r(b), this.recoveryParam = null, !0;
  };
  function u(l, f) {
    if (f < 128) {
      l.push(f);
      return;
    }
    var c = 1 + (Math.log(f) / Math.LN2 >>> 3);
    for (l.push(c | 128); --c; )
      l.push(f >>> (c << 3) & 255);
    l.push(f);
  }
  return n.prototype.toDER = function(f) {
    var c = this.r.toArray(), h = this.s.toArray();
    for (c[0] & 128 && (c = [0].concat(c)), h[0] & 128 && (h = [0].concat(h)), c = o(c), h = o(h); !h[0] && !(h[1] & 128); )
      h = h.slice(1);
    var d = [2];
    u(d, c.length), d = d.concat(c), d.push(2), u(d, h.length);
    var m = d.concat(h), g = [48];
    return u(g, m.length), g = g.concat(m), e.encode(g, f);
  }, signature$1;
}
var ec, hasRequiredEc;
function requireEc() {
  if (hasRequiredEc) return ec;
  hasRequiredEc = 1;
  var r = requireBn$1(), e = requireHmacDrbg(), t = requireUtils$1(), n = requireCurves(), s = requireBrorand(), a = t.assert, o = requireKey$1(), u = requireSignature$1();
  function l(f) {
    if (!(this instanceof l))
      return new l(f);
    typeof f == "string" && (a(
      Object.prototype.hasOwnProperty.call(n, f),
      "Unknown curve " + f
    ), f = n[f]), f instanceof n.PresetCurve && (f = { curve: f }), this.curve = f.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = f.curve.g, this.g.precompute(f.curve.n.bitLength() + 1), this.hash = f.hash || f.curve.hash;
  }
  return ec = l, l.prototype.keyPair = function(c) {
    return new o(this, c);
  }, l.prototype.keyFromPrivate = function(c, h) {
    return o.fromPrivate(this, c, h);
  }, l.prototype.keyFromPublic = function(c, h) {
    return o.fromPublic(this, c, h);
  }, l.prototype.genKeyPair = function(c) {
    c || (c = {});
    for (var h = new e({
      hash: this.hash,
      pers: c.pers,
      persEnc: c.persEnc || "utf8",
      entropy: c.entropy || s(this.hash.hmacStrength),
      entropyEnc: c.entropy && c.entropyEnc || "utf8",
      nonce: this.n.toArray()
    }), d = this.n.byteLength(), m = this.n.sub(new r(2)); ; ) {
      var g = new r(h.generate(d));
      if (!(g.cmp(m) > 0))
        return g.iaddn(1), this.keyFromPrivate(g);
    }
  }, l.prototype._truncateToN = function(c, h, d) {
    var m;
    if (r.isBN(c) || typeof c == "number")
      c = new r(c, 16), m = c.byteLength();
    else if (typeof c == "object")
      m = c.length, c = new r(c, 16);
    else {
      var g = c.toString();
      m = g.length + 1 >>> 1, c = new r(g, 16);
    }
    typeof d != "number" && (d = m * 8);
    var y = d - this.n.bitLength();
    return y > 0 && (c = c.ushrn(y)), !h && c.cmp(this.n) >= 0 ? c.sub(this.n) : c;
  }, l.prototype.sign = function(c, h, d, m) {
    if (typeof d == "object" && (m = d, d = null), m || (m = {}), typeof c != "string" && typeof c != "number" && !r.isBN(c)) {
      a(
        typeof c == "object" && c && typeof c.length == "number",
        "Expected message to be an array-like, a hex string, or a BN instance"
      ), a(c.length >>> 0 === c.length);
      for (var g = 0; g < c.length; g++) a((c[g] & 255) === c[g]);
    }
    h = this.keyFromPrivate(h, d), c = this._truncateToN(c, !1, m.msgBitLength), a(!c.isNeg(), "Can not sign a negative message");
    var y = this.n.byteLength(), b = h.getPrivate().toArray("be", y), v = c.toArray("be", y);
    a(new r(v).eq(c), "Can not sign message");
    for (var w = new e({
      hash: this.hash,
      entropy: b,
      nonce: v,
      pers: m.pers,
      persEnc: m.persEnc || "utf8"
    }), I = this.n.sub(new r(1)), T = 0; ; T++) {
      var _ = m.k ? m.k(T) : new r(w.generate(this.n.byteLength()));
      if (_ = this._truncateToN(_, !0), !(_.cmpn(1) <= 0 || _.cmp(I) >= 0)) {
        var F = this.g.mul(_);
        if (!F.isInfinity()) {
          var O = F.getX(), q = O.umod(this.n);
          if (q.cmpn(0) !== 0) {
            var V = _.invm(this.n).mul(q.mul(h.getPrivate()).iadd(c));
            if (V = V.umod(this.n), V.cmpn(0) !== 0) {
              var H = (F.getY().isOdd() ? 1 : 0) | (O.cmp(q) !== 0 ? 2 : 0);
              return m.canonical && V.cmp(this.nh) > 0 && (V = this.n.sub(V), H ^= 1), new u({ r: q, s: V, recoveryParam: H });
            }
          }
        }
      }
    }
  }, l.prototype.verify = function(c, h, d, m, g) {
    g || (g = {}), c = this._truncateToN(c, !1, g.msgBitLength), d = this.keyFromPublic(d, m), h = new u(h, "hex");
    var y = h.r, b = h.s;
    if (y.cmpn(1) < 0 || y.cmp(this.n) >= 0 || b.cmpn(1) < 0 || b.cmp(this.n) >= 0)
      return !1;
    var v = b.invm(this.n), w = v.mul(c).umod(this.n), I = v.mul(y).umod(this.n), T;
    return this.curve._maxwellTrick ? (T = this.g.jmulAdd(w, d.getPublic(), I), T.isInfinity() ? !1 : T.eqXToP(y)) : (T = this.g.mulAdd(w, d.getPublic(), I), T.isInfinity() ? !1 : T.getX().umod(this.n).cmp(y) === 0);
  }, l.prototype.recoverPubKey = function(f, c, h, d) {
    a((3 & h) === h, "The recovery param is more than two bits"), c = new u(c, d);
    var m = this.n, g = new r(f), y = c.r, b = c.s, v = h & 1, w = h >> 1;
    if (y.cmp(this.curve.p.umod(this.curve.n)) >= 0 && w)
      throw new Error("Unable to find sencond key candinate");
    w ? y = this.curve.pointFromX(y.add(this.curve.n), v) : y = this.curve.pointFromX(y, v);
    var I = c.r.invm(m), T = m.sub(g).mul(I).umod(m), _ = b.mul(I).umod(m);
    return this.g.mulAdd(T, y, _);
  }, l.prototype.getKeyRecoveryParam = function(f, c, h, d) {
    if (c = new u(c, d), c.recoveryParam !== null)
      return c.recoveryParam;
    for (var m = 0; m < 4; m++) {
      var g;
      try {
        g = this.recoverPubKey(f, c, m);
      } catch {
        continue;
      }
      if (g.eq(h))
        return m;
    }
    throw new Error("Unable to find valid recovery factor");
  }, ec;
}
var key, hasRequiredKey;
function requireKey() {
  if (hasRequiredKey) return key;
  hasRequiredKey = 1;
  var r = requireUtils$1(), e = r.assert, t = r.parseBytes, n = r.cachedProperty;
  function s(a, o) {
    this.eddsa = a, this._secret = t(o.secret), a.isPoint(o.pub) ? this._pub = o.pub : this._pubBytes = t(o.pub);
  }
  return s.fromPublic = function(o, u) {
    return u instanceof s ? u : new s(o, { pub: u });
  }, s.fromSecret = function(o, u) {
    return u instanceof s ? u : new s(o, { secret: u });
  }, s.prototype.secret = function() {
    return this._secret;
  }, n(s, "pubBytes", function() {
    return this.eddsa.encodePoint(this.pub());
  }), n(s, "pub", function() {
    return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
  }), n(s, "privBytes", function() {
    var o = this.eddsa, u = this.hash(), l = o.encodingLength - 1, f = u.slice(0, o.encodingLength);
    return f[0] &= 248, f[l] &= 127, f[l] |= 64, f;
  }), n(s, "priv", function() {
    return this.eddsa.decodeInt(this.privBytes());
  }), n(s, "hash", function() {
    return this.eddsa.hash().update(this.secret()).digest();
  }), n(s, "messagePrefix", function() {
    return this.hash().slice(this.eddsa.encodingLength);
  }), s.prototype.sign = function(o) {
    return e(this._secret, "KeyPair can only verify"), this.eddsa.sign(o, this);
  }, s.prototype.verify = function(o, u) {
    return this.eddsa.verify(o, u, this);
  }, s.prototype.getSecret = function(o) {
    return e(this._secret, "KeyPair is public only"), r.encode(this.secret(), o);
  }, s.prototype.getPublic = function(o) {
    return r.encode(this.pubBytes(), o);
  }, key = s, key;
}
var signature, hasRequiredSignature;
function requireSignature() {
  if (hasRequiredSignature) return signature;
  hasRequiredSignature = 1;
  var r = requireBn$1(), e = requireUtils$1(), t = e.assert, n = e.cachedProperty, s = e.parseBytes;
  function a(o, u) {
    this.eddsa = o, typeof u != "object" && (u = s(u)), Array.isArray(u) && (t(u.length === o.encodingLength * 2, "Signature has invalid size"), u = {
      R: u.slice(0, o.encodingLength),
      S: u.slice(o.encodingLength)
    }), t(u.R && u.S, "Signature without R or S"), o.isPoint(u.R) && (this._R = u.R), u.S instanceof r && (this._S = u.S), this._Rencoded = Array.isArray(u.R) ? u.R : u.Rencoded, this._Sencoded = Array.isArray(u.S) ? u.S : u.Sencoded;
  }
  return n(a, "S", function() {
    return this.eddsa.decodeInt(this.Sencoded());
  }), n(a, "R", function() {
    return this.eddsa.decodePoint(this.Rencoded());
  }), n(a, "Rencoded", function() {
    return this.eddsa.encodePoint(this.R());
  }), n(a, "Sencoded", function() {
    return this.eddsa.encodeInt(this.S());
  }), a.prototype.toBytes = function() {
    return this.Rencoded().concat(this.Sencoded());
  }, a.prototype.toHex = function() {
    return e.encode(this.toBytes(), "hex").toUpperCase();
  }, signature = a, signature;
}
var eddsa, hasRequiredEddsa;
function requireEddsa() {
  if (hasRequiredEddsa) return eddsa;
  hasRequiredEddsa = 1;
  var r = requireHash(), e = requireCurves(), t = requireUtils$1(), n = t.assert, s = t.parseBytes, a = requireKey(), o = requireSignature();
  function u(l) {
    if (n(l === "ed25519", "only tested with ed25519 so far"), !(this instanceof u))
      return new u(l);
    l = e[l].curve, this.curve = l, this.g = l.g, this.g.precompute(l.n.bitLength() + 1), this.pointClass = l.point().constructor, this.encodingLength = Math.ceil(l.n.bitLength() / 8), this.hash = r.sha512;
  }
  return eddsa = u, u.prototype.sign = function(f, c) {
    f = s(f);
    var h = this.keyFromSecret(c), d = this.hashInt(h.messagePrefix(), f), m = this.g.mul(d), g = this.encodePoint(m), y = this.hashInt(g, h.pubBytes(), f).mul(h.priv()), b = d.add(y).umod(this.curve.n);
    return this.makeSignature({ R: m, S: b, Rencoded: g });
  }, u.prototype.verify = function(f, c, h) {
    if (f = s(f), c = this.makeSignature(c), c.S().gte(c.eddsa.curve.n) || c.S().isNeg())
      return !1;
    var d = this.keyFromPublic(h), m = this.hashInt(c.Rencoded(), d.pubBytes(), f), g = this.g.mul(c.S()), y = c.R().add(d.pub().mul(m));
    return y.eq(g);
  }, u.prototype.hashInt = function() {
    for (var f = this.hash(), c = 0; c < arguments.length; c++)
      f.update(arguments[c]);
    return t.intFromLE(f.digest()).umod(this.curve.n);
  }, u.prototype.keyFromPublic = function(f) {
    return a.fromPublic(this, f);
  }, u.prototype.keyFromSecret = function(f) {
    return a.fromSecret(this, f);
  }, u.prototype.makeSignature = function(f) {
    return f instanceof o ? f : new o(this, f);
  }, u.prototype.encodePoint = function(f) {
    var c = f.getY().toArray("le", this.encodingLength);
    return c[this.encodingLength - 1] |= f.getX().isOdd() ? 128 : 0, c;
  }, u.prototype.decodePoint = function(f) {
    f = t.parseBytes(f);
    var c = f.length - 1, h = f.slice(0, c).concat(f[c] & -129), d = (f[c] & 128) !== 0, m = t.intFromLE(h);
    return this.curve.pointFromY(m, d);
  }, u.prototype.encodeInt = function(f) {
    return f.toArray("le", this.encodingLength);
  }, u.prototype.decodeInt = function(f) {
    return t.intFromLE(f);
  }, u.prototype.isPoint = function(f) {
    return f instanceof this.pointClass;
  }, eddsa;
}
var hasRequiredElliptic;
function requireElliptic() {
  return hasRequiredElliptic || (hasRequiredElliptic = 1, function(r) {
    var e = r;
    e.version = require$$0.version, e.utils = requireUtils$1(), e.rand = requireBrorand(), e.curve = requireCurve(), e.curves = requireCurves(), e.ec = requireEc(), e.eddsa = requireEddsa();
  }(elliptic)), elliptic;
}
var asn1$1 = {}, asn1 = {}, api = {}, vmBrowserify = {}, hasRequiredVmBrowserify;
function requireVmBrowserify() {
  return hasRequiredVmBrowserify || (hasRequiredVmBrowserify = 1, function(exports) {
    var indexOf = function(r, e) {
      if (r.indexOf) return r.indexOf(e);
      for (var t = 0; t < r.length; t++)
        if (r[t] === e) return t;
      return -1;
    }, Object_keys = function(r) {
      if (Object.keys) return Object.keys(r);
      var e = [];
      for (var t in r) e.push(t);
      return e;
    }, forEach = function(r, e) {
      if (r.forEach) return r.forEach(e);
      for (var t = 0; t < r.length; t++)
        e(r[t], t, r);
    }, defineProp = function() {
      try {
        return Object.defineProperty({}, "_", {}), function(r, e, t) {
          Object.defineProperty(r, e, {
            writable: !0,
            enumerable: !1,
            configurable: !0,
            value: t
          });
        };
      } catch {
        return function(e, t, n) {
          e[t] = n;
        };
      }
    }(), globals = [
      "Array",
      "Boolean",
      "Date",
      "Error",
      "EvalError",
      "Function",
      "Infinity",
      "JSON",
      "Math",
      "NaN",
      "Number",
      "Object",
      "RangeError",
      "ReferenceError",
      "RegExp",
      "String",
      "SyntaxError",
      "TypeError",
      "URIError",
      "decodeURI",
      "decodeURIComponent",
      "encodeURI",
      "encodeURIComponent",
      "escape",
      "eval",
      "isFinite",
      "isNaN",
      "parseFloat",
      "parseInt",
      "undefined",
      "unescape"
    ];
    function Context() {
    }
    Context.prototype = {};
    var Script = exports.Script = function(e) {
      if (!(this instanceof Script)) return new Script(e);
      this.code = e;
    };
    Script.prototype.runInContext = function(r) {
      if (!(r instanceof Context))
        throw new TypeError("needs a 'context' argument.");
      var e = document.createElement("iframe");
      e.style || (e.style = {}), e.style.display = "none", document.body.appendChild(e);
      var t = e.contentWindow, n = t.eval, s = t.execScript;
      !n && s && (s.call(t, "null"), n = t.eval), forEach(Object_keys(r), function(u) {
        t[u] = r[u];
      }), forEach(globals, function(u) {
        r[u] && (t[u] = r[u]);
      });
      var a = Object_keys(t), o = n.call(t, this.code);
      return forEach(Object_keys(t), function(u) {
        (u in r || indexOf(a, u) === -1) && (r[u] = t[u]);
      }), forEach(globals, function(u) {
        u in r || defineProp(r, u, t[u]);
      }), document.body.removeChild(e), o;
    }, Script.prototype.runInThisContext = function() {
      return eval(this.code);
    }, Script.prototype.runInNewContext = function(r) {
      var e = Script.createContext(r), t = this.runInContext(e);
      return r && forEach(Object_keys(e), function(n) {
        r[n] = e[n];
      }), t;
    }, forEach(Object_keys(Script.prototype), function(r) {
      exports[r] = Script[r] = function(e) {
        var t = Script(e);
        return t[r].apply(t, [].slice.call(arguments, 1));
      };
    }), exports.isContext = function(r) {
      return r instanceof Context;
    }, exports.createScript = function(r) {
      return exports.Script(r);
    }, exports.createContext = Script.createContext = function(r) {
      var e = new Context();
      return typeof r == "object" && forEach(Object_keys(r), function(t) {
        e[t] = r[t];
      }), e;
    };
  }(vmBrowserify)), vmBrowserify;
}
var hasRequiredApi;
function requireApi() {
  return hasRequiredApi || (hasRequiredApi = 1, function(r) {
    var e = requireAsn1$1(), t = requireInherits_browser(), n = r;
    n.define = function(o, u) {
      return new s(o, u);
    };
    function s(a, o) {
      this.name = a, this.body = o, this.decoders = {}, this.encoders = {};
    }
    s.prototype._createNamed = function(o) {
      var u;
      try {
        u = requireVmBrowserify().runInThisContext(
          "(function " + this.name + `(entity) {
  this._initNamed(entity);
})`
        );
      } catch {
        u = function(f) {
          this._initNamed(f);
        };
      }
      return t(u, o), u.prototype._initNamed = function(f) {
        o.call(this, f);
      }, new u(this);
    }, s.prototype._getDecoder = function(o) {
      return o = o || "der", this.decoders.hasOwnProperty(o) || (this.decoders[o] = this._createNamed(e.decoders[o])), this.decoders[o];
    }, s.prototype.decode = function(o, u, l) {
      return this._getDecoder(u).decode(o, l);
    }, s.prototype._getEncoder = function(o) {
      return o = o || "der", this.encoders.hasOwnProperty(o) || (this.encoders[o] = this._createNamed(e.encoders[o])), this.encoders[o];
    }, s.prototype.encode = function(o, u, l) {
      return this._getEncoder(u).encode(o, l);
    };
  }(api)), api;
}
var base = {}, reporter = {}, hasRequiredReporter;
function requireReporter() {
  if (hasRequiredReporter) return reporter;
  hasRequiredReporter = 1;
  var r = requireInherits_browser();
  function e(n) {
    this._reporterState = {
      obj: null,
      path: [],
      options: n || {},
      errors: []
    };
  }
  reporter.Reporter = e, e.prototype.isError = function(s) {
    return s instanceof t;
  }, e.prototype.save = function() {
    var s = this._reporterState;
    return { obj: s.obj, pathLen: s.path.length };
  }, e.prototype.restore = function(s) {
    var a = this._reporterState;
    a.obj = s.obj, a.path = a.path.slice(0, s.pathLen);
  }, e.prototype.enterKey = function(s) {
    return this._reporterState.path.push(s);
  }, e.prototype.exitKey = function(s) {
    var a = this._reporterState;
    a.path = a.path.slice(0, s - 1);
  }, e.prototype.leaveKey = function(s, a, o) {
    var u = this._reporterState;
    this.exitKey(s), u.obj !== null && (u.obj[a] = o);
  }, e.prototype.path = function() {
    return this._reporterState.path.join("/");
  }, e.prototype.enterObject = function() {
    var s = this._reporterState, a = s.obj;
    return s.obj = {}, a;
  }, e.prototype.leaveObject = function(s) {
    var a = this._reporterState, o = a.obj;
    return a.obj = s, o;
  }, e.prototype.error = function(s) {
    var a, o = this._reporterState, u = s instanceof t;
    if (u ? a = s : a = new t(o.path.map(function(l) {
      return "[" + JSON.stringify(l) + "]";
    }).join(""), s.message || s, s.stack), !o.options.partial)
      throw a;
    return u || o.errors.push(a), a;
  }, e.prototype.wrapResult = function(s) {
    var a = this._reporterState;
    return a.options.partial ? {
      result: this.isError(s) ? null : s,
      errors: a.errors
    } : s;
  };
  function t(n, s) {
    this.path = n, this.rethrow(s);
  }
  return r(t, Error), t.prototype.rethrow = function(s) {
    if (this.message = s + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, t), !this.stack)
      try {
        throw new Error(this.message);
      } catch (a) {
        this.stack = a.stack;
      }
    return this;
  }, reporter;
}
var buffer = {}, hasRequiredBuffer;
function requireBuffer() {
  if (hasRequiredBuffer) return buffer;
  hasRequiredBuffer = 1;
  var r = requireInherits_browser(), e = requireBase().Reporter, t = requireDist().Buffer;
  function n(a, o) {
    if (e.call(this, o), !t.isBuffer(a)) {
      this.error("Input not Buffer");
      return;
    }
    this.base = a, this.offset = 0, this.length = a.length;
  }
  r(n, e), buffer.DecoderBuffer = n, n.prototype.save = function() {
    return { offset: this.offset, reporter: e.prototype.save.call(this) };
  }, n.prototype.restore = function(o) {
    var u = new n(this.base);
    return u.offset = o.offset, u.length = this.offset, this.offset = o.offset, e.prototype.restore.call(this, o.reporter), u;
  }, n.prototype.isEmpty = function() {
    return this.offset === this.length;
  }, n.prototype.readUInt8 = function(o) {
    return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, !0) : this.error(o || "DecoderBuffer overrun");
  }, n.prototype.skip = function(o, u) {
    if (!(this.offset + o <= this.length))
      return this.error(u || "DecoderBuffer overrun");
    var l = new n(this.base);
    return l._reporterState = this._reporterState, l.offset = this.offset, l.length = this.offset + o, this.offset += o, l;
  }, n.prototype.raw = function(o) {
    return this.base.slice(o ? o.offset : this.offset, this.length);
  };
  function s(a, o) {
    if (Array.isArray(a))
      this.length = 0, this.value = a.map(function(u) {
        return u instanceof s || (u = new s(u, o)), this.length += u.length, u;
      }, this);
    else if (typeof a == "number") {
      if (!(0 <= a && a <= 255))
        return o.error("non-byte EncoderBuffer value");
      this.value = a, this.length = 1;
    } else if (typeof a == "string")
      this.value = a, this.length = t.byteLength(a);
    else if (t.isBuffer(a))
      this.value = a, this.length = a.length;
    else
      return o.error("Unsupported type: " + typeof a);
  }
  return buffer.EncoderBuffer = s, s.prototype.join = function(o, u) {
    return o || (o = new t(this.length)), u || (u = 0), this.length === 0 || (Array.isArray(this.value) ? this.value.forEach(function(l) {
      l.join(o, u), u += l.length;
    }) : (typeof this.value == "number" ? o[u] = this.value : typeof this.value == "string" ? o.write(this.value, u) : t.isBuffer(this.value) && this.value.copy(o, u), u += this.length)), o;
  }, buffer;
}
var node, hasRequiredNode;
function requireNode() {
  if (hasRequiredNode) return node;
  hasRequiredNode = 1;
  var r = requireBase().Reporter, e = requireBase().EncoderBuffer, t = requireBase().DecoderBuffer, n = requireMinimalisticAssert(), s = [
    "seq",
    "seqof",
    "set",
    "setof",
    "objid",
    "bool",
    "gentime",
    "utctime",
    "null_",
    "enum",
    "int",
    "objDesc",
    "bitstr",
    "bmpstr",
    "charstr",
    "genstr",
    "graphstr",
    "ia5str",
    "iso646str",
    "numstr",
    "octstr",
    "printstr",
    "t61str",
    "unistr",
    "utf8str",
    "videostr"
  ], a = [
    "key",
    "obj",
    "use",
    "optional",
    "explicit",
    "implicit",
    "def",
    "choice",
    "any",
    "contains"
  ].concat(s), o = [
    "_peekTag",
    "_decodeTag",
    "_use",
    "_decodeStr",
    "_decodeObjid",
    "_decodeTime",
    "_decodeNull",
    "_decodeInt",
    "_decodeBool",
    "_decodeList",
    "_encodeComposite",
    "_encodeStr",
    "_encodeObjid",
    "_encodeTime",
    "_encodeNull",
    "_encodeInt",
    "_encodeBool"
  ];
  function u(f, c) {
    var h = {};
    this._baseState = h, h.enc = f, h.parent = c || null, h.children = null, h.tag = null, h.args = null, h.reverseArgs = null, h.choice = null, h.optional = !1, h.any = !1, h.obj = !1, h.use = null, h.useDecoder = null, h.key = null, h.default = null, h.explicit = null, h.implicit = null, h.contains = null, h.parent || (h.children = [], this._wrap());
  }
  node = u;
  var l = [
    "enc",
    "parent",
    "children",
    "tag",
    "args",
    "reverseArgs",
    "choice",
    "optional",
    "any",
    "obj",
    "use",
    "alteredUse",
    "key",
    "default",
    "explicit",
    "implicit",
    "contains"
  ];
  return u.prototype.clone = function() {
    var c = this._baseState, h = {};
    l.forEach(function(m) {
      h[m] = c[m];
    });
    var d = new this.constructor(h.parent);
    return d._baseState = h, d;
  }, u.prototype._wrap = function() {
    var c = this._baseState;
    a.forEach(function(h) {
      this[h] = function() {
        var m = new this.constructor(this);
        return c.children.push(m), m[h].apply(m, arguments);
      };
    }, this);
  }, u.prototype._init = function(c) {
    var h = this._baseState;
    n(h.parent === null), c.call(this), h.children = h.children.filter(function(d) {
      return d._baseState.parent === this;
    }, this), n.equal(h.children.length, 1, "Root node can have only one child");
  }, u.prototype._useArgs = function(c) {
    var h = this._baseState, d = c.filter(function(m) {
      return m instanceof this.constructor;
    }, this);
    c = c.filter(function(m) {
      return !(m instanceof this.constructor);
    }, this), d.length !== 0 && (n(h.children === null), h.children = d, d.forEach(function(m) {
      m._baseState.parent = this;
    }, this)), c.length !== 0 && (n(h.args === null), h.args = c, h.reverseArgs = c.map(function(m) {
      if (typeof m != "object" || m.constructor !== Object)
        return m;
      var g = {};
      return Object.keys(m).forEach(function(y) {
        y == (y | 0) && (y |= 0);
        var b = m[y];
        g[b] = y;
      }), g;
    }));
  }, o.forEach(function(f) {
    u.prototype[f] = function() {
      var h = this._baseState;
      throw new Error(f + " not implemented for encoding: " + h.enc);
    };
  }), s.forEach(function(f) {
    u.prototype[f] = function() {
      var h = this._baseState, d = Array.prototype.slice.call(arguments);
      return n(h.tag === null), h.tag = f, this._useArgs(d), this;
    };
  }), u.prototype.use = function(c) {
    n(c);
    var h = this._baseState;
    return n(h.use === null), h.use = c, this;
  }, u.prototype.optional = function() {
    var c = this._baseState;
    return c.optional = !0, this;
  }, u.prototype.def = function(c) {
    var h = this._baseState;
    return n(h.default === null), h.default = c, h.optional = !0, this;
  }, u.prototype.explicit = function(c) {
    var h = this._baseState;
    return n(h.explicit === null && h.implicit === null), h.explicit = c, this;
  }, u.prototype.implicit = function(c) {
    var h = this._baseState;
    return n(h.explicit === null && h.implicit === null), h.implicit = c, this;
  }, u.prototype.obj = function() {
    var c = this._baseState, h = Array.prototype.slice.call(arguments);
    return c.obj = !0, h.length !== 0 && this._useArgs(h), this;
  }, u.prototype.key = function(c) {
    var h = this._baseState;
    return n(h.key === null), h.key = c, this;
  }, u.prototype.any = function() {
    var c = this._baseState;
    return c.any = !0, this;
  }, u.prototype.choice = function(c) {
    var h = this._baseState;
    return n(h.choice === null), h.choice = c, this._useArgs(Object.keys(c).map(function(d) {
      return c[d];
    })), this;
  }, u.prototype.contains = function(c) {
    var h = this._baseState;
    return n(h.use === null), h.contains = c, this;
  }, u.prototype._decode = function(c, h) {
    var d = this._baseState;
    if (d.parent === null)
      return c.wrapResult(d.children[0]._decode(c, h));
    var m = d.default, g = !0, y = null;
    if (d.key !== null && (y = c.enterKey(d.key)), d.optional) {
      var b = null;
      if (d.explicit !== null ? b = d.explicit : d.implicit !== null ? b = d.implicit : d.tag !== null && (b = d.tag), b === null && !d.any) {
        var v = c.save();
        try {
          d.choice === null ? this._decodeGeneric(d.tag, c, h) : this._decodeChoice(c, h), g = !0;
        } catch {
          g = !1;
        }
        c.restore(v);
      } else if (g = this._peekTag(c, b, d.any), c.isError(g))
        return g;
    }
    var w;
    if (d.obj && g && (w = c.enterObject()), g) {
      if (d.explicit !== null) {
        var I = this._decodeTag(c, d.explicit);
        if (c.isError(I))
          return I;
        c = I;
      }
      var T = c.offset;
      if (d.use === null && d.choice === null) {
        if (d.any)
          var v = c.save();
        var _ = this._decodeTag(
          c,
          d.implicit !== null ? d.implicit : d.tag,
          d.any
        );
        if (c.isError(_))
          return _;
        d.any ? m = c.raw(v) : c = _;
      }
      if (h && h.track && d.tag !== null && h.track(c.path(), T, c.length, "tagged"), h && h.track && d.tag !== null && h.track(c.path(), c.offset, c.length, "content"), d.any ? m = m : d.choice === null ? m = this._decodeGeneric(d.tag, c, h) : m = this._decodeChoice(c, h), c.isError(m))
        return m;
      if (!d.any && d.choice === null && d.children !== null && d.children.forEach(function(q) {
        q._decode(c, h);
      }), d.contains && (d.tag === "octstr" || d.tag === "bitstr")) {
        var F = new t(m);
        m = this._getUse(d.contains, c._reporterState.obj)._decode(F, h);
      }
    }
    return d.obj && g && (m = c.leaveObject(w)), d.key !== null && (m !== null || g === !0) ? c.leaveKey(y, d.key, m) : y !== null && c.exitKey(y), m;
  }, u.prototype._decodeGeneric = function(c, h, d) {
    var m = this._baseState;
    return c === "seq" || c === "set" ? null : c === "seqof" || c === "setof" ? this._decodeList(h, c, m.args[0], d) : /str$/.test(c) ? this._decodeStr(h, c, d) : c === "objid" && m.args ? this._decodeObjid(h, m.args[0], m.args[1], d) : c === "objid" ? this._decodeObjid(h, null, null, d) : c === "gentime" || c === "utctime" ? this._decodeTime(h, c, d) : c === "null_" ? this._decodeNull(h, d) : c === "bool" ? this._decodeBool(h, d) : c === "objDesc" ? this._decodeStr(h, c, d) : c === "int" || c === "enum" ? this._decodeInt(h, m.args && m.args[0], d) : m.use !== null ? this._getUse(m.use, h._reporterState.obj)._decode(h, d) : h.error("unknown tag: " + c);
  }, u.prototype._getUse = function(c, h) {
    var d = this._baseState;
    return d.useDecoder = this._use(c, h), n(d.useDecoder._baseState.parent === null), d.useDecoder = d.useDecoder._baseState.children[0], d.implicit !== d.useDecoder._baseState.implicit && (d.useDecoder = d.useDecoder.clone(), d.useDecoder._baseState.implicit = d.implicit), d.useDecoder;
  }, u.prototype._decodeChoice = function(c, h) {
    var d = this._baseState, m = null, g = !1;
    return Object.keys(d.choice).some(function(y) {
      var b = c.save(), v = d.choice[y];
      try {
        var w = v._decode(c, h);
        if (c.isError(w))
          return !1;
        m = { type: y, value: w }, g = !0;
      } catch {
        return c.restore(b), !1;
      }
      return !0;
    }, this), g ? m : c.error("Choice not matched");
  }, u.prototype._createEncoderBuffer = function(c) {
    return new e(c, this.reporter);
  }, u.prototype._encode = function(c, h, d) {
    var m = this._baseState;
    if (!(m.default !== null && m.default === c)) {
      var g = this._encodeValue(c, h, d);
      if (g !== void 0 && !this._skipDefault(g, h, d))
        return g;
    }
  }, u.prototype._encodeValue = function(c, h, d) {
    var m = this._baseState;
    if (m.parent === null)
      return m.children[0]._encode(c, h || new r());
    var v = null;
    if (this.reporter = h, m.optional && c === void 0)
      if (m.default !== null)
        c = m.default;
      else
        return;
    var g = null, y = !1;
    if (m.any)
      v = this._createEncoderBuffer(c);
    else if (m.choice)
      v = this._encodeChoice(c, h);
    else if (m.contains)
      g = this._getUse(m.contains, d)._encode(c, h), y = !0;
    else if (m.children)
      g = m.children.map(function(T) {
        if (T._baseState.tag === "null_")
          return T._encode(null, h, c);
        if (T._baseState.key === null)
          return h.error("Child should have a key");
        var _ = h.enterKey(T._baseState.key);
        if (typeof c != "object")
          return h.error("Child expected, but input is not object");
        var F = T._encode(c[T._baseState.key], h, c);
        return h.leaveKey(_), F;
      }, this).filter(function(T) {
        return T;
      }), g = this._createEncoderBuffer(g);
    else if (m.tag === "seqof" || m.tag === "setof") {
      if (!(m.args && m.args.length === 1))
        return h.error("Too many args for : " + m.tag);
      if (!Array.isArray(c))
        return h.error("seqof/setof, but data is not Array");
      var b = this.clone();
      b._baseState.implicit = null, g = this._createEncoderBuffer(c.map(function(T) {
        var _ = this._baseState;
        return this._getUse(_.args[0], c)._encode(T, h);
      }, b));
    } else m.use !== null ? v = this._getUse(m.use, d)._encode(c, h) : (g = this._encodePrimitive(m.tag, c), y = !0);
    var v;
    if (!m.any && m.choice === null) {
      var w = m.implicit !== null ? m.implicit : m.tag, I = m.implicit === null ? "universal" : "context";
      w === null ? m.use === null && h.error("Tag could be omitted only for .use()") : m.use === null && (v = this._encodeComposite(w, y, I, g));
    }
    return m.explicit !== null && (v = this._encodeComposite(m.explicit, !1, "context", v)), v;
  }, u.prototype._encodeChoice = function(c, h) {
    var d = this._baseState, m = d.choice[c.type];
    return m || n(
      !1,
      c.type + " not found in " + JSON.stringify(Object.keys(d.choice))
    ), m._encode(c.value, h);
  }, u.prototype._encodePrimitive = function(c, h) {
    var d = this._baseState;
    if (/str$/.test(c))
      return this._encodeStr(h, c);
    if (c === "objid" && d.args)
      return this._encodeObjid(h, d.reverseArgs[0], d.args[1]);
    if (c === "objid")
      return this._encodeObjid(h, null, null);
    if (c === "gentime" || c === "utctime")
      return this._encodeTime(h, c);
    if (c === "null_")
      return this._encodeNull();
    if (c === "int" || c === "enum")
      return this._encodeInt(h, d.args && d.reverseArgs[0]);
    if (c === "bool")
      return this._encodeBool(h);
    if (c === "objDesc")
      return this._encodeStr(h, c);
    throw new Error("Unsupported tag: " + c);
  }, u.prototype._isNumstr = function(c) {
    return /^[0-9 ]*$/.test(c);
  }, u.prototype._isPrintstr = function(c) {
    return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(c);
  }, node;
}
var hasRequiredBase;
function requireBase() {
  return hasRequiredBase || (hasRequiredBase = 1, function(r) {
    var e = r;
    e.Reporter = requireReporter().Reporter, e.DecoderBuffer = requireBuffer().DecoderBuffer, e.EncoderBuffer = requireBuffer().EncoderBuffer, e.Node = requireNode();
  }(base)), base;
}
var constants = {}, der = {}, hasRequiredDer$2;
function requireDer$2() {
  return hasRequiredDer$2 || (hasRequiredDer$2 = 1, function(r) {
    var e = requireConstants();
    r.tagClass = {
      0: "universal",
      1: "application",
      2: "context",
      3: "private"
    }, r.tagClassByName = e._reverse(r.tagClass), r.tag = {
      0: "end",
      1: "bool",
      2: "int",
      3: "bitstr",
      4: "octstr",
      5: "null_",
      6: "objid",
      7: "objDesc",
      8: "external",
      9: "real",
      10: "enum",
      11: "embed",
      12: "utf8str",
      13: "relativeOid",
      16: "seq",
      17: "set",
      18: "numstr",
      19: "printstr",
      20: "t61str",
      21: "videostr",
      22: "ia5str",
      23: "utctime",
      24: "gentime",
      25: "graphstr",
      26: "iso646str",
      27: "genstr",
      28: "unistr",
      29: "charstr",
      30: "bmpstr"
    }, r.tagByName = e._reverse(r.tag);
  }(der)), der;
}
var hasRequiredConstants;
function requireConstants() {
  return hasRequiredConstants || (hasRequiredConstants = 1, function(r) {
    var e = r;
    e._reverse = function(n) {
      var s = {};
      return Object.keys(n).forEach(function(a) {
        (a | 0) == a && (a = a | 0);
        var o = n[a];
        s[o] = a;
      }), s;
    }, e.der = requireDer$2();
  }(constants)), constants;
}
var decoders = {}, der_1$1, hasRequiredDer$1;
function requireDer$1() {
  if (hasRequiredDer$1) return der_1$1;
  hasRequiredDer$1 = 1;
  var r = requireInherits_browser(), e = requireAsn1$1(), t = e.base, n = e.bignum, s = e.constants.der;
  function a(f) {
    this.enc = "der", this.name = f.name, this.entity = f, this.tree = new o(), this.tree._init(f.body);
  }
  der_1$1 = a, a.prototype.decode = function(c, h) {
    return c instanceof t.DecoderBuffer || (c = new t.DecoderBuffer(c, h)), this.tree._decode(c, h);
  };
  function o(f) {
    t.Node.call(this, "der", f);
  }
  r(o, t.Node), o.prototype._peekTag = function(c, h, d) {
    if (c.isEmpty())
      return !1;
    var m = c.save(), g = u(c, 'Failed to peek tag: "' + h + '"');
    return c.isError(g) ? g : (c.restore(m), g.tag === h || g.tagStr === h || g.tagStr + "of" === h || d);
  }, o.prototype._decodeTag = function(c, h, d) {
    var m = u(
      c,
      'Failed to decode tag of "' + h + '"'
    );
    if (c.isError(m))
      return m;
    var g = l(
      c,
      m.primitive,
      'Failed to get length of "' + h + '"'
    );
    if (c.isError(g))
      return g;
    if (!d && m.tag !== h && m.tagStr !== h && m.tagStr + "of" !== h)
      return c.error('Failed to match tag: "' + h + '"');
    if (m.primitive || g !== null)
      return c.skip(g, 'Failed to match body of: "' + h + '"');
    var y = c.save(), b = this._skipUntilEnd(
      c,
      'Failed to skip indefinite length body: "' + this.tag + '"'
    );
    return c.isError(b) ? b : (g = c.offset - y.offset, c.restore(y), c.skip(g, 'Failed to match body of: "' + h + '"'));
  }, o.prototype._skipUntilEnd = function(c, h) {
    for (; ; ) {
      var d = u(c, h);
      if (c.isError(d))
        return d;
      var m = l(c, d.primitive, h);
      if (c.isError(m))
        return m;
      var g;
      if (d.primitive || m !== null ? g = c.skip(m) : g = this._skipUntilEnd(c, h), c.isError(g))
        return g;
      if (d.tagStr === "end")
        break;
    }
  }, o.prototype._decodeList = function(c, h, d, m) {
    for (var g = []; !c.isEmpty(); ) {
      var y = this._peekTag(c, "end");
      if (c.isError(y))
        return y;
      var b = d.decode(c, "der", m);
      if (c.isError(b) && y)
        break;
      g.push(b);
    }
    return g;
  }, o.prototype._decodeStr = function(c, h) {
    if (h === "bitstr") {
      var d = c.readUInt8();
      return c.isError(d) ? d : { unused: d, data: c.raw() };
    } else if (h === "bmpstr") {
      var m = c.raw();
      if (m.length % 2 === 1)
        return c.error("Decoding of string type: bmpstr length mismatch");
      for (var g = "", y = 0; y < m.length / 2; y++)
        g += String.fromCharCode(m.readUInt16BE(y * 2));
      return g;
    } else if (h === "numstr") {
      var b = c.raw().toString("ascii");
      return this._isNumstr(b) ? b : c.error("Decoding of string type: numstr unsupported characters");
    } else {
      if (h === "octstr")
        return c.raw();
      if (h === "objDesc")
        return c.raw();
      if (h === "printstr") {
        var v = c.raw().toString("ascii");
        return this._isPrintstr(v) ? v : c.error("Decoding of string type: printstr unsupported characters");
      } else return /str$/.test(h) ? c.raw().toString() : c.error("Decoding of string type: " + h + " unsupported");
    }
  }, o.prototype._decodeObjid = function(c, h, d) {
    for (var m, g = [], y = 0; !c.isEmpty(); ) {
      var b = c.readUInt8();
      y <<= 7, y |= b & 127, b & 128 || (g.push(y), y = 0);
    }
    b & 128 && g.push(y);
    var v = g[0] / 40 | 0, w = g[0] % 40;
    if (d ? m = g : m = [v, w].concat(g.slice(1)), h) {
      var I = h[m.join(" ")];
      I === void 0 && (I = h[m.join(".")]), I !== void 0 && (m = I);
    }
    return m;
  }, o.prototype._decodeTime = function(c, h) {
    var d = c.raw().toString();
    if (h === "gentime")
      var m = d.slice(0, 4) | 0, g = d.slice(4, 6) | 0, y = d.slice(6, 8) | 0, b = d.slice(8, 10) | 0, v = d.slice(10, 12) | 0, w = d.slice(12, 14) | 0;
    else if (h === "utctime") {
      var m = d.slice(0, 2) | 0, g = d.slice(2, 4) | 0, y = d.slice(4, 6) | 0, b = d.slice(6, 8) | 0, v = d.slice(8, 10) | 0, w = d.slice(10, 12) | 0;
      m < 70 ? m = 2e3 + m : m = 1900 + m;
    } else
      return c.error("Decoding " + h + " time is not supported yet");
    return Date.UTC(m, g - 1, y, b, v, w, 0);
  }, o.prototype._decodeNull = function(c) {
    return null;
  }, o.prototype._decodeBool = function(c) {
    var h = c.readUInt8();
    return c.isError(h) ? h : h !== 0;
  }, o.prototype._decodeInt = function(c, h) {
    var d = c.raw(), m = new n(d);
    return h && (m = h[m.toString(10)] || m), m;
  }, o.prototype._use = function(c, h) {
    return typeof c == "function" && (c = c(h)), c._getDecoder("der").tree;
  };
  function u(f, c) {
    var h = f.readUInt8(c);
    if (f.isError(h))
      return h;
    var d = s.tagClass[h >> 6], m = (h & 32) === 0;
    if ((h & 31) === 31) {
      var g = h;
      for (h = 0; (g & 128) === 128; ) {
        if (g = f.readUInt8(c), f.isError(g))
          return g;
        h <<= 7, h |= g & 127;
      }
    } else
      h &= 31;
    var y = s.tag[h];
    return {
      cls: d,
      primitive: m,
      tag: h,
      tagStr: y
    };
  }
  function l(f, c, h) {
    var d = f.readUInt8(h);
    if (f.isError(d))
      return d;
    if (!c && d === 128)
      return null;
    if (!(d & 128))
      return d;
    var m = d & 127;
    if (m > 4)
      return f.error("length octect is too long");
    d = 0;
    for (var g = 0; g < m; g++) {
      d <<= 8;
      var y = f.readUInt8(h);
      if (f.isError(y))
        return y;
      d |= y;
    }
    return d;
  }
  return der_1$1;
}
var pem$1, hasRequiredPem$1;
function requirePem$1() {
  if (hasRequiredPem$1) return pem$1;
  hasRequiredPem$1 = 1;
  var r = requireInherits_browser(), e = requireDist().Buffer, t = requireDer$1();
  function n(s) {
    t.call(this, s), this.enc = "pem";
  }
  return r(n, t), pem$1 = n, n.prototype.decode = function(a, o) {
    for (var u = a.toString().split(/[\r\n]+/g), l = o.label.toUpperCase(), f = /^-----(BEGIN|END) ([^-]+)-----$/, c = -1, h = -1, d = 0; d < u.length; d++) {
      var m = u[d].match(f);
      if (m !== null && m[2] === l)
        if (c === -1) {
          if (m[1] !== "BEGIN")
            break;
          c = d;
        } else {
          if (m[1] !== "END")
            break;
          h = d;
          break;
        }
    }
    if (c === -1 || h === -1)
      throw new Error("PEM section not found for: " + l);
    var g = u.slice(c + 1, h).join("");
    g.replace(/[^a-z0-9\+\/=]+/gi, "");
    var y = new e(g, "base64");
    return t.prototype.decode.call(this, y, o);
  }, pem$1;
}
var hasRequiredDecoders;
function requireDecoders() {
  return hasRequiredDecoders || (hasRequiredDecoders = 1, function(r) {
    var e = r;
    e.der = requireDer$1(), e.pem = requirePem$1();
  }(decoders)), decoders;
}
var encoders = {}, der_1, hasRequiredDer;
function requireDer() {
  if (hasRequiredDer) return der_1;
  hasRequiredDer = 1;
  var r = requireInherits_browser(), e = requireDist().Buffer, t = requireAsn1$1(), n = t.base, s = t.constants.der;
  function a(f) {
    this.enc = "der", this.name = f.name, this.entity = f, this.tree = new o(), this.tree._init(f.body);
  }
  der_1 = a, a.prototype.encode = function(c, h) {
    return this.tree._encode(c, h).join();
  };
  function o(f) {
    n.Node.call(this, "der", f);
  }
  r(o, n.Node), o.prototype._encodeComposite = function(c, h, d, m) {
    var g = l(c, h, d, this.reporter);
    if (m.length < 128) {
      var v = new e(2);
      return v[0] = g, v[1] = m.length, this._createEncoderBuffer([v, m]);
    }
    for (var y = 1, b = m.length; b >= 256; b >>= 8)
      y++;
    var v = new e(2 + y);
    v[0] = g, v[1] = 128 | y;
    for (var b = 1 + y, w = m.length; w > 0; b--, w >>= 8)
      v[b] = w & 255;
    return this._createEncoderBuffer([v, m]);
  }, o.prototype._encodeStr = function(c, h) {
    if (h === "bitstr")
      return this._createEncoderBuffer([c.unused | 0, c.data]);
    if (h === "bmpstr") {
      for (var d = new e(c.length * 2), m = 0; m < c.length; m++)
        d.writeUInt16BE(c.charCodeAt(m), m * 2);
      return this._createEncoderBuffer(d);
    } else return h === "numstr" ? this._isNumstr(c) ? this._createEncoderBuffer(c) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : h === "printstr" ? this._isPrintstr(c) ? this._createEncoderBuffer(c) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(h) ? this._createEncoderBuffer(c) : h === "objDesc" ? this._createEncoderBuffer(c) : this.reporter.error("Encoding of string type: " + h + " unsupported");
  }, o.prototype._encodeObjid = function(c, h, d) {
    if (typeof c == "string") {
      if (!h)
        return this.reporter.error("string objid given, but no values map found");
      if (!h.hasOwnProperty(c))
        return this.reporter.error("objid not found in values map");
      c = h[c].split(/[\s\.]+/g);
      for (var m = 0; m < c.length; m++)
        c[m] |= 0;
    } else if (Array.isArray(c)) {
      c = c.slice();
      for (var m = 0; m < c.length; m++)
        c[m] |= 0;
    }
    if (!Array.isArray(c))
      return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(c));
    if (!d) {
      if (c[1] >= 40)
        return this.reporter.error("Second objid identifier OOB");
      c.splice(0, 2, c[0] * 40 + c[1]);
    }
    for (var g = 0, m = 0; m < c.length; m++) {
      var y = c[m];
      for (g++; y >= 128; y >>= 7)
        g++;
    }
    for (var b = new e(g), v = b.length - 1, m = c.length - 1; m >= 0; m--) {
      var y = c[m];
      for (b[v--] = y & 127; (y >>= 7) > 0; )
        b[v--] = 128 | y & 127;
    }
    return this._createEncoderBuffer(b);
  };
  function u(f) {
    return f < 10 ? "0" + f : f;
  }
  o.prototype._encodeTime = function(c, h) {
    var d, m = new Date(c);
    return h === "gentime" ? d = [
      u(m.getFullYear()),
      u(m.getUTCMonth() + 1),
      u(m.getUTCDate()),
      u(m.getUTCHours()),
      u(m.getUTCMinutes()),
      u(m.getUTCSeconds()),
      "Z"
    ].join("") : h === "utctime" ? d = [
      u(m.getFullYear() % 100),
      u(m.getUTCMonth() + 1),
      u(m.getUTCDate()),
      u(m.getUTCHours()),
      u(m.getUTCMinutes()),
      u(m.getUTCSeconds()),
      "Z"
    ].join("") : this.reporter.error("Encoding " + h + " time is not supported yet"), this._encodeStr(d, "octstr");
  }, o.prototype._encodeNull = function() {
    return this._createEncoderBuffer("");
  }, o.prototype._encodeInt = function(c, h) {
    if (typeof c == "string") {
      if (!h)
        return this.reporter.error("String int or enum given, but no values map");
      if (!h.hasOwnProperty(c))
        return this.reporter.error("Values map doesn't contain: " + JSON.stringify(c));
      c = h[c];
    }
    if (typeof c != "number" && !e.isBuffer(c)) {
      var d = c.toArray();
      !c.sign && d[0] & 128 && d.unshift(0), c = new e(d);
    }
    if (e.isBuffer(c)) {
      var m = c.length;
      c.length === 0 && m++;
      var y = new e(m);
      return c.copy(y), c.length === 0 && (y[0] = 0), this._createEncoderBuffer(y);
    }
    if (c < 128)
      return this._createEncoderBuffer(c);
    if (c < 256)
      return this._createEncoderBuffer([0, c]);
    for (var m = 1, g = c; g >= 256; g >>= 8)
      m++;
    for (var y = new Array(m), g = y.length - 1; g >= 0; g--)
      y[g] = c & 255, c >>= 8;
    return y[0] & 128 && y.unshift(0), this._createEncoderBuffer(new e(y));
  }, o.prototype._encodeBool = function(c) {
    return this._createEncoderBuffer(c ? 255 : 0);
  }, o.prototype._use = function(c, h) {
    return typeof c == "function" && (c = c(h)), c._getEncoder("der").tree;
  }, o.prototype._skipDefault = function(c, h, d) {
    var m = this._baseState, g;
    if (m.default === null)
      return !1;
    var y = c.join();
    if (m.defaultBuffer === void 0 && (m.defaultBuffer = this._encodeValue(m.default, h, d).join()), y.length !== m.defaultBuffer.length)
      return !1;
    for (g = 0; g < y.length; g++)
      if (y[g] !== m.defaultBuffer[g])
        return !1;
    return !0;
  };
  function l(f, c, h, d) {
    var m;
    if (f === "seqof" ? f = "seq" : f === "setof" && (f = "set"), s.tagByName.hasOwnProperty(f))
      m = s.tagByName[f];
    else if (typeof f == "number" && (f | 0) === f)
      m = f;
    else
      return d.error("Unknown tag: " + f);
    return m >= 31 ? d.error("Multi-octet tag encoding unsupported") : (c || (m |= 32), m |= s.tagClassByName[h || "universal"] << 6, m);
  }
  return der_1;
}
var pem, hasRequiredPem;
function requirePem() {
  if (hasRequiredPem) return pem;
  hasRequiredPem = 1;
  var r = requireInherits_browser(), e = requireDer();
  function t(n) {
    e.call(this, n), this.enc = "pem";
  }
  return r(t, e), pem = t, t.prototype.encode = function(s, a) {
    for (var o = e.prototype.encode.call(this, s), u = o.toString("base64"), l = ["-----BEGIN " + a.label + "-----"], f = 0; f < u.length; f += 64)
      l.push(u.slice(f, f + 64));
    return l.push("-----END " + a.label + "-----"), l.join(`
`);
  }, pem;
}
var hasRequiredEncoders;
function requireEncoders() {
  return hasRequiredEncoders || (hasRequiredEncoders = 1, function(r) {
    var e = r;
    e.der = requireDer(), e.pem = requirePem();
  }(encoders)), encoders;
}
var hasRequiredAsn1$1;
function requireAsn1$1() {
  return hasRequiredAsn1$1 || (hasRequiredAsn1$1 = 1, function(r) {
    var e = r;
    e.bignum = requireBn$1(), e.define = requireApi().define, e.base = requireBase(), e.constants = requireConstants(), e.decoders = requireDecoders(), e.encoders = requireEncoders();
  }(asn1)), asn1;
}
var certificate, hasRequiredCertificate;
function requireCertificate() {
  if (hasRequiredCertificate) return certificate;
  hasRequiredCertificate = 1;
  var r = requireAsn1$1(), e = r.define("Time", function() {
    this.choice({
      utcTime: this.utctime(),
      generalTime: this.gentime()
    });
  }), t = r.define("AttributeTypeValue", function() {
    this.seq().obj(
      this.key("type").objid(),
      this.key("value").any()
    );
  }), n = r.define("AlgorithmIdentifier", function() {
    this.seq().obj(
      this.key("algorithm").objid(),
      this.key("parameters").optional(),
      this.key("curve").objid().optional()
    );
  }), s = r.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(
      this.key("algorithm").use(n),
      this.key("subjectPublicKey").bitstr()
    );
  }), a = r.define("RelativeDistinguishedName", function() {
    this.setof(t);
  }), o = r.define("RDNSequence", function() {
    this.seqof(a);
  }), u = r.define("Name", function() {
    this.choice({
      rdnSequence: this.use(o)
    });
  }), l = r.define("Validity", function() {
    this.seq().obj(
      this.key("notBefore").use(e),
      this.key("notAfter").use(e)
    );
  }), f = r.define("Extension", function() {
    this.seq().obj(
      this.key("extnID").objid(),
      this.key("critical").bool().def(!1),
      this.key("extnValue").octstr()
    );
  }), c = r.define("TBSCertificate", function() {
    this.seq().obj(
      this.key("version").explicit(0).int().optional(),
      this.key("serialNumber").int(),
      this.key("signature").use(n),
      this.key("issuer").use(u),
      this.key("validity").use(l),
      this.key("subject").use(u),
      this.key("subjectPublicKeyInfo").use(s),
      this.key("issuerUniqueID").implicit(1).bitstr().optional(),
      this.key("subjectUniqueID").implicit(2).bitstr().optional(),
      this.key("extensions").explicit(3).seqof(f).optional()
    );
  }), h = r.define("X509Certificate", function() {
    this.seq().obj(
      this.key("tbsCertificate").use(c),
      this.key("signatureAlgorithm").use(n),
      this.key("signatureValue").bitstr()
    );
  });
  return certificate = h, certificate;
}
var hasRequiredAsn1;
function requireAsn1() {
  if (hasRequiredAsn1) return asn1$1;
  hasRequiredAsn1 = 1;
  var r = requireAsn1$1();
  asn1$1.certificate = requireCertificate();
  var e = r.define("RSAPrivateKey", function() {
    this.seq().obj(
      this.key("version").int(),
      this.key("modulus").int(),
      this.key("publicExponent").int(),
      this.key("privateExponent").int(),
      this.key("prime1").int(),
      this.key("prime2").int(),
      this.key("exponent1").int(),
      this.key("exponent2").int(),
      this.key("coefficient").int()
    );
  });
  asn1$1.RSAPrivateKey = e;
  var t = r.define("RSAPublicKey", function() {
    this.seq().obj(
      this.key("modulus").int(),
      this.key("publicExponent").int()
    );
  });
  asn1$1.RSAPublicKey = t;
  var n = r.define("AlgorithmIdentifier", function() {
    this.seq().obj(
      this.key("algorithm").objid(),
      this.key("none").null_().optional(),
      this.key("curve").objid().optional(),
      this.key("params").seq().obj(
        this.key("p").int(),
        this.key("q").int(),
        this.key("g").int()
      ).optional()
    );
  }), s = r.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(
      this.key("algorithm").use(n),
      this.key("subjectPublicKey").bitstr()
    );
  });
  asn1$1.PublicKey = s;
  var a = r.define("PrivateKeyInfo", function() {
    this.seq().obj(
      this.key("version").int(),
      this.key("algorithm").use(n),
      this.key("subjectPrivateKey").octstr()
    );
  });
  asn1$1.PrivateKey = a;
  var o = r.define("EncryptedPrivateKeyInfo", function() {
    this.seq().obj(
      this.key("algorithm").seq().obj(
        this.key("id").objid(),
        this.key("decrypt").seq().obj(
          this.key("kde").seq().obj(
            this.key("id").objid(),
            this.key("kdeparams").seq().obj(
              this.key("salt").octstr(),
              this.key("iters").int()
            )
          ),
          this.key("cipher").seq().obj(
            this.key("algo").objid(),
            this.key("iv").octstr()
          )
        )
      ),
      this.key("subjectPrivateKey").octstr()
    );
  });
  asn1$1.EncryptedPrivateKey = o;
  var u = r.define("DSAPrivateKey", function() {
    this.seq().obj(
      this.key("version").int(),
      this.key("p").int(),
      this.key("q").int(),
      this.key("g").int(),
      this.key("pub_key").int(),
      this.key("priv_key").int()
    );
  });
  asn1$1.DSAPrivateKey = u, asn1$1.DSAparam = r.define("DSAparam", function() {
    this.int();
  });
  var l = r.define("ECParameters", function() {
    this.choice({
      namedCurve: this.objid()
    });
  }), f = r.define("ECPrivateKey", function() {
    this.seq().obj(
      this.key("version").int(),
      this.key("privateKey").octstr(),
      this.key("parameters").optional().explicit(0).use(l),
      this.key("publicKey").optional().explicit(1).bitstr()
    );
  });
  return asn1$1.ECPrivateKey = f, asn1$1.signature = r.define("signature", function() {
    this.seq().obj(
      this.key("r").int(),
      this.key("s").int()
    );
  }), asn1$1;
}
const require$$1 = {
  "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
  "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
  "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
  "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
  "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
  "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
  "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
  "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
  "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
  "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
  "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
  "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
};
var fixProc, hasRequiredFixProc;
function requireFixProc() {
  if (hasRequiredFixProc) return fixProc;
  hasRequiredFixProc = 1;
  var r = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, e = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, t = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, n = requireEvp_bytestokey(), s = requireBrowser$6(), a = requireSafeBuffer$1().Buffer;
  return fixProc = function(o, u) {
    var l = o.toString(), f = l.match(r), c;
    if (f) {
      var d = "aes" + f[1], m = a.from(f[2], "hex"), g = a.from(f[3].replace(/[\r\n]/g, ""), "base64"), y = n(u, m.slice(0, 8), parseInt(f[1], 10)).key, b = [], v = s.createDecipheriv(d, y, m);
      b.push(v.update(g)), b.push(v.final()), c = a.concat(b);
    } else {
      var h = l.match(t);
      c = a.from(h[2].replace(/[\r\n]/g, ""), "base64");
    }
    var w = l.match(e)[1];
    return {
      tag: w,
      data: c
    };
  }, fixProc;
}
var parseAsn1, hasRequiredParseAsn1;
function requireParseAsn1() {
  if (hasRequiredParseAsn1) return parseAsn1;
  hasRequiredParseAsn1 = 1;
  var r = requireAsn1(), e = require$$1, t = requireFixProc(), n = requireBrowser$6(), s = requireBrowser$7(), a = requireSafeBuffer$1().Buffer;
  function o(l, f) {
    var c = l.algorithm.decrypt.kde.kdeparams.salt, h = parseInt(l.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), d = e[l.algorithm.decrypt.cipher.algo.join(".")], m = l.algorithm.decrypt.cipher.iv, g = l.subjectPrivateKey, y = parseInt(d.split("-")[1], 10) / 8, b = s.pbkdf2Sync(f, c, h, y, "sha1"), v = n.createDecipheriv(d, b, m), w = [];
    return w.push(v.update(g)), w.push(v.final()), a.concat(w);
  }
  function u(l) {
    var f;
    typeof l == "object" && !a.isBuffer(l) && (f = l.passphrase, l = l.key), typeof l == "string" && (l = a.from(l));
    var c = t(l, f), h = c.tag, d = c.data, m, g;
    switch (h) {
      case "CERTIFICATE":
        g = r.certificate.decode(d, "der").tbsCertificate.subjectPublicKeyInfo;
      // falls through
      case "PUBLIC KEY":
        switch (g || (g = r.PublicKey.decode(d, "der")), m = g.algorithm.algorithm.join("."), m) {
          case "1.2.840.113549.1.1.1":
            return r.RSAPublicKey.decode(g.subjectPublicKey.data, "der");
          case "1.2.840.10045.2.1":
            return g.subjectPrivateKey = g.subjectPublicKey, {
              type: "ec",
              data: g
            };
          case "1.2.840.10040.4.1":
            return g.algorithm.params.pub_key = r.DSAparam.decode(g.subjectPublicKey.data, "der"), {
              type: "dsa",
              data: g.algorithm.params
            };
          default:
            throw new Error("unknown key id " + m);
        }
      // throw new Error('unknown key type ' + type)
      case "ENCRYPTED PRIVATE KEY":
        d = r.EncryptedPrivateKey.decode(d, "der"), d = o(d, f);
      // falls through
      case "PRIVATE KEY":
        switch (g = r.PrivateKey.decode(d, "der"), m = g.algorithm.algorithm.join("."), m) {
          case "1.2.840.113549.1.1.1":
            return r.RSAPrivateKey.decode(g.subjectPrivateKey, "der");
          case "1.2.840.10045.2.1":
            return {
              curve: g.algorithm.curve,
              privateKey: r.ECPrivateKey.decode(g.subjectPrivateKey, "der").privateKey
            };
          case "1.2.840.10040.4.1":
            return g.algorithm.params.priv_key = r.DSAparam.decode(g.subjectPrivateKey, "der"), {
              type: "dsa",
              params: g.algorithm.params
            };
          default:
            throw new Error("unknown key id " + m);
        }
      // throw new Error('unknown key type ' + type)
      case "RSA PUBLIC KEY":
        return r.RSAPublicKey.decode(d, "der");
      case "RSA PRIVATE KEY":
        return r.RSAPrivateKey.decode(d, "der");
      case "DSA PRIVATE KEY":
        return {
          type: "dsa",
          params: r.DSAPrivateKey.decode(d, "der")
        };
      case "EC PRIVATE KEY":
        return d = r.ECPrivateKey.decode(d, "der"), {
          curve: d.parameters.value,
          privateKey: d.privateKey
        };
      default:
        throw new Error("unknown key type " + h);
    }
  }
  return u.signature = r.signature, parseAsn1 = u, parseAsn1;
}
const require$$4 = {
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
};
var hasRequiredSign;
function requireSign() {
  if (hasRequiredSign) return sign$3.exports;
  hasRequiredSign = 1;
  var r = requireSafeBuffer$1().Buffer, e = requireBrowser$8(), t = /* @__PURE__ */ requireBrowserifyRsa(), n = requireElliptic().ec, s = requireBn(), a = requireParseAsn1(), o = require$$4, u = 1;
  function l(v, w, I, T, _) {
    var F = a(w);
    if (F.curve) {
      if (T !== "ecdsa" && T !== "ecdsa/rsa")
        throw new Error("wrong private key type");
      return f(v, F);
    } else if (F.type === "dsa") {
      if (T !== "dsa")
        throw new Error("wrong private key type");
      return c(v, F, I);
    }
    if (T !== "rsa" && T !== "ecdsa/rsa")
      throw new Error("wrong private key type");
    if (w.padding !== void 0 && w.padding !== u)
      throw new Error("illegal or unsupported padding mode");
    v = r.concat([_, v]);
    for (var O = F.modulus.byteLength(), q = [0, 1]; v.length + q.length + 1 < O; )
      q.push(255);
    q.push(0);
    for (var V = -1; ++V < v.length; )
      q.push(v[V]);
    var H = t(q, F);
    return H;
  }
  function f(v, w) {
    var I = o[w.curve.join(".")];
    if (!I)
      throw new Error("unknown curve " + w.curve.join("."));
    var T = new n(I), _ = T.keyFromPrivate(w.privateKey), F = _.sign(v);
    return r.from(F.toDER());
  }
  function c(v, w, I) {
    for (var T = w.params.priv_key, _ = w.params.p, F = w.params.q, O = w.params.g, q = new s(0), V, H = m(v, F).mod(F), R = !1, $ = d(T, F, v, I); R === !1; )
      V = y(F, $, I), q = b(O, V, _, F), R = V.invm(F).imul(H.add(T.mul(q))).mod(F), R.cmpn(0) === 0 && (R = !1, q = new s(0));
    return h(q, R);
  }
  function h(v, w) {
    v = v.toArray(), w = w.toArray(), v[0] & 128 && (v = [0].concat(v)), w[0] & 128 && (w = [0].concat(w));
    var I = v.length + w.length + 4, T = [
      48,
      I,
      2,
      v.length
    ];
    return T = T.concat(v, [2, w.length], w), r.from(T);
  }
  function d(v, w, I, T) {
    if (v = r.from(v.toArray()), v.length < w.byteLength()) {
      var _ = r.alloc(w.byteLength() - v.length);
      v = r.concat([_, v]);
    }
    var F = I.length, O = g(I, w), q = r.alloc(F);
    q.fill(1);
    var V = r.alloc(F);
    return V = e(T, V).update(q).update(r.from([0])).update(v).update(O).digest(), q = e(T, V).update(q).digest(), V = e(T, V).update(q).update(r.from([1])).update(v).update(O).digest(), q = e(T, V).update(q).digest(), { k: V, v: q };
  }
  function m(v, w) {
    var I = new s(v), T = (v.length << 3) - w.bitLength();
    return T > 0 && I.ishrn(T), I;
  }
  function g(v, w) {
    v = m(v, w), v = v.mod(w);
    var I = r.from(v.toArray());
    if (I.length < w.byteLength()) {
      var T = r.alloc(w.byteLength() - I.length);
      I = r.concat([T, I]);
    }
    return I;
  }
  function y(v, w, I) {
    var T, _;
    do {
      for (T = r.alloc(0); T.length * 8 < v.bitLength(); )
        w.v = e(I, w.k).update(w.v).digest(), T = r.concat([T, w.v]);
      _ = m(T, v), w.k = e(I, w.k).update(w.v).update(r.from([0])).digest(), w.v = e(I, w.k).update(w.v).digest();
    } while (_.cmp(v) !== -1);
    return _;
  }
  function b(v, w, I, T) {
    return v.toRed(s.mont(I)).redPow(w).fromRed().mod(T);
  }
  return sign$3.exports = l, sign$3.exports.getKey = d, sign$3.exports.makeKey = y, sign$3.exports;
}
var verify_1, hasRequiredVerify;
function requireVerify() {
  if (hasRequiredVerify) return verify_1;
  hasRequiredVerify = 1;
  var r = requireSafeBuffer$1().Buffer, e = requireBn(), t = requireElliptic().ec, n = requireParseAsn1(), s = require$$4;
  function a(f, c, h, d, m) {
    var g = n(h);
    if (g.type === "ec") {
      if (d !== "ecdsa" && d !== "ecdsa/rsa")
        throw new Error("wrong public key type");
      return o(f, c, g);
    } else if (g.type === "dsa") {
      if (d !== "dsa")
        throw new Error("wrong public key type");
      return u(f, c, g);
    }
    if (d !== "rsa" && d !== "ecdsa/rsa")
      throw new Error("wrong public key type");
    c = r.concat([m, c]);
    for (var y = g.modulus.byteLength(), b = [1], v = 0; c.length + b.length + 2 < y; )
      b.push(255), v += 1;
    b.push(0);
    for (var w = -1; ++w < c.length; )
      b.push(c[w]);
    b = r.from(b);
    var I = e.mont(g.modulus);
    f = new e(f).toRed(I), f = f.redPow(new e(g.publicExponent)), f = r.from(f.fromRed().toArray());
    var T = v < 8 ? 1 : 0;
    for (y = Math.min(f.length, b.length), f.length !== b.length && (T = 1), w = -1; ++w < y; )
      T |= f[w] ^ b[w];
    return T === 0;
  }
  function o(f, c, h) {
    var d = s[h.data.algorithm.curve.join(".")];
    if (!d)
      throw new Error("unknown curve " + h.data.algorithm.curve.join("."));
    var m = new t(d), g = h.data.subjectPrivateKey.data;
    return m.verify(c, f, g);
  }
  function u(f, c, h) {
    var d = h.data.p, m = h.data.q, g = h.data.g, y = h.data.pub_key, b = n.signature.decode(f, "der"), v = b.s, w = b.r;
    l(v, m), l(w, m);
    var I = e.mont(d), T = v.invm(m), _ = g.toRed(I).redPow(new e(c).mul(T).mod(m)).fromRed().mul(y.toRed(I).redPow(w.mul(T).mod(m)).fromRed()).mod(d).mod(m);
    return _.cmp(w) === 0;
  }
  function l(f, c) {
    if (f.cmpn(0) <= 0)
      throw new Error("invalid sig");
    if (f.cmp(c) >= 0)
      throw new Error("invalid sig");
  }
  return verify_1 = a, verify_1;
}
var browser$4, hasRequiredBrowser$3;
function requireBrowser$3() {
  if (hasRequiredBrowser$3) return browser$4;
  hasRequiredBrowser$3 = 1;
  var r = requireSafeBuffer$1().Buffer, e = requireBrowser$9(), t = requireReadableBrowser(), n = requireInherits_browser(), s = requireSign(), a = requireVerify(), o = require$$6;
  Object.keys(o).forEach(function(h) {
    o[h].id = r.from(o[h].id, "hex"), o[h.toLowerCase()] = o[h];
  });
  function u(h) {
    t.Writable.call(this);
    var d = o[h];
    if (!d)
      throw new Error("Unknown message digest");
    this._hashType = d.hash, this._hash = e(d.hash), this._tag = d.id, this._signType = d.sign;
  }
  n(u, t.Writable), u.prototype._write = function(d, m, g) {
    this._hash.update(d), g();
  }, u.prototype.update = function(d, m) {
    return this._hash.update(typeof d == "string" ? r.from(d, m) : d), this;
  }, u.prototype.sign = function(d, m) {
    this.end();
    var g = this._hash.digest(), y = s(g, d, this._hashType, this._signType, this._tag);
    return m ? y.toString(m) : y;
  };
  function l(h) {
    t.Writable.call(this);
    var d = o[h];
    if (!d)
      throw new Error("Unknown message digest");
    this._hash = e(d.hash), this._tag = d.id, this._signType = d.sign;
  }
  n(l, t.Writable), l.prototype._write = function(d, m, g) {
    this._hash.update(d), g();
  }, l.prototype.update = function(d, m) {
    return this._hash.update(typeof d == "string" ? r.from(d, m) : d), this;
  }, l.prototype.verify = function(d, m, g) {
    var y = typeof m == "string" ? r.from(m, g) : m;
    this.end();
    var b = this._hash.digest();
    return a(y, b, d, this._signType, this._tag);
  };
  function f(h) {
    return new u(h);
  }
  function c(h) {
    return new l(h);
  }
  return browser$4 = {
    Sign: f,
    Verify: c,
    createSign: f,
    createVerify: c
  }, browser$4;
}
var browser$3, hasRequiredBrowser$2;
function requireBrowser$2() {
  if (hasRequiredBrowser$2) return browser$3;
  hasRequiredBrowser$2 = 1;
  var r = requireElliptic(), e = requireBn$1();
  browser$3 = function(o) {
    return new n(o);
  };
  var t = {
    secp256k1: {
      name: "secp256k1",
      byteLength: 32
    },
    secp224r1: {
      name: "p224",
      byteLength: 28
    },
    prime256v1: {
      name: "p256",
      byteLength: 32
    },
    prime192v1: {
      name: "p192",
      byteLength: 24
    },
    ed25519: {
      name: "ed25519",
      byteLength: 32
    },
    secp384r1: {
      name: "p384",
      byteLength: 48
    },
    secp521r1: {
      name: "p521",
      byteLength: 66
    }
  };
  t.p224 = t.secp224r1, t.p256 = t.secp256r1 = t.prime256v1, t.p192 = t.secp192r1 = t.prime192v1, t.p384 = t.secp384r1, t.p521 = t.secp521r1;
  function n(a) {
    this.curveType = t[a], this.curveType || (this.curveType = {
      name: a
    }), this.curve = new r.ec(this.curveType.name), this.keys = void 0;
  }
  n.prototype.generateKeys = function(a, o) {
    return this.keys = this.curve.genKeyPair(), this.getPublicKey(a, o);
  }, n.prototype.computeSecret = function(a, o, u) {
    o = o || "utf8", Buffer.isBuffer(a) || (a = new Buffer(a, o));
    var l = this.curve.keyFromPublic(a).getPublic(), f = l.mul(this.keys.getPrivate()).getX();
    return s(f, u, this.curveType.byteLength);
  }, n.prototype.getPublicKey = function(a, o) {
    var u = this.keys.getPublic(o === "compressed", !0);
    return o === "hybrid" && (u[u.length - 1] % 2 ? u[0] = 7 : u[0] = 6), s(u, a);
  }, n.prototype.getPrivateKey = function(a) {
    return s(this.keys.getPrivate(), a);
  }, n.prototype.setPublicKey = function(a, o) {
    return o = o || "utf8", Buffer.isBuffer(a) || (a = new Buffer(a, o)), this.keys._importPublic(a), this;
  }, n.prototype.setPrivateKey = function(a, o) {
    o = o || "utf8", Buffer.isBuffer(a) || (a = new Buffer(a, o));
    var u = new e(a);
    return u = u.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(u), this;
  };
  function s(a, o, u) {
    Array.isArray(a) || (a = a.toArray());
    var l = new Buffer(a);
    if (u && l.length < u) {
      var f = new Buffer(u - l.length);
      f.fill(0), l = Buffer.concat([f, l]);
    }
    return o ? l.toString(o) : l;
  }
  return browser$3;
}
var browser$2 = {}, mgf, hasRequiredMgf;
function requireMgf() {
  if (hasRequiredMgf) return mgf;
  hasRequiredMgf = 1;
  var r = requireBrowser$9(), e = requireSafeBuffer$1().Buffer;
  mgf = function(n, s) {
    for (var a = e.alloc(0), o = 0, u; a.length < s; )
      u = t(o++), a = e.concat([a, r("sha1").update(n).update(u).digest()]);
    return a.slice(0, s);
  };
  function t(n) {
    var s = e.allocUnsafe(4);
    return s.writeUInt32BE(n, 0), s;
  }
  return mgf;
}
var xor, hasRequiredXor;
function requireXor() {
  return hasRequiredXor || (hasRequiredXor = 1, xor = function(e, t) {
    for (var n = e.length, s = -1; ++s < n; )
      e[s] ^= t[s];
    return e;
  }), xor;
}
var withPublic_1, hasRequiredWithPublic;
function requireWithPublic() {
  if (hasRequiredWithPublic) return withPublic_1;
  hasRequiredWithPublic = 1;
  var r = requireBn$1(), e = requireSafeBuffer$1().Buffer;
  function t(n, s) {
    return e.from(n.toRed(r.mont(s.modulus)).redPow(new r(s.publicExponent)).fromRed().toArray());
  }
  return withPublic_1 = t, withPublic_1;
}
var publicEncrypt, hasRequiredPublicEncrypt;
function requirePublicEncrypt() {
  if (hasRequiredPublicEncrypt) return publicEncrypt;
  hasRequiredPublicEncrypt = 1;
  var r = requireParseAsn1(), e = requireBrowser$b(), t = requireBrowser$9(), n = requireMgf(), s = requireXor(), a = requireBn$1(), o = requireWithPublic(), u = /* @__PURE__ */ requireBrowserifyRsa(), l = requireSafeBuffer$1().Buffer;
  publicEncrypt = function(m, g, y) {
    var b;
    m.padding ? b = m.padding : y ? b = 1 : b = 4;
    var v = r(m), w;
    if (b === 4)
      w = f(v, g);
    else if (b === 1)
      w = c(v, g, y);
    else if (b === 3) {
      if (w = new a(g), w.cmp(v.modulus) >= 0)
        throw new Error("data too long for modulus");
    } else
      throw new Error("unknown padding");
    return y ? u(w, v) : o(w, v);
  };
  function f(d, m) {
    var g = d.modulus.byteLength(), y = m.length, b = t("sha1").update(l.alloc(0)).digest(), v = b.length, w = 2 * v;
    if (y > g - w - 2)
      throw new Error("message too long");
    var I = l.alloc(g - y - w - 2), T = g - v - 1, _ = e(v), F = s(l.concat([b, I, l.alloc(1, 1), m], T), n(_, T)), O = s(_, n(F, v));
    return new a(l.concat([l.alloc(1), O, F], g));
  }
  function c(d, m, g) {
    var y = m.length, b = d.modulus.byteLength();
    if (y > b - 11)
      throw new Error("message too long");
    var v;
    return g ? v = l.alloc(b - y - 3, 255) : v = h(b - y - 3), new a(l.concat([l.from([0, g ? 1 : 2]), v, l.alloc(1), m], b));
  }
  function h(d) {
    for (var m = l.allocUnsafe(d), g = 0, y = e(d * 2), b = 0, v; g < d; )
      b === y.length && (y = e(d * 2), b = 0), v = y[b++], v && (m[g++] = v);
    return m;
  }
  return publicEncrypt;
}
var privateDecrypt, hasRequiredPrivateDecrypt;
function requirePrivateDecrypt() {
  if (hasRequiredPrivateDecrypt) return privateDecrypt;
  hasRequiredPrivateDecrypt = 1;
  var r = requireParseAsn1(), e = requireMgf(), t = requireXor(), n = requireBn$1(), s = /* @__PURE__ */ requireBrowserifyRsa(), a = requireBrowser$9(), o = requireWithPublic(), u = requireSafeBuffer$1().Buffer;
  privateDecrypt = function(d, m, g) {
    var y;
    d.padding ? y = d.padding : g ? y = 1 : y = 4;
    var b = r(d), v = b.modulus.byteLength();
    if (m.length > v || new n(m).cmp(b.modulus) >= 0)
      throw new Error("decryption error");
    var w;
    g ? w = o(new n(m), b) : w = s(m, b);
    var I = u.alloc(v - w.length);
    if (w = u.concat([I, w], v), y === 4)
      return l(b, w);
    if (y === 1)
      return f(b, w, g);
    if (y === 3)
      return w;
    throw new Error("unknown padding");
  };
  function l(h, d) {
    var m = h.modulus.byteLength(), g = a("sha1").update(u.alloc(0)).digest(), y = g.length;
    if (d[0] !== 0)
      throw new Error("decryption error");
    var b = d.slice(1, y + 1), v = d.slice(y + 1), w = t(b, e(v, y)), I = t(v, e(w, m - y - 1));
    if (c(g, I.slice(0, y)))
      throw new Error("decryption error");
    for (var T = y; I[T] === 0; )
      T++;
    if (I[T++] !== 1)
      throw new Error("decryption error");
    return I.slice(T);
  }
  function f(h, d, m) {
    for (var g = d.slice(0, 2), y = 2, b = 0; d[y++] !== 0; )
      if (y >= d.length) {
        b++;
        break;
      }
    var v = d.slice(2, y - 1);
    if ((g.toString("hex") !== "0002" && !m || g.toString("hex") !== "0001" && m) && b++, v.length < 8 && b++, b)
      throw new Error("decryption error");
    return d.slice(y);
  }
  function c(h, d) {
    h = u.from(h), d = u.from(d);
    var m = 0, g = h.length;
    h.length !== d.length && (m++, g = Math.min(h.length, d.length));
    for (var y = -1; ++y < g; )
      m += h[y] ^ d[y];
    return m;
  }
  return privateDecrypt;
}
var hasRequiredBrowser$1;
function requireBrowser$1() {
  return hasRequiredBrowser$1 || (hasRequiredBrowser$1 = 1, function(r) {
    r.publicEncrypt = requirePublicEncrypt(), r.privateDecrypt = requirePrivateDecrypt(), r.privateEncrypt = function(t, n) {
      return r.publicEncrypt(t, n, !0);
    }, r.publicDecrypt = function(t, n) {
      return r.privateDecrypt(t, n, !0);
    };
  }(browser$2)), browser$2;
}
var browser$1 = {}, hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser) return browser$1;
  hasRequiredBrowser = 1;
  function r() {
    throw new Error(`secure random number generation not supported by this browser
use chrome, FireFox or Internet Explorer 11`);
  }
  var e = requireSafeBuffer$1(), t = requireBrowser$b(), n = e.Buffer, s = e.kMaxLength, a = commonjsGlobal.crypto || commonjsGlobal.msCrypto, o = Math.pow(2, 32) - 1;
  function u(d, m) {
    if (typeof d != "number" || d !== d)
      throw new TypeError("offset must be a number");
    if (d > o || d < 0)
      throw new TypeError("offset must be a uint32");
    if (d > s || d > m)
      throw new RangeError("offset out of range");
  }
  function l(d, m, g) {
    if (typeof d != "number" || d !== d)
      throw new TypeError("size must be a number");
    if (d > o || d < 0)
      throw new TypeError("size must be a uint32");
    if (d + m > g || d > s)
      throw new RangeError("buffer too small");
  }
  a && a.getRandomValues || !process$1.browser ? (browser$1.randomFill = f, browser$1.randomFillSync = h) : (browser$1.randomFill = r, browser$1.randomFillSync = r);
  function f(d, m, g, y) {
    if (!n.isBuffer(d) && !(d instanceof commonjsGlobal.Uint8Array))
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof m == "function")
      y = m, m = 0, g = d.length;
    else if (typeof g == "function")
      y = g, g = d.length - m;
    else if (typeof y != "function")
      throw new TypeError('"cb" argument must be a function');
    return u(m, d.length), l(g, m, d.length), c(d, m, g, y);
  }
  function c(d, m, g, y) {
    if (process$1.browser) {
      var b = d.buffer, v = new Uint8Array(b, m, g);
      if (a.getRandomValues(v), y) {
        process$1.nextTick(function() {
          y(null, d);
        });
        return;
      }
      return d;
    }
    if (y) {
      t(g, function(I, T) {
        if (I)
          return y(I);
        T.copy(d, m), y(null, d);
      });
      return;
    }
    var w = t(g);
    return w.copy(d, m), d;
  }
  function h(d, m, g) {
    if (typeof m > "u" && (m = 0), !n.isBuffer(d) && !(d instanceof commonjsGlobal.Uint8Array))
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    return u(m, d.length), g === void 0 && (g = d.length - m), l(g, m, d.length), c(d, m, g);
  }
  return browser$1;
}
var hasRequiredCryptoBrowserify;
function requireCryptoBrowserify() {
  if (hasRequiredCryptoBrowserify) return cryptoBrowserify;
  hasRequiredCryptoBrowserify = 1, cryptoBrowserify.randomBytes = cryptoBrowserify.rng = cryptoBrowserify.pseudoRandomBytes = cryptoBrowserify.prng = requireBrowser$b(), cryptoBrowserify.createHash = cryptoBrowserify.Hash = requireBrowser$9(), cryptoBrowserify.createHmac = cryptoBrowserify.Hmac = requireBrowser$8();
  var r = requireAlgos(), e = Object.keys(r), t = [
    "sha1",
    "sha224",
    "sha256",
    "sha384",
    "sha512",
    "md5",
    "rmd160"
  ].concat(e);
  cryptoBrowserify.getHashes = function() {
    return t;
  };
  var n = requireBrowser$7();
  cryptoBrowserify.pbkdf2 = n.pbkdf2, cryptoBrowserify.pbkdf2Sync = n.pbkdf2Sync;
  var s = requireBrowser$5();
  cryptoBrowserify.Cipher = s.Cipher, cryptoBrowserify.createCipher = s.createCipher, cryptoBrowserify.Cipheriv = s.Cipheriv, cryptoBrowserify.createCipheriv = s.createCipheriv, cryptoBrowserify.Decipher = s.Decipher, cryptoBrowserify.createDecipher = s.createDecipher, cryptoBrowserify.Decipheriv = s.Decipheriv, cryptoBrowserify.createDecipheriv = s.createDecipheriv, cryptoBrowserify.getCiphers = s.getCiphers, cryptoBrowserify.listCiphers = s.listCiphers;
  var a = requireBrowser$4();
  cryptoBrowserify.DiffieHellmanGroup = a.DiffieHellmanGroup, cryptoBrowserify.createDiffieHellmanGroup = a.createDiffieHellmanGroup, cryptoBrowserify.getDiffieHellman = a.getDiffieHellman, cryptoBrowserify.createDiffieHellman = a.createDiffieHellman, cryptoBrowserify.DiffieHellman = a.DiffieHellman;
  var o = requireBrowser$3();
  cryptoBrowserify.createSign = o.createSign, cryptoBrowserify.Sign = o.Sign, cryptoBrowserify.createVerify = o.createVerify, cryptoBrowserify.Verify = o.Verify, cryptoBrowserify.createECDH = requireBrowser$2();
  var u = requireBrowser$1();
  cryptoBrowserify.publicEncrypt = u.publicEncrypt, cryptoBrowserify.privateEncrypt = u.privateEncrypt, cryptoBrowserify.publicDecrypt = u.publicDecrypt, cryptoBrowserify.privateDecrypt = u.privateDecrypt;
  var l = requireBrowser();
  return cryptoBrowserify.randomFill = l.randomFill, cryptoBrowserify.randomFillSync = l.randomFillSync, cryptoBrowserify.createCredentials = function() {
    throw new Error(`sorry, createCredentials is not implemented yet
we accept pull requests
https://github.com/browserify/crypto-browserify`);
  }, cryptoBrowserify.constants = {
    DH_CHECK_P_NOT_SAFE_PRIME: 2,
    DH_CHECK_P_NOT_PRIME: 1,
    DH_UNABLE_TO_CHECK_GENERATOR: 4,
    DH_NOT_SUITABLE_GENERATOR: 8,
    NPN_ENABLED: 1,
    ALPN_ENABLED: 1,
    RSA_PKCS1_PADDING: 1,
    RSA_SSLV23_PADDING: 2,
    RSA_NO_PADDING: 3,
    RSA_PKCS1_OAEP_PADDING: 4,
    RSA_X931_PADDING: 5,
    RSA_PKCS1_PSS_PADDING: 6,
    POINT_CONVERSION_COMPRESSED: 2,
    POINT_CONVERSION_UNCOMPRESSED: 4,
    POINT_CONVERSION_HYBRID: 6
  }, cryptoBrowserify;
}
var seedrandom$1 = seedrandom$2.exports, hasRequiredSeedrandom$1;
function requireSeedrandom$1() {
  return hasRequiredSeedrandom$1 || (hasRequiredSeedrandom$1 = 1, function(r) {
    (function(e, t, n) {
      var s = 256, a = 6, o = 52, u = "random", l = n.pow(s, a), f = n.pow(2, o), c = f * 2, h = s - 1, d;
      function m(T, _, F) {
        var O = [];
        _ = _ == !0 ? { entropy: !0 } : _ || {};
        var q = v(b(
          _.entropy ? [T, I(t)] : T ?? w(),
          3
        ), O), V = new g(O), H = function() {
          for (var R = V.g(a), $ = l, S = 0; R < f; )
            R = (R + S) * s, $ *= s, S = V.g(1);
          for (; R >= c; )
            R /= 2, $ /= 2, S >>>= 1;
          return (R + S) / $;
        };
        return H.int32 = function() {
          return V.g(4) | 0;
        }, H.quick = function() {
          return V.g(4) / 4294967296;
        }, H.double = H, v(I(V.S), t), (_.pass || F || function(R, $, S, x) {
          return x && (x.S && y(x, V), R.state = function() {
            return y(V, {});
          }), S ? (n[u] = R, $) : R;
        })(
          H,
          q,
          "global" in _ ? _.global : this == n,
          _.state
        );
      }
      function g(T) {
        var _, F = T.length, O = this, q = 0, V = O.i = O.j = 0, H = O.S = [];
        for (F || (T = [F++]); q < s; )
          H[q] = q++;
        for (q = 0; q < s; q++)
          H[q] = H[V = h & V + T[q % F] + (_ = H[q])], H[V] = _;
        (O.g = function(R) {
          for (var $, S = 0, x = O.i, C = O.j, A = O.S; R--; )
            $ = A[x = h & x + 1], S = S * s + A[h & (A[x] = A[C = h & C + $]) + (A[C] = $)];
          return O.i = x, O.j = C, S;
        })(s);
      }
      function y(T, _) {
        return _.i = T.i, _.j = T.j, _.S = T.S.slice(), _;
      }
      function b(T, _) {
        var F = [], O = typeof T, q;
        if (_ && O == "object")
          for (q in T)
            try {
              F.push(b(T[q], _ - 1));
            } catch {
            }
        return F.length ? F : O == "string" ? T : T + "\0";
      }
      function v(T, _) {
        for (var F = T + "", O, q = 0; q < F.length; )
          _[h & q] = h & (O ^= _[h & q] * 19) + F.charCodeAt(q++);
        return I(_);
      }
      function w() {
        try {
          var T;
          return d && (T = d.randomBytes) ? T = T(s) : (T = new Uint8Array(s), (e.crypto || e.msCrypto).getRandomValues(T)), I(T);
        } catch {
          var _ = e.navigator, F = _ && _.plugins;
          return [+/* @__PURE__ */ new Date(), e, F, e.screen, I(t)];
        }
      }
      function I(T) {
        return String.fromCharCode.apply(0, T);
      }
      if (v(n.random(), t), r.exports) {
        r.exports = m;
        try {
          d = requireCryptoBrowserify();
        } catch {
        }
      } else
        n["seed" + u] = m;
    })(
      // global: `self` in browsers (including strict mode and web workers),
      // otherwise `this` in Node and other environments
      typeof self < "u" ? self : seedrandom$1,
      [],
      // pool: entropy pool starts empty
      Math
      // math: package containing random, pow, and seedrandom
    );
  }(seedrandom$2)), seedrandom$2.exports;
}
var seedrandom, hasRequiredSeedrandom;
function requireSeedrandom() {
  if (hasRequiredSeedrandom) return seedrandom;
  hasRequiredSeedrandom = 1;
  var r = requireAlea(), e = requireXor128(), t = requireXorwow(), n = requireXorshift7(), s = requireXor4096(), a = requireTychei(), o = requireSeedrandom$1();
  return o.alea = r, o.xor128 = e, o.xorwow = t, o.xorshift7 = n, o.xor4096 = s, o.tychei = a, seedrandom = o, seedrandom;
}
var seedrandomExports = requireSeedrandom();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TEST_EPSILON_FLOAT32 = 1e-3, TEST_EPSILON_FLOAT16 = 0.1;
function expectArraysClose(r, e, t) {
  return t == null && (t = testEpsilon()), expectArraysPredicate(r, e, (n, s) => areClose(n, s, t));
}
function testEpsilon() {
  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;
}
function expectArraysPredicate(r, e, t) {
  let n = !0;
  if ((isTypedArray$1(r) || isTypedArray$1(e)) && (n = !1), isTypedArray$1(r) && isTypedArray$1(e) && (n = !0), n) {
    const o = r.constructor.name, u = e.constructor.name;
    if (o !== u)
      throw new Error(`Arrays are of different type. Actual: ${o}. Expected: ${u}`);
  }
  if (Array.isArray(r) && Array.isArray(e)) {
    const o = inferShape(r), u = inferShape(e);
    if (!arraysEqual(o, u))
      throw new Error(`Arrays have different shapes. Actual: [${o}]. Expected: [${u}]`);
  }
  const s = isTypedArray$1(r) ? r : flatten$2(r), a = isTypedArray$1(e) ? e : flatten$2(e);
  if (s.length !== a.length)
    throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.
Actual:   ${s}.
Expected: ${a}.`);
  for (let o = 0; o < a.length; ++o) {
    const u = s[o], l = a[o];
    if (!t(u, l))
      throw new Error(`Arrays differ: actual[${o}] = ${u}, expected[${o}] = ${l}.
Actual:   ${s}.
Expected: ${a}.`);
  }
  typeof expect < "u" && expect().nothing();
}
function expectPromiseToFail(r, e) {
  r().then(() => e.fail(), () => e()), typeof expect < "u" && expect().nothing();
}
function expectArraysEqual(r, e) {
  const t = typeof e == "string" || typeof e == "number" || typeof e == "boolean" ? [e] : e;
  return isString(r) || isString(r[0]) || isString(e) || isString(e[0]) ? expectArraysPredicate(r, t, (n, s) => n == s) : expectArraysPredicate(r, e, (n, s) => areClose(n, s, 0));
}
function expectNumbersClose(r, e, t) {
  if (t == null && (t = testEpsilon()), !areClose(r, e, t))
    throw new Error(`Numbers differ: actual === ${r}, expected === ${e}`);
  typeof expect < "u" && expect().nothing();
}
function areClose(r, e, t) {
  return !isFinite(r) && !isFinite(e) ? !0 : !(isNaN(r) || isNaN(e) || Math.abs(r - e) > t);
}
function expectValuesInRange(r, e, t) {
  for (let n = 0; n < r.length; n++)
    if (r[n] < e || r[n] > t)
      throw new Error(`Value out of range:${r[n]} low: ${e}, high: ${t}`);
}
function expectArrayBuffersEqual(r, e) {
  const t = new Float32Array(r), n = new Float32Array(e);
  if (t.length !== n.length)
    throw new Error(`Expected ArrayBuffer to be of length ${n.length}, but it was ${t.length}`);
  for (let s = 0; s < n.length; s++)
    if (t[s] !== n[s])
      throw new Error(`Expected ArrayBuffer value at ${s} to be ${n[s]} but got ${t[s]} instead`);
}
function encodeStrings(r) {
  for (let e = 0; e < r.length; e++) {
    const t = r[e];
    Array.isArray(t) ? encodeStrings(t) : r[e] = encodeString(t);
  }
  return r;
}
function createVideoElement(r) {
  const e = document.createElement("video");
  return "playsInline" in e && (e.playsInline = !0), e.muted = !0, e.loop = !0, e.style.position = "fixed", e.style.left = "0px", e.style.top = "0px", e.preload = "auto", e.appendChild(r), new Promise((t) => {
    e.addEventListener("loadeddata", (n) => t(e)), e.load();
  });
}
async function play(r) {
  await r.play(), "requestVideoFrameCallback" in r && await new Promise((e) => {
    r.requestVideoFrameCallback(e);
  });
}
const test_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  TEST_EPSILON_FLOAT16,
  createVideoElement,
  encodeStrings,
  expectArrayBuffersEqual,
  expectArraysClose,
  expectArraysEqual,
  expectNumbersClose,
  expectPromiseToFail,
  expectValuesInRange,
  play,
  testEpsilon
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MPRandGauss {
  constructor(e, t, n, s, a) {
    this.mean = e, this.stdDev = t, this.dtype = n, this.nextVal = NaN, this.truncated = s, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    const o = a || Math.random();
    this.random = seedrandomExports.alea(o.toString());
  }
  /** Returns next sample from a Gaussian distribution. */
  nextValue() {
    if (!isNaN(this.nextVal)) {
      const s = this.nextVal;
      return this.nextVal = NaN, s;
    }
    let e, t, n = !1;
    for (; !n; ) {
      let s, a, o;
      do
        s = 2 * this.random() - 1, a = 2 * this.random() - 1, o = s * s + a * a;
      while (o >= 1 || o === 0);
      const u = Math.sqrt(-2 * Math.log(o) / o);
      e = this.mean + this.stdDev * s * u, t = this.mean + this.stdDev * a * u, (!this.truncated || this.isValidTruncated(e)) && (n = !0);
    }
    return (!this.truncated || this.isValidTruncated(t)) && (this.nextVal = this.convertValue(t)), this.convertValue(e);
  }
  /** Handles proper rounding for non-floating-point numbers. */
  convertValue(e) {
    return this.dtype == null || this.dtype === "float32" ? e : Math.round(e);
  }
  /** Returns true if less than 2-standard-deviations from the mean. */
  isValidTruncated(e) {
    return e <= this.upper && e >= this.lower;
  }
}
class RandGamma {
  constructor(e, t, n, s) {
    this.alpha = e, this.beta = 1 / t, this.dtype = n;
    const a = s || Math.random();
    this.randu = seedrandomExports.alea(a.toString()), this.randn = new MPRandGauss(0, 1, n, !1, this.randu()), e < 1 ? this.d = e + 2 / 3 : this.d = e - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  /** Returns next sample from a gamma distribution. */
  nextValue() {
    let e, t, n, s, a, o;
    for (; ; ) {
      do
        s = this.randn.nextValue(), o = 1 + this.c * s;
      while (o <= 0);
      if (o *= o * o, e = s * s, t = 1 - 0.331 * e * e, n = 0.5 * e + this.d * (1 - o + Math.log(o)), a = this.randu(), a < t || Math.log(a) < n)
        break;
    }
    return o = 1 / this.beta * this.d * o, this.alpha < 1 && (o *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(o);
  }
  /** Handles proper rounding for non-floating-point numbers. */
  convertValue(e) {
    return this.dtype === "float32" ? e : Math.round(e);
  }
}
class UniformRandom {
  constructor(e = 0, t = 1, n, s) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = e, this.range = t - e, this.dtype = n, s == null && (s = Math.random()), typeof s == "number" && (s = s.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);
    this.random = seedrandomExports.alea(s);
  }
  convertValue(e) {
    return this.canReturnFloat() ? e : Math.round(e);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function randomGamma_(r, e, t = 1, n = "float32", s) {
  if (assertNonNegativeIntegerDimensions(r), t == null && (t = 1), n == null && (n = "float32"), n !== "float32" && n !== "int32")
    throw new Error(`Unsupported data type ${n}`);
  const a = new RandGamma(e, t, n, s), o = buffer$1(r, n);
  for (let u = 0; u < o.values.length; u++)
    o.values[u] = a.nextValue();
  return o.toTensor();
}
const randomGamma = /* @__PURE__ */ op({ randomGamma_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function randomNormal_(r, e = 0, t = 1, n, s) {
  if (assertNonNegativeIntegerDimensions(r), n != null && n === "bool")
    throw new Error(`Unsupported data type ${n}`);
  const a = new MPRandGauss(e, t, n, !1, s), o = buffer$1(r, n);
  for (let u = 0; u < o.values.length; u++)
    o.values[u] = a.nextValue();
  return o.toTensor();
}
const randomNormal$2 = /* @__PURE__ */ op({ randomNormal_ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function randomStandardNormal_(r, e, t) {
  if (e != null && e === "bool")
    throw new Error(`Unsupported data type ${e}`);
  return randomNormal$2(r, 0, 1, e, t);
}
const randomStandardNormal = /* @__PURE__ */ op({ randomStandardNormal_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function randomUniform_(r, e = 0, t = 1, n = "float32", s) {
  assertNonNegativeIntegerDimensions(r);
  const a = buffer$1(r, n), o = new UniformRandom(e, t, null, s);
  for (let u = 0; u < a.values.length; u++)
    a.values[u] = o.nextValue();
  return a.toTensor();
}
const randomUniform$1 = /* @__PURE__ */ op({ randomUniform_ });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function randomUniformInt_(r, e, t, n) {
  return randomUniform$1(r, e, t, "int32", n);
}
const randomUniformInt = /* @__PURE__ */ op({ randomUniformInt_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function range$3(r, e, t = 1, n = "float32") {
  if (t === 0)
    throw new Error("Cannot have a step of zero");
  const s = { start: r, stop: e, step: t, dtype: n };
  return ENGINE.runKernel(Range, {}, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function real_(r) {
  const t = { input: convertToTensor(r, "input", "real") };
  return ENGINE.runKernel(Real, t);
}
const real$2 = /* @__PURE__ */ op({ real_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reciprocal_(r) {
  const t = { x: convertToTensor(r, "x", "reciprocal") };
  return ENGINE.runKernel(Reciprocal, t);
}
const reciprocal$2 = /* @__PURE__ */ op({ reciprocal_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function relu_(r) {
  const t = { x: convertToTensor(r, "x", "relu") };
  return ENGINE.runKernel(Relu$1, t);
}
const relu$2 = /* @__PURE__ */ op({ relu_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function relu6_(r) {
  const t = { x: convertToTensor(r, "x", "relu6") };
  return ENGINE.runKernel(Relu6$1, t);
}
const relu6$2 = /* @__PURE__ */ op({ relu6_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reverse_(r, e) {
  const n = { x: convertToTensor(r, "x", "reverse") }, s = { dims: e };
  return ENGINE.runKernel(Reverse, n, s);
}
const reverse$2 = /* @__PURE__ */ op({ reverse_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reverse1d_(r) {
  const e = convertToTensor(r, "x", "reverse");
  return assert$1(e.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`), reverse$2(e, 0);
}
const reverse1d = /* @__PURE__ */ op({ reverse1d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reverse2d_(r, e) {
  const t = convertToTensor(r, "x", "reverse");
  return assert$1(t.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${t.rank}.`), reverse$2(t, e);
}
const reverse2d = /* @__PURE__ */ op({ reverse2d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reverse3d_(r, e) {
  const t = convertToTensor(r, "x", "reverse");
  return assert$1(t.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${t.rank}.`), reverse$2(t, e);
}
const reverse3d = /* @__PURE__ */ op({ reverse3d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reverse4d_(r, e) {
  const t = convertToTensor(r, "x", "reverse");
  return assert$1(t.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${t.rank}.`), reverse$2(t, e);
}
const reverse4d = /* @__PURE__ */ op({ reverse4d_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function round_(r) {
  const t = { x: convertToTensor(r, "x", "round") };
  return ENGINE.runKernel(Round, t);
}
const round$2 = /* @__PURE__ */ op({ round_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rsqrt_(r) {
  const t = { x: convertToTensor(r, "x", "rsqrt", "float32") };
  return ENGINE.runKernel(Rsqrt, t);
}
const rsqrt$2 = /* @__PURE__ */ op({ rsqrt_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function selu_(r) {
  const t = { x: convertToTensor(r, "x", "selu") };
  return ENGINE.runKernel(Selu$1, t);
}
const selu$2 = /* @__PURE__ */ op({ selu_ });
function separableConv2d_(r, e, t, n, s, a = [1, 1], o = "NHWC") {
  const u = convertToTensor(r, "x", "separableConv2d"), l = convertToTensor(e, "depthwiseFilter", "separableConv2d"), f = convertToTensor(t, "pointwiseFilter", "separableConv2d");
  let c = u, h = !1;
  if (u.rank === 3 && (h = !0, c = reshape$3(u, [1, u.shape[0], u.shape[1], u.shape[2]])), o === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  assert$1(c.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`), assert$1(l.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`), assert$1(f.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`), assert$1(f.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${f.shape[0]}.`), assert$1(f.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${f.shape[1]}.`);
  const d = l.shape[2], m = l.shape[3];
  assert$1(f.shape[2] === d * m, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${d * m}, but got ${f.shape[2]}.`);
  const g = depthwiseConv2d$3(c, l, n, s, o, a), b = conv2d$3(g, f, 1, "valid", o);
  return h ? reshape$3(b, [b.shape[1], b.shape[2], b.shape[3]]) : b;
}
const separableConv2d$1 = /* @__PURE__ */ op({ separableConv2d_ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function setdiff1dAsync_(r, e) {
  const t = convertToTensor(r, "x", "setdiff1d"), n = convertToTensor(e, "y", "setdiff1d");
  assert$1(t.dtype === n.dtype, () => `x and y should have the same dtype, but got x (${t.dtype}) and y (${n.dtype}).`), assert$1(t.rank === 1, () => `x should be 1D tensor, but got x (${t.shape}).`), assert$1(n.rank === 1, () => `y should be 1D tensor, but got y (${n.shape}).`);
  const s = await t.data(), a = await n.data(), o = new Set(a);
  let u = 0;
  for (let c = 0; c < s.length; c++)
    o.has(s[c]) || u++;
  const l = new TensorBuffer([u], t.dtype), f = new TensorBuffer([u], "int32");
  for (let c = 0, h = 0; c < s.length; c++)
    o.has(s[c]) || (l.values[h] = s[c], f.values[h] = c, h++);
  return [l.toTensor(), f.toTensor()];
}
const setdiff1dAsync = setdiff1dAsync_;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sign_(r) {
  const t = { x: convertToTensor(r, "x", "sign") };
  return ENGINE.runKernel(Sign, t);
}
const sign$2 = /* @__PURE__ */ op({ sign_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sin_(r) {
  const t = { x: convertToTensor(r, "x", "sin", "float32") };
  return ENGINE.runKernel(Sin, t);
}
const sin$2 = /* @__PURE__ */ op({ sin_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sinh_(r) {
  const t = { x: convertToTensor(r, "x", "sinh") };
  return ENGINE.runKernel(Sinh, t);
}
const sinh$2 = /* @__PURE__ */ op({ sinh_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function slice1d_(r, e, t) {
  const n = convertToTensor(r, "x", "slice1d");
  return assert$1(n.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${n.rank} tensor`), slice$2(n, [e], [t]);
}
const slice1d = /* @__PURE__ */ op({ slice1d_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function slice2d_(r, e, t) {
  const n = convertToTensor(r, "x", "slice2d");
  return assert$1(n.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${n.rank} tensor`), slice$2(n, e, t);
}
const slice2d = /* @__PURE__ */ op({ slice2d_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function slice3d_(r, e, t) {
  const n = convertToTensor(r, "x", "slice3d");
  return assert$1(n.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${n.rank} tensor`), slice$2(n, e, t);
}
const slice3d = /* @__PURE__ */ op({ slice3d_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function slice4d_(r, e, t) {
  const n = convertToTensor(r, "x", "slice4d");
  return assert$1(n.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${n.rank} tensor`), slice$2(n, e, t);
}
const slice4d = /* @__PURE__ */ op({ slice4d_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function softmax_(r, e = -1) {
  const t = convertToTensor(r, "logits", "softmax", "float32");
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and dim was ${e}`);
  const n = { logits: t }, s = { dim: e };
  return ENGINE.runKernel(Softmax$2, n, s);
}
const softmax$3 = /* @__PURE__ */ op({ softmax_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fft_(r) {
  assert$1(r.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);
  const e = { input: r };
  return ENGINE.runKernel(FFT, e);
}
const fft$2 = /* @__PURE__ */ op({ fft_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ifft_(r) {
  assert$1(r.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);
  const e = { input: r };
  return ENGINE.runKernel(IFFT, e);
}
const ifft$2 = /* @__PURE__ */ op({ ifft_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function irfft_(r) {
  const e = r.shape[r.shape.length - 1], t = r.size / e;
  let n;
  if (e <= 2) {
    const s = reshape$3(r, [t, e]);
    n = ifft$2(s);
  } else {
    const s = [t, 2 * (e - 1)], a = reshape$3(real$2(r), [t, e]), o = reshape$3(imag$2(r), [t, e]), u = reverse$2(slice$2(a, [0, 1], [t, e - 2]), 1), l = mul(reverse$2(slice$2(o, [0, 1], [t, e - 2]), 1), scalar(-1)), f = concat$2([a, u], 1), c = concat$2([o, l], 1), h = reshape$3(complex$2(f, c), [s[0], s[1]]);
    n = ifft$2(h);
  }
  if (n = real$2(n), r.rank === 3 && r.shape[0] !== 0) {
    const s = n, a = r.shape[0];
    n = reshape$3(n, [a, n.shape[0] / a, n.shape[1]]), s.dispose();
  }
  return n;
}
const irfft = /* @__PURE__ */ op({ irfft_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function split_(r, e, t = 0) {
  const s = { x: convertToTensor(r, "x", "split") }, a = { numOrSizeSplits: e, axis: t };
  return ENGINE.runKernel(SplitV, s, a);
}
const split$2 = /* @__PURE__ */ op({ split_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rfft_(r, e) {
  assert$1(r.dtype === "float32", () => `The dtype for rfft() must be real value but got ${r.dtype}`);
  let t = r.shape[r.shape.length - 1];
  const n = r.size / t;
  let s;
  if (e != null && e < t) {
    const g = r.shape.map((b) => 0), y = r.shape.map((b) => b);
    y[r.shape.length - 1] = e, s = slice$2(r, g, y), t = e;
  } else if (e != null && e > t) {
    const g = r.shape.map((y) => y);
    g[r.shape.length - 1] = e - t, s = concat$2([r, zeros$2(g)], r.shape.length - 1), t = e;
  } else
    s = r;
  const a = zerosLike$2(s), o = reshape$3(complex$2(s, a), [n, t]), u = fft$2(o), l = Math.floor(t / 2) + 1, f = real$2(u), c = imag$2(u), h = split$2(f, [l, t - l], f.shape.length - 1), d = split$2(c, [l, t - l], c.shape.length - 1), m = s.shape.slice();
  return m[s.shape.length - 1] = l, reshape$3(complex$2(h[0], d[0]), m);
}
const rfft = /* @__PURE__ */ op({ rfft_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function squaredDifference_(r, e) {
  let t = convertToTensor(r, "a", "squaredDifference"), n = convertToTensor(e, "b", "squaredDifference");
  [t, n] = makeTypesMatch(t, n), assertAndGetBroadcastShape(t.shape, n.shape);
  const s = { a: t, b: n }, a = {};
  return ENGINE.runKernel(SquaredDifference, s, a);
}
const squaredDifference$2 = /* @__PURE__ */ op({ squaredDifference_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function squeeze_(r, e) {
  const t = convertToTensor(r, "x", "squeeze", "string_or_numeric");
  return reshape$3(t, squeezeShape(t.shape, e).newShape);
}
const squeeze = /* @__PURE__ */ op({ squeeze_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stack_(r, e = 0) {
  const t = convertToTensorArray(r, "tensors", "stack", "string_or_numeric");
  assert$1(t.length >= 1, () => "Pass at least one tensor to tf.stack"), t.length > 0 && assert$1(e <= t[0].rank, () => "Axis must be <= rank of the tensor");
  const n = t, s = { axis: e };
  return ENGINE.runKernel(Pack, n, s);
}
const stack = /* @__PURE__ */ op({ stack_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function step_(r, e = 0) {
  const n = { x: convertToTensor(r, "x", "step") }, s = { alpha: e };
  return ENGINE.runKernel(Step, n, s);
}
const step$2 = /* @__PURE__ */ op({ step_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stridedSlice_(r, e, t, n, s = 0, a = 0, o = 0, u = 0, l = 0) {
  const c = { x: convertToTensor(r, "x", "stridedSlice", "string_or_numeric") }, h = {
    begin: e,
    end: t,
    strides: n,
    beginMask: s,
    endMask: a,
    ellipsisMask: o,
    newAxisMask: u,
    shrinkAxisMask: l
  };
  return ENGINE.runKernel(StridedSlice, c, h);
}
const stridedSlice$2 = /* @__PURE__ */ op({ stridedSlice_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tan_(r) {
  const t = { x: convertToTensor(r, "x", "tan", "float32") };
  return ENGINE.runKernel(Tan, t);
}
const tan$2 = /* @__PURE__ */ op({ tan_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tensor1d(r, e) {
  assertNonNull(r);
  const t = inferShape(r, e);
  if (t.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return makeTensor(r, null, t, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tensor2d(r, e, t) {
  if (assertNonNull(r), e != null && e.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  const n = inferShape(r, t);
  if (n.length !== 2 && n.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (n.length === 1 && e == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return makeTensor(r, e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tensor3d(r, e, t) {
  if (assertNonNull(r), e != null && e.length !== 3)
    throw new Error("tensor3d() requires shape to have three numbers");
  const n = inferShape(r, t);
  if (n.length !== 3 && n.length !== 1)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (n.length === 1 && e == null)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return makeTensor(r, e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tensor4d(r, e, t) {
  if (assertNonNull(r), e != null && e.length !== 4)
    throw new Error("tensor4d() requires shape to have four numbers");
  const n = inferShape(r, t);
  if (n.length !== 4 && n.length !== 1)
    throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (n.length === 1 && e == null)
    throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return makeTensor(r, e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tensor5d(r, e, t) {
  if (assertNonNull(r), e != null && e.length !== 5)
    throw new Error("tensor5d() requires shape to have five numbers");
  const n = inferShape(r, t);
  if (n.length !== 5 && n.length !== 1)
    throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (n.length === 1 && e == null)
    throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return makeTensor(r, e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tensor6d(r, e, t) {
  if (assertNonNull(r), e != null && e.length !== 6)
    throw new Error("tensor6d() requires shape to have six numbers");
  const n = inferShape(r, t);
  if (n.length !== 6 && n.length !== 1)
    throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (n.length === 1 && e == null)
    throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return e = e || n, makeTensor(r, e, n, t);
}
function validateUpdateShape(r, e, t) {
  const n = e.rank > 1 ? e.shape[e.rank - 1] : 1, s = e.rank > 1 ? e.rank - 1 : 1, a = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${t.shape}, indices.shape: ${e.shape}, shape: ${r}, sliceDim: ${n}, and batchDim: ${s}.`;
  if (t.rank < s)
    throw new Error(a + ` update.rank < ${s}. `);
  if (r.length < n + (t.rank - s))
    throw new Error(a + ` Output shape length < ${n + (t.rank - s)}`);
  if (t.rank !== s + r.length - n)
    throw new Error(a + ` update.rank != ${s + r.length - n}`);
  for (let o = 0; o < s; ++o)
    if (t.shape[o] !== e.shape[o])
      throw new Error(a + ` updates.shape[${o}] (${t.shape[o]}) != indices.shape[${o}] (${e.shape[o]}).`);
  for (let o = 0; o < t.rank - s; ++o)
    if (t.shape[o + s] !== r[o + n])
      throw new Error(a + ` updates.shape[${o + s}] (${t.shape[o + s]}) != shape[${o + s}] (${r[o + s]})`);
}
function validateInput$1(r, e, t) {
  if (e.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);
  if (r.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);
  if (e.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);
  if (t.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${t}`);
  if (t.length === 0) {
    if (e.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);
    if (r.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`);
  }
  validateUpdateShape(t, e, r);
}
function calculateShapes(r, e, t) {
  const n = e.shape.length, s = n > 1 ? e.shape[n - 1] : 1, a = t.length;
  let o = 1;
  for (let h = s; h < a; ++h)
    o *= t[h];
  const u = s < 1 ? 1 : s, l = sizeFromShape(e.shape) / u, f = [...computeStrides(t.slice(0, s)), 1], c = sizeFromShape(t);
  return { sliceRank: s, numUpdates: l, sliceSize: o, strides: f, outputSize: c };
}
const scatter_nd_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  calculateShapes,
  validateInput: validateInput$1,
  validateUpdateShape
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tensorScatterUpdate_(r, e, t) {
  const n = convertToTensor(r, "tensor", "tensorScatterupdate"), s = convertToTensor(e, "indices", "tensorScatterupdate", "int32"), a = convertToTensor(t, "updates", "tensorScatterupdate");
  if (validateInput$1(a, s, n.shape), n.dtype !== a.dtype)
    throw new Error(`tensor and updates must have the same dtype, instead they are ${n.dtype} and ${a.dtype}.`);
  const o = {
    tensor: n,
    indices: s,
    updates: a
  }, u = {};
  return ENGINE.runKernel(TensorScatterUpdate, o, u);
}
const tensorScatterUpdate$2 = op({ tensorScatterUpdate_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function topk_(r, e = 1, t = !0) {
  const n = convertToTensor(r, "x", "topk");
  if (n.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  const s = n.shape[n.shape.length - 1];
  if (e < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);
  if (e > s)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${e}`);
  const a = { x: n }, o = { k: e, sorted: t }, [u, l] = ENGINE.runKernel(TopK, a, o);
  return { values: u, indices: l };
}
const topk = /* @__PURE__ */ op({ topk_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function truncatedNormal_(r, e = 0, t = 1, n, s) {
  if (assertNonNegativeIntegerDimensions(r), n != null && n === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  const a = new MPRandGauss(e, t, n, !0, s), o = buffer$1(r, n);
  for (let u = 0; u < o.values.length; u++)
    o.values[u] = a.nextValue();
  return o.toTensor();
}
const truncatedNormal$1 = /* @__PURE__ */ op({ truncatedNormal_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unique_(r, e = 0) {
  const t = convertToTensor(r, "x", "unique", "string_or_numeric");
  assert$1(t.rank > 0, () => "The input tensor must be at least 1D");
  const n = { x: t }, s = { axis: e }, [a, o] = ENGINE.runKernel(Unique, n, s);
  return { values: a, indices: o };
}
const unique$3 = /* @__PURE__ */ op({ unique_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unsortedSegmentSum_(r, e, t) {
  const n = convertToTensor(r, "x", "unsortedSegmentSum"), s = convertToTensor(e, "segmentIds", "unsortedSegmentSum", "int32");
  assert$1(isInt(t), () => "numSegments must be of dtype int");
  const a = { x: n, segmentIds: s }, o = { numSegments: t };
  return ENGINE.runKernel(UnsortedSegmentSum, a, o);
}
const unsortedSegmentSum$2 = /* @__PURE__ */ op({ unsortedSegmentSum_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unstack_(r, e = 0) {
  const t = convertToTensor(r, "x", "unstack", "string_or_numeric");
  assert$1(e >= -t.shape.length && e < t.shape.length, () => `Axis = ${e} is not in [-${t.shape.length}, ${t.shape.length})`);
  const n = { value: t }, s = { axis: e };
  return ENGINE.runKernel(Unpack, n, s);
}
const unstack = /* @__PURE__ */ op({ unstack_ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function upperBound$1(r, e) {
  return searchSorted$2(r, e, "right");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function variable(r, e = !0, t, n) {
  return ENGINE.makeVariable(r, e, t, n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function whereImpl$2(r, e) {
  const t = [];
  for (let a = 0; a < e.length; a++)
    e[a] && t.push(a);
  const n = buffer$1(r, "int32"), s = buffer$1([t.length, r.length], "int32");
  for (let a = 0; a < t.length; a++) {
    const o = n.indexToLoc(t[a]), u = a * r.length;
    s.values.set(o, u);
  }
  return s.toTensor();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function whereAsync_(r) {
  const e = convertToTensor(r, "condition", "whereAsync", "bool"), t = await e.data(), n = whereImpl$2(e.shape, t);
  return r !== e && e.dispose(), n;
}
const whereAsync = whereAsync_;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function booleanMaskAsync_(r, e, t) {
  const n = convertToTensor(r, "tensor", "boolMask"), s = convertToTensor(e, "mask", "boolMask", "bool"), a = t ?? 0, o = s.rank, u = n.shape;
  assert$1(o > 0, () => "mask cannot be scalar"), assertShapesMatch(u.slice(a, a + o), s.shape, "mask's shape must match the first K dimensions of tensor's shape,");
  let l = 1;
  for (let y = a; y < a + o; y++)
    l *= u[y];
  const f = u.slice(0, a).concat([l], u.slice(a + o)), c = reshape$3(n, f), h = reshape$3(s, [-1]), d = await whereAsync(h), m = squeeze(d, [1]), g = gather$1(c, m, a);
  return r !== n && n.dispose(), e !== s && s.dispose(), m.dispose(), c.dispose(), h.dispose(), d.dispose(), g;
}
const booleanMaskAsync = booleanMaskAsync_;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transpose_(r, e, t) {
  const n = convertToTensor(r, "x", "transpose");
  if (e == null && (e = n.shape.map((o, u) => u).reverse()), assert$1(n.rank === e.length, () => `Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`), e.forEach((o) => {
    assert$1(o >= 0 && o < n.rank, () => `All entries in 'perm' must be between 0 and ${n.rank - 1} but got ${e}`);
  }), n.rank <= 1)
    return n.clone();
  const s = { x: n }, a = { perm: e };
  return n.dtype === "complex64" ? tidy(() => {
    let o = real$2(n), u = imag$2(n);
    return o = ENGINE.runKernel(Transpose, { x: o }, a), u = ENGINE.runKernel(Transpose, { x: u }, a), t && (u = neg$2(u)), complex$2(o, u);
  }) : ENGINE.runKernel(Transpose, s, a);
}
const transpose$2 = /* @__PURE__ */ op({ transpose_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function movingAverage_(r, e, t, n, s = !0) {
  const a = convertToTensor(r, "v", "movingAverage"), o = convertToTensor(e, "x", "movingAverage"), u = convertToTensor(t, "decay", "movingAverage");
  assertTypesMatch(a, o), assert$1(arraysEqual(a.shape, o.shape), () => "Shape mismatch in v and x");
  const l = scalar(1), f = sub$2(l, u);
  let c = mul(sub$2(o, a), f);
  if (s) {
    assert$1(n != null, () => "When using zeroDebias: true, step is required.");
    const h = convertToTensor(n, "step", "movingAverage");
    c = div$1(c, sub$2(l, pow$3(u, h)));
  }
  return add$2(a, c);
}
const movingAverage = /* @__PURE__ */ op({ movingAverage_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function scatterND_(r, e, t) {
  assertNonNegativeIntegerDimensions(t);
  const n = convertToTensor(r, "indices", "scatterND", "int32"), s = convertToTensor(e, "updates", "scatterND");
  validateInput$1(s, n, t);
  const a = { indices: n, updates: s }, o = { shape: t };
  return ENGINE.runKernel(ScatterNd, a, o);
}
const scatterND = /* @__PURE__ */ op({ scatterND_ });
function validateInput(r, e, t, n) {
  if (r.dtype !== "int32")
    throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);
  if (r.rank > 2)
    throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);
  const s = r.rank > 0 ? r.shape[0] : 1, a = r.rank > 1 ? r.shape[1] : 1;
  if (t.length !== a)
    throw new Error(`outputShape has incorrect number of elements:, ${t.length}, should be: ${a}.`);
  const o = e.size;
  if (!(e.rank === 0 || e.rank === 1 && o === s))
    throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);
  if (e.dtype !== n.dtype)
    throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseToDense_(r, e, t, n = 0) {
  assertNonNegativeIntegerDimensions(t);
  const s = convertToTensor(r, "sparseIndices", "sparseToDense", "int32"), a = convertToTensor(e, "sparseValues", "sparseToDense", "string_or_numeric"), o = convertToTensor(n, "defaultValue", "sparseToDense", a.dtype);
  validateInput(s, a, t, o);
  const u = {
    sparseIndices: s,
    sparseValues: a,
    defaultValue: o
  }, l = { outputShape: t };
  return ENGINE.runKernel(SparseToDense, u, l);
}
const sparseToDense$2 = /* @__PURE__ */ op({ sparseToDense_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherND_(r, e) {
  const t = convertToTensor(e, "indices", "gatherND", "int32"), s = { params: convertToTensor(r, "x", "gatherND", "string_or_numeric"), indices: t };
  return ENGINE.runKernel(GatherNd, s);
}
const gatherND = /* @__PURE__ */ op({ gatherND_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getNoiseShape(r, e) {
  if (e == null)
    return r.shape.slice();
  if (arraysEqual(r.shape, e))
    return e;
  if (r.shape.length === e.length) {
    const t = [];
    for (let n = 0; n < r.shape.length; n++)
      e[n] == null && r.shape[n] != null ? t.push(r.shape[n]) : t.push(e[n]);
    return t;
  }
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dropout_(r, e, t, n) {
  const s = convertToTensor(r, "x", "dropout");
  if (assert$1(s.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`), assert$1(e >= 0 && e < 1, () => `rate must be a float in the range [0, 1), but got ${e}.`), e === 0)
    return r instanceof Tensor ? s.clone() : s;
  const a = getNoiseShape(s, t), o = 1 - e, u = div$1(floor$3(add$2(randomUniform$1(a, 0, 1, "float32", n), o)), o);
  return mul(s, u);
}
const dropout$2 = /* @__PURE__ */ op({ dropout_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function enclosingPowerOfTwo(r) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(r) / Math.log(2))));
}
function cosineWindow(r, e, t) {
  const n = 1 - r % 2, s = new Float32Array(r);
  for (let a = 0; a < r; ++a) {
    const o = 2 * Math.PI * a / (r + n - 1);
    s[a] = e - t * Math.cos(o);
  }
  return tensor1d(s, "float32");
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function inTopKAsync_(r, e, t = 1) {
  const n = convertToTensor(r, "predictions", "inTopK"), s = convertToTensor(e, "targets", "inTopK");
  assert$1(n.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${n.rank}`), assert$1(n.rank - 1 === s.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${n.rank} and targets rank ${s.rank}`), assertShapesMatch(n.shape.slice(0, n.shape.length - 1), s.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
  const a = n.shape[n.shape.length - 1];
  assert$1(t > 0 && t <= a, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${t}`);
  const o = await n.data(), u = await s.data(), [l, f] = [o.length / a, a], c = getTypedArrayFromDType("bool", l);
  for (let h = 0; h < l; h++) {
    const d = h * f, m = o.subarray(d, d + f), g = [];
    for (let y = 0; y < m.length; y++)
      g.push({ value: m[y], index: y });
    g.sort((y, b) => b.value - y.value), c[h] = 0;
    for (let y = 0; y < t; y++)
      if (g[y].index === u[h]) {
        c[h] = 1;
        break;
      }
  }
  return r !== n && n.dispose(), e !== s && s.dispose(), tensor(c, s.shape, "bool");
}
const inTopKAsync = inTopKAsync_;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2DBackpropFilter_(r, e, t, n, s, a = "NHWC", o) {
  let u = r;
  r.rank === 3 && (u = reshape$3(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let l = e;
  l.rank === 3 && (l = reshape$3(e, [1, e.shape[0], e.shape[1], e.shape[2]])), assert$1(u.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${u.shape}.`), assert$1(l.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`), assert$1(t.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${t}.`);
  const f = a === "NHWC" ? u.shape[3] : u.shape[1], c = a === "NHWC" ? l.shape[3] : l.shape[1];
  assert$1(f === t[2], () => `Error in conv2dDerFilter: depth of input ${f}) must match input depth in filter (${t[2]}.`), assert$1(c === t[3], () => `Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${t[3]}).`), checkPadOnDimRoundingMode("conv2dDerFilter", s, o);
  const h = { x: u, dy: l }, d = { strides: n, pad: s, dataFormat: a, dimRoundingMode: o, filterShape: t };
  return ENGINE.runKernel(Conv2DBackpropFilter, h, d);
}
const conv2DBackpropFilter$2 = /* @__PURE__ */ op({ conv2DBackpropFilter_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getFusedDyActivation(r, e, t) {
  if (t == null || t === "linear")
    return r;
  if (t === "relu")
    return mul(r, step$2(e));
  throw new Error(`Cannot compute gradient for fused activation ${t}.`);
}
function getFusedBiasGradient(r, e) {
  let t = e;
  const n = getReductionAxes(r.shape, e.shape);
  return n.length > 0 && (t = sum$2(t, n)), reshape$3(t, r.shape);
}
function applyActivation$1(r, e, t, n) {
  if (e === "linear")
    return r;
  if (e === "relu")
    return relu$2(r);
  if (e === "elu")
    return elu$4(r);
  if (e === "relu6")
    return relu6$2(r);
  if (e === "prelu")
    return prelu$3(r, t);
  if (e === "leakyrelu")
    return leakyRelu$2(r, n);
  if (e === "sigmoid")
    return sigmoid$2(r);
  throw new Error(`Unknown fused activation ${e}.`);
}
const shouldFuse = (r, e) => !(r > 0) || e === "linear";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fusedConv2d_({ x: r, filter: e, strides: t, pad: n, dataFormat: s = "NHWC", dilations: a = [1, 1], dimRoundingMode: o, bias: u, activation: l = "linear", preluActivationWeights: f, leakyreluAlpha: c }) {
  if (l = l || "linear", shouldFuse(ENGINE.state.gradientDepth, l) === !1) {
    assert$1(s === "NHWC", () => `Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let F = conv2d$3(r, e, t, n, s, a, o);
    return u != null && (F = add$2(F, u)), applyActivation$1(F, l, f, c);
  }
  const h = convertToTensor(r, "x", "conv2d", "float32"), d = convertToTensor(e, "filter", "conv2d", "float32");
  let m = h, g = !1;
  h.rank === 3 && (g = !0, m = reshape$3(h, [1, h.shape[0], h.shape[1], h.shape[2]])), assert$1(m.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`), assert$1(d.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`), checkPadOnDimRoundingMode("fused conv2d", n, o);
  const y = s === "NHWC" ? m.shape[3] : m.shape[1];
  assert$1(d.shape[2] === y, () => `Error in conv2d: depth of input (${y}) must match input depth for filter ${d.shape[2]}.`), assert$1(eitherStridesOrDilationsAreOne(t, a), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`);
  const b = computeConv2DInfo(m.shape, d.shape, t, a, n, o);
  let v;
  u != null && (v = convertToTensor(u, "bias", "fused conv2d"), [v] = makeTypesMatch(v, h), s === "NHWC" ? assertAndGetBroadcastShape(b.outShape, v.shape) : (assert$1(v.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${v.shape.length}.`), assert$1(v.shape.length === 0 || v.shape[0] === b.outChannels || v.shape[0] === 1, () => `Error in fused conv2d: bias shape (${v.shape}) is not compatible with the number of output channels (${b.outChannels})`)));
  let w;
  if (f != null) {
    const F = f.shape;
    if (assert$1(F.length <= 1 || F.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${F.length}.`), F.length === 1)
      assert$1(F[0] === 1 || F[0] === b.outChannels, () => `Error in fused conv2d: PReLU activation weights (${F}) is not compatible with the number of output channels (${b.outChannels}).`);
    else if (F.length === 3)
      try {
        assertAndGetBroadcastShape(F, b.outShape);
      } catch {
        const q = `Error in fused conv2d: PReLU activation weights (${F}) is not compatible with the output shape of the conv2d (${b.outShape}).`;
        throw Error(q);
      }
    w = convertToTensor(f, "prelu weights", "fused conv2d");
  }
  const I = (F, O) => {
    assert$1(s === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`);
    const [q, V, H, R] = O, $ = getFusedDyActivation(F, H, l);
    assert$1(tupleValuesAreOne(a), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);
    const S = conv2DBackpropInput$2(V.shape, $, q, t, n), x = conv2DBackpropFilter$2(V, $, q.shape, t, n), C = [S, x];
    if (R != null) {
      const A = getFusedBiasGradient(R, $);
      C.push(A);
    }
    return C;
  }, T = {
    x: m,
    filter: d,
    bias: v,
    preluActivationWeights: w
  }, _ = {
    strides: t,
    pad: n,
    dataFormat: s,
    dilations: a,
    dimRoundingMode: o,
    activation: l,
    leakyreluAlpha: c
  };
  return u == null ? customGrad((O, q, V) => {
    let H = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      ENGINE.runKernel(FusedConv2D, T, _)
    );
    return V([q, O, H]), g && (H = reshape$3(H, [H.shape[1], H.shape[2], H.shape[3]])), { value: H, gradFunc: I };
  })(m, d) : customGrad((O, q, V, H) => {
    let R = ENGINE.runKernel(FusedConv2D, T, _);
    return H([q, O, R, V]), g && (R = reshape$3(R, [R.shape[1], R.shape[2], R.shape[3]])), { value: R, gradFunc: I };
  })(m, d, v);
}
const conv2d$2 = /* @__PURE__ */ op({ fusedConv2d_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropFilter_(r, e, t, n, s, a = [1, 1], o) {
  let u = r;
  r.rank === 3 && (u = reshape$3(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let l = e;
  l.rank === 3 && (l = reshape$3(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  const f = { x: u, dy: l }, c = { strides: n, pad: s, dimRoundingMode: o, dilations: a, filterShape: t };
  return ENGINE.runKernel(DepthwiseConv2dNativeBackpropFilter, f, c);
}
const depthwiseConv2dNativeBackpropFilter$2 = op({ depthwiseConv2dNativeBackpropFilter_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropInput_(r, e, t, n, s, a = [1, 1], o) {
  let u = e, l = !1;
  e.rank === 3 && (l = !0, u = reshape$3(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  const f = { dy: u, filter: t }, c = { strides: n, pad: s, dimRoundingMode: o, dilations: a, inputShape: r }, h = (
    // tslint:disable-next-line: no-unnecessary-type-assertion
    ENGINE.runKernel(DepthwiseConv2dNativeBackpropInput, f, c)
  );
  return l ? reshape$3(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const depthwiseConv2dNativeBackpropInput$2 = op({ depthwiseConv2dNativeBackpropInput_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fusedDepthwiseConv2d_({ x: r, filter: e, strides: t, pad: n, dataFormat: s = "NHWC", dilations: a = [1, 1], dimRoundingMode: o, bias: u, activation: l = "linear", preluActivationWeights: f, leakyreluAlpha: c }) {
  if (shouldFuse(ENGINE.state.gradientDepth, l) === !1) {
    let _ = depthwiseConv2d$3(r, e, t, n, s, a, o);
    return u != null && (_ = add$2(_, u)), applyActivation$1(_, l, f, c);
  }
  const h = convertToTensor(r, "x", "depthwiseConv2d", "float32"), d = convertToTensor(e, "filter", "depthwiseConv2d", "float32");
  let m = h, g = !1;
  h.rank === 3 && (g = !0, m = reshape$3(h, [1, h.shape[0], h.shape[1], h.shape[2]])), assert$1(m.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`), assert$1(d.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`), assert$1(m.shape[3] === d.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`), a == null && (a = [1, 1]), assert$1(eitherStridesOrDilationsAreOne(t, a), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`), checkPadOnDimRoundingMode("fused depthwiseConv2d", n, o);
  const y = computeConv2DInfo(
    m.shape,
    d.shape,
    t,
    a,
    n,
    o,
    !0
    /* depthwise */
  );
  let b;
  u != null && (b = convertToTensor(u, "bias", "fused conv2d"), [b] = makeTypesMatch(b, h), assertAndGetBroadcastShape(y.outShape, b.shape));
  let v;
  f != null && (v = convertToTensor(f, "prelu weights", "fused depthwiseConv2d"));
  const w = (_, F) => {
    assert$1(tupleValuesAreOne(a), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);
    const [O, q, V, H] = F, R = getFusedDyActivation(_, V, l), $ = depthwiseConv2dNativeBackpropInput$2(q.shape, R, O, t, n, a, o), S = depthwiseConv2dNativeBackpropFilter$2(q, R, O.shape, t, n, a, o);
    if (H != null) {
      const x = getFusedBiasGradient(b, R);
      return [$, S, x];
    }
    return [$, S];
  }, I = {
    x: m,
    filter: d,
    bias: b,
    preluActivationWeights: v
  }, T = {
    strides: t,
    pad: n,
    dataFormat: s,
    dilations: a,
    dimRoundingMode: o,
    activation: l,
    leakyreluAlpha: c
  };
  return u == null ? customGrad((F, O, q) => {
    let V = ENGINE.runKernel(FusedDepthwiseConv2D, I, T);
    return q([O, F, V]), g && (V = reshape$3(V, [V.shape[1], V.shape[2], V.shape[3]])), { value: V, gradFunc: w };
  })(m, d) : customGrad((F, O, q, V) => {
    let H = ENGINE.runKernel(FusedDepthwiseConv2D, I, T);
    return V([O, F, H, q]), g && (H = reshape$3(H, [H.shape[1], H.shape[2], H.shape[3]])), { value: H, gradFunc: w };
  })(m, d, b);
}
const depthwiseConv2d$2 = /* @__PURE__ */ op({ fusedDepthwiseConv2d_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fusedMatMul_({ a: r, b: e, transposeA: t = !1, transposeB: n = !1, bias: s, activation: a = "linear", preluActivationWeights: o, leakyreluAlpha: u = 0.2 }) {
  if (shouldFuse(ENGINE.state.gradientDepth, a) === !1) {
    let R = matMul$1(r, e, t, n);
    return s != null && (R = add$2(R, s)), applyActivation$1(R, a, o, u);
  }
  let l = convertToTensor(r, "a", "fused matMul"), f = convertToTensor(e, "b", "fused matMul");
  [l, f] = makeTypesMatch(l, f);
  const c = t ? l.shape[l.rank - 2] : l.shape[l.rank - 1], h = n ? f.shape[f.rank - 1] : f.shape[f.rank - 2], d = t ? l.shape[l.rank - 1] : l.shape[l.rank - 2], m = n ? f.shape[f.rank - 2] : f.shape[f.rank - 1], g = l.shape.slice(0, -2), y = f.shape.slice(0, -2), b = sizeFromShape(g), v = sizeFromShape(y);
  assert$1(c === h, () => `Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${f.shape} and transposeA=${t} and transposeB=${n} must match.`);
  const I = assertAndGetBroadcastShape(l.shape.slice(0, -2), f.shape.slice(0, -2)).concat([d, m]), T = t ? reshape$3(l, [b, c, d]) : reshape$3(l, [b, d, c]), _ = n ? reshape$3(f, [v, m, h]) : reshape$3(f, [v, h, m]);
  let F;
  s != null && (F = convertToTensor(s, "bias", "fused matMul"), [F] = makeTypesMatch(F, l), assertAndGetBroadcastShape(I, F.shape));
  let O;
  o != null && (O = convertToTensor(o, "prelu weights", "fused matMul"));
  const q = (R, $) => {
    const [S, x, C, A] = $, N = getFusedDyActivation(reshape$3(R, C.shape), C, a);
    let k, D;
    if (!t && !n ? (k = matMul$1(N, x, !1, !0), D = matMul$1(S, N, !0, !1)) : !t && n ? (k = matMul$1(N, x, !1, !1), D = matMul$1(N, S, !0, !1)) : t && !n ? (k = matMul$1(x, N, !1, !0), D = matMul$1(S, N, !1, !1)) : (k = matMul$1(x, N, !0, !0), D = matMul$1(N, S, !0, !0)), s != null) {
      const E = getFusedBiasGradient(A, N);
      return [k, D, E];
    } else
      return [k, D];
  }, V = {
    a: T,
    b: _,
    bias: F,
    preluActivationWeights: O
  }, H = { transposeA: t, transposeB: n, activation: a, leakyreluAlpha: u };
  return s == null ? customGrad(($, S, x) => {
    const C = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      ENGINE.runKernel(_FusedMatMul, V, H)
    );
    return x([$, S, C]), { value: reshape$3(C, I), gradFunc: q };
  })(T, _) : customGrad(($, S, x, C) => {
    const A = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      ENGINE.runKernel(_FusedMatMul, V, H)
    );
    return C([$, S, A, x]), { value: reshape$3(A, I), gradFunc: q };
  })(T, _, F);
}
const matMul = /* @__PURE__ */ op({ fusedMatMul_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fused_ops = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  conv2d: conv2d$2,
  depthwiseConv2d: depthwiseConv2d$2,
  matMul
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hammingWindow_(r) {
  return cosineWindow(r, 0.54, 0.46);
}
const hammingWindow = /* @__PURE__ */ op({ hammingWindow_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hannWindow_(r) {
  return cosineWindow(r, 0.5, 0.5);
}
const hannWindow = /* @__PURE__ */ op({ hannWindow_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function frame_(r, e, t, n = !1, s = 0) {
  let a = 0;
  const o = [];
  for (; a + e <= r.size; )
    o.push(slice$2(r, a, e)), a += t;
  if (n)
    for (; a < r.size; ) {
      const u = a + e - r.size, l = concat$2([
        slice$2(r, a, e - u),
        fill$2([u], s)
      ]);
      o.push(l), a += t;
    }
  return o.length === 0 ? tensor2d([], [0, e]) : reshape$3(concat$2(o), [o.length, e]);
}
const frame = /* @__PURE__ */ op({ frame_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stft_(r, e, t, n, s = hannWindow) {
  n == null && (n = enclosingPowerOfTwo(e));
  const a = frame(r, e, t), o = mul(a, s(e));
  return rfft(o, n);
}
const stft = /* @__PURE__ */ op({ stft_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cropAndResize_(r, e, t, n, s = "bilinear", a = 0) {
  const o = convertToTensor(r, "image", "cropAndResize"), u = convertToTensor(e, "boxes", "cropAndResize", "float32"), l = convertToTensor(t, "boxInd", "cropAndResize", "int32"), f = u.shape[0];
  assert$1(o.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`), assert$1(u.rank === 2 && u.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${f},4] but had shape ${u.shape}.`), assert$1(l.rank === 1 && l.shape[0] === f, () => `Error in cropAndResize: boxInd must be have size [${f}] but had shape ${u.shape}.`), assert$1(n.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${n.length}.`), assert$1(n[0] >= 1 && n[1] >= 1, () => `cropSize must be atleast [1,1], but was ${n}`), assert$1(s === "bilinear" || s === "nearest", () => `method must be bilinear or nearest, but was ${s}`);
  const c = { image: o, boxes: u, boxInd: l }, h = { method: s, extrapolationValue: a, cropSize: n };
  return ENGINE.runKernel(CropAndResize, c, h);
}
const cropAndResize$3 = /* @__PURE__ */ op({ cropAndResize_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function flipLeftRight_(r) {
  const e = convertToTensor(r, "image", "flipLeftRight", "float32");
  assert$1(e.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);
  const t = { image: e };
  return ENGINE.runKernel(FlipLeftRight, t, {});
}
const flipLeftRight = /* @__PURE__ */ op({ flipLeftRight_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function grayscaleToRGB_(r) {
  const e = convertToTensor(r, "image", "grayscaleToRGB"), t = e.rank - 1, n = e.shape[t];
  assert$1(e.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`), assert$1(n === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${n}.`);
  const s = new Array(e.rank);
  return s.fill(1, 0, t), s[t] = 3, tile$3(e, s);
}
const grayscaleToRGB = /* @__PURE__ */ op({ grayscaleToRGB_ });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rgbToGrayscale_(r) {
  const e = convertToTensor(r, "image", "RGBToGrayscale"), t = e.rank - 1, n = e.shape[t];
  assert$1(e.rank >= 2, () => `Error in RGBToGrayscale: images must be at least rank 2, but got rank ${e.rank}.`), assert$1(n === 3, () => `Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${n}.`);
  const s = e.dtype, a = cast$3(e, "float32"), o = tensor1d([0.2989, 0.587, 0.114]);
  let u;
  switch (e.rank) {
    case 2:
      u = einsum$2("ij,j->i", a, o);
      break;
    case 3:
      u = einsum$2("ijk,k->ij", a, o);
      break;
    case 4:
      u = einsum$2("ijkl,l->ijk", a, o);
      break;
    case 5:
      u = einsum$2("ijklm,m->ijkl", a, o);
      break;
    case 6:
      u = einsum$2("ijklmn,n->ijklm", a, o);
      break;
    default:
      throw new Error("Not a valid tensor rank.");
  }
  return u = expandDims$3(u, -1), cast$3(u, s);
}
const rgbToGrayscale = /* @__PURE__ */ op({ rgbToGrayscale_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rotateWithOffset_(r, e, t = 0, n = 0.5) {
  const s = convertToTensor(r, "image", "rotateWithOffset", "float32");
  assert$1(s.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`);
  const a = { image: s }, o = { radians: e, fillValue: t, center: n };
  return ENGINE.runKernel(RotateWithOffset, a, o);
}
const rotateWithOffset = /* @__PURE__ */ op({ rotateWithOffset_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nonMaxSuppSanityCheck(r, e, t, n, s, a) {
  n == null && (n = 0.5), s == null && (s = Number.NEGATIVE_INFINITY), a == null && (a = 0);
  const o = r.shape[0];
  return t = Math.min(t, o), assert$1(0 <= n && n <= 1, () => `iouThreshold must be in [0, 1], but was '${n}'`), assert$1(r.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${r.rank}'`), assert$1(r.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`), assert$1(e.rank === 1, () => "scores must be a 1D tensor"), assert$1(e.shape[0] === o, () => `scores has incompatible shape with boxes. Expected ${o}, but was ${e.shape[0]}`), assert$1(0 <= a && a <= 1, () => `softNmsSigma must be in [0, 1], but was '${a}'`), { maxOutputSize: t, iouThreshold: n, scoreThreshold: s, softNmsSigma: a };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nonMaxSuppression_(r, e, t, n = 0.5, s = Number.NEGATIVE_INFINITY) {
  const a = convertToTensor(r, "boxes", "nonMaxSuppression", "float32"), o = convertToTensor(e, "scores", "nonMaxSuppression", "float32"), u = nonMaxSuppSanityCheck(a, o, t, n, s);
  t = u.maxOutputSize, n = u.iouThreshold, s = u.scoreThreshold;
  const l = { maxOutputSize: t, iouThreshold: n, scoreThreshold: s };
  return ENGINE.runKernel(NonMaxSuppressionV3, { boxes: a, scores: o }, l);
}
const nonMaxSuppression = /* @__PURE__ */ op({ nonMaxSuppression_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function binaryInsert(r, e, t) {
  const n = binarySearch(r, e, t), s = n < 0 ? -(n + 1) : n;
  r.splice(s, 0, e);
}
function binarySearch(r, e, t) {
  return binarySearch_(r, e, t || defaultComparator);
}
function defaultComparator(r, e) {
  return r > e ? 1 : r < e ? -1 : 0;
}
function binarySearch_(r, e, t) {
  let n = 0, s = r.length, a = 0, o = !1;
  for (; n < s; ) {
    a = n + (s - n >>> 1);
    const u = t(e, r[a]);
    u > 0 ? n = a + 1 : (s = a, o = !u);
  }
  return o ? n : -n - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nonMaxSuppressionV3Impl$2(r, e, t, n, s) {
  return nonMaxSuppressionImpl_(
    r,
    e,
    t,
    n,
    s,
    0
    /* softNmsSigma */
  );
}
function nonMaxSuppressionV4Impl$2(r, e, t, n, s, a) {
  return nonMaxSuppressionImpl_(
    r,
    e,
    t,
    n,
    s,
    0,
    !1,
    a,
    !0
    /* returnValidOutputs */
  );
}
function nonMaxSuppressionV5Impl$2(r, e, t, n, s, a) {
  return nonMaxSuppressionImpl_(
    r,
    e,
    t,
    n,
    s,
    a,
    !0
    /* returnScoresTensor */
  );
}
function nonMaxSuppressionImpl_(r, e, t, n, s, a, o = !1, u = !1, l = !1) {
  const f = [];
  for (let b = 0; b < e.length; b++)
    e[b] > s && f.push({ score: e[b], boxIndex: b, suppressBeginIndex: 0 });
  f.sort(ascendingComparator);
  const c = a > 0 ? -0.5 / a : 0, h = [], d = [];
  for (; h.length < t && f.length > 0; ) {
    const b = f.pop(), { score: v, boxIndex: w, suppressBeginIndex: I } = b;
    if (v < s)
      break;
    let T = !1;
    for (let _ = h.length - 1; _ >= I; --_) {
      const F = intersectionOverUnion(r, w, h[_]);
      if (F >= n) {
        T = !0;
        break;
      }
      if (b.score = b.score * suppressWeight(n, c, F), b.score <= s)
        break;
    }
    b.suppressBeginIndex = h.length, T || (b.score === v ? (h.push(w), d.push(b.score)) : b.score > s && binaryInsert(f, b, ascendingComparator));
  }
  const m = h.length, g = t - m;
  u && g > 0 && (h.push(...new Array(g).fill(0)), d.push(...new Array(g).fill(0)));
  const y = { selectedIndices: h };
  return o && (y.selectedScores = d), l && (y.validOutputs = m), y;
}
function intersectionOverUnion(r, e, t) {
  const n = r.subarray(e * 4, e * 4 + 4), s = r.subarray(t * 4, t * 4 + 4), a = Math.min(n[0], n[2]), o = Math.min(n[1], n[3]), u = Math.max(n[0], n[2]), l = Math.max(n[1], n[3]), f = Math.min(s[0], s[2]), c = Math.min(s[1], s[3]), h = Math.max(s[0], s[2]), d = Math.max(s[1], s[3]), m = (u - a) * (l - o), g = (h - f) * (d - c);
  if (m <= 0 || g <= 0)
    return 0;
  const y = Math.max(a, f), b = Math.max(o, c), v = Math.min(u, h), w = Math.min(l, d), I = Math.max(v - y, 0) * Math.max(w - b, 0);
  return I / (m + g - I);
}
function suppressWeight(r, e, t) {
  const n = Math.exp(e * t * t);
  return t <= r ? n : 0;
}
function ascendingComparator(r, e) {
  return r.score - e.score || r.score === e.score && e.boxIndex - r.boxIndex;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function nonMaxSuppressionAsync_(r, e, t, n = 0.5, s = Number.NEGATIVE_INFINITY) {
  const a = convertToTensor(r, "boxes", "nonMaxSuppressionAsync"), o = convertToTensor(e, "scores", "nonMaxSuppressionAsync"), u = nonMaxSuppSanityCheck(a, o, t, n, s);
  t = u.maxOutputSize, n = u.iouThreshold, s = u.scoreThreshold;
  const l = await Promise.all([a.data(), o.data()]), f = l[0], c = l[1], { selectedIndices: h } = nonMaxSuppressionV3Impl$2(f, c, t, n, s);
  return a !== r && a.dispose(), o !== e && o.dispose(), tensor1d(h, "int32");
}
const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nonMaxSuppressionWithScore_(r, e, t, n = 0.5, s = Number.NEGATIVE_INFINITY, a = 0) {
  const o = convertToTensor(r, "boxes", "nonMaxSuppression"), u = convertToTensor(e, "scores", "nonMaxSuppression"), l = nonMaxSuppSanityCheck(o, u, t, n, s, a);
  t = l.maxOutputSize, n = l.iouThreshold, s = l.scoreThreshold, a = l.softNmsSigma;
  const f = { boxes: o, scores: u }, c = { maxOutputSize: t, iouThreshold: n, scoreThreshold: s, softNmsSigma: a }, h = ENGINE.runKernel(NonMaxSuppressionV5, f, c);
  return { selectedIndices: h[0], selectedScores: h[1] };
}
const nonMaxSuppressionWithScore = /* @__PURE__ */ op({ nonMaxSuppressionWithScore_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function nonMaxSuppressionWithScoreAsync_(r, e, t, n = 0.5, s = Number.NEGATIVE_INFINITY, a = 0) {
  const o = convertToTensor(r, "boxes", "nonMaxSuppressionAsync"), u = convertToTensor(e, "scores", "nonMaxSuppressionAsync"), l = nonMaxSuppSanityCheck(o, u, t, n, s, a);
  t = l.maxOutputSize, n = l.iouThreshold, s = l.scoreThreshold, a = l.softNmsSigma;
  const f = await Promise.all([o.data(), u.data()]), c = f[0], h = f[1], { selectedIndices: d, selectedScores: m } = nonMaxSuppressionV5Impl$2(c, h, t, n, s, a);
  return o !== r && o.dispose(), u !== e && u.dispose(), {
    selectedIndices: tensor1d(d, "int32"),
    selectedScores: tensor1d(m)
  };
}
const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nonMaxSuppressionPadded_(r, e, t, n = 0.5, s = Number.NEGATIVE_INFINITY, a = !1) {
  const o = convertToTensor(r, "boxes", "nonMaxSuppression"), u = convertToTensor(e, "scores", "nonMaxSuppression"), l = nonMaxSuppSanityCheck(
    o,
    u,
    t,
    n,
    s,
    null
    /* softNmsSigma */
  ), f = l.maxOutputSize, c = l.iouThreshold, h = l.scoreThreshold, d = { boxes: o, scores: u }, m = {
    maxOutputSize: f,
    iouThreshold: c,
    scoreThreshold: h,
    padToMaxOutputSize: a
  }, g = ENGINE.runKernel(NonMaxSuppressionV4, d, m);
  return { selectedIndices: g[0], validOutputs: g[1] };
}
const nonMaxSuppressionPadded = /* @__PURE__ */ op({ nonMaxSuppressionPadded_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function nonMaxSuppressionPaddedAsync_(r, e, t, n = 0.5, s = Number.NEGATIVE_INFINITY, a = !1) {
  const o = convertToTensor(r, "boxes", "nonMaxSuppressionAsync"), u = convertToTensor(e, "scores", "nonMaxSuppressionAsync"), l = nonMaxSuppSanityCheck(
    o,
    u,
    t,
    n,
    s,
    null
    /* softNmsSigma */
  ), f = l.maxOutputSize, c = l.iouThreshold, h = l.scoreThreshold, [d, m] = await Promise.all([o.data(), u.data()]), { selectedIndices: g, validOutputs: y } = nonMaxSuppressionV4Impl$2(d, m, f, c, h, a);
  return o !== r && o.dispose(), u !== e && u.dispose(), {
    selectedIndices: tensor1d(g, "int32"),
    validOutputs: scalar(y, "int32")
  };
}
const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeBilinear_(r, e, t = !1, n = !1) {
  const s = convertToTensor(r, "images", "resizeBilinear");
  assert$1(s.rank === 3 || s.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`), assert$1(e.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${e}.`), assert$1(n === !1 || t === !1, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let a = s, o = !1;
  s.rank === 3 && (o = !0, a = reshape$3(s, [1, s.shape[0], s.shape[1], s.shape[2]]));
  const u = { images: a }, l = { alignCorners: t, halfPixelCenters: n, size: e }, f = ENGINE.runKernel(ResizeBilinear, u, l);
  return o ? reshape$3(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const resizeBilinear$3 = /* @__PURE__ */ op({ resizeBilinear_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeNearestNeighbor_(r, e, t = !1, n = !1) {
  const s = convertToTensor(r, "images", "resizeNearestNeighbor");
  assert$1(s.rank === 3 || s.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`), assert$1(e.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`), assert$1(s.dtype === "float32" || s.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), assert$1(n === !1 || t === !1, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let a = s, o = !1;
  s.rank === 3 && (o = !0, a = reshape$3(s, [1, s.shape[0], s.shape[1], s.shape[2]]));
  const u = { images: a }, l = { alignCorners: t, halfPixelCenters: n, size: e }, f = ENGINE.runKernel(ResizeNearestNeighbor, u, l);
  return o ? reshape$3(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const resizeNearestNeighbor$2 = /* @__PURE__ */ op({ resizeNearestNeighbor_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function threshold_(r, e = "binary", t = !1, n = 0.5) {
  const s = convertToTensor(r, "image", "threshold"), a = 0.2989, o = 0.587, u = 0.114, l = s.shape[0] * s.shape[1];
  let f = mul(tensor1d([n]), 255), c, h, d, m;
  if (assert$1(s.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${s.rank}.`), assert$1(s.shape[2] === 3 || s.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`), assert$1(s.dtype === "int32" || s.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`), assert$1(e === "otsu" || e === "binary", () => `Method must be binary or otsu, but was ${e}`), s.shape[2] === 3) {
    [c, h, d] = split$2(s, [1, 1, 1], -1);
    const b = mul(c, a), v = mul(h, o), w = mul(d, u);
    m = add$2(add$2(b, v), w);
  } else
    m = r;
  if (e === "otsu") {
    const b = bincount$2(cast$3(round$2(m), "int32"), tensor([]), 256);
    f = otsu(b, l);
  }
  const g = t ? lessEqual$2(m, f) : greater$3(m, f);
  return cast$3(mul(g, 255), "int32");
}
function otsu(r, e) {
  let t = tensor1d([-1]), n = tensor1d([0]), s = tensor1d([0]), a, o, u, l, f, c;
  for (let h = 0; h < r.size - 1; h++) {
    a = slice$2(r, 0, h + 1), o = slice$2(r, h + 1), f = div$1(sum$2(a), e), c = div$1(sum$2(o), e);
    const d = sum$2(mul(a, range$3(0, a.size)));
    u = div$1(d, sum$2(a));
    const m = fill$2(o.shape, a.size), g = add$2(range$3(0, o.size), m), y = mul(o, g);
    l = div$1(sum$2(y), sum$2(o));
    const b = sub$2(u, l), v = sub$2(u, l), w = mul(f, c);
    s = mul(mul(w, b), v);
    const I = greater$3(s, n);
    n = where(I, s, n), t = where(I, tensor1d([h]), t);
  }
  return t;
}
const threshold$1 = /* @__PURE__ */ op({ threshold_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transform_(r, e, t = "nearest", n = "constant", s = 0, a) {
  const o = convertToTensor(r, "image", "transform", "float32"), u = convertToTensor(e, "transforms", "transform", "float32");
  assert$1(o.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${o.rank}.`), assert$1(u.rank === 2 && (u.shape[0] === o.shape[0] || u.shape[0] === 1) && u.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), assert$1(a == null || a.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${a}.`);
  const l = { image: o, transforms: u }, f = { interpolation: t, fillMode: n, fillValue: s, outputShape: a };
  return ENGINE.runKernel(Transform, l, f);
}
const transform$2 = /* @__PURE__ */ op({ transform_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bandPart_(r, e, t) {
  const n = convertToTensor(r, "a", "bandPart");
  assert$1(n.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${n.rank}.`);
  const s = n.shape, [a, o] = n.shape.slice(-2);
  let u, l;
  typeof e == "number" ? (assert$1(e % 1 === 0, () => `bandPart(): numLower must be an integer, got ${e}.`), assert$1(e <= a, () => `bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`), u = convertToTensor(e < 0 ? a : e, "numLower", "bandPart")) : (assert$1(e.dtype === "int32", () => "bandPart(): numLower's dtype must be an int32."), u = where(less$3(e, 0), a, minimum$3(e, a))), typeof t == "number" ? (assert$1(t % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${t}.`), assert$1(t <= o, () => `bandPart(): numUpper (${t}) must not be greater than the number of columns (${o}).`), l = convertToTensor(t < 0 ? o : t, "numUpper", "bandPart")) : (assert$1(t.dtype === "int32", () => "bandPart(): numUpper's dtype must be an int32."), l = where(less$3(t, 0), o, minimum$3(t, o)));
  const f = reshape$3(range$3(0, a, 1, "int32"), [-1, 1]), c = range$3(0, o, 1, "int32"), h = sub$2(f, c), d = logicalAnd$2(lessEqual$2(h, u), greaterEqual$2(h, neg$2(l))), m = zeros$2([a, o], n.dtype);
  return reshape$3(stack(unstack(reshape$3(n, [-1, a, o])).map((g) => where(d, g, m))), s);
}
const bandPart = /* @__PURE__ */ op({ bandPart_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gramSchmidt_(r) {
  let e;
  if (Array.isArray(r)) {
    e = !1, assert$1(r != null && r.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    const s = r[0].shape[0];
    for (let a = 1; a < r.length; ++a)
      assert$1(r[a].shape[0] === s, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[a].shape[0]} vs. ${s})`);
  } else
    e = !0, r = split$2(r, r.shape[0], 0).map((s) => squeeze(s, [0]));
  assert$1(r.length <= r[0].shape[0], () => `Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);
  const t = [], n = r;
  for (let s = 0; s < r.length; ++s)
    t.push(ENGINE.tidy(() => {
      let a = n[s];
      if (s > 0)
        for (let o = 0; o < s; ++o) {
          const u = mul(sum$2(mul(t[o], a)), t[o]);
          a = sub$2(a, u);
        }
      return div$1(a, norm(a, "euclidean"));
    }));
  return e ? stack(t, 0) : t;
}
const gramSchmidt = /* @__PURE__ */ op({ gramSchmidt_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qr_(r, e = !1) {
  if (assert$1(r.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`), r.rank === 2)
    return qr2d(r, e);
  {
    const t = r.shape.slice(0, r.shape.length - 2).reduce((l, f) => l * f), n = unstack(reshape$3(r, [
      t,
      r.shape[r.shape.length - 2],
      r.shape[r.shape.length - 1]
    ]), 0), s = [], a = [];
    n.forEach((l) => {
      const [f, c] = qr2d(l, e);
      s.push(f), a.push(c);
    });
    const o = reshape$3(stack(s, 0), r.shape), u = reshape$3(stack(a, 0), r.shape);
    return [o, u];
  }
}
function qr2d(r, e = !1) {
  return ENGINE.tidy(() => {
    assert$1(r.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);
    const t = r.shape[0], n = r.shape[1];
    let s = eye(t), a = clone(r);
    const o = tensor2d([[1]], [1, 1]);
    let u = clone(o);
    const l = t >= n ? n : t;
    for (let f = 0; f < l; ++f) {
      const c = a, h = u, d = s;
      [u, a, s] = ENGINE.tidy(() => {
        const m = slice$2(a, [f, f], [t - f, 1]), g = norm(m), y = slice$2(a, [f, f], [1, 1]), b = where(greater$3(y, 0), tensor2d([[-1]]), tensor2d([[1]])), v = sub$2(y, mul(b, g)), w = div$1(m, v);
        w.shape[0] === 1 ? u = clone(o) : u = concat$2([
          o,
          slice$2(w, [1, 0], [w.shape[0] - 1, w.shape[1]])
        ], 0);
        const I = neg$2(div$1(matMul$1(b, v), g)), T = slice$2(a, [f, 0], [t - f, n]), _ = mul(I, u), F = transpose$2(u);
        if (f === 0)
          a = sub$2(T, matMul$1(_, matMul$1(F, T)));
        else {
          const V = sub$2(T, matMul$1(_, matMul$1(F, T)));
          a = concat$2([slice$2(a, [0, 0], [f, n]), V], 0);
        }
        const O = transpose$2(_), q = slice$2(s, [0, f], [t, s.shape[1] - f]);
        if (f === 0)
          s = sub$2(q, matMul$1(matMul$1(q, u), O));
        else {
          const V = sub$2(q, matMul$1(matMul$1(q, u), O));
          s = concat$2([slice$2(s, [0, 0], [t, f]), V], 1);
        }
        return [u, a, s];
      }), dispose([c, h, d]);
    }
    return !e && t > n && (s = slice$2(s, [0, 0], [t, n]), a = slice$2(a, [0, 0], [n, n])), [s, a];
  });
}
const qr = /* @__PURE__ */ op({ qr_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Reduction;
(function(r) {
  r[r.NONE = 0] = "NONE", r[r.MEAN = 1] = "MEAN", r[r.SUM = 2] = "SUM", r[r.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Reduction || (Reduction = {}));
function computeWeightedLoss_(r, e, t = Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const n = convertToTensor(r, "losses", "computeWeightedLoss");
  let s = null;
  e != null && (s = convertToTensor(e, "weights", "computeWeightedLoss"));
  const a = s == null ? n : mul(n, s);
  if (t === Reduction.NONE)
    return a;
  if (t === Reduction.SUM)
    return sum$2(a);
  if (t === Reduction.MEAN) {
    if (s == null)
      return mean$1(a);
    {
      const o = n.size / s.size, u = div$1(sum$2(a), sum$2(s));
      return o > 1 ? div$1(u, scalar(o)) : u;
    }
  }
  if (t === Reduction.SUM_BY_NONZERO_WEIGHTS) {
    if (s == null)
      return div$1(sum$2(a), scalar(n.size));
    {
      const o = mul(s, ones$1(n.shape)), u = cast$3(sum$2(notEqual$2(o, scalar(0))), "float32");
      return div$1(sum$2(a), u);
    }
  }
  throw Error(`Unknown reduction: ${t}`);
}
const computeWeightedLoss$1 = /* @__PURE__ */ op({ computeWeightedLoss_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function absoluteDifference_(r, e, t, n = Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const s = convertToTensor(r, "labels", "absoluteDifference"), a = convertToTensor(e, "predictions", "absoluteDifference");
  let o = null;
  t != null && (o = convertToTensor(t, "weights", "absoluteDifference")), assertShapesMatch(s.shape, a.shape, "Error in absoluteDifference: ");
  const u = abs$3(sub$2(s, a));
  return computeWeightedLoss$1(u, o, n);
}
const absoluteDifference = /* @__PURE__ */ op({ absoluteDifference_ });
function cosineDistance_(r, e, t, n, s = Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const a = convertToTensor(r, "labels", "cosineDistance"), o = convertToTensor(e, "predictions", "cosineDistance");
  let u = null;
  n != null && (u = convertToTensor(n, "weights", "cosineDistance")), assertShapesMatch(a.shape, o.shape, "Error in cosineDistance: ");
  const l = scalar(1), f = sub$2(l, sum$2(mul(a, o), t, !0));
  return computeWeightedLoss$1(f, u, s);
}
const cosineDistance = /* @__PURE__ */ op({ cosineDistance_ });
function hingeLoss_(r, e, t, n = Reduction.SUM_BY_NONZERO_WEIGHTS) {
  let s = convertToTensor(r, "labels", "hingeLoss");
  const a = convertToTensor(e, "predictions", "hingeLoss");
  let o = null;
  t != null && (o = convertToTensor(t, "weights", "hingeLoss")), assertShapesMatch(s.shape, a.shape, "Error in hingeLoss: ");
  const u = scalar(1);
  s = sub$2(mul(scalar(2), s), u);
  const l = relu$2(sub$2(u, mul(s, a)));
  return computeWeightedLoss$1(l, o, n);
}
const hingeLoss = /* @__PURE__ */ op({ hingeLoss_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function huberLoss_(r, e, t, n = 1, s = Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const a = convertToTensor(r, "labels", "huberLoss"), o = convertToTensor(e, "predictions", "huberLoss");
  let u = null;
  t != null && (u = convertToTensor(t, "weights", "huberLoss")), assertShapesMatch(a.shape, o.shape, "Error in huberLoss: ");
  const l = scalar(n), f = abs$3(sub$2(o, a)), c = minimum$3(f, l), h = sub$2(f, c), d = add$2(mul(scalar(0.5), square$2(c)), mul(l, h));
  return computeWeightedLoss$1(d, u, s);
}
const huberLoss = /* @__PURE__ */ op({ huberLoss_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function logLoss_(r, e, t, n = 1e-7, s = Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const a = convertToTensor(r, "labels", "logLoss"), o = convertToTensor(e, "predictions", "logLoss");
  let u = null;
  t != null && (u = convertToTensor(t, "weights", "logLoss")), assertShapesMatch(a.shape, o.shape, "Error in logLoss: ");
  const l = scalar(1), f = scalar(n), c = neg$2(mul(a, log$2(add$2(o, f)))), h = mul(sub$2(l, a), log$2(add$2(sub$2(l, o), f))), d = sub$2(c, h);
  return computeWeightedLoss$1(d, u, s);
}
const logLoss = /* @__PURE__ */ op({ logLoss_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function meanSquaredError_(r, e, t, n = Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const s = convertToTensor(r, "labels", "meanSquaredError"), a = convertToTensor(e, "predictions", "meanSquaredError");
  let o = null;
  t != null && (o = convertToTensor(t, "weights", "meanSquaredError")), assertShapesMatch(s.shape, a.shape, "Error in meanSquaredError: ");
  const u = squaredDifference$2(s, a);
  return computeWeightedLoss$1(u, o, n);
}
const meanSquaredError$2 = /* @__PURE__ */ op({ meanSquaredError_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sigmoidCrossEntropyWithLogits_(r, e) {
  const t = convertToTensor(r, "labels", "sigmoidCrossEntropyWithLogits"), n = convertToTensor(e, "logits", "sigmoidCrossEntropyWithLogits");
  assertShapesMatch(t.shape, n.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  const s = relu$2(n), a = mul(n, t), o = log1p$2(exp$2(neg$2(abs$3(n))));
  return add$2(sub$2(s, a), o);
}
function sigmoidCrossEntropy_(r, e, t, n = 0, s = Reduction.SUM_BY_NONZERO_WEIGHTS) {
  let a = convertToTensor(r, "multiClassLabels", "sigmoidCrossEntropy");
  const o = convertToTensor(e, "logits", "sigmoidCrossEntropy");
  let u = null;
  if (t != null && (u = convertToTensor(t, "weights", "sigmoidCrossEntropy")), assertShapesMatch(a.shape, o.shape, "Error in sigmoidCrossEntropy: "), n > 0) {
    const f = scalar(n), c = scalar(1), h = scalar(0.5);
    a = add$2(mul(a, sub$2(c, f)), mul(h, f));
  }
  const l = sigmoidCrossEntropyWithLogits_(a, o);
  return computeWeightedLoss$1(l, u, s);
}
const sigmoidCrossEntropy = /* @__PURE__ */ op({ sigmoidCrossEntropy_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function softmaxCrossEntropyWithLogits_(r, e, t = -1) {
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${t}`);
  return customGrad((s, a, o) => {
    const l = logSumExp(a, [t], !0), f = sub$2(cast$3(a, "float32"), l);
    o([s, f]);
    const c = neg$2(mul(f, s));
    return { value: sum$2(c, [t]), gradFunc: (m, g) => {
      const [y, b] = g, v = expandShapeToKeepDim(m.shape, [t]);
      return [
        mul(reshape$3(m, v), sub$2(cast$3(y, "float32"), exp$2(b))),
        mul(reshape$3(m, v), sub$2(exp$2(b), cast$3(y, "float32")))
      ];
    } };
  })(r, e);
}
function softmaxCrossEntropy_(r, e, t, n = 0, s = Reduction.SUM_BY_NONZERO_WEIGHTS) {
  let a = convertToTensor(r, "onehotLabels", "softmaxCrossEntropy");
  const o = convertToTensor(e, "logits", "softmaxCrossEntropy");
  let u = null;
  if (t != null && (u = convertToTensor(t, "weights", "softmaxCrossEntropy")), assertShapesMatch(a.shape, o.shape, "Error in softmaxCrossEntropy: "), n > 0) {
    const f = scalar(n), c = scalar(1), h = scalar(a.shape[1]);
    a = add$2(mul(a, sub$2(c, f)), div$1(f, h));
  }
  const l = softmaxCrossEntropyWithLogits_(a, o);
  return computeWeightedLoss$1(l, u, s);
}
const softmaxCrossEntropy = /* @__PURE__ */ op({ softmaxCrossEntropy_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseFillEmptyRows_(r, e, t, n) {
  const s = convertToTensor(r, "indices", "sparseFillEmptyRows", "int32"), a = convertToTensor(e, "values", "sparseFillEmptyRows"), o = convertToTensor(t, "denseShape", "sparseFillEmptyRows", "int32"), u = convertToTensor(n, "defaultValue", "sparseFillEmptyRows", a.dtype);
  if (s.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${s.shape}`);
  if (a.rank !== 1)
    throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);
  if (o.rank !== 1)
    throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);
  if (u.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${u.shape}`);
  const l = {
    indices: s,
    values: a,
    denseShape: o,
    defaultValue: u
  }, f = ENGINE.runKernel(SparseFillEmptyRows, l);
  return {
    outputIndices: f[0],
    outputValues: f[1],
    emptyRowIndicator: f[2],
    reverseIndexMap: f[3]
  };
}
const sparseFillEmptyRows$2 = /* @__PURE__ */ op({ sparseFillEmptyRows_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseReshape_(r, e, t) {
  const n = convertToTensor(r, "inputIndices", "sparseReshape", "int32"), s = convertToTensor(e, "inputShape", "sparseReshape", "int32"), a = convertToTensor(t, "newShape", "sparseReshape", "int32");
  if (n.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);
  if (a.rank !== 1)
    throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);
  const o = {
    inputIndices: n,
    inputShape: s,
    newShape: a
  }, u = ENGINE.runKernel(SparseReshape, o);
  return { outputIndices: u[0], outputShape: u[1] };
}
const sparseReshape$2 = /* @__PURE__ */ op({ sparseReshape_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseSegmentMean_(r, e, t) {
  const n = convertToTensor(r, "data", "sparseSegmentMean"), s = convertToTensor(e, "indices", "sparseSegmentMean", "int32"), a = convertToTensor(t, "segmentIds", "sparseSegmentMean", "int32");
  if (n.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (s.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${s.shape}`);
  if (a.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${a.shape}`);
  const o = {
    data: n,
    indices: s,
    segmentIds: a
  };
  return ENGINE.runKernel(SparseSegmentMean, o);
}
const sparseSegmentMean$2 = /* @__PURE__ */ op({ sparseSegmentMean_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseSegmentSum_(r, e, t) {
  const n = convertToTensor(r, "data", "sparseSegmentSum"), s = convertToTensor(e, "indices", "sparseSegmentSum", "int32"), a = convertToTensor(t, "segmentIds", "sparseSegmentSum", "int32");
  if (n.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (s.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${s.shape}`);
  if (a.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${a.shape}`);
  const o = {
    data: n,
    indices: s,
    segmentIds: a
  };
  return ENGINE.runKernel(SparseSegmentSum, o);
}
const sparseSegmentSum$2 = /* @__PURE__ */ op({ sparseSegmentSum_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringNGrams_(r, e, t, n, s, a, o, u) {
  const l = convertToTensor(r, "data", "stringNGrams", "string");
  if (l.dtype !== "string")
    throw new Error("Data must be of datatype string");
  if (l.shape.length !== 1)
    throw new Error(`Data must be a vector, saw: ${l.shape}`);
  const f = convertToTensor(e, "dataSplits", "stringNGrams");
  if (f.dtype !== "int32")
    throw new Error("Data splits must be of datatype int32");
  const c = {
    separator: t,
    nGramWidths: n,
    leftPad: s,
    rightPad: a,
    padWidth: o,
    preserveShortSequences: u
  }, h = { data: l, dataSplits: f }, d = ENGINE.runKernel(StringNGrams, h, c);
  return { nGrams: d[0], nGramsSplits: d[1] };
}
const stringNGrams$2 = /* @__PURE__ */ op({ stringNGrams_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringSplit_(r, e, t = !0) {
  const n = convertToTensor(r, "input", "stringSplit", "string"), s = convertToTensor(e, "delimiter", "stringSplit", "string");
  if (n.rank !== 1)
    throw new Error(`Input should be Tensor1D but received shape ${n.shape}`);
  if (s.rank !== 0)
    throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);
  const a = { skipEmpty: t }, o = { input: n, delimiter: s }, u = ENGINE.runKernel(StringSplit, o, a);
  return { indices: u[0], values: u[1], shape: u[2] };
}
const stringSplit$2 = /* @__PURE__ */ op({ stringSplit_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringToHashBucketFast_(r, e) {
  const t = convertToTensor(r, "input", "stringToHashBucketFast", "string"), n = { numBuckets: e };
  if (e <= 0)
    throw new Error("Number of buckets must be at least 1");
  const s = { input: t };
  return ENGINE.runKernel(StringToHashBucketFast, s, n);
}
const stringToHashBucketFast$2 = /* @__PURE__ */ op({ stringToHashBucketFast_ });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function staticRegexReplace_(r, e, t, n = !0) {
  const s = convertToTensor(r, "input", "staticRegexReplace", "string"), a = { pattern: e, rewrite: t, replaceGlobal: n };
  return ENGINE.runKernel(StaticRegexReplace, { x: s }, a);
}
const staticRegexReplace$2 = /* @__PURE__ */ op({ staticRegexReplace_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const spectral$1 = {
  fft: fft$2,
  ifft: ifft$2,
  rfft,
  irfft
}, signal = {
  hammingWindow,
  hannWindow,
  frame,
  stft
}, image$1 = {
  flipLeftRight,
  grayscaleToRGB,
  resizeNearestNeighbor: resizeNearestNeighbor$2,
  resizeBilinear: resizeBilinear$3,
  rgbToGrayscale,
  rotateWithOffset,
  cropAndResize: cropAndResize$3,
  nonMaxSuppression,
  nonMaxSuppressionAsync,
  nonMaxSuppressionWithScore,
  nonMaxSuppressionWithScoreAsync,
  nonMaxSuppressionPadded,
  nonMaxSuppressionPaddedAsync,
  threshold: threshold$1,
  transform: transform$2
}, linalg = {
  bandPart,
  gramSchmidt,
  qr
}, losses = {
  absoluteDifference,
  computeWeightedLoss: computeWeightedLoss$1,
  cosineDistance,
  hingeLoss,
  huberLoss,
  logLoss,
  meanSquaredError: meanSquaredError$2,
  sigmoidCrossEntropy,
  softmaxCrossEntropy
}, sparse$1 = {
  sparseFillEmptyRows: sparseFillEmptyRows$2,
  sparseReshape: sparseReshape$2,
  sparseSegmentMean: sparseSegmentMean$2,
  sparseSegmentSum: sparseSegmentSum$2
}, string$1 = {
  stringNGrams: stringNGrams$2,
  stringSplit: stringSplit$2,
  stringToHashBucketFast: stringToHashBucketFast$2,
  staticRegexReplace: staticRegexReplace$2
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GLOBAL_CUSTOM_OBJECT = /* @__PURE__ */ new Map(), GLOBAL_CUSTOM_NAMES = /* @__PURE__ */ new Map();
class Serializable {
  /**
   * Return the class name for this class to use in serialization contexts.
   *
   * Generally speaking this will be the same thing that constructor.name
   * would have returned.  However, the class name needs to be robust
   * against minification for serialization/deserialization to work properly.
   *
   * There's also places such as initializers.VarianceScaling, where
   * implementation details between different languages led to different
   * class hierarchies and a non-leaf node is used for serialization purposes.
   */
  getClassName() {
    return this.constructor.className;
  }
  /**
   * Creates an instance of T from a ConfigDict.
   *
   * This works for most descendants of serializable.  A few need to
   * provide special handling.
   * @param cls A Constructor for the class to instantiate.
   * @param config The Configuration for the object.
   */
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t);
  }
}
class SerializationMap {
  constructor() {
    this.classNameMap = {};
  }
  /**
   * Returns the singleton instance of the map.
   */
  static getMap() {
    return SerializationMap.instance == null && (SerializationMap.instance = new SerializationMap()), SerializationMap.instance;
  }
  /**
   * Registers the class as serializable.
   */
  static register(e) {
    SerializationMap.getMap().classNameMap[e.className] = [e, e.fromConfig];
  }
}
function registerClass(r, e, t) {
  assert$1(r.className != null, () => "Class being registered does not have the static className property defined."), assert$1(typeof r.className == "string", () => "className is required to be a string, but got type " + typeof r.className), assert$1(r.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), typeof e > "u" && (e = "Custom"), typeof t > "u" && (t = r.className);
  const n = t, s = e + ">" + n;
  return SerializationMap.register(r), GLOBAL_CUSTOM_OBJECT.set(s, r), GLOBAL_CUSTOM_NAMES.set(r, s), r;
}
function getRegisteredName(r) {
  return GLOBAL_CUSTOM_NAMES.has(r) ? GLOBAL_CUSTOM_NAMES.get(r) : r.className;
}
const serialization = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Serializable,
  SerializationMap,
  getRegisteredName,
  registerClass
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Optimizer extends Serializable {
  /**
   * Executes `f()` and minimizes the scalar output of `f()` by computing
   * gradients of y with respect to the list of trainable variables provided by
   * `varList`. If no list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to minimize.
   * @param returnCost Whether to return the scalar cost value produced by
   * executing `f()`.
   * @param varList An optional list of variables to update. If specified, only
   * the trainable variables in varList will be updated by minimize. Defaults to
   * all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */
  minimize(e, t = !1, n) {
    const { value: s, grads: a } = this.computeGradients(e, n);
    if (n != null) {
      const o = n.map((u) => ({ name: u.name, tensor: a[u.name] }));
      this.applyGradients(o);
    } else
      this.applyGradients(a);
    return dispose(a), t ? s : (s.dispose(), null);
  }
  /**
   * The number of iterations that this optimizer instance has been invoked for.
   */
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  /**
   * Executes f() and computes the gradient of the scalar output of f() with
   * respect to the list of trainable variables provided by `varList`. If no
   * list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to use for computing
   * gradients with respect to variables.
   * @param varList An optional list of variables to compute gradients with
   * respect to. If specified, only the trainable variables in varList will have
   * gradients computed with respect to. Defaults to all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */
  computeGradients(e, t) {
    return variableGrads(e, t);
  }
  /**
   * Dispose the variables (if any) owned by this optimizer instance.
   */
  dispose() {
    this.iterations_ != null && dispose(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), {
      name: "iter",
      // TODO(cais): Use 'int64' type when available.
      tensor: scalar(this.iterations_, "int32")
    };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(e) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  /**
   * Extract the first element of the weight values and set it
   * as the iterations counter variable of this instance of optimizer.
   *
   * @param weightValues
   * @returns Weight values with the first element consumed and excluded.
   */
  async extractIterations(e) {
    return this.iterations_ = (await e[0].tensor.data())[0], e.slice(1);
  }
}
Object.defineProperty(Optimizer, Symbol.hasInstance, {
  value: (r) => r.minimize != null && r.computeGradients != null && r.applyGradients != null
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AdadeltaOptimizer extends Optimizer {
  /** @nocollapse */
  static get className() {
    return "Adadelta";
  }
  constructor(e, t, n = null) {
    super(), this.learningRate = e, this.rho = t, this.epsilon = n, this.accumulatedGrads = [], this.accumulatedUpdates = [], n == null && (this.epsilon = ENGINE.backend.epsilon());
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, s) => {
      const a = ENGINE.registeredVariables[n], o = !1;
      this.accumulatedGrads[s] == null && (this.accumulatedGrads[s] = {
        originalName: `${n}/accum_grad`,
        variable: tidy(() => zerosLike$2(a).variable(o))
      }), this.accumulatedUpdates[s] == null && (this.accumulatedUpdates[s] = {
        originalName: `${n}/accum_var`,
        variable: tidy(() => zerosLike$2(a).variable(o))
      });
      const u = Array.isArray(e) ? e[s].tensor : e[n];
      if (u == null)
        return;
      const l = this.accumulatedGrads[s].variable, f = this.accumulatedUpdates[s].variable;
      tidy(() => {
        const c = add$2(mul(l, this.rho), mul(square$2(u), 1 - this.rho)), h = mul(div$1(sqrt$2(add$2(f, this.epsilon)), sqrt$2(add$2(l, this.epsilon))), u), d = add$2(mul(f, this.rho), mul(square$2(h), 1 - this.rho));
        l.assign(c), f.assign(d);
        const m = add$2(mul(h, -this.learningRate), a);
        a.assign(m);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (dispose(this.accumulatedGrads.map((e) => e.variable)), dispose(this.accumulatedUpdates.map((e) => e.variable)));
  }
  async getWeights() {
    const e = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = e.length / 2, n = !1;
    this.accumulatedGrads = e.slice(0, t).map((s) => ({
      originalName: s.name,
      variable: s.tensor.variable(n)
    })), this.accumulatedUpdates = e.slice(t, t * 2).map((s) => ({
      originalName: s.name,
      variable: s.tensor.variable(n)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      rho: this.rho,
      epsilon: this.epsilon
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.rho, t.epsilon);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AdagradOptimizer extends Optimizer {
  /** @nocollapse */
  static get className() {
    return "Adagrad";
  }
  constructor(e, t = 0.1) {
    super(), this.learningRate = e, this.initialAccumulatorValue = t, this.accumulatedGrads = [];
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, s) => {
      const a = ENGINE.registeredVariables[n];
      this.accumulatedGrads[s] == null && (this.accumulatedGrads[s] = {
        originalName: `${n}/accumulator`,
        variable: tidy(() => fill$2(a.shape, this.initialAccumulatorValue).variable(!1))
      });
      const o = Array.isArray(e) ? e[s].tensor : e[n];
      if (o == null)
        return;
      const u = this.accumulatedGrads[s].variable;
      tidy(() => {
        const l = add$2(u, square$2(o));
        u.assign(l);
        const f = add$2(mul(div$1(o, sqrt$2(add$2(l, ENGINE.backend.epsilon()))), -this.learningRate), a);
        a.assign(f);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && dispose(this.accumulatedGrads.map((e) => e.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = !1;
    this.accumulatedGrads = e.map((n) => ({ originalName: n.name, variable: n.tensor.variable(t) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      initialAccumulatorValue: this.initialAccumulatorValue
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.initialAccumulatorValue);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AdamOptimizer extends Optimizer {
  /** @nocollapse */
  static get className() {
    return "Adam";
  }
  constructor(e, t, n, s = null) {
    super(), this.learningRate = e, this.beta1 = t, this.beta2 = n, this.epsilon = s, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], tidy(() => {
      this.accBeta1 = scalar(t).variable(), this.accBeta2 = scalar(n).variable();
    }), s == null && (this.epsilon = ENGINE.backend.epsilon());
  }
  applyGradients(e) {
    const t = Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e);
    tidy(() => {
      const n = sub$2(1, this.accBeta1), s = sub$2(1, this.accBeta2);
      t.forEach((a, o) => {
        const u = ENGINE.registeredVariables[a], l = !1;
        this.accumulatedFirstMoment[o] == null && (this.accumulatedFirstMoment[o] = {
          originalName: `${a}/m`,
          variable: tidy(() => zerosLike$2(u).variable(l))
        }), this.accumulatedSecondMoment[o] == null && (this.accumulatedSecondMoment[o] = {
          originalName: `${a}/v`,
          variable: tidy(() => zerosLike$2(u).variable(l))
        });
        const f = Array.isArray(e) ? e[o].tensor : e[a];
        if (f == null)
          return;
        const c = this.accumulatedFirstMoment[o].variable, h = this.accumulatedSecondMoment[o].variable, d = add$2(mul(c, this.beta1), mul(f, 1 - this.beta1)), m = add$2(mul(h, this.beta2), mul(square$2(f), 1 - this.beta2)), g = div$1(d, n), y = div$1(m, s);
        c.assign(d), h.assign(m);
        const b = add$2(mul(div$1(g, add$2(sqrt$2(y), this.epsilon)), -this.learningRate), u);
        u.assign(b);
      }), this.accBeta1.assign(mul(this.accBeta1, this.beta1)), this.accBeta2.assign(mul(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && dispose(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedSecondMoment != null && dispose(this.accumulatedSecondMoment.map((e) => e.variable));
  }
  async getWeights() {
    const e = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e), tidy(() => {
      this.accBeta1.assign(pow$3(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(pow$3(this.beta2, this.iterations_ + 1));
    });
    const t = e.length / 2, n = !1;
    this.accumulatedFirstMoment = e.slice(0, t).map((s) => ({
      originalName: s.name,
      variable: s.tensor.variable(n)
    })), this.accumulatedSecondMoment = e.slice(t, t * 2).map((s) => ({
      originalName: s.name,
      variable: s.tensor.variable(n)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AdamaxOptimizer extends Optimizer {
  /** @nocollapse */
  static get className() {
    return "Adamax";
  }
  constructor(e, t, n, s = null, a = 0) {
    super(), this.learningRate = e, this.beta1 = t, this.beta2 = n, this.epsilon = s, this.decay = a, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], tidy(() => {
      this.iteration = scalar(0).variable(), this.accBeta1 = scalar(t).variable();
    }), s == null && (this.epsilon = ENGINE.backend.epsilon());
  }
  applyGradients(e) {
    const t = Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e);
    tidy(() => {
      const n = sub$2(1, this.accBeta1), s = div$1(-this.learningRate, add$2(mul(this.iteration, this.decay), 1));
      t.forEach((a, o) => {
        const u = ENGINE.registeredVariables[a], l = !1;
        this.accumulatedFirstMoment[o] == null && (this.accumulatedFirstMoment[o] = {
          originalName: `${a}/m`,
          variable: zerosLike$2(u).variable(l)
        }), this.accumulatedWeightedInfNorm[o] == null && (this.accumulatedWeightedInfNorm[o] = {
          originalName: `${a}/v`,
          variable: zerosLike$2(u).variable(l)
        });
        const f = Array.isArray(e) ? e[o].tensor : e[a];
        if (f == null)
          return;
        const c = this.accumulatedFirstMoment[o].variable, h = this.accumulatedWeightedInfNorm[o].variable, d = add$2(mul(c, this.beta1), mul(f, 1 - this.beta1)), m = mul(h, this.beta2), g = abs$3(f), y = maximum$3(m, g);
        c.assign(d), h.assign(y);
        const b = add$2(mul(div$1(s, n), div$1(d, add$2(y, this.epsilon))), u);
        u.assign(b);
      }), this.iteration.assign(add$2(this.iteration, 1)), this.accBeta1.assign(mul(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && dispose(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedWeightedInfNorm != null && dispose(this.accumulatedWeightedInfNorm.map((e) => e.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(e) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon,
      decay: this.decay
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SGDOptimizer extends Optimizer {
  /** @nocollapse */
  static get className() {
    return "SGD";
  }
  constructor(e) {
    super(), this.learningRate = e, this.setLearningRate(e);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, s) => {
      const a = Array.isArray(e) ? e[s].tensor : e[n];
      if (a == null)
        return;
      const o = ENGINE.registeredVariables[n];
      tidy(() => {
        const u = add$2(mul(this.c, a), o);
        o.assign(u);
      });
    }), this.incrementIterations();
  }
  /**
   * Sets the learning rate of the optimizer.
   */
  setLearningRate(e) {
    this.learningRate = e, this.c != null && this.c.dispose(), this.c = keep(scalar(-e));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(e) {
    if (e = await this.extractIterations(e), e.length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MomentumOptimizer extends SGDOptimizer {
  /** @nocollapse */
  // Name matters for Python compatibility.
  static get className() {
    return "Momentum";
  }
  constructor(e, t, n = !1) {
    super(e), this.learningRate = e, this.momentum = t, this.useNesterov = n, this.accumulations = [], this.m = scalar(this.momentum);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, s) => {
      const a = ENGINE.registeredVariables[n];
      this.accumulations[s] == null && (this.accumulations[s] = {
        originalName: `${n}/momentum`,
        variable: tidy(() => zerosLike$2(a).variable(!1))
      });
      const o = this.accumulations[s].variable, u = Array.isArray(e) ? e[s].tensor : e[n];
      u != null && tidy(() => {
        let l;
        const f = add$2(mul(this.m, o), u);
        this.useNesterov ? l = add$2(mul(this.c, add$2(u, mul(f, this.m))), a) : l = add$2(mul(this.c, f), a), o.assign(f), a.assign(l);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && dispose(this.accumulations.map((e) => e.variable));
  }
  /**
   * Sets the momentum of the optimizer.
   *
   * @param momentum
   */
  setMomentum(e) {
    this.momentum = e;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = !1;
    this.accumulations = e.map((n) => ({ originalName: n.name, variable: n.tensor.variable(t) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      momentum: this.momentum,
      useNesterov: this.useNesterov
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.momentum, t.useNesterov);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RMSPropOptimizer extends Optimizer {
  /** @nocollapse */
  static get className() {
    return "RMSProp";
  }
  constructor(e, t = 0.9, n = 0, s = null, a = !1) {
    if (super(), this.learningRate = e, this.decay = t, this.momentum = n, this.epsilon = s, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = a, s == null && (this.epsilon = ENGINE.backend.epsilon()), e == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, s) => {
      const a = ENGINE.registeredVariables[n], o = !1;
      this.accumulatedMeanSquares[s] == null && (this.accumulatedMeanSquares[s] = {
        originalName: `${n}/rms`,
        variable: tidy(() => zerosLike$2(a).variable(o))
      }), this.accumulatedMoments[s] == null && (this.accumulatedMoments[s] = {
        originalName: `${n}/momentum`,
        variable: tidy(() => zerosLike$2(a).variable(o))
      }), this.accumulatedMeanGrads[s] == null && this.centered && (this.accumulatedMeanGrads[s] = {
        originalName: `${n}/mg`,
        variable: tidy(() => zerosLike$2(a).variable(o))
      });
      const u = Array.isArray(e) ? e[s].tensor : e[n];
      if (u == null)
        return;
      const l = this.accumulatedMeanSquares[s].variable, f = this.accumulatedMoments[s].variable;
      tidy(() => {
        const c = add$2(mul(l, this.decay), mul(square$2(u), 1 - this.decay));
        if (this.centered) {
          const h = this.accumulatedMeanGrads[s].variable, d = add$2(mul(h, this.decay), mul(u, 1 - this.decay)), m = div$1(mul(u, this.learningRate), sqrt$2(sub$2(c, add$2(square$2(d), this.epsilon)))), g = add$2(mul(f, this.momentum), m);
          l.assign(c), h.assign(d), f.assign(g);
          const y = sub$2(a, g);
          a.assign(y);
        } else {
          const h = add$2(mul(l, this.decay), mul(square$2(u), 1 - this.decay)), d = add$2(mul(f, this.momentum), div$1(mul(u, this.learningRate), sqrt$2(add$2(h, this.epsilon))));
          l.assign(h), f.assign(d);
          const m = sub$2(a, d);
          a.assign(m);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && dispose(this.accumulatedMeanSquares.map((e) => e.variable)), this.accumulatedMeanGrads != null && this.centered && dispose(this.accumulatedMeanGrads.map((e) => e.variable)), this.accumulatedMoments != null && dispose(this.accumulatedMoments.map((e) => e.variable));
  }
  async getWeights() {
    const e = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && e.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = this.centered ? e.length / 3 : e.length / 2, n = !1;
    this.accumulatedMeanSquares = e.slice(0, t).map((s) => ({
      originalName: s.name,
      variable: s.tensor.variable(n)
    })), this.accumulatedMoments = e.slice(t, t * 2).map((s) => ({
      originalName: s.name,
      variable: s.tensor.variable(n)
    })), this.centered && (this.accumulatedMeanGrads = e.slice(t * 2, t * 3).map((s) => ({
      originalName: s.name,
      variable: s.tensor.variable(n)
    })));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      decay: this.decay,
      momentum: this.momentum,
      epsilon: this.epsilon,
      centered: this.centered
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OPTIMIZERS = [
  AdadeltaOptimizer,
  AdagradOptimizer,
  AdamOptimizer,
  AdamaxOptimizer,
  MomentumOptimizer,
  RMSPropOptimizer,
  SGDOptimizer
];
function registerOptimizers() {
  for (const r of OPTIMIZERS)
    registerClass(r);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DEFAULT_FILE_NAME_PREFIX = "model", DEFAULT_JSON_EXTENSION_NAME = ".json", DEFAULT_WEIGHT_DATA_EXTENSION_NAME = ".weights.bin";
function defer(r) {
  return new Promise((e) => setTimeout(e)).then(r);
}
class BrowserDownloads {
  constructor(e) {
    if (!env().getBool("IS_BROWSER"))
      throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    e.startsWith(BrowserDownloads.URL_SCHEME) && (e = e.slice(BrowserDownloads.URL_SCHEME.length)), (e == null || e.length === 0) && (e = DEFAULT_FILE_NAME_PREFIX), this.modelJsonFileName = e + DEFAULT_JSON_EXTENSION_NAME, this.weightDataFileName = e + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
  }
  async save(e) {
    if (typeof document > "u")
      throw new Error("Browser downloads are not supported in this environment since `document` is not present");
    const t = CompositeArrayBuffer.join(e.weightData), n = window.URL.createObjectURL(new Blob([t], { type: "application/octet-stream" }));
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
    {
      const s = [{
        paths: ["./" + this.weightDataFileName],
        weights: e.weightSpecs
      }], a = getModelJSONForModelArtifacts(e, s), o = window.URL.createObjectURL(new Blob([JSON.stringify(a)], { type: "application/json" })), u = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
      if (u.download = this.modelJsonFileName, u.href = o, await defer(() => u.dispatchEvent(new MouseEvent("click"))), e.weightData != null) {
        const l = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
        l.download = this.weightDataFileName, l.href = n, await defer(() => l.dispatchEvent(new MouseEvent("click")));
      }
      return { modelArtifactsInfo: getModelArtifactsInfoForJSON(e) };
    }
  }
}
BrowserDownloads.URL_SCHEME = "downloads://";
class BrowserFiles {
  constructor(e) {
    if (e == null || e.length < 1)
      throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);
    this.jsonFile = e[0], this.weightsFiles = e.slice(1);
  }
  async load() {
    return new Promise((e, t) => {
      const n = new FileReader();
      n.onload = (s) => {
        const a = JSON.parse(s.target.result), o = a.modelTopology;
        if (o == null) {
          t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (a.weightsManifest == null) {
          t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (this.weightsFiles.length === 0) {
          e({ modelTopology: o });
          return;
        }
        const l = getModelArtifactsForJSON(a, (f) => this.loadWeights(f));
        e(l);
      }, n.onerror = (s) => t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), n.readAsText(this.jsonFile);
    });
  }
  loadWeights(e) {
    const t = [], n = [];
    for (const o of e)
      t.push(...o.weights), n.push(...o.paths);
    const s = this.checkManifestAndWeightFiles(e), a = n.map((o) => this.loadWeightsFile(o, s[o]));
    return Promise.all(a).then((o) => [t, o]);
  }
  loadWeightsFile(e, t) {
    return new Promise((n, s) => {
      const a = new FileReader();
      a.onload = (o) => {
        const u = o.target.result;
        n(u);
      }, a.onerror = (o) => s(`Failed to weights data from file of path '${e}'.`), a.readAsArrayBuffer(t);
    });
  }
  /**
   * Check the compatibility between weights manifest and weight files.
   */
  checkManifestAndWeightFiles(e) {
    const t = [], n = this.weightsFiles.map((a) => basename(a.name)), s = {};
    for (const a of e)
      a.paths.forEach((o) => {
        const u = basename(o);
        if (t.indexOf(u) !== -1)
          throw new Error(`Duplicate file basename found in weights manifest: '${u}'`);
        if (t.push(u), n.indexOf(u) === -1)
          throw new Error(`Weight file with basename '${u}' is not provided.`);
        s[o] = this.weightsFiles[n.indexOf(u)];
      });
    if (t.length !== this.weightsFiles.length)
      throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
    return s;
  }
}
const browserDownloadsRouter = (r) => env().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(BrowserDownloads.URL_SCHEME) ? browserDownloads(r.slice(BrowserDownloads.URL_SCHEME.length)) : null;
IORouterRegistry.registerSaveRouter(browserDownloadsRouter);
function browserDownloads(r = "model") {
  return new BrowserDownloads(r);
}
function browserFiles(r) {
  return new BrowserFiles(r);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function monitorPromisesProgress(r, e, t, n) {
  o(r), t = t ?? 0, n = n ?? 1, u(t, n);
  let s = 0;
  const a = (l) => (l.then((f) => {
    const c = t + ++s / r.length * (n - t);
    return e(c), f;
  }), l);
  function o(l) {
    assert$1(l != null && Array.isArray(l) && l.length > 0, () => "promises must be a none empty array");
  }
  function u(l, f) {
    assert$1(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${l}`), assert$1(f >= 0 && f <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${f}`), assert$1(f >= l, () => `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${f}`);
  }
  return Promise.all(r.map(a));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function loadWeightsAsArrayBuffer(r, e) {
  e == null && (e = {});
  const t = e.fetchFunc == null ? env().platform.fetch : e.fetchFunc, n = r.map((h) => t(h, e.requestInit, { isBinary: !0 })), u = (e.onProgress == null ? await Promise.all(n) : await monitorPromisesProgress(n, e.onProgress, 0, 0.5)).map((h) => h.arrayBuffer());
  return e.onProgress == null ? await Promise.all(u) : await monitorPromisesProgress(u, e.onProgress, 0.5, 1);
}
function streamWeights(r, e) {
  var t;
  const n = e.fetchFunc == null ? env().platform.fetch : e.fetchFunc;
  let s = 0, a;
  return (t = e.onProgress) === null || t === void 0 || t.call(e, 0), new ReadableStream({
    pull: async (o) => {
      for (var u; s < r.length; ) {
        a || (a = (await n(r[s], e.requestInit, { isBinary: !0 })).body.getReader());
        const { done: l, value: f } = await a.read();
        if (l) {
          s++, a = void 0, (u = e.onProgress) === null || u === void 0 || u.call(e, s / r.length);
          continue;
        }
        o.enqueue(f);
        return;
      }
      o.close();
    }
  });
}
async function loadWeights$1(r, e = "", t, n) {
  return weightsLoaderFactory((o) => loadWeightsAsArrayBuffer(o, { requestInit: n }))(r, e, t);
}
function weightsLoaderFactory(r) {
  return async (e, t = "", n) => {
    const s = e.map(() => !1), a = {}, o = n != null ? n.map(() => !1) : [], u = [];
    if (e.forEach((m, g) => {
      let y = 0;
      m.weights.forEach((b) => {
        const v = "quantization" in b ? b.quantization.dtype : b.dtype, w = DTYPE_VALUE_SIZE_MAP[v] * sizeFromShape(b.shape), I = () => {
          s[g] = !0, a[g] == null && (a[g] = []), a[g].push({
            manifestEntry: b,
            groupOffset: y,
            sizeBytes: w
          });
        };
        n != null ? n.forEach((T, _) => {
          T === b.name && (I(), o[_] = !0);
        }) : I(), u.push(b.name), y += w;
      });
    }), !o.every((m) => m)) {
      const m = n.filter((g, y) => !o[y]);
      throw new Error(`Could not find weights in manifest with names: ${m.join(", ")}. 
Manifest JSON has weights with names: ${u.join(", ")}.`);
    }
    const l = s.reduce((m, g, y) => (g && m.push(y), m), []), f = [];
    l.forEach((m) => {
      e[m].paths.forEach((g) => {
        const y = t + (t.endsWith("/") ? "" : "/") + g;
        f.push(y);
      });
    });
    const c = await r(f), h = {};
    let d = 0;
    return l.forEach((m) => {
      const g = e[m].paths.length, y = new CompositeArrayBuffer(c.slice(d, d + g));
      a[m].forEach((v) => {
        const w = y.slice(v.groupOffset, v.groupOffset + v.sizeBytes), I = decodeWeights(w, [v.manifestEntry]);
        for (const T in I)
          h[T] = I[T];
      }), d += g;
    }), h;
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OCTET_STREAM_MIME_TYPE = "application/octet-stream", JSON_TYPE = "application/json";
class HTTPRequest {
  constructor(e, t) {
    if (this.DEFAULT_METHOD = "POST", t == null && (t = {}), this.weightPathPrefix = t.weightPathPrefix, this.weightUrlConverter = t.weightUrlConverter, t.fetchFunc != null ? (assert$1(typeof t.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = t.fetchFunc) : this.fetch = env().platform.fetch, assert$1(e != null && e.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(e) && assert$1(e.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${e.length}).`), this.path = e, t.requestInit != null && t.requestInit.body != null)
      throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = t.requestInit || {}, this.loadOptions = t;
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    const t = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    t.body = new FormData();
    const n = [{
      paths: ["./model.weights.bin"],
      weights: e.weightSpecs
    }], s = getModelJSONForModelArtifacts(e, n);
    if (t.body.append("model.json", new Blob([JSON.stringify(s)], { type: JSON_TYPE }), "model.json"), e.weightData != null) {
      const o = CompositeArrayBuffer.join(e.weightData);
      t.body.append("model.weights.bin", new Blob([o], { type: OCTET_STREAM_MIME_TYPE }), "model.weights.bin");
    }
    const a = await this.fetch(this.path, t);
    if (a.ok)
      return {
        modelArtifactsInfo: getModelArtifactsInfoForJSON(e),
        responses: [a]
      };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`);
  }
  async loadModelJSON() {
    const e = await this.fetch(this.path, this.requestInit);
    if (!e.ok)
      throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);
    let t;
    try {
      t = await e.json();
    } catch {
      let o = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? o += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : o += " Please make sure the server is serving valid JSON for this request.", new Error(o);
    }
    const n = t.modelTopology, s = t.weightsManifest;
    if (n == null && s == null)
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return t;
  }
  /**
   * Load model artifacts via HTTP request(s).
   *
   * See the documentation to `tf.io.http` for details on the saved
   * artifacts.
   *
   * @returns The loaded model artifacts (if loading succeeds).
   */
  async load() {
    if (this.loadOptions.streamWeights)
      return this.loadStream();
    const e = await this.loadModelJSON();
    return getModelArtifactsForJSON(e, (t) => this.loadWeights(t));
  }
  async loadStream() {
    const e = await this.loadModelJSON(), t = await this.getWeightUrls(e.weightsManifest), n = getWeightSpecs(e.weightsManifest), s = () => streamWeights(t, this.loadOptions);
    return Object.assign(Object.assign({}, e), { weightSpecs: n, getWeightStream: s });
  }
  async getWeightUrls(e) {
    const t = Array.isArray(this.path) ? this.path[1] : this.path, [n, s] = parseUrl(t), a = this.weightPathPrefix || n, o = [], u = [];
    for (const l of e)
      for (const f of l.paths)
        this.weightUrlConverter != null ? u.push(this.weightUrlConverter(f)) : o.push(a + f + s);
    return this.weightUrlConverter && o.push(...await Promise.all(u)), o;
  }
  async loadWeights(e) {
    const t = await this.getWeightUrls(e), n = getWeightSpecs(e), s = await loadWeightsAsArrayBuffer(t, this.loadOptions);
    return [n, s];
  }
}
HTTPRequest.URL_SCHEME_REGEX = /^https?:\/\//;
function parseUrl(r) {
  const e = r.lastIndexOf("/"), t = r.lastIndexOf("?"), n = r.substring(0, e), s = t > e ? r.substring(t) : "";
  return [n + "/", s];
}
function isHTTPScheme(r) {
  return r.match(HTTPRequest.URL_SCHEME_REGEX) != null;
}
const httpRouter = (r, e) => {
  if (typeof fetch > "u" && (e == null || e.fetchFunc == null))
    return null;
  {
    let t = !0;
    if (Array.isArray(r) ? t = r.every((n) => isHTTPScheme(n)) : t = isHTTPScheme(r), t)
      return http(r, e);
  }
  return null;
};
IORouterRegistry.registerSaveRouter(httpRouter);
IORouterRegistry.registerLoadRouter(httpRouter);
function http(r, e) {
  return new HTTPRequest(r, e);
}
function browserHTTPRequest(r, e) {
  return http(r, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PassthroughLoader {
  constructor(e) {
    this.modelArtifacts = e;
  }
  load() {
    return this.modelArtifacts;
  }
}
class PassthroughSaver {
  constructor(e) {
    this.saveHandler = e;
  }
  save(e) {
    return this.saveHandler(e);
  }
}
class PassthroughAsync {
  constructor(e) {
    e.load && (this.load = () => Promise.resolve(e.load())), e.save && (this.save = (t) => Promise.resolve(e.save(t)));
  }
}
function fromMemory(r, e, t, n) {
  const s = arguments;
  return new PassthroughAsync(fromMemorySync(...s));
}
function fromMemorySync(r, e, t, n) {
  return arguments.length === 1 ? r.modelTopology != null || r.weightSpecs != null ? new PassthroughLoader(r) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new PassthroughLoader({ modelTopology: r })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new PassthroughLoader({
    modelTopology: r,
    weightSpecs: e,
    weightData: t,
    trainingConfig: n
  }));
}
function withSaveHandler(r) {
  return new PassthroughSaver(r);
}
function withSaveHandlerSync(r) {
  return new PassthroughSaver(r);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const io = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CompositeArrayBuffer,
  browserFiles,
  browserHTTPRequest,
  concatenateArrayBuffers,
  copyModel,
  decodeWeights,
  decodeWeightsStream,
  encodeWeights,
  fromMemory,
  fromMemorySync,
  getLoadHandlers,
  getModelArtifactsForJSON,
  getModelArtifactsForJSONSync,
  getModelArtifactsInfoForJSON,
  getSaveHandlers,
  getWeightSpecs,
  http,
  isHTTPScheme,
  listModels,
  loadWeights: loadWeights$1,
  moveModel,
  registerLoadRouter,
  registerSaveRouter,
  removeModel,
  weightsLoaderFactory,
  withSaveHandler,
  withSaveHandlerSync
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function confusionMatrix_(r, e, t) {
  const n = convertToTensor(r, "labels", "confusionMatrix"), s = convertToTensor(e, "predictions", "confusionMatrix");
  assert$1(t == null || t > 0 && Number.isInteger(t), () => `If provided, numClasses must be a positive integer, but got ${t}`), assert$1(n.rank === 1, () => `Expected the rank of labels to be 1, but got ${n.rank}`), assert$1(s.rank === 1, () => `Expected the rank of predictions to be 1, but got ${s.rank}`), assert$1(n.shape[0] === s.shape[0], () => `Mismatch in the number of examples: ${n.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`), assert$1(t > 0 && Number.isInteger(t), () => `numClasses is required to be a positive integer, but got ${t}`);
  const a = oneHot$2(cast$3(n, "int32"), t), o = oneHot$2(cast$3(s, "int32"), t), u = transpose$2(a), l = matMul$1(u, o);
  return cast$3(l, "int32");
}
const confusionMatrix = /* @__PURE__ */ op({ confusionMatrix_ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const math = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  confusionMatrix
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let fromPixels2DContext$1, hasToPixelsWarned = !1;
function fromPixels_(r, e = 3) {
  if (e > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (r == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let t = !1, n = !1, s = !1, a = !1, o = !1, u = !1;
  if (r.data instanceof Uint8Array)
    t = !0;
  else if (typeof ImageData < "u" && r instanceof ImageData)
    n = !0;
  else if (typeof HTMLVideoElement < "u" && r instanceof HTMLVideoElement)
    s = !0;
  else if (typeof HTMLImageElement < "u" && r instanceof HTMLImageElement)
    a = !0;
  else if (r.getContext != null)
    o = !0;
  else if (typeof ImageBitmap < "u" && r instanceof ImageBitmap)
    u = !0;
  else
    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);
  if (getKernel(FromPixels, ENGINE.backendName) != null) {
    const g = { pixels: r }, y = { numChannels: e };
    return ENGINE.runKernel(FromPixels, g, y);
  }
  const [f, c] = s ? [
    r.videoWidth,
    r.videoHeight
  ] : [r.width, r.height];
  let h;
  if (o)
    h = // tslint:disable-next-line:no-any
    r.getContext("2d").getImageData(0, 0, f, c).data;
  else if (n || t)
    h = r.data;
  else if (a || s || u) {
    if (fromPixels2DContext$1 == null)
      if (typeof document > "u")
        if (typeof OffscreenCanvas < "u" && typeof OffscreenCanvasRenderingContext2D < "u")
          fromPixels2DContext$1 = new OffscreenCanvas(1, 1).getContext("2d");
        else
          throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
      else
        fromPixels2DContext$1 = document.createElement("canvas").getContext("2d", { willReadFrequently: !0 });
    fromPixels2DContext$1.canvas.width = f, fromPixels2DContext$1.canvas.height = c, fromPixels2DContext$1.drawImage(r, 0, 0, f, c), h = fromPixels2DContext$1.getImageData(0, 0, f, c).data;
  }
  let d;
  if (e === 4)
    d = new Int32Array(h);
  else {
    const g = f * c;
    d = new Int32Array(g * e);
    for (let y = 0; y < g; y++)
      for (let b = 0; b < e; ++b)
        d[y * e + b] = h[y * 4 + b];
  }
  return tensor3d(d, [c, f, e], "int32");
}
function isPixelData(r) {
  return r != null && r.data instanceof Uint8Array;
}
function isImageBitmapFullySupported() {
  return typeof window < "u" && typeof ImageBitmap < "u" && window.hasOwnProperty("createImageBitmap");
}
function isNonEmptyPixels(r) {
  return r != null && r.width !== 0 && r.height !== 0;
}
function canWrapPixelsToImageBitmap(r) {
  return isImageBitmapFullySupported() && !(r instanceof ImageBitmap) && isNonEmptyPixels(r) && !isPixelData(r);
}
async function fromPixelsAsync(r, e = 3) {
  let t = null;
  if (env().getBool("WRAP_TO_IMAGEBITMAP") && canWrapPixelsToImageBitmap(r)) {
    let n;
    try {
      n = await createImageBitmap(r, { premultiplyAlpha: "none" });
    } catch {
      n = null;
    }
    n != null && n.width === r.width && n.height === r.height ? t = n : t = r;
  } else
    t = r;
  return fromPixels_(t, e);
}
function validateImgTensor(r) {
  if (r.rank !== 2 && r.rank !== 3)
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${r.rank}.`);
  const e = r.rank === 2 ? 1 : r.shape[2];
  if (e > 4 || e === 2)
    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${e}`);
  if (r.dtype !== "float32" && r.dtype !== "int32")
    throw new Error(`Unsupported type for toPixels: ${r.dtype}. Please use float32 or int32 tensors.`);
}
function validateImageOptions(r) {
  const e = (r == null ? void 0 : r.alpha) || 1;
  if (e > 1 || e < 0)
    throw new Error(`Alpha value ${e} is suppoed to be in range [0 - 1].`);
}
async function toPixels(r, e) {
  let t = convertToTensor(r, "img", "toPixels");
  if (!(r instanceof Tensor)) {
    const f = t;
    t = cast$3(f, "int32"), f.dispose();
  }
  validateImgTensor(t);
  const [n, s] = t.shape.slice(0, 2), a = t.rank === 2 ? 1 : t.shape[2], o = await t.data(), u = t.dtype === "float32" ? 255 : 1, l = new Uint8ClampedArray(s * n * 4);
  for (let f = 0; f < n * s; ++f) {
    const c = [0, 0, 0, 255];
    for (let d = 0; d < a; d++) {
      const m = o[f * a + d];
      if (t.dtype === "float32") {
        if (m < 0 || m > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${m}.`);
      } else if (t.dtype === "int32" && (m < 0 || m > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${m}.`);
      a === 1 ? (c[0] = m * u, c[1] = m * u, c[2] = m * u) : c[d] = m * u;
    }
    const h = f * 4;
    l[h + 0] = Math.round(c[0]), l[h + 1] = Math.round(c[1]), l[h + 2] = Math.round(c[2]), l[h + 3] = Math.round(c[3]);
  }
  if (e != null) {
    hasToPixelsWarned || getKernel(Draw, ENGINE.backendName) != null && (console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."), hasToPixelsWarned = !0), e.width = s, e.height = n;
    const f = e.getContext("2d"), c = new ImageData(l, s, n);
    f.putImageData(c, 0, 0);
  }
  return t !== r && t.dispose(), l;
}
function draw$1(r, e, t) {
  let n = convertToTensor(r, "img", "draw");
  if (!(r instanceof Tensor)) {
    const o = n;
    n = cast$3(o, "int32"), o.dispose();
  }
  validateImgTensor(n), validateImageOptions(t == null ? void 0 : t.imageOptions);
  const s = { image: n }, a = { canvas: e, options: t };
  ENGINE.runKernel(Draw, s, a);
}
const fromPixels$1 = /* @__PURE__ */ op({ fromPixels_ }), browser = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  draw: draw$1,
  fromPixels: fromPixels$1,
  fromPixelsAsync,
  toPixels
}, Symbol.toStringTag, { value: "Module" }));
function prepareAndValidate(r, e) {
  const t = r.shape.length, n = e.shape.length;
  if (t < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t}.`);
  if (n < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${n}.`);
  if (e.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);
  if (e.shape[n - 1] > t)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[n - 1]} vs. ${t}`);
  if (sizeFromShape(r.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);
  const s = e.shape, a = s[s.length - 1];
  let o = 1;
  for (let h = 0; h < s.length - 1; ++h)
    o *= s[h];
  const u = r.shape, l = s.slice();
  l.pop();
  let f = 1;
  for (let h = a; h < t; ++h)
    f *= u[h], l.push(u[h]);
  const c = [
    ...computeStrides(r.shape).map((h) => h / f),
    1
  ].slice(0, a);
  return [l, o, f, c];
}
const gather_nd_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  prepareAndValidate
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NEW_AXIS = -2, SHRINK_AXIS = -1;
function assertParamsValid(r, e, t) {
  const n = r.shape.length;
  assert$1(n === e.length, () => `Error in slice${n}D: Length of begin ${e} must match the rank of the array (${n}).`), assert$1(n === t.length, () => `Error in slice${n}D: Length of size ${t} must match the rank of the array (${n}).`);
  for (let s = 0; s < n; ++s)
    assert$1(e[s] + t[s] <= r.shape[s], () => `Error in slice${n}D: begin[${s}] + size[${s}] (${e[s] + t[s]}) would overflow input.shape[${s}] (${r.shape[s]})`);
}
function maskToAxes(r) {
  const e = [];
  let t = 0;
  for (; r > 0; )
    r & 1 && e.push(t), r /= 2, t++;
  return e;
}
function computeOutShape$2(r, e, t) {
  const n = [];
  for (let s = 0; s < r.length; s++)
    n[s] = Math.ceil((e[s] - r[s]) / t[s]);
  return n;
}
function stridesWithElidedDims(r, e, t, n) {
  const s = [...r];
  for (let a = s.length; a < n.length; a++)
    s.push(1);
  for (let a = 0; a < t; a++)
    a === 0 ? s[e] = 1 : (s.splice(
      e,
      0,
      1
      /* element to add */
    ), s.pop());
  return s;
}
function unnormalizeAxis(r, e, t) {
  return t <= r ? t : t - (e - 1);
}
function getElidedAxes(r, e) {
  const t = [];
  for (let n = 0; n < r; n++)
    t.push(e + n);
  return t;
}
function getNormalizedAxes(r, e, t, n, s, a, o, u, l) {
  const f = r.length;
  let c = new Array(f), h = new Array(f), d = new Array(f);
  if (e.length && t > 0) {
    const m = e[0], g = t + 1;
    c = startIndicesWithElidedDims(o, m, g, n, r), h = stopIndicesWithElidedDims(u, m, g, s, r), d = stridesWithElidedDims(a, m, g, r);
  } else
    for (let m = 0; m < f; m++)
      c[m] = startForAxis(o, n, a, r, m, l), h[m] = stopForAxis(u, s, a, r, m, l), d[m] = stridesForAxis(a, m, l);
  return {
    begin: c,
    end: h,
    strides: d
  };
}
function startIndicesWithElidedDims(r, e, t, n, s) {
  const a = [...s], o = getElidedAxes(t, e);
  for (let u = 0; u < a.length; u++)
    if (o.indexOf(u) > -1)
      a[u] = 0;
    else {
      const l = unnormalizeAxis(e, t, u);
      let f = n[l];
      r & 1 << l && (f = 0), a[u] = f;
    }
  return a;
}
function stopIndicesWithElidedDims(r, e, t, n, s) {
  const a = [...s], o = getElidedAxes(t, e);
  for (let u = 0; u < a.length; u++)
    if (o.indexOf(u) > -1)
      a[u] = Number.MAX_SAFE_INTEGER;
    else {
      const l = unnormalizeAxis(e, t, u);
      let f = n[l];
      r & 1 << l && (f = Number.MAX_SAFE_INTEGER), a[u] = f;
    }
  for (let u = 0; u < a.length; u++) {
    const l = s[u];
    a[u] < 0 && (a[u] += l), a[u] = clamp(0, a[u], s[u]);
  }
  return a;
}
function stridesForAxis(r, e, t) {
  let n = r[e];
  return (t & 1 << e || n == null) && (n = 1), n;
}
function startForAxis(r, e, t, n, s, a) {
  let o = e[s];
  const u = t[s] || 1;
  (r & 1 << s || a & 1 << s || o == null) && (u > 0 ? o = Number.MIN_SAFE_INTEGER : o = Number.MAX_SAFE_INTEGER);
  const l = n[s];
  return o < 0 && (o += l), o = clamp(0, o, l - 1), o;
}
function stopForAxis(r, e, t, n, s, a) {
  let o = e[s];
  const u = t[s] || 1;
  (r & 1 << s || a & 1 << s || o == null) && (u > 0 ? o = Number.MAX_SAFE_INTEGER : o = Number.MIN_SAFE_INTEGER);
  const l = n[s];
  return o < 0 && (o += l), u > 0 ? o = clamp(0, o, l) : o = clamp(-1, o, l - 1), o;
}
function isSliceContinous(r, e, t) {
  let n = t.length;
  for (let s = 0; s < t.length; s++)
    if (t[s] > 1) {
      n = s;
      break;
    }
  for (let s = n + 1; s < t.length; s++)
    if (e[s] > 0 || t[s] !== r[s])
      return !1;
  return !0;
}
function computeFlatOffset(r, e) {
  let t = r.length > 0 ? r[r.length - 1] : 1;
  for (let n = 0; n < r.length - 1; n++)
    t += r[n] * e[n];
  return t;
}
function parseSliceParams(r, e, t) {
  let n;
  const s = r.shape.length;
  typeof e == "number" ? n = [e, ...new Array(s - 1).fill(0)] : e.length < s ? n = e.concat(new Array(s - e.length).fill(0)) : n = e.slice(), n.forEach((o) => {
    assert$1(o !== -1, () => "slice() does not support negative begin indexing.");
  });
  let a;
  return t == null ? a = new Array(s).fill(-1) : typeof t == "number" ? a = [t, ...new Array(s - 1).fill(-1)] : t.length < s ? a = t.concat(new Array(s - t.length).fill(-1)) : a = t, a = a.map((o, u) => o >= 0 ? o : (assert$1(o === -1, () => `Negative size values should be exactly -1 but got ${o} for the slice() size at index ${u}.`), r.shape[u] - n[u])), [n, a];
}
function sliceInfo(r, e, t, n, s, a, o, u, l) {
  let f;
  if (n == null ? (f = new Array(e.length), f.fill(1)) : f = n, o != null && o & o - 1)
    throw new Error("Multiple ellipses in slice is not allowed.");
  let c = !1;
  const h = {
    dims: f.length,
    numAddAxisAfterEllipsis: 0,
    begin: e.slice(),
    end: t.slice(),
    strides: f.slice(),
    beginMask: s,
    endMask: a,
    ellipsisMask: o,
    newAxisMask: u,
    shrinkAxisMask: l
  };
  for (let I = 0; I < h.dims; I++)
    c && 1 << I & u && h.numAddAxisAfterEllipsis++, 1 << I & o && (c = !0);
  c || (h.ellipsisMask |= 1 << h.dims, h.dims++);
  const d = {
    dims: r.length,
    beginMask: 0,
    endMask: 0,
    beginValid: !1,
    endValid: !1
  };
  buildDenseSpec(h, d);
  let m = !0, g = !0, y = !0;
  const b = [], v = [];
  for (let I = 0; I < r.length; ++I) {
    if (d.strides[I] === 0)
      throw Error(`strides[${I}] must be non-zero`);
    const T = !!(d.shrinkAxisMask & 1 << I), _ = r[I];
    if (_ === -1) {
      b.push(T ? 1 : -1);
      continue;
    }
    const F = [d.beginMask & 1 << I, d.endMask & 1 << I], O = [
      d.strides[I] > 0 ? 0 : -1,
      d.strides[I] > 0 ? _ : _ - 1
    ];
    if (T && d.strides[I] <= 0)
      throw Error("only stride 1 allowed on non-range indexing.");
    y = y && d.strides[I] === 1;
    const q = !!(d.beginMask & 1 << I && d.endMask & 1 << I);
    if (d.beginValid && d.endValid) {
      if (T) {
        const $ = d.begin[I] < 0 ? _ + d.begin[I] : d.begin[I];
        if (d.begin[I] = $, d.end[I] = d.begin[I] + 1, $ < 0 || $ >= _)
          throw Error(`slice index ${d.begin[I]} of dimension ${I} out of bounds.`);
      } else
        d.begin[I] = canonical(d.begin[I], 0, d.strides[I], _, F, O), d.end[I] = canonical(d.end[I], 1, d.strides[I], _, F, O);
      const R = d.strides[I] === 1 && d.begin[I] === 0 && d.end[I] === _;
      m = m && R, g = g && (I === 0 && d.strides[I] === 1 || R);
    } else
      m = m && d.strides[I] === 1 && q, g = g && (I === 0 && d.strides[I] === 1 || q);
    let V, H = !1;
    if (d.beginValid && d.endValid ? (V = d.end[I] - d.begin[I], H = !0) : T ? (V = 1, H = !0) : q && _ >= 0 && (d.strides[I] < 0 ? V = -_ : V = _, H = !0), H) {
      let R;
      V === 0 || V < 0 != d.strides[I] < 0 ? R = 0 : R = Math.trunc(V / d.strides[I]) + (V % d.strides[I] !== 0 ? 1 : 0), b.push(R);
    } else
      b.push(-1);
  }
  for (let I = 0; I < d.finalShapeGatherIndices.length; ++I) {
    const T = d.finalShapeGatherIndices[I];
    T >= 0 ? v.push(b[T]) : T === NEW_AXIS && v.push(1);
  }
  return {
    finalShapeSparse: v.filter((I, T) => d.finalShapeGatherIndices[T] !== NEW_AXIS),
    finalShape: v,
    isIdentity: m,
    sliceDim0: g,
    isSimpleSlice: y,
    begin: d.begin,
    end: d.end,
    strides: d.strides
  };
}
function buildDenseSpec(r, e) {
  e.beginMask = 0, e.endMask = 0, e.shrinkAxisMask = 0;
  let t = 0;
  e.beginValid = r.begin != null, e.endValid = r.end != null, e.begin = new Array(e.dims), e.end = new Array(e.dims), e.strides = new Array(e.dims), e.finalShapeGatherIndices = [], e.finalShapeGatherIndicesSparse = [], e.inputShapeGatherIndicesSparse = new Array(e.dims);
  for (let n = 0; n < r.dims; n++)
    if (1 << n & r.ellipsisMask) {
      const s = Math.min(e.dims - (r.dims - n) + 1 + r.numAddAxisAfterEllipsis, e.dims);
      for (; t < s; t++)
        e.begin[t] = 0, e.end[t] = 0, e.strides[t] = 1, e.beginMask |= 1 << t, e.endMask |= 1 << t, e.finalShapeGatherIndices.push(t), e.finalShapeGatherIndicesSparse.push(-1), e.inputShapeGatherIndicesSparse[t] = n;
    } else if (1 << n & r.newAxisMask)
      e.finalShapeGatherIndices.push(NEW_AXIS), e.finalShapeGatherIndicesSparse.push(-1);
    else {
      if (t === e.begin.length)
        throw Error(`Index out of range using input dim ${t}; input has only ${e.dims} dims, ${e.begin.length}.`);
      r.begin != null && (e.begin[t] = r.begin[n]), r.end != null && (e.end[t] = r.end[n]), e.strides[t] = r.strides[n], r.beginMask & 1 << n && (e.beginMask |= 1 << t), r.endMask & 1 << n && (e.endMask |= 1 << t), r.shrinkAxisMask & 1 << n ? (e.finalShapeGatherIndices.push(SHRINK_AXIS), e.finalShapeGatherIndicesSparse.push(-1), e.shrinkAxisMask |= 1 << t) : (e.finalShapeGatherIndices.push(t), e.finalShapeGatherIndicesSparse.push(n)), e.inputShapeGatherIndicesSparse[t] = n, t++;
    }
}
function canonical(r, e, t, n, s, a) {
  if (s[e])
    return t > 0 ? a[e] : a[e + 1 & 1];
  {
    const o = r < 0 ? n + r : r;
    return o < a[0] ? a[0] : o > a[1] ? a[1] : o;
  }
}
const slice_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertParamsValid,
  computeFlatOffset,
  computeOutShape: computeOutShape$2,
  getNormalizedAxes,
  isSliceContinous,
  maskToAxes,
  parseSliceParams,
  sliceInfo,
  startForAxis,
  startIndicesWithElidedDims,
  stopForAxis,
  stopIndicesWithElidedDims,
  stridesForAxis,
  stridesWithElidedDims
}, Symbol.toStringTag, { value: "Module" }));
/** @license See the LICENSE file. */
const version$7 = "4.22.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OptimizerConstructors {
  /**
   * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
   *
   * ```js
   * // Fit a quadratic function by learning the coefficients a, b, c.
   * const xs = tf.tensor1d([0, 1, 2, 3]);
   * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
   *
   * const a = tf.scalar(Math.random()).variable();
   * const b = tf.scalar(Math.random()).variable();
   * const c = tf.scalar(Math.random()).variable();
   *
   * // y = a * x^2 + b * x + c.
   * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
   * const loss = (pred, label) => pred.sub(label).square().mean();
   *
   * const learningRate = 0.01;
   * const optimizer = tf.train.sgd(learningRate);
   *
   * // Train the model.
   * for (let i = 0; i < 10; i++) {
   *   optimizer.minimize(() => loss(f(xs), ys));
   * }
   *
   * // Make predictions.
   * console.log(
   *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
   * const preds = f(xs).dataSync();
   * preds.forEach((pred, i) => {
   *   console.log(`x: ${i}, pred: ${pred}`);
   * });
   * ```
   *
   * @param learningRate The learning rate to use for the SGD algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static sgd(e) {
    return new SGDOptimizer(e);
  }
  /**
   * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
   * descent.
   *
   * See
   * [http://proceedings.mlr.press/v28/sutskever13.pdf](
   * http://proceedings.mlr.press/v28/sutskever13.pdf)
   *
   * @param learningRate The learning rate to use for the Momentum gradient
   * descent algorithm.
   * @param momentum The momentum to use for the momentum gradient descent
   * algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static momentum(e, t, n = !1) {
    return new MomentumOptimizer(e, t, n);
  }
  /**
   * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
   * descent. This implementation uses plain momentum and is not centered
   * version of RMSProp.
   *
   * See
   * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
   * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
   *
   * @param learningRate The learning rate to use for the RMSProp gradient
   * descent algorithm.
   * @param decay The discounting factor for the history/coming gradient.
   * @param momentum The momentum to use for the RMSProp gradient descent
   * algorithm.
   * @param epsilon Small value to avoid zero denominator.
   * @param centered If true, gradients are normalized by the estimated
   * variance of the gradient.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static rmsprop(e, t = 0.9, n = 0, s = null, a = !1) {
    return new RMSPropOptimizer(e, t, n, s, a);
  }
  /**
   * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adam gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adam(e = 1e-3, t = 0.9, n = 0.999, s = null) {
    return new AdamOptimizer(e, t, n, s);
  }
  /**
   * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
   * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
   *
   * @param learningRate The learning rate to use for the Adadelta gradient
   * descent algorithm.
   * @param rho The learning rate decay over each update.
   * @param epsilon A constant epsilon used to better condition the grad
   * update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adadelta(e = 1e-3, t = 0.95, n = null) {
    return new AdadeltaOptimizer(e, t, n);
  }
  /**
   * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adamax gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   * @param decay The learning rate decay over each update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adamax(e = 2e-3, t = 0.9, n = 0.999, s = null, a = 0) {
    return new AdamaxOptimizer(e, t, n, s, a);
  }
  /**
   * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
   * See
   * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
   * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
   * or
   * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
   * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
   *
   * @param learningRate The learning rate to use for the Adagrad gradient
   * descent algorithm.
   * @param initialAccumulatorValue Starting value for the accumulators, must be
   * positive.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adagrad(e, t = 0.1) {
    return new AdagradOptimizer(e, t);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const train = OptimizerConstructors;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const delayCallback = typeof requestAnimationFrame < "u" ? requestAnimationFrame : typeof setImmediate < "u" ? setImmediate : (r) => r();
function nextFrame() {
  return new Promise((r) => delayCallback(() => r()));
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function assertParamsConsistent(r, e) {
  const t = r[0].length;
  r.forEach((s, a) => {
    assert$1(s.length === t, () => `Error in concat${t}D: rank of tensors[${a}] must be the same as the rank of the rest (${t})`);
  }), assert$1(e >= 0 && e < t, () => `Error in concat${t}D: axis must be between 0 and ${t - 1}.`);
  const n = r[0];
  r.forEach((s, a) => {
    for (let o = 0; o < t; o++)
      assert$1(o === e || s[o] === n[o], () => `Error in concat${t}D: Shape of tensors[${a}] (${s}) does not match the shape of the rest (${n}) along the non-concatenated axis ${a}.`);
  });
}
function computeOutShape$1(r, e) {
  const t = r[0].slice();
  for (let n = 1; n < r.length; n++)
    t[e] += r[n][e];
  return t;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var RowPartitionType$1;
(function(r) {
  r[r.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", r[r.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", r[r.ROW_LENGTHS = 2] = "ROW_LENGTHS", r[r.ROW_SPLITS = 3] = "ROW_SPLITS", r[r.ROW_LIMITS = 4] = "ROW_LIMITS", r[r.ROW_STARTS = 5] = "ROW_STARTS";
})(RowPartitionType$1 || (RowPartitionType$1 = {}));
function combineRaggedTensorToTensorShapes(r, e, t) {
  let n = new Array();
  if (t == null && e == null)
    return n;
  if (e == null)
    for (; n.length < r + t.length; )
      n.push(-1);
  else
    n = e.slice();
  if (t == null)
    return n;
  if (r + t.length !== n.length)
    throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${r + t.length}, but shape.rank = ${n.length}`);
  for (let s = 1; s < t.length; ++s) {
    const a = t[s], o = n[n.length - t.length + s], u = n[o];
    if (a >= 0)
      if (u >= 0) {
        if (u !== a)
          throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${s + r}] = ${a} but shape[${s + r}] = ${u}`);
      } else
        n[o] = a;
  }
  return n;
}
function getRowPartitionTypesHelper(r) {
  const e = {
    FIRST_DIM_SIZE: RowPartitionType$1.FIRST_DIM_SIZE,
    VALUE_ROWIDS: RowPartitionType$1.VALUE_ROWIDS,
    ROW_LENGTHS: RowPartitionType$1.ROW_LENGTHS,
    ROW_SPLITS: RowPartitionType$1.ROW_SPLITS,
    ROW_LIMITS: RowPartitionType$1.ROW_LIMITS,
    ROW_STARTS: RowPartitionType$1.ROW_STARTS
  }, t = [];
  for (const n of r)
    if (n in e)
      t.push(e[n]);
    else
      break;
  return t;
}
function getRaggedRank(r) {
  return r.length === 0 ? 0 : r[0] === RowPartitionType$1.FIRST_DIM_SIZE ? r.length - 1 : r.length;
}
function validateDefaultValueShape(r, e) {
  if (r == null || e == null)
    return;
  const t = r.length, n = e.length;
  if (t >= n)
    throw new Error(`defaultValue.shape=${r} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${t} must be less than ragged tensor input flatValues.rank = ${n})`);
  for (let s = 0; s < Math.min(t, n - 1); ++s) {
    const a = r[s], o = e[s + 1];
    if (a >= 0 && o >= 0 && a !== 1 && a !== o)
      throw new Error(`defaultValue.shape=${r}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${s - r.length}] = ${a} but ragged tensor input.flatValues.shape[${s - r.length}] = ${o}`);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PARALLELIZE_THRESHOLD = 30;
function computeOptimalWindowSize(r) {
  return r <= PARALLELIZE_THRESHOLD ? r : nearestDivisor(r, Math.floor(Math.sqrt(r)));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getImageCenter(r, e, t) {
  const n = t * (typeof r == "number" ? r : r[0]), s = e * (typeof r == "number" ? r : r[1]);
  return [n, s];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getReshaped(r, e, t, n = !0) {
  let s = [];
  if (n)
    s = s.concat(e.slice(0)), s.push(r[0] / t), s = s.concat(r.slice(1));
  else {
    s = s.concat(r[0]);
    const a = e.length;
    for (let o = 0; o < a; ++o)
      s = s.concat([r[o + 1] / e[o], e[o]]);
    s = s.concat(r.slice(a + 1));
  }
  return s;
}
function getPermuted(r, e, t = !0) {
  const n = [];
  if (t) {
    n.push(e);
    for (let s = e + 1; s < r; ++s)
      s <= 2 * e ? (n.push(s), n.push(s - (e + 1))) : n.push(s);
  } else {
    const s = [], a = [];
    for (let o = 1; o < r; ++o)
      o >= e * 2 + 1 || o % 2 === 1 ? a.push(o) : s.push(o);
    n.push(...s), n.push(0), n.push(...a);
  }
  return n;
}
function getReshapedPermuted(r, e, t, n = !0) {
  const s = [];
  n ? s.push(r[0] / t) : s.push(r[0] * t);
  for (let a = 1; a < r.length; ++a)
    a <= e.length ? n ? s.push(e[a - 1] * r[a]) : s.push(r[a] / e[a - 1]) : s.push(r[a]);
  return s;
}
function getSliceBeginCoords(r, e) {
  const t = [0];
  for (let n = 0; n < e; ++n)
    t.push(r[n][0]);
  return t;
}
function getSliceSize(r, e, t) {
  const n = r.slice(0, 1);
  for (let s = 0; s < t; ++s)
    n.push(r[s + 1] - e[s][0] - e[s][1]);
  return n;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SELU_SCALEALPHA = 1.7580993408473768, SELU_SCALE = 1.0507009873554805;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ERF_P = 0.3275911, ERF_A1 = 0.254829592, ERF_A2 = -0.284496736, ERF_A3 = 1.421413741, ERF_A4 = -1.453152027, ERF_A5 = 1.061405429;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mergeRealAndImagArrays(r, e) {
  if (r.length !== e.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${e.length}.`);
  const t = new Float32Array(r.length * 2);
  for (let n = 0; n < t.length; n += 2)
    t[n] = r[n / 2], t[n + 1] = e[n / 2];
  return t;
}
function splitRealAndImagArrays(r) {
  const e = new Float32Array(r.length / 2), t = new Float32Array(r.length / 2);
  for (let n = 0; n < r.length; n += 2)
    e[n / 2] = r[n], t[n / 2] = r[n + 1];
  return { real: e, imag: t };
}
function complexWithEvenIndex(r) {
  const e = Math.ceil(r.length / 4), t = new Float32Array(e), n = new Float32Array(e);
  for (let s = 0; s < r.length; s += 4)
    t[Math.floor(s / 4)] = r[s], n[Math.floor(s / 4)] = r[s + 1];
  return { real: t, imag: n };
}
function complexWithOddIndex(r) {
  const e = Math.floor(r.length / 4), t = new Float32Array(e), n = new Float32Array(e);
  for (let s = 2; s < r.length; s += 4)
    t[Math.floor(s / 4)] = r[s], n[Math.floor(s / 4)] = r[s + 1];
  return { real: t, imag: n };
}
function getComplexWithIndex(r, e) {
  const t = r[e * 2], n = r[e * 2 + 1];
  return { real: t, imag: n };
}
function assignToTypedArray(r, e, t, n) {
  r[n * 2] = e, r[n * 2 + 1] = t;
}
function exponents(r, e) {
  const t = new Float32Array(r / 2), n = new Float32Array(r / 2);
  for (let s = 0; s < Math.ceil(r / 2); s++) {
    const a = (e ? 2 : -2) * Math.PI * (s / r);
    t[s] = Math.cos(a), n[s] = Math.sin(a);
  }
  return { real: t, imag: n };
}
function exponent(r, e, t) {
  const n = (t ? 2 : -2) * Math.PI * (r / e), s = Math.cos(n), a = Math.sin(n);
  return { real: s, imag: a };
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ARROW = "->", ARROW_REGEX = /->/g, COMMA = ",", ELLIPSIS = "...";
function decodeEinsumEquation(r, e) {
  r = r.replace(/\s/g, "");
  const t = (r.length - r.replace(ARROW_REGEX, "").length) / ARROW.length;
  if (t < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (t > 1)
    throw new Error(`Equation must contain exactly one arrow ("${ARROW}").`);
  const [n, s] = r.split(ARROW);
  assert$1(n.indexOf(ELLIPSIS) === -1, () => `The ellipsis notation ("${ELLIPSIS}") is not supported yet.`);
  const a = n.split(COMMA), o = a.length;
  if (e !== o)
    throw new Error(`Expected ${o} input tensors, received ${e}`);
  if (o > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  const u = [];
  for (let d = 0; d < s.length; ++d) {
    const m = s[d];
    if (!a.some((g) => g.indexOf(m) !== -1))
      throw new Error(`Output subscripts contain the label ${m} not present in the input subscripts.`);
    u.indexOf(m) === -1 && u.push(m);
  }
  for (let d = 0; d < n.length; ++d) {
    const m = n[d];
    u.indexOf(m) === -1 && m !== COMMA && u.push(m);
  }
  const l = new Array(a.length);
  for (let d = 0; d < o; ++d) {
    if (new Set(a[d].split("")).size !== a[d].length)
      throw new Error(`Found duplicate axes in input component ${a[d]}. Support for duplicate axes in input is not implemented yet.`);
    l[d] = [];
    for (let m = 0; m < a[d].length; ++m)
      l[d].push(u.indexOf(a[d][m]));
  }
  const f = u.length, c = s.length, h = [];
  for (let d = c; d < f; ++d)
    h.push(d);
  return { allDims: u, summedDims: h, idDims: l };
}
function getEinsumPermutation(r, e) {
  let t = new Array(r);
  t.fill(-1);
  for (let s = 0; s < e.length; ++s)
    t[e[s]] = s;
  const n = [];
  for (let s = 0; s < r; ++s)
    t[s] === -1 && n.push(s);
  return t = t.filter((s) => s !== -1), { permutationIndices: t, expandDims: n };
}
function checkEinsumDimSizes(r, e, t) {
  const n = new Array(r);
  for (let s = 0; s < t.length; ++s) {
    const a = t[s].shape;
    for (let o = 0; o < e[s].length; ++o)
      n[e[s][o]] === void 0 ? n[e[s][o]] = a[o] : assert$1(n[e[s][o]] === a[o], () => `Expected dimension ${n[e[s][o]]} at axis ${o} of input shaped ${JSON.stringify(a)}, but got dimension ${a[o]}`);
  }
}
function getEinsumComputePath(r, e) {
  const t = r, n = [];
  let s = 0;
  r.length === 0 && t.push(-1), s = r.length + 1;
  for (let o = 0; o < s; ++o)
    n.push([]);
  const a = [];
  for (let o = 0; o < t.length; ++o) {
    const u = t[o], l = findTermsWithDim(e, u);
    for (const f of l)
      a.indexOf(f) === -1 && (n[o].push(f), a.push(f));
  }
  return { path: t, steps: n };
}
function isIdentityPermutation(r) {
  return r.every((e, t) => e === t);
}
function findTermsWithDim(r, e) {
  const t = [];
  for (let n = 0; n < r.length; ++n)
    (r[n].length === 0 || r[n].indexOf(e) !== -1 || e === -1) && t.push(n);
  return t;
}
function prepareSplitSize(r, e, t = 0) {
  let n = [];
  if (typeof e == "number")
    assert$1(r.shape[t] % e === 0, () => "Number of splits must evenly divide the axis."), n = new Array(e).fill(r.shape[t] / e);
  else {
    const s = e.reduce((o, u) => (u === -1 && (o += 1), o), 0);
    assert$1(s <= 1, () => "There should be only one negative value in split array.");
    const a = e.indexOf(-1);
    if (a !== -1) {
      const o = e.reduce((u, l) => l > 0 ? u + l : u);
      e[a] = r.shape[t] - o;
    }
    assert$1(r.shape[t] === e.reduce((o, u) => o + u), () => "The sum of sizes must match the size of the axis dimension."), n = e;
  }
  return n;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getSparseFillEmptyRowsIndicesDenseShapeMismatch(r) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`;
}
function getSparseFillEmptyRowsNegativeIndexErrorMessage(r, e) {
  return `indices(${r}, 0) is invalid: ${e} < 0`;
}
function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(r, e, t) {
  return `indices(${r}, 0) is invalid: ${e} >= ${t}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(r, e) {
  return `only one output dimension may be -1, not both ${r} and ${e}`;
}
function getSparseReshapeNegativeOutputDimErrorMessage(r, e) {
  return `size ${r} must be non-negative, not ${e}`;
}
function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function getSparseReshapeInputOutputMultipleErrorMessage(r, e) {
  const t = sizeFromShape(r), n = sizeFromShape(e);
  return `Input to reshape is a SparseTensor with ${t}
  dense values, but the requested shape requires a multiple of ${n}. inputShape=${r} outputShape= ${e}`;
}
function getSparseReshapeInputOutputMismatchErrorMessage(r, e) {
  const t = sizeFromShape(r), n = sizeFromShape(e);
  return `Input to reshape is a tensor with ${t} dense values, but the requested shape has ${n}. inputShape=${r} outputShape=${e}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getSparseSegmentReductionNegativeSegmentIdsErrorMessage() {
  return "segment ids must be >= 0";
}
function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage() {
  return "segment ids are not increasing";
}
function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(r, e) {
  return `Segment id ${r} out of range [0, ${e}), possibly because segmentIds input is not sorted.`;
}
function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(r, e, t) {
  return `Bad: indices[${r}] == ${e} out of range [0, ${t})`;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function segOpComputeOptimalWindowSize(r, e) {
  let t = !1, n;
  for (r <= PARALLELIZE_THRESHOLD ? (n = r, t = !0) : n = nearestDivisor(r, Math.floor(Math.sqrt(r))); !t; )
    n > e || n === r ? t = !0 : n = nearestDivisor(r, n + 1);
  return n;
}
function computeOutShape(r, e, t) {
  const n = [], s = r.length;
  for (let a = 0; a < s; a++)
    a !== e ? n.push(r[a]) : n.push(t);
  return n;
}
function collectGatherOpShapeInfo(r, e, t, n) {
  const s = e.shape.length, a = r.shape.length;
  if (n !== 0 && (n < -s || n > s))
    throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${n}`);
  if (n < 0 && (n += s), n > a)
    throw new Error(`batchDims (${n}) must be less than rank(x) (
    ${a}).`);
  if (t < n)
    throw new Error(`batchDims (${n}) must be less than or equal to axis (${t}).`);
  for (let h = 0; h < n; ++h)
    if (r.shape[h] !== e.shape[h])
      throw new Error(`x.shape[${h}]: ${r.shape[h]} should be equal to indices.shape[${h}]: ${e.shape[h]}.`);
  const o = r.shape[t], u = [];
  let l = 1, f = 1, c = 1;
  for (let h = 0; h < n; ++h)
    u.push(r.shape[h]), l *= r.shape[h];
  for (let h = n; h < t; h++)
    u.push(r.shape[h]), f *= r.shape[h];
  for (let h = n; h < s; h++)
    u.push(e.shape[h]);
  for (let h = t + 1; h < a; h++)
    u.push(r.shape[h]), c *= r.shape[h];
  return { batchSize: l, sliceSize: c, outerSize: f, dimSize: o, outputShape: u };
}
const segment_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  collectGatherOpShapeInfo,
  computeOutShape,
  segOpComputeOptimalWindowSize
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fromUint8ToStringArray(r) {
  try {
    return r.map((e) => decodeString(e));
  } catch (e) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`);
  }
}
function fromStringArrayToUint8(r) {
  return r.map((e) => encodeString(e));
}
const backend_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ERF_A1,
  ERF_A2,
  ERF_A3,
  ERF_A4,
  ERF_A5,
  ERF_P,
  PARALLELIZE_THRESHOLD,
  get RowPartitionType() {
    return RowPartitionType$1;
  },
  SELU_SCALE,
  SELU_SCALEALPHA,
  applyActivation: applyActivation$1,
  assertAndGetBroadcastShape,
  assertAxesAreInnerMostDims,
  assertParamsConsistent,
  assignToTypedArray,
  axesAreInnerMostDims,
  calculateShapes,
  checkEinsumDimSizes,
  checkPadOnDimRoundingMode,
  combineLocations,
  combineRaggedTensorToTensorShapes,
  complexWithEvenIndex,
  complexWithOddIndex,
  computeConv2DInfo,
  computeConv3DInfo,
  computeDefaultPad,
  computeDilation2DInfo,
  computeOptimalWindowSize,
  computeOutAndReduceShapes,
  computeOutShape: computeOutShape$1,
  computePool2DInfo,
  computePool3DInfo,
  convertConv2DDataFormat,
  decodeEinsumEquation,
  eitherStridesOrDilationsAreOne,
  expandShapeToKeepDim,
  exponent,
  exponents,
  fromStringArrayToUint8,
  fromUint8ToStringArray,
  getAxesPermutation,
  getBroadcastDims: getBroadcastDims$1,
  getComplexWithIndex,
  getEinsumComputePath,
  getEinsumPermutation,
  getFusedBiasGradient,
  getFusedDyActivation,
  getImageCenter,
  getInnerMostAxes,
  getPermuted,
  getRaggedRank,
  getReductionAxes,
  getReshaped,
  getReshapedPermuted,
  getRowPartitionTypesHelper,
  getSliceBeginCoords,
  getSliceSize,
  getSparseFillEmptyRowsIndicesDenseShapeMismatch,
  getSparseFillEmptyRowsNegativeIndexErrorMessage,
  getSparseFillEmptyRowsOutOfRangeIndexErrorMessage,
  getSparseReshapeEmptyTensorZeroOutputDimErrorMessage,
  getSparseReshapeInputOutputMismatchErrorMessage,
  getSparseReshapeInputOutputMultipleErrorMessage,
  getSparseReshapeMultipleNegativeOneOutputDimErrorMessage,
  getSparseReshapeNegativeOutputDimErrorMessage,
  getSparseSegmentReductionIndicesOutOfRangeErrorMessage,
  getSparseSegmentReductionNegativeSegmentIdsErrorMessage,
  getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage,
  getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage,
  getUndoAxesPermutation,
  isIdentityPermutation,
  log: log$3,
  mergeRealAndImagArrays,
  prepareAndValidate,
  prepareSplitSize,
  segment_util,
  shouldFuse,
  slice_util,
  splitRealAndImagArrays,
  stridesOrDilationsArePositive,
  tupleValuesAreOne,
  upcastType,
  validateDefaultValueShape,
  validateInput: validateInput$1,
  validateUpdateShape,
  warn
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kernel_impls = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  nonMaxSuppressionV3Impl: nonMaxSuppressionV3Impl$2,
  nonMaxSuppressionV4Impl: nonMaxSuppressionV4Impl$2,
  nonMaxSuppressionV5Impl: nonMaxSuppressionV5Impl$2,
  whereImpl: whereImpl$2
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
registerOptimizers();
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const absGradConfig = {
  kernelName: Abs,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(r, step$2(cast$3(t, "float32"), -1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const acosGradConfig = {
  kernelName: Acos,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return {
      x: () => {
        const n = square$2(cast$3(t, "float32")), s = sqrt$2(sub$2(scalar(1), n));
        return neg$2(div$1(r, s));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const acoshGradConfig = {
  kernelName: Acosh,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return {
      x: () => {
        const n = sqrt$2(sub$2(square$2(cast$3(t, "float32")), 1));
        return div$1(r, n);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const addGradConfig = {
  kernelName: Add$1,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e, s = assertAndGetBroadcastShape(t.shape, n.shape);
    return { a: () => {
      let u = r;
      const l = getReductionAxes(t.shape, s);
      return l.length > 0 && (u = sum$2(u, l)), reshape$3(u, t.shape);
    }, b: () => {
      let u = r;
      const l = getReductionAxes(n.shape, s);
      return l.length > 0 && (u = sum$2(u, l)), reshape$3(u, n.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const addNGradConfig = {
  kernelName: AddN,
  saveAllInputs: !0,
  gradFunc: (r, e) => {
    const t = {};
    return e.forEach((n, s) => {
      t[s] = () => r.clone();
    }), t;
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const argMaxGradConfig = {
  kernelName: ArgMax,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => zerosLike$2(t) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const argMinGradConfig = {
  kernelName: ArgMin,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => zerosLike$2(t) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const asinGradConfig = {
  kernelName: Asin,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => div$1(r, sqrt$2(sub$2(scalar(1), square$2(cast$3(t, "float32"))))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const asinhGradConfig = {
  kernelName: Asinh,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return {
      x: () => {
        const n = sqrt$2(add$2(scalar(1), square$2(cast$3(t, "float32"))));
        return div$1(r, n);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const atan2GradConfig = {
  kernelName: Atan2,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e, s = assertAndGetBroadcastShape(t.shape, n.shape);
    return { a: () => {
      const u = add$2(square$2(t), square$2(n));
      let l = mul(r, div$1(n, u));
      const f = getReductionAxes(t.shape, s);
      return f.length > 0 && (l = sum$2(l, f)), reshape$3(l, t.shape);
    }, b: () => {
      const u = add$2(square$2(t), square$2(n));
      let l = neg$2(mul(r, div$1(t, u)));
      const f = getReductionAxes(n.shape, s);
      return f.length > 0 && (l = sum$2(l, f)), reshape$3(l, n.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const atanGradConfig = {
  kernelName: Atan,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => div$1(r, add$2(square$2(cast$3(t, "float32")), 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const atanhGradConfig = {
  kernelName: Atanh,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => div$1(r, sub$2(scalar(1), square$2(cast$3(t, "float32")))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool3dGrad_(r, e, t, n, s, a) {
  const o = convertToTensor(r, "dy", "avgPool3dGrad"), u = convertToTensor(e, "input", "avgPool3dGrad");
  let l = o, f = u, c = !1;
  u.rank === 4 && (c = !0, l = reshape$3(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]]), f = reshape$3(u, [
    1,
    u.shape[0],
    u.shape[1],
    u.shape[2],
    u.shape[3]
  ])), assert$1(l.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), assert$1(f.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${f.rank}.`), checkPadOnDimRoundingMode("avgPool3dGrad", s, a);
  const h = { dy: l, input: f }, d = { filterSize: t, strides: n, pad: s, dimRoundingMode: a }, m = ENGINE.runKernel(AvgPool3DGrad, h, d);
  return c ? reshape$3(m, [m.shape[1], m.shape[2], m.shape[3], m.shape[4]]) : m;
}
const avgPool3dGrad = /* @__PURE__ */ op({ avgPool3dGrad_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const avgPool3DGradConfig$2 = {
  kernelName: AvgPool3D,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const [n] = e, { filterSize: s, strides: a, pad: o, dimRoundingMode: u } = t;
    return {
      x: () => avgPool3dGrad(r, n, s, a, o, u)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPoolGrad_(r, e, t, n, s) {
  const a = convertToTensor(r, "dy", "avgPoolGrad"), o = convertToTensor(e, "input", "avgPoolGrad");
  assert$1(o.rank === a.rank, () => `Rank of input (${o.rank}) does not match rank of dy (${a.rank})`);
  let u = o, l = a, f = !1;
  o.rank === 3 && (f = !0, u = reshape$3(o, [1, o.shape[0], o.shape[1], o.shape[2]]), l = reshape$3(a, [1, a.shape[0], a.shape[1], a.shape[2]])), assert$1(l.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`), assert$1(u.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${u.rank}.`);
  const c = { dy: l, input: u }, h = { filterSize: t, strides: n, pad: s }, d = ENGINE.runKernel(AvgPoolGrad, c, h);
  return f ? reshape$3(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const avgPoolGrad$2 = /* @__PURE__ */ op({ avgPoolGrad_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const avgPoolGradConfig$2 = {
  kernelName: AvgPool,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const [n] = e, { filterSize: s, strides: a, pad: o } = t;
    return { x: () => avgPoolGrad$2(r, n, s, a, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const batchMatMulGradConfig = {
  kernelName: BatchMatMul,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e, t) => {
    const [n, s] = e, { transposeA: a, transposeB: o } = t;
    return !a && !o ? {
      a: () => matMul$1(r, s, !1, !0),
      b: () => matMul$1(n, r, !0, !1)
    } : !a && o ? {
      a: () => matMul$1(r, s, !1, !1),
      b: () => matMul$1(r, n, !0, !1)
    } : a && !o ? {
      a: () => matMul$1(s, r, !1, !0),
      b: () => matMul$1(n, r, !1, !1)
    } : {
      a: () => matMul$1(s, r, !0, !0),
      b: () => matMul$1(r, n, !0, !0)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const batchToSpaceNDGradConfig = {
  kernelName: BatchToSpaceND,
  gradFunc: (r, e, t) => {
    const { blockShape: n, crops: s } = t;
    return { x: () => spaceToBatchND$2(r, n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const broadcastToGradConfig = {
  kernelName: BroadcastTo,
  gradFunc: (r, e, t) => {
    const n = t, s = n.inputShape, a = n.shape, o = Array.from(a);
    for (let l = s.length - 1; l >= 0; l--)
      if (s[l] === a[l])
        o[l] = 1;
      else if (s[l] !== 1)
        throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);
    const u = [];
    for (let l = 0; l < o.length; l++)
      o[l] > 1 && u.push(l);
    return { x: () => sum$2(
      r,
      u,
      !0
      /* keepDims */
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const castGradConfig = {
  kernelName: Cast,
  gradFunc: (r) => ({ x: () => r.clone() })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ceilGradConfig = {
  kernelName: Ceil,
  gradFunc: (r) => ({ x: () => zerosLike$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const clipByValueGradConfig = {
  kernelName: ClipByValue,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const [n] = e, { clipValueMin: s, clipValueMax: a } = t;
    return {
      x: () => where(logicalAnd$2(greaterEqual$2(n, s), lessEqual$2(n, a)), r, zerosLike$2(r))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const complexAbsGradConfig = {
  kernelName: ComplexAbs,
  inputsToSave: ["x"],
  gradFunc: absGradConfig.gradFunc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const concatGradConfig = {
  kernelName: Concat,
  saveAllInputs: !0,
  gradFunc: (r, e, t) => {
    const n = e.map((l) => l.shape), { axis: s } = t, a = parseAxisParam(s, e[0].shape)[0], o = n.map((l) => l[a]);
    return split$2(r, o, a).map((l) => () => l);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const conv2DGradConfig = {
  kernelName: Conv2D$1,
  inputsToSave: ["x", "filter"],
  gradFunc: (r, e, t) => {
    const [n, s] = e, { dilations: a, strides: o, pad: u, dataFormat: l } = t;
    return assert$1(tupleValuesAreOne(a), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`), {
      x: () => conv2DBackpropInput$2(n.shape, r, s, o, u, l),
      filter: () => conv2DBackpropFilter$2(n, r, s.shape, o, u, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const conv2DBackpropInputGradConfig = {
  kernelName: Conv2DBackpropInput,
  inputsToSave: ["dy", "filter"],
  gradFunc: (r, e, t) => {
    const [n, s] = e, { strides: a, pad: o, dataFormat: u, dimRoundingMode: l } = t;
    return {
      dy: () => conv2d$3(r, s, a, o, u, 1, l),
      filter: () => conv2DBackpropFilter$2(r, n, s.shape, a, o, u, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3DBackpropFilter_(r, e, t, n, s) {
  let a = r;
  r.rank === 4 && (a = reshape$3(r, [1, r.shape[0], r.shape[1], r.shape[2], r.shape[3]]));
  let o = e;
  o.rank === 4 && (o = reshape$3(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]])), assert$1(a.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`), assert$1(o.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`), assert$1(t.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${t}.`), assert$1(a.shape[4] === t[3], () => `Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${t[3]}.`), assert$1(o.shape[4] === t[4], () => `Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${t[4]}).`);
  const u = { x: a, dy: o }, l = { strides: n, pad: s, filterShape: t };
  return ENGINE.runKernel(Conv3DBackpropFilterV2, u, l);
}
const conv3DBackpropFilter = /* @__PURE__ */ op({ conv3DBackpropFilter_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const conv3DGradConfig = {
  kernelName: Conv3D$1,
  inputsToSave: ["x", "filter"],
  gradFunc: (r, e, t) => {
    const { dilations: n, strides: s, pad: a } = t;
    assert$1(tupleValuesAreOne(n), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${n}'`);
    const [o, u] = e;
    return {
      x: () => conv3DBackpropInput$1(o.shape, r, u, s, a),
      filter: () => conv3DBackpropFilter(o, r, u.shape, s, a)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cosGradConfig = {
  kernelName: Cos,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(neg$2(sin$2(cast$3(t, "float32"))), r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const coshGradConfig = {
  kernelName: Cosh,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(sinh$2(cast$3(t, "float32")), r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cumsumGradConfig = {
  kernelName: Cumsum,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const [n] = e, { axis: s, exclusive: a, reverse: o } = t;
    return {
      x: () => {
        const u = getAxesPermutation([s], n.rank);
        let l = cumsum$2(r, s, a, !o);
        return u != null && (l = transpose$2(l, u)), l;
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const depthwiseConv2dNativeGradConfig = {
  kernelName: DepthwiseConv2dNative,
  inputsToSave: ["x", "filter"],
  gradFunc: (r, e, t) => {
    const { dilations: n, strides: s, pad: a, dimRoundingMode: o } = t, u = n ?? [1, 1];
    assert$1(tupleValuesAreOne(u), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${u}'`);
    const [l, f] = e;
    return assert$1(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`), assert$1(f.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${f.rank}.`), assert$1(l.shape[3] === f.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`), assert$1(eitherStridesOrDilationsAreOne(s, u), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${u}'.`), checkPadOnDimRoundingMode("depthwiseConv2d", a, o), {
      x: () => depthwiseConv2dNativeBackpropInput$2(l.shape, r, f, s, a, u, o),
      filter: () => depthwiseConv2dNativeBackpropFilter$2(l, r, f.shape, s, a, u, o)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dilation2dGradConfig = {
  kernelName: Dilation2D,
  inputsToSave: ["x", "filter"],
  gradFunc: (r, e, t) => {
    const [n, s] = e, a = { x: n, filter: s, dy: r }, o = { x: n, filter: s, dy: r };
    return {
      x: () => ENGINE.runKernel(Dilation2DBackpropInput, a, t),
      filter: () => ENGINE.runKernel(Dilation2DBackpropFilter, o, t)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eluGradConfig$2 = {
  kernelName: Elu$1,
  outputsToSave: [!0],
  gradFunc: (r, e) => {
    const [t] = e, n = { dy: r, y: t };
    return { x: () => ENGINE.runKernel(EluGrad, n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const erfGradConfig = {
  kernelName: Erf,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e, n = mul(exp$2(neg$2(square$2(t))), 2 / Math.sqrt(Math.PI));
    return { x: () => mul(r, n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const expGradConfig = {
  kernelName: Exp,
  outputsToSave: [!0],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(r, t) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const expandDimsGradConfig = {
  kernelName: ExpandDims,
  inputsToSave: ["input"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { input: () => reshape$3(r, t.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const expm1GradConfig = {
  kernelName: Expm1,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(r, exp$2(t)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const floorGradConfig = {
  kernelName: Floor,
  gradFunc: (r) => ({ x: () => zerosLike$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const floorDivGradConfig = {
  kernelName: FloorDiv,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e, s = assertAndGetBroadcastShape(t.shape, n.shape);
    return { a: () => {
      const u = div$1(r, cast$3(n, "float32")), l = getReductionAxes(t.shape, s);
      return l.length > 0 ? reshape$3(sum$2(u, l), t.shape) : u;
    }, b: () => {
      let u = mul(r, cast$3(t, "float32"));
      const l = getReductionAxes(n.shape, s);
      l.length > 0 && (u = reshape$3(sum$2(u, l), n.shape));
      const f = square$2(n);
      return neg$2(div$1(u, cast$3(f, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fusedBatchNormGradConfig = {
  kernelName: FusedBatchNorm,
  inputsToSave: ["x", "mean", "variance", "scale"],
  gradFunc: (r, e, t) => {
    const { varianceEpsilon: n } = t, [s, a, o, u] = e, l = u ?? scalar(1), f = getReductionAxes(a.shape, s.shape), c = [];
    if (a.rank === 1) {
      for (let T = 0; T < s.shape.length - 1; ++T)
        c.push(s.shape[T]);
      c.push(1);
    }
    const h = sub$2(s, a), d = mul(r, l), m = rsqrt$2(add$2(o, scalar(n))), g = mul(mul(mul(m, m), m), scalar(-0.5));
    return {
      x: () => a.rank === 1 ? reshape$3(mul(mul(r, tile$3(reshape$3(m, [1, 1, 1, a.shape[0]]), c)), l), s.shape) : reshape$3(mul(mul(r, m), l), s.shape),
      mean: () => {
        let T = mul(mul(m, scalar(-1)), d);
        return a.rank === 1 && (T = sum$2(T, f)), reshape$3(T, a.shape);
      },
      variance: () => {
        let T = mul(mul(g, h), d);
        return a.rank === 1 && (T = sum$2(T, f)), reshape$3(T, a.shape);
      },
      scale: () => {
        const T = mul(h, m);
        let _ = mul(r, T);
        return a.rank === 1 && (_ = sum$2(_, f)), reshape$3(_, a.shape);
      },
      offset: () => {
        let T = r;
        return a.rank === 1 && (T = sum$2(T, f)), reshape$3(T, a.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gatherGradConfig = {
  kernelName: GatherV2,
  inputsToSave: ["x", "indices"],
  gradFunc: (r, e, t) => {
    const [n, s] = e, { axis: a, batchDims: o } = t, u = parseAxisParam(a, n.shape)[0], l = (f, c, h) => () => {
      const d = f.shape, m = c.size, g = d.slice(0, u), y = g.length, b = d.slice(a, d.length).slice(1), v = b.length, w = arrayRange(0, y), I = arrayRange(y + 1, y + 1 + v), T = arrayConcat([
        g,
        [m],
        b
      ]), _ = reshape$3(h, T), F = reshape$3(c, [m]), O = arrayConcat([[y], w, I]), q = transpose$2(_, O);
      let V = unsortedSegmentSum$2(q, F, f.shape[u]);
      const H = getUndoAxesPermutation(O);
      return V = transpose$2(V, H), V;
    };
    if (o === 1) {
      const f = n.shape[0], c = n.split(f, 0);
      return { x: () => stack(c.map((m, g) => l(m, s.slice(g, 1), r.slice(g, 1))())).reshape(n.shape), indices: () => s };
    } else
      return { x: l(n, s, r), indices: () => s };
  }
};
function arrayRange(r, e) {
  const t = [];
  for (let n = r; n < e; ++n)
    t.push(n);
  return t;
}
function arrayConcat(r) {
  const e = [];
  for (let t = 0; t < r.length; ++t)
    for (let n = 0; n < r[t].length; ++n)
      e.push(r[t][n]);
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const greaterEqualGradConfig = {
  kernelName: GreaterEqual,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e;
    return { a: () => zerosLike$2(t), b: () => zerosLike$2(n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const identityGradConfig = {
  kernelName: Identity$1,
  gradFunc: (r) => ({ x: () => cast$3(r, "float32") })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const isFiniteGradConfig = {
  kernelName: IsFinite,
  gradFunc: (r) => ({ x: () => zerosLike$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const isInfGradConfig = {
  kernelName: IsInf,
  gradFunc: (r) => ({ x: () => zerosLike$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const isNanGradConfig = {
  kernelName: IsNan,
  gradFunc: (r) => ({ x: () => zerosLike$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const leakyReluGradConfig = {
  kernelName: LeakyRelu,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const [n] = e, { alpha: s } = t, a = greater$3(n, 0);
    return { x: () => where(a, r, mul(r, s)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const log1pGradConfig = {
  kernelName: Log1p,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => div$1(r, add$2(t, 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const logGradConfig = {
  kernelName: Log,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => div$1(r, cast$3(t, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const logSoftmaxGradConfig = {
  kernelName: LogSoftmax$1,
  inputsToSave: [],
  outputsToSave: [!0],
  gradFunc: (r, e, t) => {
    const [n] = e, { axis: s } = t;
    return {
      logits: () => {
        const o = exp$2(n);
        return sub$2(r, mul(sum$2(r, s, !0), o));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function localResponseNormalizationBackprop_(r, e, t, n = 5, s = 1, a = 1, o = 0.5) {
  const u = { x: r, y: e, dy: t }, l = { depthRadius: n, bias: s, alpha: a, beta: o };
  return ENGINE.runKernel(LRNGrad, u, l);
}
const localResponseNormalizationBackprop = op({ localResponseNormalizationBackprop_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lrnGradConfig = {
  kernelName: LRN,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (r, e, t) => {
    const [n, s] = e, { depthRadius: a, bias: o, alpha: u, beta: l } = t;
    return {
      x: () => localResponseNormalizationBackprop(n, s, r, a, o, u, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gradForMinAndMax(r, e, t, n) {
  return e.rank < t.rank && (e = reshape$3(e, expandShapeToKeepDim(e.shape, n))), r.rank < t.rank && (r = reshape$3(r, expandShapeToKeepDim(r.shape, n))), {
    x: () => mul(r, cast$3(equal$2(t, e), r.dtype))
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxGradConfig = {
  kernelName: Max,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (r, e, t) => {
    const n = t, { reductionIndices: s } = n, a = e[0], o = e[1], u = parseAxisParam(s, a.shape), l = gradForMinAndMax(r, o, a, u);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maximumGradConfig = {
  kernelName: Maximum$1,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e;
    return { a: () => mul(r, cast$3(greaterEqual$2(t, n), "float32")), b: () => mul(r, cast$3(less$3(t, n), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool3dGrad_(r, e, t, n, s, a, o) {
  const u = convertToTensor(r, "dy", "maxPool3dGrad"), l = convertToTensor(e, "input", "maxPool3dGrad"), f = convertToTensor(t, "output", "maxPool3dGrad");
  let c = u, h = l, d = f, m = !1;
  l.rank === 4 && (m = !0, c = reshape$3(u, [1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]]), h = reshape$3(l, [
    1,
    l.shape[0],
    l.shape[1],
    l.shape[2],
    l.shape[3]
  ]), d = reshape$3(f, [
    1,
    f.shape[0],
    f.shape[1],
    f.shape[2],
    f.shape[3]
  ])), assert$1(c.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`), assert$1(h.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`), assert$1(d.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`), checkPadOnDimRoundingMode("maxPool3dGrad", a, o);
  const g = { dy: c, input: h, output: d }, y = { filterSize: n, strides: s, pad: a, dimRoundingMode: o }, b = ENGINE.runKernel(MaxPool3DGrad, g, y);
  return m ? reshape$3(b, [b.shape[1], b.shape[2], b.shape[3], b.shape[4]]) : b;
}
const maxPool3dGrad = /* @__PURE__ */ op({ maxPool3dGrad_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxPool3DGradConfig$2 = {
  kernelName: MaxPool3D,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (r, e, t) => {
    const [n, s] = e, { filterSize: a, strides: o, pad: u, dimRoundingMode: l } = t;
    return {
      x: () => maxPool3dGrad(r, n, s, a, o, u, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPoolGrad_(r, e, t, n, s, a, o) {
  const u = convertToTensor(r, "dy", "maxPoolGrad"), l = convertToTensor(e, "input", "maxPoolGrad"), f = convertToTensor(t, "output", "maxPoolGrad");
  assert$1(l.rank === u.rank, () => `Rank of input (${l.rank}) does not match rank of dy (${u.rank})`), assert$1(u.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${u.rank}.`), assert$1(l.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`), checkPadOnDimRoundingMode("maxPoolGrad", a, o);
  const c = { dy: u, input: l, output: f }, h = { filterSize: n, strides: s, pad: a, dimRoundingMode: o };
  return ENGINE.runKernel(MaxPoolGrad, c, h);
}
const maxPoolGrad$2 = /* @__PURE__ */ op({ maxPoolGrad_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxPoolGradConfig$2 = {
  kernelName: MaxPool,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (r, e, t) => {
    const [n, s] = e, { filterSize: a, strides: o, pad: u } = t;
    return {
      x: () => maxPoolGrad$2(r, n, s, a, o, u)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const meanGradConfig = {
  kernelName: Mean,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const [n] = e, { axis: s } = t, a = parseAxisParam(s, n.shape), u = computeOutAndReduceShapes(n.shape, a)[1], l = sizeFromShape(u);
    return { x: () => {
      const c = n.shape.slice();
      a.forEach((m) => {
        c[m] = 1;
      });
      const h = reshape$3(r, c);
      return div$1(mul(h, ones$1(n.shape, "float32")), l);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const minGradConfig = {
  kernelName: Min,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (r, e, t) => {
    const n = t, { axis: s } = n, [a, o] = e, u = parseAxisParam(s, a.shape), l = gradForMinAndMax(r, o, a, u);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const minimumGradConfig = {
  kernelName: Minimum$1,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e;
    return { a: () => mul(r, cast$3(lessEqual$2(t, n), "float32")), b: () => mul(r, cast$3(greater$3(t, n), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mirrorPadGradConfig = {
  kernelName: MirrorPad,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const n = e[0], { paddings: s } = t, a = s.map((o) => o[0]);
    return { x: () => slice$2(r, a, n.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const modGradConfig = {
  kernelName: Mod,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e, s = assertAndGetBroadcastShape(t.shape, n.shape);
    return { a: () => {
      const u = getReductionAxes(t.shape, s);
      return u.length > 0 ? reshape$3(sum$2(r, u), t.shape) : r;
    }, b: () => {
      const u = mul(r, neg$2(floor$3(div$1(t, n)))), l = getReductionAxes(n.shape, s);
      return l.length > 0 ? reshape$3(sum$2(u, l), n.shape) : u;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const multiplyGradConfig = {
  kernelName: Multiply$1,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e, s = assertAndGetBroadcastShape(t.shape, n.shape);
    return { a: () => {
      const u = mul(r, cast$3(n, "float32")), l = getReductionAxes(t.shape, s);
      return l.length > 0 ? reshape$3(sum$2(u, l), t.shape) : u;
    }, b: () => {
      const u = mul(r, cast$3(t, "float32")), l = getReductionAxes(n.shape, s);
      return l.length > 0 ? reshape$3(sum$2(u, l), n.shape) : u;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const negGradConfig = {
  kernelName: Neg,
  gradFunc: (r) => ({ x: () => neg$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oneHotGradConfig = {
  kernelName: OneHot,
  inputsToSave: ["indices"],
  gradFunc: (r, e) => {
    const t = e[0];
    return { indices: () => zeros$2(t.shape, "float32") };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const onesLikeGradConfig = {
  kernelName: OnesLike,
  gradFunc: (r) => ({ x: () => zerosLike$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const packGradConfig = {
  kernelName: Pack,
  saveAllInputs: !0,
  gradFunc: (r, e, t) => {
    const { axis: n } = t;
    return unstack(r, n).map((a) => () => a);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const padV2GradConfig = {
  kernelName: PadV2,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const n = e[0], { paddings: s } = t, a = s.map((o) => o[0]);
    return { x: () => slice$2(r, a, n.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const powGradConfig = {
  kernelName: Pow,
  inputsToSave: ["a", "b"],
  outputsToSave: [!0],
  gradFunc: (r, e) => {
    const [t, n, s] = e, a = t, o = n, u = assertAndGetBroadcastShape(a.shape, o.shape);
    return { a: () => {
      const c = cast$3(o, "float32");
      let h = mul(r, mul(c, pow$3(a, sub$2(c, scalar(1)))));
      const d = getReductionAxes(a.shape, u);
      return d.length > 0 && (h = sum$2(h, d)), reshape$3(h, a.shape);
    }, b: () => {
      const c = greater$3(a, 0), h = where(c, log$2(a), zerosLike$2(a));
      let d = mul(r, mul(s, h));
      const m = getReductionAxes(o.shape, u);
      return m.length > 0 && (d = sum$2(d, m)), reshape$3(d, o.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const preluGradConfig = {
  kernelName: Prelu,
  inputsToSave: ["x", "alpha"],
  gradFunc: (r, e) => {
    const [t, n] = e, s = greater$3(t, 0);
    return {
      x: () => where(s, r, mul(r, n)),
      alpha: () => {
        let a = where(s, zerosLike$2(r), mul(r, t));
        const o = getReductionAxes(n.shape, r.shape);
        return o.length > 0 && (a = sum$2(a, o)), reshape$3(a, n.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function prodGradFn_(r, e, t) {
  const n = r.shape.slice();
  n[t] = 1;
  const s = reshape$3(e, n), a = cumprod$2(r, t, !0, !1), o = cumprod$2(r, t, !0, !0), u = mul(a, o);
  return mul(s, u);
}
function prodsGradFn_(r, e, t) {
  const n = r.shape.length, s = n - t.length, a = getAxesPermutation(t, n);
  let o = r;
  a != null && (o = transpose$2(r, a));
  const u = o.shape.slice(), f = u.splice(n - t.length, t.length).reduce((d, m) => d * m, 1);
  u.push(f);
  const c = o.reshape(u);
  let h = prodGradFn_(c, e, s);
  if (h = h.reshape(o.shape), a != null) {
    const d = getUndoAxesPermutation(a);
    h = transpose$2(h, d);
  }
  return h;
}
const prodGradConfig = {
  kernelName: Prod,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const [n] = e, { axis: s } = t;
    let a = [];
    return s == null ? a = n.shape.map((o, u) => u) : typeof s == "number" ? a = [s] : a = s, { x: () => prodsGradFn_(n, r, a) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const divGradConfig = {
  kernelName: RealDiv,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e, s = assertAndGetBroadcastShape(t.shape, n.shape);
    return { a: () => {
      const u = div$1(r, cast$3(n, "float32")), l = getReductionAxes(t.shape, s);
      return l.length > 0 ? reshape$3(sum$2(u, l), t.shape) : u;
    }, b: () => {
      let u = mul(r, cast$3(t, "float32"));
      const l = getReductionAxes(n.shape, s);
      l.length > 0 && (u = reshape$3(sum$2(u, l), n.shape));
      const f = square$2(n);
      return neg$2(div$1(u, cast$3(f, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const reciprocalGradConfig = {
  kernelName: Reciprocal,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => div$1(r, neg$2(square$2(t))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const relu6GradConfig = {
  kernelName: Relu6$1,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e, n = mul(lessEqual$2(t, 6), step$2(t));
    return { x: () => mul(r, cast$3(n, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const reluGradConfig = {
  kernelName: Relu$1,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(r, cast$3(step$2(t), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const reshapeGradConfig = {
  kernelName: Reshape$1,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => reshape$3(r, t.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const resizeBilinearGradConfig$2 = {
  kernelName: ResizeBilinear,
  inputsToSave: ["images"],
  gradFunc: (r, e, t) => {
    const [n] = e, s = { dy: r, images: n };
    return { images: () => (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      ENGINE.runKernel(ResizeBilinearGrad, s, t)
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const resizeNearestNeighborGradConfig$2 = {
  kernelName: ResizeNearestNeighbor,
  inputsToSave: ["images"],
  gradFunc: (r, e, t) => {
    const [n] = e, s = { dy: r, images: n };
    return { images: () => (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      ENGINE.runKernel(ResizeNearestNeighborGrad, s, t)
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const reverseGradConfig = {
  kernelName: Reverse,
  gradFunc: (r, e, t) => {
    const { dims: n } = t, s = parseAxisParam(n, r.shape);
    return { x: () => reverse$2(r, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const roundGradConfig = {
  kernelName: Round,
  gradFunc: (r) => ({ x: () => zerosLike$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rsqrtGradConfig = {
  kernelName: Rsqrt,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => neg$2(div$1(r, mul(pow$3(t, 1.5), 2))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const selectGradConfig = {
  kernelName: Select,
  inputsToSave: ["condition"],
  gradFunc: (r, e) => {
    const [t] = e;
    return {
      // TODO(julianoks): Return null for condition gradient
      // when backprop supports it.
      condition: () => cast$3(zerosLike$2(t), "float32"),
      t: () => mul(r, cast$3(t, r.dtype)),
      e: () => mul(r, cast$3(logicalNot$2(t), r.dtype))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const seluGradConfig = {
  kernelName: Selu$1,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return {
      x: () => {
        const n = greater$3(t, scalar(0)), s = scalar(SELU_SCALEALPHA), a = scalar(SELU_SCALE), o = mul(r, a), u = mul(mul(r, s), exp$2(cast$3(t, "float32")));
        return where(n, o, u);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sigmoidGradConfig = {
  kernelName: Sigmoid$1,
  outputsToSave: [!0],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(r, mul(t, sub$2(scalar(1), t))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const signGradConfig = {
  kernelName: Sign,
  gradFunc: (r) => ({ x: () => zerosLike$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sinGradConfig = {
  kernelName: Sin,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(cos$2(cast$3(t, "float32")), r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sinhGradConfig = {
  kernelName: Sinh,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(cosh$2(cast$3(t, "float32")), r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sliceGradConfig = {
  kernelName: Slice,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const [n] = e, { begin: s, size: a } = t, o = n.shape, [u, l] = parseSliceParams(n, s, a), f = [];
    for (let c = 0; c < r.rank; c++)
      f.push([u[c], o[c] - u[c] - l[c]]);
    return { x: () => pad(r, f) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const softmaxGradConfig = {
  kernelName: Softmax$2,
  outputsToSave: [!0],
  gradFunc: (r, e, t) => {
    const [n] = e, { dim: s } = t, a = !0, o = mul(r, n);
    return {
      logits: () => sub$2(o, mul(sum$2(o, [s], a), n))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const softplusGradConfig = {
  kernelName: Softplus$1,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(r, sigmoid$2(t)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const spaceToBatchNDGradConfig = {
  kernelName: SpaceToBatchND,
  gradFunc: (r, e, t) => {
    const { blockShape: n, paddings: s } = t;
    return { x: () => batchToSpaceND$2(r, n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const splitVGradConfig = {
  kernelName: SplitV,
  gradFunc: (r, e, t) => {
    const { axis: n } = t;
    return { x: () => concat$2(r, n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sqrtGradConfig = {
  kernelName: Sqrt,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => div$1(r, mul(sqrt$2(cast$3(t, "float32")), 2)) };
  }
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const squareGradConfig = {
  kernelName: Square,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(r, mul(cast$3(t, "float32"), 2)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const squaredDifferenceGradConfig = {
  kernelName: SquaredDifference,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e, s = scalar(2);
    return { a: () => mul(r, mul(s, sub$2(t, n))), b: () => mul(r, mul(s, sub$2(n, t))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const stepGradConfig = {
  kernelName: Step,
  gradFunc: (r) => ({ x: () => zerosLike$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const subGradConfig = {
  kernelName: Sub,
  inputsToSave: ["a", "b"],
  gradFunc: (r, e) => {
    const [t, n] = e, s = assertAndGetBroadcastShape(t.shape, n.shape);
    return { a: () => {
      let u = r;
      const l = getReductionAxes(t.shape, s);
      return l.length > 0 && (u = sum$2(u, l)), reshape$3(u, t.shape);
    }, b: () => {
      let u = r;
      const l = getReductionAxes(n.shape, s);
      return l.length > 0 && (u = sum$2(u, l)), reshape$3(neg$2(u), n.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sumGradConfig = {
  kernelName: Sum,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const [n] = e, s = n.shape.slice(), { axis: a } = t;
    parseAxisParam(a, n.shape).forEach((f) => {
      s[f] = 1;
    });
    const u = reshape$3(r, s), l = mul(u, ones$1(n.shape, "float32"));
    return { x: () => l };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tanGradConfig = {
  kernelName: Tan,
  inputsToSave: ["x"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => div$1(r, square$2(cos$2(t))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tanhGradConfig = {
  kernelName: Tanh$1,
  outputsToSave: [!0],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => mul(sub$2(scalar(1), square$2(t)), r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tileGradConfig = {
  kernelName: Tile,
  inputsToSave: ["x"],
  gradFunc: (r, e, t) => {
    const [n] = e, { reps: s } = t;
    return { x: () => {
      let o = zerosLike$2(n);
      if (n.rank === 1)
        for (let u = 0; u < s[0]; ++u)
          o = add$2(o, slice$2(r, [u * n.shape[0]], [n.shape[0]]));
      else if (n.rank === 2)
        for (let u = 0; u < s[0]; ++u)
          for (let l = 0; l < s[1]; ++l)
            o = add$2(o, slice$2(r, [u * n.shape[0], l * n.shape[1]], [
              n.shape[0],
              n.shape[1]
            ]));
      else if (n.rank === 3)
        for (let u = 0; u < s[0]; ++u)
          for (let l = 0; l < s[1]; ++l)
            for (let f = 0; f < s[2]; ++f)
              o = add$2(o, slice$2(r, [u * n.shape[0], l * n.shape[1], f * n.shape[2]], [n.shape[0], n.shape[1], n.shape[2]]));
      else if (n.rank === 4)
        for (let u = 0; u < s[0]; ++u)
          for (let l = 0; l < s[1]; ++l)
            for (let f = 0; f < s[2]; ++f)
              for (let c = 0; c < s[3]; ++c)
                o = add$2(o, slice$2(r, [
                  u * n.shape[0],
                  l * n.shape[1],
                  f * n.shape[2],
                  c * n.shape[3]
                ], [n.shape[0], n.shape[1], n.shape[2], n.shape[3]]));
      else
        throw new Error(`Gradient for tile operation is not implemented for rank-${n.rank} tensors yet.`);
      return o;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const transposeGradConfig = {
  kernelName: Transpose,
  gradFunc: (r, e, t) => {
    const n = t, { perm: s } = n, a = getUndoAxesPermutation(s);
    return { x: () => transpose$2(r, a) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const unpackGradConfig = {
  kernelName: Unpack,
  gradFunc: (r, e, t) => {
    const n = t, { axis: s } = n;
    return { value: () => stack(r, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const unsortedSegmentSumGradConfig = {
  kernelName: UnsortedSegmentSum,
  inputsToSave: ["segmentIds"],
  gradFunc: (r, e) => {
    const [t] = e;
    return { x: () => gatherDropNegatives(r, t) };
  }
};
function gatherDropNegatives(r, e) {
  const t = maximum$3(e, zerosLike$2(e)), n = gather$1(r, t);
  let s = greaterEqual$2(e, scalar(0, "int32"));
  const a = n.rank - s.rank;
  for (let u = 0; u < a; ++u)
    s = expandDims$3(s, u + 1);
  s = logicalAnd$2(s, ones$1(n.shape, "bool"));
  const o = zerosLike$2(n);
  return where(s, n, o);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zerosLikeGradConfig = {
  kernelName: ZerosLike,
  gradFunc: (r) => ({ x: () => zerosLike$2(r) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gradConfigs = [
  absGradConfig,
  acosGradConfig,
  acoshGradConfig,
  addGradConfig,
  addNGradConfig,
  argMaxGradConfig,
  argMinGradConfig,
  asinGradConfig,
  asinhGradConfig,
  atan2GradConfig,
  atanGradConfig,
  atanhGradConfig,
  avgPool3DGradConfig$2,
  avgPoolGradConfig$2,
  batchMatMulGradConfig,
  batchToSpaceNDGradConfig,
  broadcastToGradConfig,
  castGradConfig,
  ceilGradConfig,
  clipByValueGradConfig,
  complexAbsGradConfig,
  concatGradConfig,
  conv2DBackpropInputGradConfig,
  conv2DGradConfig,
  conv3DGradConfig,
  cosGradConfig,
  coshGradConfig,
  cumsumGradConfig,
  depthwiseConv2dNativeGradConfig,
  dilation2dGradConfig,
  divGradConfig,
  eluGradConfig$2,
  erfGradConfig,
  expGradConfig,
  expandDimsGradConfig,
  expm1GradConfig,
  floorDivGradConfig,
  floorGradConfig,
  fusedBatchNormGradConfig,
  gatherGradConfig,
  greaterEqualGradConfig,
  identityGradConfig,
  isFiniteGradConfig,
  isInfGradConfig,
  isNanGradConfig,
  leakyReluGradConfig,
  log1pGradConfig,
  logGradConfig,
  logSoftmaxGradConfig,
  lrnGradConfig,
  maxGradConfig,
  maxGradConfig,
  maximumGradConfig,
  maxPool3DGradConfig$2,
  maxPoolGradConfig$2,
  meanGradConfig,
  minGradConfig,
  minimumGradConfig,
  mirrorPadGradConfig,
  modGradConfig,
  multiplyGradConfig,
  negGradConfig,
  oneHotGradConfig,
  onesLikeGradConfig,
  packGradConfig,
  padV2GradConfig,
  padV2GradConfig,
  powGradConfig,
  preluGradConfig,
  prodGradConfig,
  reciprocalGradConfig,
  relu6GradConfig,
  reluGradConfig,
  reshapeGradConfig,
  resizeBilinearGradConfig$2,
  resizeNearestNeighborGradConfig$2,
  reverseGradConfig,
  roundGradConfig,
  rsqrtGradConfig,
  selectGradConfig,
  seluGradConfig,
  sigmoidGradConfig,
  signGradConfig,
  sinGradConfig,
  sinhGradConfig,
  sliceGradConfig,
  softmaxGradConfig,
  softplusGradConfig,
  spaceToBatchNDGradConfig,
  spaceToBatchNDGradConfig,
  splitVGradConfig,
  splitVGradConfig,
  sqrtGradConfig,
  squaredDifferenceGradConfig,
  squareGradConfig,
  stepGradConfig,
  subGradConfig,
  sumGradConfig,
  tanGradConfig,
  tanhGradConfig,
  tileGradConfig,
  transposeGradConfig,
  unpackGradConfig,
  unsortedSegmentSumGradConfig,
  zerosLikeGradConfig
];
for (const r of gradConfigs)
  registerGradient(r);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.abs = function() {
  return this.throwIfDisposed(), abs$3(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.acos = function() {
  return this.throwIfDisposed(), acos$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.acosh = function() {
  return this.throwIfDisposed(), acosh$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.add = function(r) {
  return this.throwIfDisposed(), add$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.all = function(r, e) {
  return this.throwIfDisposed(), all$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.any = function(r, e) {
  return this.throwIfDisposed(), any$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.argMax = function(r) {
  return this.throwIfDisposed(), argMax$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.argMin = function(r) {
  return this.throwIfDisposed(), argMin$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.asScalar = function() {
  return this.throwIfDisposed(), assert$1(this.size === 1, () => "The array must have only 1 element."), reshape$3(this, []);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.asType = function(r) {
  return this.throwIfDisposed(), cast$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.as1D = function() {
  return this.throwIfDisposed(), reshape$3(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.as2D = function(r, e) {
  return this.throwIfDisposed(), reshape$3(this, [r, e]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.as3D = function(r, e, t) {
  return this.throwIfDisposed(), reshape$3(this, [r, e, t]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.as4D = function(r, e, t, n) {
  return this.throwIfDisposed(), reshape$3(this, [r, e, t, n]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.as5D = function(r, e, t, n, s) {
  return this.throwIfDisposed(), reshape$3(this, [r, e, t, n, s]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.asin = function() {
  return this.throwIfDisposed(), asin$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.asinh = function() {
  return this.throwIfDisposed(), asinh$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.atan = function() {
  return this.throwIfDisposed(), atan$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.atan2 = function(r) {
  return this.throwIfDisposed(), atan2$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.atanh = function() {
  return this.throwIfDisposed(), atanh$2(this);
};
getGlobalTensorClass().prototype.avgPool = function(r, e, t, n) {
  return this.throwIfDisposed(), avgPool$2(this, r, e, t, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.batchToSpaceND = function(r, e) {
  return this.throwIfDisposed(), batchToSpaceND$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.batchNorm = function(r, e, t, n, s) {
  return this.throwIfDisposed(), batchNorm$2(this, r, e, t, n, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.broadcastTo = function(r) {
  return this.throwIfDisposed(), broadcastTo(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.cast = function(r) {
  return this.throwIfDisposed(), cast$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.ceil = function() {
  return this.throwIfDisposed(), ceil$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.clipByValue = function(r, e) {
  return this.throwIfDisposed(), clipByValue$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.concat = function(r, e) {
  return this.throwIfDisposed(), r instanceof Tensor && (r = [r]), concat$2([this, ...r], e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.conv1d = function(r, e, t, n, s, a) {
  return this.throwIfDisposed(), conv1d$1(this, r, e, t, n, s, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.conv2dTranspose = function(r, e, t, n, s) {
  return this.throwIfDisposed(), conv2dTranspose$1(this, r, e, t, n, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.conv2d = function(r, e, t, n, s, a) {
  return this.throwIfDisposed(), conv2d$3(this, r, e, t, n, s, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.cos = function() {
  return this.throwIfDisposed(), cos$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.cosh = function() {
  return this.throwIfDisposed(), cosh$2(this);
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.cumprod = function(r, e, t) {
  return this.throwIfDisposed(), cumprod$2(this, r, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.cumsum = function(r, e, t) {
  return this.throwIfDisposed(), cumsum$2(this, r, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.depthToSpace = function(r, e) {
  return this.throwIfDisposed(), depthToSpace$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.depthwiseConv2d = function(r, e, t, n, s, a) {
  return this.throwIfDisposed(), depthwiseConv2d$3(this, r, e, t, n, s, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.dilation2d = function(r, e, t, n, s) {
  return this.throwIfDisposed(), dilation2d(this, r, e, t, n, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.divNoNan = function(r) {
  return this.throwIfDisposed(), divNoNan(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.div = function(r) {
  return this.throwIfDisposed(), div$1(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.dot = function(r) {
  return this.throwIfDisposed(), dot$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.elu = function() {
  return this.throwIfDisposed(), elu$4(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.equal = function(r) {
  return this.throwIfDisposed(), equal$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.erf = function() {
  return this.throwIfDisposed(), erf$2(this);
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.euclideanNorm = function(r, e) {
  return this.throwIfDisposed(), euclideanNorm(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.exp = function() {
  return this.throwIfDisposed(), exp$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.expandDims = function(r) {
  return this.throwIfDisposed(), expandDims$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.expm1 = function() {
  return this.throwIfDisposed(), expm1$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.fft = function() {
  return this.throwIfDisposed(), fft$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.flatten = function() {
  return this.throwIfDisposed(), reshape$3(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.floor = function() {
  return this.throwIfDisposed(), floor$3(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.floorDiv = function(r) {
  return this.throwIfDisposed(), floorDiv$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.gather = function(r, e, t) {
  return this.throwIfDisposed(), gather$1(this, r, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.greaterEqual = function(r) {
  return this.throwIfDisposed(), greaterEqual$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.greater = function(r) {
  return this.throwIfDisposed(), greater$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.ifft = function() {
  return this.throwIfDisposed(), ifft$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.irfft = function() {
  return this.throwIfDisposed(), irfft(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.isFinite = function() {
  return this.throwIfDisposed(), isFinite$3(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.isInf = function() {
  return this.throwIfDisposed(), isInf$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.isNaN = function() {
  return this.throwIfDisposed(), isNaN$3(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.leakyRelu = function(r) {
  return this.throwIfDisposed(), leakyRelu$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.lessEqual = function(r) {
  return this.throwIfDisposed(), lessEqual$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.less = function(r) {
  return this.throwIfDisposed(), less$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.localResponseNormalization = function(r, e, t, n) {
  return this.throwIfDisposed(), localResponseNormalization(this, r, e, t, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.logSigmoid = function() {
  return this.throwIfDisposed(), logSigmoid(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.logSoftmax = function(r) {
  return this.throwIfDisposed(), logSoftmax(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.logSumExp = function(r, e) {
  return this.throwIfDisposed(), logSumExp(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.log = function() {
  return this.throwIfDisposed(), log$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.log1p = function() {
  return this.throwIfDisposed(), log1p$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.logicalAnd = function(r) {
  return this.throwIfDisposed(), logicalAnd$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.logicalNot = function() {
  return this.throwIfDisposed(), logicalNot$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.logicalOr = function(r) {
  return this.throwIfDisposed(), logicalOr$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.logicalXor = function(r) {
  return this.throwIfDisposed(), logicalXor(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.matMul = function(r, e, t) {
  return this.throwIfDisposed(), matMul$1(this, r, e, t);
};
getGlobalTensorClass().prototype.maxPool = function(r, e, t, n) {
  return this.throwIfDisposed(), maxPool$2(this, r, e, t, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.max = function(r, e) {
  return this.throwIfDisposed(), max$4(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.maximum = function(r) {
  return this.throwIfDisposed(), maximum$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.mean = function(r, e) {
  return this.throwIfDisposed(), mean$1(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.min = function(r, e) {
  return this.throwIfDisposed(), min$4(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.minimum = function(r) {
  return this.throwIfDisposed(), minimum$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.mirrorPad = function(r, e) {
  return this.throwIfDisposed(), mirrorPad$1(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.mod = function(r) {
  return this.throwIfDisposed(), mod$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.mul = function(r) {
  return this.throwIfDisposed(), mul(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.neg = function() {
  return this.throwIfDisposed(), neg$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.norm = function(r, e, t) {
  return this.throwIfDisposed(), norm(this, r, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.notEqual = function(r) {
  return this.throwIfDisposed(), notEqual$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.oneHot = function(r, e = 1, t = 0) {
  return this.throwIfDisposed(), oneHot$2(this, r, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.onesLike = function() {
  return this.throwIfDisposed(), onesLike$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.pad = function(r, e) {
  return this.throwIfDisposed(), pad(this, r, e);
};
getGlobalTensorClass().prototype.pool = function(r, e, t, n, s, a) {
  return this.throwIfDisposed(), pool$1(this, r, e, t, n, s, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.pow = function(r) {
  return this.throwIfDisposed(), pow$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.prelu = function(r) {
  return this.throwIfDisposed(), prelu$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.prod = function(r, e) {
  return this.throwIfDisposed(), prod$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.reciprocal = function() {
  return this.throwIfDisposed(), reciprocal$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.relu = function() {
  return this.throwIfDisposed(), relu$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.relu6 = function() {
  return this.throwIfDisposed(), relu6$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.reshapeAs = function(r) {
  return this.throwIfDisposed(), reshape$3(this, r.shape);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.reshape = function(r) {
  return this.throwIfDisposed(), reshape$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.resizeBilinear = function(r, e, t) {
  return this.throwIfDisposed(), resizeBilinear$3(this, r, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.resizeNearestNeighbor = function(r, e, t) {
  return this.throwIfDisposed(), resizeNearestNeighbor$2(this, r, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.reverse = function(r) {
  return this.throwIfDisposed(), reverse$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.rfft = function() {
  return this.throwIfDisposed(), rfft(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.round = function() {
  return this.throwIfDisposed(), round$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.rsqrt = function() {
  return this.throwIfDisposed(), rsqrt$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.selu = function() {
  return this.throwIfDisposed(), selu$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.separableConv2d = function(r, e, t, n, s, a) {
  return this.throwIfDisposed(), separableConv2d$1(this, r, e, t, n, s, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.sigmoid = function() {
  return this.throwIfDisposed(), sigmoid$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.sign = function() {
  return this.throwIfDisposed(), sign$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.sin = function() {
  return this.throwIfDisposed(), sin$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.sinh = function() {
  return this.throwIfDisposed(), sinh$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.slice = function(r, e) {
  return this.throwIfDisposed(), slice$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.softmax = function(r) {
  return this.throwIfDisposed(), softmax$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.softplus = function() {
  return this.throwIfDisposed(), softplus$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.spaceToBatchND = function(r, e) {
  return this.throwIfDisposed(), spaceToBatchND$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.split = function(r, e) {
  return this.throwIfDisposed(), split$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.sqrt = function() {
  return this.throwIfDisposed(), sqrt$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.square = function() {
  return this.throwIfDisposed(), square$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.squaredDifference = function(r) {
  return this.throwIfDisposed(), squaredDifference$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.squeeze = function(r) {
  return this.throwIfDisposed(), squeeze(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.stack = function(r, e) {
  this.throwIfDisposed();
  const t = r instanceof Tensor ? [this, r] : [this, ...r];
  return stack(t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.step = function(r) {
  return this.throwIfDisposed(), step$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.stridedSlice = function(r, e, t, n, s, a, o, u) {
  return this.throwIfDisposed(), stridedSlice$2(this, r, e, t, n, s, a, o, u);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.sub = function(r) {
  return this.throwIfDisposed(), sub$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.sum = function(r, e) {
  return this.throwIfDisposed(), sum$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.tan = function() {
  return this.throwIfDisposed(), tan$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.tanh = function() {
  return this.throwIfDisposed(), tanh$2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.tile = function(r) {
  return this.throwIfDisposed(), tile$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.toBool = function() {
  return this.throwIfDisposed(), cast$3(this, "bool");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.toFloat = function() {
  return this.throwIfDisposed(), cast$3(this, "float32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.toInt = function() {
  return this.throwIfDisposed(), cast$3(this, "int32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.topk = function(r, e) {
  return this.throwIfDisposed(), topk(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.transpose = function(r) {
  return this.throwIfDisposed(), transpose$2(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.unique = function(r) {
  return this.throwIfDisposed(), unique$3(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.unsortedSegmentSum = function(r, e) {
  return this.throwIfDisposed(), unsortedSegmentSum$2(this, r, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.unstack = function(r) {
  return this.throwIfDisposed(), unstack(this, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.where = function(r, e) {
  return this.throwIfDisposed(), where(r, this, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.zerosLike = function() {
  return this.throwIfDisposed(), zerosLike$2(this);
};
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class AttributeError extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, AttributeError.prototype);
  }
}
class RuntimeError extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, RuntimeError.prototype);
  }
}
class ValueError extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, ValueError.prototype);
  }
}
class NotImplementedError extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, NotImplementedError.prototype);
  }
}
class AssertionError extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, AssertionError.prototype);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class LruCache {
  constructor(e) {
    this.maxEntries = e || 100, this.cache = /* @__PURE__ */ new Map();
  }
  /**
   * Get the entry for the key and mark it as used recently.
   */
  get(e) {
    let t;
    return this.cache.has(e) && (t = this.cache.get(e), this.cache.delete(e), this.cache.set(e, t)), t;
  }
  /**
   * Put the entry into the cache. If the key already existed, mark the key as
   * used recently.
   */
  put(e, t) {
    if (this.cache.has(e))
      this.cache.delete(e);
    else if (this.cache.size >= this.maxEntries) {
      const n = this.cache.keys().next().value;
      this.cache.delete(n);
    }
    this.cache.set(e, t);
  }
  /**
   * Get the MaxEntries of the cache.
   */
  getMaxEntries() {
    return this.maxEntries;
  }
  /**
   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce
   * entries in the cache.
   */
  setMaxEntries(e) {
    if (e < 0)
      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);
    if (this.maxEntries > e)
      for (let t = 0; t < this.maxEntries - e; t++) {
        const n = this.cache.keys().next().value;
        this.cache.delete(n);
      }
    this.maxEntries = e;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function pyListRepeat(r, e) {
  if (Array.isArray(r)) {
    let t = [];
    for (let n = 0; n < e; n++)
      t = t.concat(r);
    return t;
  } else {
    const t = new Array(e);
    return t.fill(r), t;
  }
}
function assert(r, e) {
  if (!r)
    throw new AssertionError(e);
}
function count(r, e) {
  let t = 0;
  for (const n of r)
    n === e && t++;
  return t;
}
function singletonOrArray(r) {
  return r.length === 1 ? r[0] : r;
}
function toList(r) {
  return Array.isArray(r) ? r : [r];
}
function toSnakeCase(r) {
  const t = r.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return t[0] !== "_" ? t : "private" + t;
}
function toCamelCase(r) {
  return r.length <= 1 || r.indexOf("_") === -1 ? r : r.replace(/[_]+(\w|$)/g, (e, t) => t.toUpperCase());
}
let _GLOBAL_CUSTOM_OBJECTS = {};
function serializeKerasObject(r) {
  if (r == null)
    return null;
  const e = {};
  return e.className = r.getClassName(), e.config = r.getConfig(), e;
}
function convertNDArrayScalarsInConfig(r) {
  if (!(r == null || typeof r != "object"))
    if (Array.isArray(r))
      r.forEach((e) => convertNDArrayScalarsInConfig(e));
    else {
      const e = Object.keys(r);
      for (const t of e) {
        const n = r[t];
        n != null && typeof n == "object" && (!Array.isArray(n) && n.type === "ndarray" && typeof n.value == "number" ? r[t] = n.value : convertNDArrayScalarsInConfig(n));
      }
    }
}
function deserializeKerasObject(r, e = {}, t = {}, n = "object", s = !1) {
  if (typeof r == "string") {
    const a = r;
    let o;
    if (a in t)
      o = t[a];
    else if (a in _GLOBAL_CUSTOM_OBJECTS)
      o = _GLOBAL_CUSTOM_OBJECTS[a];
    else if (o = e[a], o == null)
      throw new ValueError(`Unknown ${n}: ${r}. This may be due to one of the following reasons:
1. The ${n} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${n} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return o;
  } else {
    const a = r;
    if (a.className == null || a.config == null)
      throw new ValueError(`${n}: Improper config format: ${JSON.stringify(a)}.
'className' and 'config' must set.`);
    const o = a.className;
    let u, l;
    if (o in t ? [u, l] = t[o] : o in _GLOBAL_CUSTOM_OBJECTS ? [u, l] = _GLOBAL_CUSTOM_OBJECTS.className : o in e && ([u, l] = e[o]), u == null)
      throw new ValueError(`Unknown ${n}: ${o}. This may be due to one of the following reasons:
1. The ${n} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${n} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (l != null) {
      const f = {};
      for (const m of Object.keys(_GLOBAL_CUSTOM_OBJECTS))
        f[m] = _GLOBAL_CUSTOM_OBJECTS[m];
      for (const m of Object.keys(t))
        f[m] = t[m];
      const c = a.config;
      c.customObjects = f;
      const h = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);
      for (const m of Object.keys(t))
        _GLOBAL_CUSTOM_OBJECTS[m] = t[m];
      convertNDArrayScalarsInConfig(a.config);
      const d = l(u, a.config, t, s);
      return _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, h), d;
    } else {
      const f = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);
      for (const h of Object.keys(t))
        _GLOBAL_CUSTOM_OBJECTS[h] = t[h];
      const c = new u(a.config);
      return _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, f), c;
    }
  }
}
function numberCompare(r, e) {
  return r < e ? -1 : r > e ? 1 : 0;
}
function reverseNumberCompare(r, e) {
  return -1 * numberCompare(r, e);
}
function unique$2(r) {
  if (r == null)
    return r;
  const e = [];
  for (const t of r)
    e.indexOf(t) === -1 && e.push(t);
  return e;
}
function isObjectEmpty(r) {
  if (r == null)
    throw new ValueError(`Invalid value in obj: ${JSON.stringify(r)}`);
  for (const e in r)
    if (r.hasOwnProperty(e))
      return !1;
  return !0;
}
function checkStringTypeUnionValue(r, e, t) {
  if (t != null && r.indexOf(t) < 0)
    throw new ValueError(`${t} is not a valid ${e}.  Valid values are ${r} or null/undefined.`);
}
function checkArrayTypeAndLength(r, e, t = 0, n = 1 / 0) {
  return assert(t >= 0), assert(n >= t), Array.isArray(r) && r.length >= t && r.length <= n && r.every((s) => typeof s === e);
}
function assertPositiveInteger(r, e) {
  Array.isArray(r) ? (assert$1(r.length > 0, () => `${e} is unexpectedly an empty array.`), r.forEach((t, n) => assertPositiveInteger(t, `element ${n + 1} of ${e}`))) : assert$1(Number.isInteger(r) && r > 0, () => `Expected ${e} to be a positive integer, but got ${formatAsFriendlyString(r)}.`);
}
function formatAsFriendlyString(r) {
  return r === null ? "null" : Array.isArray(r) ? "[" + r.map((e) => formatAsFriendlyString(e)).join(",") + "]" : typeof r == "string" ? `"${r}"` : `${r}`;
}
function debounce(r, e, t) {
  let n = t != null ? t() : now(), s;
  return (...o) => {
    const u = t != null ? t() : now();
    return u - n < e || (n = u, s = r(...o)), s;
  };
}
function mapActivationToFusedKernel(r) {
  return r === "relu" ? "relu" : r === "linear" ? "linear" : r === "elu" ? "elu" : null;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let _nextUniqueTensorId = 0;
function getNextUniqueTensorId() {
  return _nextUniqueTensorId++;
}
const _uidPrefixes = {};
function getUid(r = "") {
  return r in _uidPrefixes || (_uidPrefixes[r] = 0), _uidPrefixes[r] += 1, r + _uidPrefixes[r].toString();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const VALID_DATA_FORMAT_VALUES = ["channelsFirst", "channelsLast"], VALID_INTERPOLATION_FORMAT_VALUES = ["nearest", "bilinear"], VALID_PADDING_MODE_VALUES = ["valid", "same", "causal"], VALID_POOL_MODE_VALUES = ["max", "avg"], VALID_BIDIRECTIONAL_MERGE_MODES = ["sum", "mul", "concat", "ave"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const nameMap = /* @__PURE__ */ new Map();
function checkDataFormat(r) {
  checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, "DataFormat", r);
}
function checkInterpolationFormat(r) {
  checkStringTypeUnionValue(VALID_INTERPOLATION_FORMAT_VALUES, "InterpolationFormat", r);
}
function checkPaddingMode(r) {
  checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, "PaddingMode", r);
}
function checkPoolMode(r) {
  checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, "PoolMode", r);
}
const _nameScopeStack = [], _nameScopeDivider = "/";
function nameScope(r, e) {
  _nameScopeStack.push(r);
  try {
    const t = e();
    return _nameScopeStack.pop(), t;
  } catch (t) {
    throw _nameScopeStack.pop(), t;
  }
}
function currentNameScopePrefix() {
  return _nameScopeStack.length === 0 ? "" : _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;
}
function getScopedTensorName(r) {
  if (!isValidTensorName(r))
    throw new Error("Not a valid tensor name: '" + r + "'");
  return currentNameScopePrefix() + r;
}
function getUniqueTensorName(r) {
  if (!isValidTensorName(r))
    throw new Error("Not a valid tensor name: '" + r + "'");
  nameMap.has(r) || nameMap.set(r, 0);
  const e = nameMap.get(r);
  if (nameMap.set(r, nameMap.get(r) + 1), e > 0) {
    const t = `${r}_${e}`;
    return nameMap.set(t, 1), t;
  } else
    return r;
}
const tensorNameRegex = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function isValidTensorName(r) {
  return !!r.match(tensorNameRegex);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function isInteger(r) {
  return r === parseInt(r.toString(), 10);
}
function arrayProd(r, e, t) {
  e == null && (e = 0), t == null && (t = r.length);
  let n = 1;
  for (let s = e; s < t; ++s)
    n *= r[s];
  return n;
}
function min$2(r) {
  if (r.length === 0)
    return Number.NaN;
  let e = Number.POSITIVE_INFINITY;
  for (let t = 0; t < r.length; t++) {
    const n = r[t];
    n < e && (e = n);
  }
  return e;
}
function max$2(r) {
  if (r.length === 0)
    return Number.NaN;
  let e = Number.NEGATIVE_INFINITY;
  for (let t = 0; t < r.length; t++) {
    const n = r[t];
    n > e && (e = n);
  }
  return e;
}
function range$2(r, e) {
  if (e < r)
    throw new ValueError(`end (${e}) < begin (${r}) is forbidden.`);
  const t = [];
  for (let n = r; n < e; ++n)
    t.push(n);
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let _epsilon;
function epsilon$1() {
  return _epsilon == null && (_epsilon = backend().epsilon()), _epsilon;
}
function imageDataFormat() {
  return "channelsLast";
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function cast$2(r, e) {
  return cast$3(r, e);
}
function expandDims$2(r, e = -1) {
  const t = r.shape.slice();
  return e < 0 && (e = t.length + e + 1), t.splice(e, 0, 1), reshape$3(r, t);
}
function repeat(r, e) {
  return tidy(() => {
    if (r.shape.length !== 2)
      throw new ValueError(`repeat() expects a rank-2 tensor, but received a rank-${r.shape.length} tensor.`);
    const t = expandDims$2(r, 1);
    return tile$2(t, [1, e, 1]);
  });
}
function flatten$1(r) {
  const e = [arrayProd(r.shape)];
  return reshape$3(r, e);
}
function batchFlatten(r) {
  if (r.rank <= 1)
    throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${r.rank}.`);
  const e = [r.shape[0], arrayProd(r.shape, 1)];
  return reshape$3(r, e);
}
function sliceAlongFirstAxis(r, e, t) {
  return tidy(() => {
    switch (r.rank) {
      case 1:
        return slice1d(r, e, t);
      case 2:
        return slice2d(r, [e, 0], [t, r.shape[1]]);
      case 3:
        return slice3d(r, [e, 0, 0], [t, r.shape[1], r.shape[2]]);
      case 4:
        return slice4d(r, [e, 0, 0, 0], [t, r.shape[1], r.shape[2], r.shape[3]]);
      case 5:
        return slice$2(r, [e, 0, 0, 0, 0], [
          t,
          r.shape[1],
          r.shape[2],
          r.shape[3],
          r.shape[4]
        ]);
      case 6:
        return slice$2(r, [e, 0, 0, 0, 0, 0], [
          t,
          r.shape[1],
          r.shape[2],
          r.shape[3],
          r.shape[4],
          r.shape[5]
        ]);
      default:
        throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`);
    }
  });
}
function sliceAlongLastAxis(r, e, t) {
  return tidy(() => {
    switch (r.rank) {
      case 1:
        return slice1d(r, e, t);
      case 2:
        return slice2d(r, [0, e], [r.shape[0], t]);
      case 3:
        return slice3d(r, [0, 0, e], [r.shape[0], r.shape[1], t]);
      case 4:
        return slice4d(r, [0, 0, 0, e], [r.shape[0], r.shape[1], r.shape[2], t]);
      default:
        throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`);
    }
  });
}
function sliceAlongAxis(r, e, t, n) {
  return tidy(() => {
    switch (r.rank) {
      case 1:
        return slice1d(r, e, t);
      case 2:
        switch (n) {
          case 1:
            return sliceAlongFirstAxis(r, e, t);
          case 2:
            return sliceAlongLastAxis(r, e, t);
          default:
            throw new ValueError(`The axis is not within the rank of the tensor ${n}`);
        }
      case 3:
        switch (n) {
          case 1:
            return sliceAlongFirstAxis(r, e, t);
          case 2:
            return slice3d(r, [0, e, 0], [r.shape[0], t, r.shape[2]]);
          case 3:
            return sliceAlongLastAxis(r, e, t);
          default:
            throw new ValueError(`The axis is not within the rank of the tensor ${n}`);
        }
      case 4:
        switch (n) {
          case 1:
            return sliceAlongFirstAxis(r, e, t);
          case 2:
            return slice4d(r, [0, e, 0, 0], [r.shape[0], t, r.shape[2], r.shape[3]]);
          case 3:
            return slice4d(r, [0, 0, e, 0], [r.shape[0], r.shape[1], t, r.shape[3]]);
          case 4:
            return sliceAlongLastAxis(r, e, t);
          default:
            throw new ValueError(`The axis is not within the rank of the tensor ${n}`);
        }
      default:
        throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`);
    }
  });
}
function concatenate$1(r, e = -1) {
  let t;
  return e < 0 && (t = r[0].rank, t !== 0 ? e = t : e = 0), e === r[0].rank && (e = -1), concat$2(r, e);
}
function concatAlongFirstAxis(r, e) {
  switch (r.rank) {
    case 1:
      return concat1d([r, e]);
    case 2:
      return concat2d([r, e], 0);
    case 3:
      return concat3d([r, e], 0);
    case 4:
      return concat4d([r, e], 0);
    default:
      throw new ValueError(`concatAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`);
  }
}
function tile$2(r, e) {
  if (Array.isArray(e) || (e = [e]), r.rank !== e.length)
    throw new ValueError(`The length of input n (${e.length}) does not match the number of dimensions in input x (${r.rank})`);
  return tile$3(r, e);
}
function randomNormal$1(r, e = 0, t = 1, n, s) {
  return randomNormal$2(r, e, t, n, s);
}
function dot$1(r, e, t, n) {
  if (r.rank < 2 || e.rank < 2)
    throw new NotImplementedError(`dot requires both inputs to be rank >= 2 but got x shape = ${r.shape} and y shape = ${e.shape}`);
  if (e.rank >= 3) {
    const s = r.shape.slice(-1)[0], a = e.shape.slice(-2)[0];
    if (s !== a)
      throw new NotImplementedError(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${r.shape} and  y shape = ${e.shape}`);
  }
  if (r.rank === 2 && e.rank === 2)
    return matMul({
      a: r,
      b: e,
      transposeA: !1,
      transposeB: !1,
      bias: n ? reshapeBias(r.rank, n, imageDataFormat()) : null,
      activation: t
    });
  {
    const s = r.shape.slice(), a = s.pop();
    r = reshape$3(r, [-1, a]);
    const o = e.shape.slice(), u = o.pop(), l = o.pop(), f = [...o, u], c = Array.from({ length: e.rank }, (g, y) => y === 0 ? e.rank - 2 : y <= e.rank - 2 ? y - 1 : y);
    e = reshape$3(transpose$2(e, c), [l, -1]);
    const h = [...s, ...f];
    return reshape$3(matMul({
      a: r,
      b: e,
      transposeA: !1,
      transposeB: !1,
      bias: n ? reshapeBias(r.rank, n, imageDataFormat()) : null,
      activation: t
    }), h);
  }
}
function gather(r, e, t) {
  return tidy(() => (Array.isArray(e) ? e = tensor1d(e, "int32") : e = cast$3(e, "int32"), gather$1(r, e, t)));
}
function square$1(r) {
  return mul(r, r);
}
function reshapeBias(r, e, t) {
  const n = e.shape;
  if (e.rank !== 1 && e.rank !== r)
    throw new ValueError(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${r}`);
  if (r === 5) {
    if (t === "channelsFirst")
      return n.length === 1 ? reshape$3(e, [1, n[0], 1, 1, 1]) : reshape$3(e, [1, n[3], n[0], n[1], n[2]]);
    if (t === "channelsLast")
      return n.length === 1 ? reshape$3(e, [1, 1, 1, 1, n[0]]) : reshape$3(e, [1].concat(n));
  } else if (r === 4) {
    if (t === "channelsFirst")
      return n.length === 1 ? reshape$3(e, [1, n[0], 1, 1]) : reshape$3(e, [1, n[2], n[0], n[1]]);
    if (t === "channelsLast")
      return n.length === 1 ? reshape$3(e, [1, 1, 1, n[0]]) : reshape$3(e, [1].concat(n));
  } else if (r === 3) {
    if (t === "channelsFirst")
      return n.length === 1 ? reshape$3(e, [1, n[0], 1]) : reshape$3(e, [1, n[1], n[0]]);
    if (t === "channelsLast")
      return n.length === 1 ? reshape$3(e, [1, 1, n[0]]) : reshape$3(e, [1].concat(n));
  } else if (r < 3)
    return e;
  throw new ValueError(`Unsupported input rank by biasAdd: ${e.rank}`);
}
function biasAdd(r, e, t) {
  return tidy(() => (t == null && (t = imageDataFormat()), checkDataFormat(t), add$2(r, reshapeBias(r.rank, e, t))));
}
function elu$3(r, e = 1) {
  if (e !== 1)
    throw new NotImplementedError(`Support for alpha values other than 1 (${e}) is not implemented yet.`);
  return elu$4(r);
}
function softsign(r) {
  return tidy(() => div$1(r, add$2(abs$3(r), 1)));
}
function dropout$1(r, e, t, n) {
  return tidy(() => dropout$2(r, e, t, n));
}
function hardSigmoid(r) {
  return tidy(() => {
    const e = add$2(0.5, mul(0.2, r));
    return clipByValue$2(e, 0, 1);
  });
}
function inTrainPhase(r, e, t = !1) {
  return t ? r() : e();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const VALID_FAN_MODE_VALUES = ["fanIn", "fanOut", "fanAvg"], VALID_DISTRIBUTION_VALUES = ["normal", "uniform", "truncatedNormal"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function checkFanMode(r) {
  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, "FanMode", r);
}
function checkDistribution(r) {
  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, "Distribution", r);
}
class Initializer extends Serializable {
  fromConfigUsesCustomObjects() {
    return !1;
  }
  getConfig() {
    return {};
  }
}
class Zeros extends Initializer {
  apply(e, t) {
    return zeros$2(e, t);
  }
}
Zeros.className = "Zeros";
registerClass(Zeros);
class Ones extends Initializer {
  apply(e, t) {
    return ones$1(e, t);
  }
}
Ones.className = "Ones";
registerClass(Ones);
class Constant extends Initializer {
  constructor(e) {
    if (super(), typeof e != "object")
      throw new ValueError(`Expected argument of type ConstantConfig but got ${e}`);
    if (e.value === void 0)
      throw new ValueError(`config must have value set but got ${e}`);
    this.value = e.value;
  }
  apply(e, t) {
    return tidy(() => mul(scalar(this.value), ones$1(e, t)));
  }
  getConfig() {
    return {
      value: this.value
    };
  }
}
Constant.className = "Constant";
registerClass(Constant);
class RandomUniform extends Initializer {
  constructor(e) {
    super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = e.minval || this.DEFAULT_MINVAL, this.maxval = e.maxval || this.DEFAULT_MAXVAL, this.seed = e.seed;
  }
  apply(e, t) {
    return randomUniform$1(e, this.minval, this.maxval, t, this.seed);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
}
RandomUniform.className = "RandomUniform";
registerClass(RandomUniform);
class RandomNormal extends Initializer {
  constructor(e) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
  }
  apply(e, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32")
      throw new NotImplementedError(`randomNormal does not support dType ${t}.`);
    return randomNormal$1(e, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
RandomNormal.className = "RandomNormal";
registerClass(RandomNormal);
class TruncatedNormal extends Initializer {
  constructor(e) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
  }
  apply(e, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32")
      throw new NotImplementedError(`truncatedNormal does not support dType ${t}.`);
    return truncatedNormal$1(e, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
TruncatedNormal.className = "TruncatedNormal";
registerClass(TruncatedNormal);
class Identity extends Initializer {
  constructor(e) {
    super(), this.gain = e.gain != null ? e.gain : 1;
  }
  apply(e, t) {
    return tidy(() => {
      if (e.length !== 2 || e[0] !== e[1])
        throw new ValueError("Identity matrix initializer can only be used for 2D square matrices.");
      return mul(this.gain, eye(e[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
}
Identity.className = "Identity";
registerClass(Identity);
function computeFans(r, e = "channelsLast") {
  let t, n;
  if (checkDataFormat(e), r.length === 2)
    t = r[0], n = r[1];
  else if ([3, 4, 5].indexOf(r.length) !== -1) {
    if (e === "channelsFirst") {
      const s = arrayProd(r, 2);
      t = r[1] * s, n = r[0] * s;
    } else if (e === "channelsLast") {
      const s = arrayProd(r, 0, r.length - 2);
      t = r[r.length - 2] * s, n = r[r.length - 1] * s;
    }
  } else {
    const s = arrayProd(r);
    t = Math.sqrt(s), n = Math.sqrt(s);
  }
  return [t, n];
}
class VarianceScaling extends Initializer {
  /**
   * Constructor of VarianceScaling.
   * @throws ValueError for invalid value in scale.
   */
  constructor(e) {
    if (super(), e.scale < 0)
      throw new ValueError(`scale must be a positive float. Got: ${e.scale}`);
    this.scale = e.scale == null ? 1 : e.scale, this.mode = e.mode == null ? "fanIn" : e.mode, checkFanMode(this.mode), this.distribution = e.distribution == null ? "normal" : e.distribution, checkDistribution(this.distribution), this.seed = e.seed;
  }
  apply(e, t) {
    const n = computeFans(e), s = n[0], a = n[1];
    let o = this.scale;
    if (this.mode === "fanIn" ? o /= Math.max(1, s) : this.mode === "fanOut" ? o /= Math.max(1, a) : o /= Math.max(1, (s + a) / 2), this.distribution === "normal") {
      const u = Math.sqrt(o);
      if (t = t || "float32", t !== "float32" && t !== "int32")
        throw new NotImplementedError(`${this.getClassName()} does not support dType ${t}.`);
      return truncatedNormal$1(e, 0, u, t, this.seed);
    } else {
      const u = Math.sqrt(3 * o);
      return randomUniform$1(e, -u, u, t, this.seed);
    }
  }
  getConfig() {
    return {
      scale: this.scale,
      mode: this.mode,
      distribution: this.distribution,
      seed: this.seed
    };
  }
}
VarianceScaling.className = "VarianceScaling";
registerClass(VarianceScaling);
class GlorotUniform extends VarianceScaling {
  /**
   * Constructor of GlorotUniform
   * @param scale
   * @param mode
   * @param distribution
   * @param seed
   */
  constructor(e) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "uniform",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return VarianceScaling.className;
  }
}
GlorotUniform.className = "GlorotUniform";
registerClass(GlorotUniform);
class GlorotNormal extends VarianceScaling {
  /**
   * Constructor of GlorotNormal.
   * @param scale
   * @param mode
   * @param distribution
   * @param seed
   */
  constructor(e) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "normal",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return VarianceScaling.className;
  }
}
GlorotNormal.className = "GlorotNormal";
registerClass(GlorotNormal);
class HeNormal extends VarianceScaling {
  constructor(e) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "normal",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return VarianceScaling.className;
  }
}
HeNormal.className = "HeNormal";
registerClass(HeNormal);
class HeUniform extends VarianceScaling {
  constructor(e) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "uniform",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return VarianceScaling.className;
  }
}
HeUniform.className = "HeUniform";
registerClass(HeUniform);
class LeCunNormal extends VarianceScaling {
  constructor(e) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "normal",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return VarianceScaling.className;
  }
}
LeCunNormal.className = "LeCunNormal";
registerClass(LeCunNormal);
class LeCunUniform extends VarianceScaling {
  constructor(e) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "uniform",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return VarianceScaling.className;
  }
}
LeCunUniform.className = "LeCunUniform";
registerClass(LeCunUniform);
class Orthogonal extends Initializer {
  constructor(e) {
    super(), this.DEFAULT_GAIN = 1, this.ELEMENTS_WARN_SLOW = 2e3, this.gain = e.gain == null ? this.DEFAULT_GAIN : e.gain, this.seed = e.seed;
  }
  apply(e, t) {
    return tidy(() => {
      if (e.length < 2)
        throw new NotImplementedError("Shape must be at least 2D.");
      if (t !== "int32" && t !== "float32" && t !== void 0)
        throw new TypeError(`Unsupported data type ${t}.`);
      t = t;
      const n = sizeFromShape(e.slice(0, -1)), s = e[e.length - 1], a = n * s;
      a > this.ELEMENTS_WARN_SLOW && console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${a}) elements: Slowness may result.`);
      const o = [Math.max(s, n), Math.min(s, n)], u = randomNormal$1(o, 0, 1, t, this.seed), l = linalg.qr(u, !1);
      let f = l[0];
      const h = l[1].flatten().stridedSlice([0], [Math.min(s, n) * Math.min(s, n)], [Math.min(s, n) + 1]);
      return f = mul(f, h.sign()), n < s && (f = f.transpose()), mul(scalar(this.gain), f.reshape(e));
    });
  }
  getConfig() {
    return {
      gain: this.gain,
      seed: this.seed
    };
  }
}
Orthogonal.className = "Orthogonal";
registerClass(Orthogonal);
const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
  constant: "Constant",
  glorotNormal: "GlorotNormal",
  glorotUniform: "GlorotUniform",
  heNormal: "HeNormal",
  heUniform: "HeUniform",
  identity: "Identity",
  leCunNormal: "LeCunNormal",
  leCunUniform: "LeCunUniform",
  ones: "Ones",
  orthogonal: "Orthogonal",
  randomNormal: "RandomNormal",
  randomUniform: "RandomUniform",
  truncatedNormal: "TruncatedNormal",
  varianceScaling: "VarianceScaling",
  zeros: "Zeros"
};
function deserializeInitializer(r, e = {}) {
  return deserializeKerasObject(r, SerializationMap.getMap().classNameMap, e, "initializer");
}
function serializeInitializer(r) {
  return serializeKerasObject(r);
}
function getInitializer(r) {
  if (typeof r == "string") {
    const e = r in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[r] : r;
    if (e === "GlorotNormal")
      return new GlorotNormal();
    if (e === "GlorotUniform")
      return new GlorotUniform();
    if (e === "HeNormal")
      return new HeNormal();
    if (e === "HeUniform")
      return new HeUniform();
    if (e === "LeCunNormal")
      return new LeCunNormal();
    if (e === "LeCunUniform")
      return new LeCunUniform();
    {
      const t = {};
      return t.className = e, t.config = {}, deserializeInitializer(t);
    }
  } else return r instanceof Initializer ? r : deserializeInitializer(r);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function isArrayOfShapes(r) {
  return Array.isArray(r) && Array.isArray(r[0]);
}
function normalizeShapeList(r) {
  return r.length === 0 ? [] : Array.isArray(r[0]) ? r : [r];
}
function getExactlyOneTensor(r) {
  let e;
  if (Array.isArray(r)) {
    if (r.length !== 1)
      throw new ValueError(`Expected Tensor length to be 1; got ${r.length}`);
    e = r[0];
  } else
    e = r;
  return e;
}
function getExactlyOneShape(r) {
  if (Array.isArray(r) && Array.isArray(r[0])) {
    if (r.length === 1)
      return r = r, r[0];
    throw new ValueError(`Expected exactly 1 Shape; got ${r.length}`);
  } else
    return r;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function countParamsInWeights(r) {
  let e = 0;
  for (const t of r)
    t.shape.length === 0 ? e += 1 : e += t.shape.reduce((n, s) => n * s);
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const DEFAULT_VARIABLE_NAME_PREFIX = "Variable";
class LayerVariable {
  /**
   * Construct Variable from a `tf.Tensor`.
   *
   * If not explicitly named, the Variable will be given a name with the
   * prefix 'Variable'. Variable names are unique. In the case of name
   * collision, suffixies '_<num>' will be added to the name.
   *
   * @param val Initial value of the Variable.
   * @param name Name of the variable. If `null` or `undefined` is provided, it
   *   will default a name with the prefix 'Variable'.
   * @param constraint Optional, projection function to be applied to the
   * variable after optimize updates
   * @throws ValueError if `name` is `null` or `undefined`.
   */
  constructor(e, t = "float32", n = DEFAULT_VARIABLE_NAME_PREFIX, s = !0, a = null) {
    this.dtype = t ?? "float32", this.shape = e.shape, this.id = getNextUniqueTensorId(), n = n ?? DEFAULT_VARIABLE_NAME_PREFIX, this.originalName = getScopedTensorName(n), this.name = getUniqueTensorName(this.originalName), this.trainable_ = s, this.constraint = a, this.val = variable(e, this.trainable_, this.name, this.dtype);
  }
  /**
   * Get a snapshot of the Variable's value.
   *
   * The returned value is a snapshot of the Variable's value at the time of
   * the invocation. Future mutations in the value of the tensor will only
   * be reflected by future calls to this method.
   */
  read() {
    return this.assertNotDisposed(), this.val;
  }
  /**
   * Update the value of the Variable.
   *
   * @param newVal: The new value to update to. Must be consistent with the
   *   dtype and shape of the Variable.
   * @return This Variable.
   */
  write(e) {
    return this.assertNotDisposed(), checkShapesMatch(this.val, e), this.val.id !== e.id && (this.val.assign(e), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  /**
   * Dispose this LayersVariable instance from memory.
   */
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed)
      throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this.trainable_ = e, this.val.trainable = e;
  }
}
function checkShapesMatch(r, e) {
  if (r.shape.toString() !== e.shape.toString())
    throw new Error("Shape mismatch: " + JSON.stringify(r.shape) + " vs. " + JSON.stringify(e.shape));
}
function batchGetValue(r) {
  return r.map((e) => e.read());
}
function batchSetValue(r) {
  r.forEach((e) => {
    e[0].write(e[1]);
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class InputSpec {
  constructor(e) {
    this.dtype = e.dtype, this.shape = e.shape, e.shape != null ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {};
  }
}
class SymbolicTensor {
  /**
   *
   * @param dtype
   * @param shape
   * @param sourceLayer The Layer that produced this symbolic tensor.
   * @param inputs The inputs passed to sourceLayer's __call__() method.
   * @param nodeIndex
   * @param tensorIndex
   * @param callArgs The keyword arguments passed to the __call__() method.
   * @param name
   * @param outputTensorIndex The index of this tensor in the list of outputs
   *   returned by apply().
   */
  constructor(e, t, n, s, a, o, u) {
    this.dtype = e, this.shape = t, this.sourceLayer = n, this.inputs = s, this.callArgs = a, this.outputTensorIndex = u, this.id = getNextUniqueTensorId(), o != null && (this.originalName = getScopedTensorName(o), this.name = getUniqueTensorName(this.originalName)), this.rank = t.length;
  }
}
let _nextNodeID = 0;
class Node {
  constructor(e, t) {
    this.callArgs = t, this.id = _nextNodeID++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes;
    for (const n of e.inboundLayers)
      n != null && n.outboundNodes.push(this);
    e.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    const e = [];
    for (const t of this.inboundLayers)
      t != null ? e.push(t.name) : e.push(null);
    return {
      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
      inboundLayers: e,
      nodeIndices: this.nodeIndices,
      tensorIndices: this.tensorIndices
    };
  }
}
let _nextLayerID = 0;
class Layer extends Serializable {
  constructor(e = {}) {
    super(), this._callHook = null, this._addedWeightNames = [], this._stateful = !1, this.id = _nextLayerID++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = !1, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = !1, this.inboundNodes = [], this.outboundNodes = [];
    let t = e.name;
    if (!t) {
      const n = this.getClassName();
      t = toSnakeCase(n) + "_" + getUid(n);
    }
    if (this.name = t, this.trainable_ = e.trainable == null ? !0 : e.trainable, e.inputShape != null || e.batchInputShape != null) {
      let n;
      if (e.batchInputShape != null)
        n = e.batchInputShape;
      else if (e.inputShape != null) {
        let a = null;
        e.batchSize != null && (a = e.batchSize), n = [a].concat(e.inputShape);
      }
      this.batchInputShape = n;
      let s = e.dtype;
      s == null && (s = e.inputDType), s == null && (s = "float32"), this.dtype = s;
    }
    e.weights != null ? this.initialWeights = e.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = !1;
  }
  /**
   * Converts a layer and its index to a unique (immutable type) name.
   * This function is used internally with `this.containerNodes`.
   * @param layer The layer.
   * @param nodeIndex The layer's position (e.g. via enumerate) in a list of
   *   nodes.
   *
   * @returns The unique name.
   */
  static nodeKey(e, t) {
    return e.name + "_ib-" + t.toString();
  }
  /**
   * Returns this.inboundNode at index nodeIndex.
   *
   * Porting note: This is a replacement for _get_node_attribute_at_index()
   * @param nodeIndex
   * @param attrName The name of the attribute related to request for this node.
   */
  getNodeAtIndex(e, t) {
    if (this.inboundNodes.length === 0)
      throw new RuntimeError(`The layer has never been called and thus has no defined ${t}.`);
    if (this.inboundNodes.length <= e)
      throw new ValueError(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[e];
  }
  /**
   * Retrieves the input tensor(s) of a layer at a given node.
   *
   * @param nodeIndex Integer, index of the node from which to retrieve the
   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
   *   was called.
   *
   * @return A tensor (or list of tensors if the layer has multiple inputs).
   */
  getInputAt(e) {
    return singletonOrArray(this.getNodeAtIndex(e, "input").inputTensors);
  }
  /**
   * Retrieves the output tensor(s) of a layer at a given node.
   *
   * @param nodeIndex Integer, index of the node from which to retrieve the
   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
   *   was called.
   *
   * @return A tensor (or list of tensors if the layer has multiple outputs).
   */
  getOutputAt(e) {
    return singletonOrArray(this.getNodeAtIndex(e, "output").outputTensors);
  }
  // Properties
  /**
   * Retrieves the input tensor(s) of a layer.
   *
   * Only applicable if the layer has exactly one inbound node,
   * i.e. if it is connected to one incoming layer.
   *
   * @return Input tensor or list of input tensors.
   *
   * @exception AttributeError if the layer is connected to more than one
   *   incoming layers.
   */
  get input() {
    if (this.inboundNodes.length > 1)
      throw new AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0)
      throw new AttributeError(`Layer ${this.name} is not connected, no input to return.`);
    return singletonOrArray(this.getNodeAtIndex(0, "input").inputTensors);
  }
  /**
   * Retrieves the output tensor(s) of a layer.
   *
   * Only applicable if the layer has exactly one inbound node,
   * i.e. if it is connected to one incoming layer.
   *
   * @return Output tensor or list of output tensors.
   *
   * @exception AttributeError if the layer is connected to more than one
   *   incoming layers.
   */
  get output() {
    if (this.inboundNodes.length === 0)
      throw new AttributeError(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1)
      throw new AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return singletonOrArray(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  /**
   * Retrieves the Layer's current loss values.
   *
   * Used for regularizers during training.
   */
  calculateLosses() {
    return this.losses.map((e) => e());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(e) {
    this._built = e;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this._trainableWeights.forEach((t) => t.trainable = e), this.trainable_ = e;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((e) => e.trainable) : [];
  }
  set trainableWeights(e) {
    this._trainableWeights = e;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((e) => !e.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(e) {
    this._nonTrainableWeights = e;
  }
  /**
   * The concatenation of the lists trainableWeights and nonTrainableWeights
   * (in this order).
   */
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  /**
   * Reset the states of the layer.
   *
   * This method of the base Layer class is essentially a no-op.
   * Subclasses that are stateful (e.g., stateful RNNs) should override this
   * method.
   */
  resetStates() {
    if (!this.stateful)
      throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  /**
   * Checks compatibility between the layer and provided inputs.
   *
   * This checks that the tensor(s) `input`
   * verify the input assumptions of the layer
   * (if any). If not, exceptions are raised.
   *
   * @param inputs Input tensor or list of input tensors.
   *
   * @exception ValueError in case of mismatch between
   *   the provided inputs and the expectations of the layer.
   */
  assertInputCompatibility(e) {
    const t = toList(e);
    if (this.inputSpec == null || this.inputSpec.length === 0)
      return;
    const n = toList(this.inputSpec);
    if (t.length !== n.length)
      throw new ValueError(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);
    for (let s = 0; s < t.length; s++) {
      const a = t[s], o = n[s];
      if (o == null)
        continue;
      const u = a.rank;
      if (o.ndim != null && u !== o.ndim)
        throw new ValueError(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${u}`);
      if (o.maxNDim != null && u > o.maxNDim)
        throw new ValueError(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${u}`);
      if (o.minNDim != null && u < o.minNDim)
        throw new ValueError(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${u}.`);
      if (o.dtype != null && a.dtype !== o.dtype)
        throw new ValueError(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${a.dtype}.`);
      if (o.axes) {
        const l = a.shape;
        for (const f in o.axes) {
          const c = Number(f), h = o.axes[f], d = c >= 0 ? l[c] : l[l.length + c];
          if (h != null && [h, null].indexOf(d) === -1)
            throw new ValueError(`Input ${s} is incompatible with layer ${this.name}: expected axis ${c} of input shape to have value ${h} but got shape ${l}.`);
        }
      }
      if (o.shape != null)
        for (let l = 0; l < o.shape.length; ++l) {
          const f = o.shape[l], c = a.shape[l];
          if (f != null && c != null && f !== c)
            throw new ValueError(`Input ${s} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${a.shape}.`);
        }
    }
  }
  /**
   * This is where the layer's logic lives.
   *
   * @param inputs Input tensor, or list/tuple of input tensors.
   * @param kwargs Additional keyword arguments.
   *
   * @return A tensor or list/tuple of tensors.
   */
  call(e, t) {
    return e;
  }
  invokeCallHook(e, t) {
    this._callHook != null && this._callHook(e, t);
  }
  /**
   * Set call hook.
   * This is currently used for testing only.
   * @param callHook
   */
  setCallHook(e) {
    this._callHook = e;
  }
  /**
   * Clear call hook.
   * This is currently used for testing only.
   */
  clearCallHook() {
    this._callHook = null;
  }
  /**
   * Builds or executes a `Layer`'s logic.
   *
   * When called with `tf.Tensor`(s), execute the `Layer`'s computation and
   * return Tensor(s). For example:
   *
   * ```js
   * const denseLayer = tf.layers.dense({
   *   units: 1,
   *   kernelInitializer: 'zeros',
   *   useBias: false
   * });
   *
   * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete
   * // numeric values).
   * const input = tf.ones([2, 2]);
   * const output = denseLayer.apply(input);
   *
   * // The output's value is expected to be [[0], [0]], due to the fact that
   * // the dense layer has a kernel initialized to all-zeros and does not have
   * // a bias.
   * output.print();
   * ```
   *
   * When called with `tf.SymbolicTensor`(s), this will prepare the layer for
   * future execution.  This entails internal book-keeping on shapes of
   * expected Tensors, wiring layers together, and initializing weights.
   *
   * Calling `apply` with `tf.SymbolicTensor`s are typically used during the
   * building of non-`tf.Sequential` models. For example:
   *
   * ```js
   * const flattenLayer = tf.layers.flatten();
   * const denseLayer = tf.layers.dense({units: 1});
   *
   * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().
   * const input = tf.input({shape: [2, 2]});
   * const output1 = flattenLayer.apply(input);
   *
   * // output1.shape is [null, 4]. The first dimension is the undetermined
   * // batch size. The second dimension comes from flattening the [2, 2]
   * // shape.
   * console.log(JSON.stringify(output1.shape));
   *
   * // The output SymbolicTensor of the flatten layer can be used to call
   * // the apply() of the dense layer:
   * const output2 = denseLayer.apply(output1);
   *
   * // output2.shape is [null, 1]. The first dimension is the undetermined
   * // batch size. The second dimension matches the number of units of the
   * // dense layer.
   * console.log(JSON.stringify(output2.shape));
   *
   * // The input and output can be used to construct a model that consists
   * // of the flatten and dense layers.
   * const model = tf.model({inputs: input, outputs: output2});
   * ```
   *
   * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.
   * @param kwargs Additional keyword arguments to be passed to `call()`.
   *
   * @return Output of the layer's `call` method.
   *
   * @exception ValueError error in case the layer is missing shape information
   *   for its `build` call.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  // Porting Note: This is a replacement for __call__() in Python.
  apply(e, t) {
    t = t || {}, this.assertNotDisposed();
    const n = toList(e), s = checkAllSymbolic(e), a = checkNoneSymbolic(e);
    if (s === a)
      throw new ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return nameScope(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(e);
        const o = [];
        for (const u of toList(e))
          o.push(u.shape);
        this.build(singletonOrArray(o)), this.built = !0, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && a && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(e), a) {
        let o = this.call(e, t);
        this.supportsMasking && this.setMaskMetadata(e, o);
        const u = toList(o), l = [];
        for (let f of u)
          n.indexOf(f) !== -1 && (f = f.clone()), l.push(f);
        if (o = singletonOrArray(l), this.activityRegularizer != null)
          throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return o;
      } else {
        const o = collectInputShape(e), u = this.computeOutputShape(o);
        let l;
        const f = guessOutputDType(e);
        if (this.warnOnIncompatibleInputShape(Array.isArray(e) ? o[0] : o), u != null && u.length > 0 && Array.isArray(u[0]) ? l = u.map((c, h) => new SymbolicTensor(f, c, this, toList(e), t, this.name, h)) : l = new SymbolicTensor(f, u, this, toList(e), t, this.name), this.addInboundNode(e, l, null, null, o, u, t), this._refCount++, this.activityRegularizer != null)
          throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return l;
      }
    });
  }
  /**
   * Check compatibility between input shape and this layer's batchInputShape.
   *
   * Print warning if any incompatibility is found.
   *
   * @param inputShape Input shape to be checked.
   */
  warnOnIncompatibleInputShape(e) {
    if (this.batchInputShape != null)
      if (e.length !== this.batchInputShape.length)
        console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
      else {
        let t = !1;
        this.batchInputShape.forEach((n, s) => {
          n != null && e[s] != null && e[s] !== n && (t = !0);
        }), t && console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
      }
  }
  /**
   * Retrieves the output shape(s) of a layer.
   *
   * Only applicable if the layer has only one inbound node, or if all inbound
   * nodes have the same output shape.
   *
   * @returns Output shape or shapes.
   * @throws AttributeError: if the layer is connected to more than one incoming
   *   nodes.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0)
      throw new AttributeError(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    const e = [];
    for (const t of this.inboundNodes) {
      const n = JSON.stringify(t.outputShapes);
      e.indexOf(n) === -1 && e.push(n);
    }
    if (e.length === 1) {
      const t = this.inboundNodes[0].outputShapes;
      return Array.isArray(t) && Array.isArray(t[0]) && t.length === 1 ? t[0] : t;
    } else
      throw new AttributeError(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  /**
   * Counts the total number of numbers (e.g., float32, int32) in the
   * weights.
   *
   * @returns An integer count.
   * @throws RuntimeError: If the layer is not built yet (in which case its
   *   weights are not defined yet.)
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  countParams() {
    if (!this.built)
      throw new RuntimeError(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return countParamsInWeights(this.weights);
  }
  /**
   * Creates the layer weights.
   *
   * Must be implemented on all layers that have weights.
   *
   * Called when apply() is called to construct the weights.
   *
   * @param inputShape A `Shape` or array of `Shape` (unused).
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  build(e) {
    this.built = !0;
  }
  /**
   * Returns the current values of the weights of the layer.
   *
   * @param trainableOnly Whether to get the values of only trainable weights.
   * @returns Weight values as an `Array` of `tf.Tensor`s.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  getWeights(e = !1) {
    return batchGetValue(e ? this.trainableWeights : this.weights);
  }
  /**
   * Sets the weights of the layer, from Tensors.
   *
   * @param weights a list of Tensors. The number of arrays and their shape
   *   must match number of the dimensions of the weights of the layer (i.e.
   *   it should match the output of `getWeights`).
   *
   * @exception ValueError If the provided weights list does not match the
   *   layer's specifications.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  setWeights(e) {
    tidy(() => {
      const t = this.weights;
      if (t.length !== e.length)
        throw new ValueError(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);
      if (t.length === 0)
        return;
      const n = [], s = batchGetValue(t);
      for (let a = 0; a < s.length; ++a) {
        const o = s[a], u = t[a], l = e[a];
        if (!arraysEqual(o.shape, l.shape))
          throw new ValueError(`Layer weight shape ${o.shape} not compatible with provided weight shape ${l.shape}`);
        n.push([u, l]);
      }
      batchSetValue(n);
    });
  }
  /**
   * Adds a weight variable to the layer.
   *
   * @param name Name of the new weight variable.
   * @param shape The shape of the weight.
   * @param dtype The dtype of the weight.
   * @param initializer An initializer instance.
   * @param regularizer A regularizer instance.
   * @param trainable Whether the weight should be trained via backprop or not
   *   (assuming that the layer itself is also trainable).
   * @param constraint An optional trainable.
   * @return The created weight variable.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  addWeight(e, t, n, s, a, o, u, l) {
    if (this._addedWeightNames.indexOf(e) !== -1)
      throw new ValueError(`Duplicate weight name ${e} for layer ${this.name}`);
    this._addedWeightNames.push(e), n == null && (n = "float32"), this.fastWeightInitDuringBuild && (s = l != null ? l() : getInitializer("zeros"));
    const f = s.apply(t, n), c = new LayerVariable(f, n, e, o, u);
    return f.dispose(), a != null && this.addLoss(() => a.apply(c.read())), o == null && (o = !0), o ? this._trainableWeights.push(c) : this._nonTrainableWeights.push(c), c;
  }
  /**
   * Set the fast-weight-initialization flag.
   *
   * In cases where the initialized weight values will be immediately
   * overwritten by loaded weight values during model loading, setting
   * the flag to `true` saves unnecessary calls to potentially expensive
   * initializers and speeds up the loading process.
   *
   * @param value Target value of the flag.
   */
  setFastWeightInitDuringBuild(e) {
    this.fastWeightInitDuringBuild = e;
  }
  /**
   * Add losses to the layer.
   *
   * The loss may potentially be conditional on some inputs tensors,
   * for instance activity losses are conditional on the layer's inputs.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  addLoss(e) {
    e == null || Array.isArray(e) && e.length === 0 || (e = toList(e), this._losses !== void 0 && this._losses !== null && this.losses.push(...e));
  }
  /**
   * Computes the output shape of the layer.
   *
   * Assumes that the layer will be built to match that input shape provided.
   *
   * @param inputShape A shape (tuple of integers) or a list of shape tuples
   *   (one per output tensor of the layer). Shape tuples can include null for
   *   free dimensions, instead of an integer.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  computeOutputShape(e) {
    return e;
  }
  /**
   * Computes an output mask tensor.
   *
   * @param inputs Tensor or list of tensors.
   * @param mask Tensor or list of tensors.
   *
   * @return null or a tensor (or list of tensors, one per output tensor of the
   * layer).
   */
  computeMask(e, t) {
    if (!this.supportsMasking) {
      if (t != null)
        if (Array.isArray(t))
          t.forEach((n) => {
            if (n != null)
              throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
          });
        else
          throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      return null;
    }
    return t;
  }
  setMaskMetadata(e, t, n) {
    if (!this.supportsMasking)
      return;
    const s = this.computeMask(e, n), a = toList(t), o = toList(s);
    if (a.length !== o.length)
      throw new Error(`${this.name} outputs ${a.length} tensors but ${a.length} masks for those tensors`);
    for (let u = 0; u < a.length; u++)
      a[u].kerasMask = o[u];
  }
  /**
   * Internal method to create an inbound node for the layer.
   *
   * @param inputTensors List of input tensors.
   * @param outputTensors List of output tensors.
   * @param inputMasks List of input masks (a mask can be a tensor, or null).
   * @param outputMasks List of output masks (a mask can be a tensor, or null).
   * @param inputShapes List of input shape tuples.
   * @param outputShapes List of output shape tuples.
   * @param kwargs Dictionary of keyword arguments that were passed to the
   *   `call` method of the layer at the call that created the node.
   */
  addInboundNode(e, t, n, s, a, o, u = null) {
    const l = toList(e);
    t = toList(t), n = toList(n), s = toList(s), a = normalizeShapeList(a), o = normalizeShapeList(o);
    const f = [], c = [], h = [];
    for (const d of l)
      f.push(d.sourceLayer), c.push(d.nodeIndex), h.push(d.tensorIndex);
    new Node({
      outboundLayer: this,
      inboundLayers: f,
      nodeIndices: c,
      tensorIndices: h,
      inputTensors: l,
      outputTensors: t,
      inputMasks: n,
      outputMasks: s,
      inputShapes: a,
      outputShapes: o
    }, u);
    for (let d = 0; d < t.length; d++)
      t[d].sourceLayer = this, t[d].nodeIndex = this.inboundNodes.length - 1, t[d].tensorIndex = d;
  }
  /**
   * Returns the config of the layer.
   *
   * A layer config is a TS dictionary (serializable)
   * containing the configuration of a layer.
   * The same layer can be reinstantiated later
   * (without its trained weights) from this configuration.
   *
   * The config of a layer does not include connectivity
   * information, nor the layer class name.  These are handled
   * by 'Container' (one layer of abstraction above).
   *
   * Porting Note: The TS dictionary follows TS naming standards for
   * keys, and uses tfjs-layers type-safe Enums.  Serialization methods
   * should use a helper function to convert to the pythonic storage
   * standard. (see serialization_utils.convertTsToPythonic)
   *
   * @returns TS dictionary of configuration.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  getConfig() {
    const e = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (e.batchInputShape = this.batchInputShape), this.dtype != null && (e.dtype = this.dtype), e;
  }
  /**
   * Dispose the weight variables that this Layer instance holds.
   *
   * @returns {number} Number of disposed variables.
   */
  disposeWeights() {
    return this.weights.forEach((e) => e.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  /**
   * Attempt to dispose layer's weights.
   *
   * This method decreases the reference count of the Layer object by 1.
   *
   * A Layer is reference-counted. Its reference count is incremented by 1
   * the first item its `apply()` method is called and when it becomes a part
   * of a new `Node` (through calling the `apply()` method on a
   * `tf.SymbolicTensor`).
   *
   * If the reference count of a Layer becomes 0, all the weights will be
   * disposed and the underlying memory (e.g., the textures allocated in WebGL)
   * will be freed.
   *
   * Note: If the reference count is greater than 0 after the decrement, the
   * weights of the Layer will *not* be disposed.
   *
   * After a Layer is disposed, it cannot be used in calls such as `apply()`,
   * `getWeights()` or `setWeights()` anymore.
   *
   * @returns A DisposeResult Object with the following fields:
   *   - refCountAfterDispose: The reference count of the Container after this
   *     `dispose()` call.
   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
   *     during this `dispose()` call.
   * @throws {Error} If the layer is not built yet, or if the layer has already
   *   been disposed.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  dispose() {
    if (!this.built)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let e = 0;
    return --this._refCount === 0 && (e = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: e };
  }
}
function collectInputShape(r) {
  r = toList(r);
  const e = [];
  for (const t of r)
    e.push(t.shape);
  return singletonOrArray(e);
}
function guessOutputDType(r) {
  return "float32";
}
function getSourceInputs(r, e, t) {
  if ((e == null || t != null && t > 0) && (e = r.sourceLayer, t = r.nodeIndex), e.inboundNodes.length === 0)
    return [r];
  {
    const n = e.inboundNodes[t];
    if (n.inboundLayers.length === 0)
      return n.inputTensors;
    {
      const s = [];
      for (let a = 0; a < n.inboundLayers.length; a++) {
        const o = n.inputTensors[a], u = n.inboundLayers[a], l = n.nodeIndices[a], f = getSourceInputs(o, u, l);
        for (const c of f)
          s.indexOf(c) === -1 && s.push(c);
      }
      return s;
    }
  }
}
function checkAllSymbolic(r) {
  let e = !0;
  for (const t of toList(r))
    if (!(t instanceof SymbolicTensor)) {
      e = !1;
      break;
    }
  return e;
}
function checkNoneSymbolic(r) {
  let e = !0;
  for (const t of toList(r))
    if (t instanceof SymbolicTensor) {
      e = !1;
      break;
    }
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class InputLayer extends Layer {
  constructor(e) {
    if (super({
      dtype: e.dtype,
      name: e.name != null ? e.name : getUid("input").toString()
    }), e.batchSize == null && (e.batchSize = null), e.sparse == null && (e.sparse = !1), this.trainable = !1, this.built = !0, this.sparse = e.sparse, e.inputShape != null && e.batchInputShape != null)
      throw new ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let t = e.batchInputShape;
    if (t == null) {
      if (e.inputShape == null)
        throw new ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      t = [e.batchSize].concat(e.inputShape);
    } else if (e.batchSize != null)
      throw new ValueError("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    const n = e.dtype || "float32";
    this.batchInputShape = t, this.dtype = n, this.inputSpec = [{ shape: t }];
    const s = new SymbolicTensor(this.dtype, this.batchInputShape, this, [], {}, this.name);
    s.nodeIndex = 0, s.tensorIndex = 0, new Node({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: [s],
      outputTensors: [s],
      inputMasks: [null],
      outputMasks: [null],
      inputShapes: [t],
      outputShapes: [t]
    });
  }
  apply(e, t) {
    throw new ValueError(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return {
      batchInputShape: this.batchInputShape,
      dtype: this.dtype,
      sparse: this.sparse,
      name: this.name
    };
  }
}
InputLayer.className = "InputLayer";
registerClass(InputLayer);
function Input(r) {
  if (r.batchShape == null && r.shape == null)
    throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (r.batchShape != null && r.shape != null)
    throw new ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  let e = r.batchShape;
  r.shape != null && e == null && (e = [null].concat(r.shape));
  let t = r.dtype;
  return t == null && (t = "float32"), new InputLayer({
    batchInputShape: e,
    name: r.name,
    dtype: t,
    sparse: r.sparse
  }).inboundNodes[0].outputTensors[0];
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function assertFeedCompatibility(r, e) {
  if (r.dtype == null || r.dtype === e.dtype)
    return e;
  try {
    return cast$3(e, r.dtype);
  } catch {
    throw new ValueError(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${r.name}' (${r.dtype}).`);
  }
}
class FeedDict {
  /**
   * Constructor, optionally does copy-construction.
   * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case
   *   copy-construction will be performed.
   */
  constructor(e) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, e instanceof FeedDict)
      for (const t in e.id2Value)
        this.id2Value[t] = e.id2Value[t], t in e.id2Mask && (this.id2Mask[t] = e.id2Mask[t]);
    else {
      if (e == null)
        return;
      for (const t of e)
        this.add(t.key, t.value);
    }
  }
  /**
   * Add a key-value pair to the FeedDict.
   *
   * @param key The key of the feed.
   * @param value The value of the tensor feed.
   * @param mask The value of the mask feed (optional).
   * @returns This `FeedDict`.
   * @throws ValueError: If the key `SymbolicTensor` already exists in the
   *   `FeedDict`.
   */
  add(e, t, n) {
    if (this.id2Value[e.id] == null)
      this.id2Value[e.id] = assertFeedCompatibility(e, t), this.name2Id[e.name] = e.id, n != null && (this.id2Mask[e.id] = n);
    else
      throw new ValueError(`Duplicate key: name=${e.name}, id=${e.id}`);
    return this;
  }
  /**
   * Add a Feed to the FeedDict.
   * @param feed The new `Feed` to add.
   * @returns This `FeedDict`.
   */
  addFeed(e) {
    this.add(e.key, e.value);
  }
  /**
   * Probe whether a key already exists in the FeedDict.
   * @param key
   */
  hasKey(e) {
    return this.id2Value[e.id] != null;
  }
  /**
   * Get all the SymbolicTensor available in this FeedDict.
   */
  names() {
    return Object.keys(this.name2Id);
  }
  /**
   * Get the feed value for given key.
   * @param key The SymbolicTensor, or its name (as a string), of which the
   *     value is sought.
   * @returns If `key` exists, the corresponding feed value.
   * @throws ValueError: If `key` does not exist in this `FeedDict`.
   */
  getValue(e) {
    if (e instanceof SymbolicTensor) {
      if (this.id2Value[e.id] == null)
        throw new ValueError(`Nonexistent key: ${e.name}`);
      return this.id2Value[e.id];
    } else {
      const t = this.name2Id[e];
      if (t == null)
        throw new ValueError(`Feed dict has no SymbolicTensor name: ${e}`);
      return this.id2Value[t];
    }
  }
  /**
   * Get the feed mask for given key.
   * @param key The SymbolicTensor, or its name (as a string), of which the
   *     value is sought.
   * @returns If `key` exists, the corresponding feed mask.
   * @throws ValueError: If `key` does not exist in this `FeedDict`.
   */
  getMask(e) {
    if (e instanceof SymbolicTensor) {
      if (this.id2Value[e.id] == null)
        throw new ValueError(`Nonexistent key: ${e.name}`);
      return this.id2Mask[e.id];
    } else {
      const t = this.name2Id[e];
      if (t == null)
        throw new ValueError(`Feed dict has no SymbolicTensor name: ${e}`);
      return this.id2Mask[t];
    }
  }
  /** Dispose all mask Tensors held by this object. */
  disposeMasks() {
    this.id2Mask != null && dispose(this.id2Mask);
  }
}
const cachedSorted = new LruCache(), cachedRecipientCounts = new LruCache();
function updateCacheMaxEntries(r) {
  cachedSorted != null && cachedSorted.setMaxEntries(r), cachedRecipientCounts != null && cachedRecipientCounts.setMaxEntries(r);
}
function execute(r, e, t, n) {
  const s = t == null ? !1 : t.training, a = Array.isArray(r), o = a ? r : [r], u = o.map((g) => g.name), l = [], f = e.names();
  for (const g of u)
    f.indexOf(g) !== -1 ? l.push(e.getValue(g)) : l.push(null);
  const c = u.join(",") + "|" + e.names().sort().join(",");
  let h = cachedSorted.get(c), d;
  if (h == null) {
    const g = getTopologicalSortAndRecipientCounts(o, e);
    h = g.sorted, d = g.recipientCounts, cachedSorted.put(c, h), cachedRecipientCounts.put(c, d);
  }
  d = {}, s || Object.assign(d, cachedRecipientCounts.get(c));
  const m = new FeedDict(e);
  for (let g = 0; g < h.length; ++g) {
    const y = h[g], b = y.sourceLayer;
    if (b instanceof InputLayer)
      continue;
    const v = [], w = [], I = [];
    let T = !1;
    for (const V of y.inputs) {
      const H = m.getValue(V), R = m.getMask(V);
      v.push(H), w.push(R), R != null && (T = !0), s || (d[V.name]--, d[V.name] === 0 && !e.hasKey(V) && u.indexOf(V.name) === -1 && !H.isDisposed && V.sourceLayer.stateful !== !0 && I.push(H));
    }
    T && (t = t || {}, t.mask = w[0]);
    const _ = toList(b.apply(v, t));
    let F = null;
    b.supportsMasking && (F = b.computeMask(v, w));
    const O = getNodeOutputs(y), q = Array.isArray(O) ? O : [O];
    for (let V = 0; V < q.length; ++V) {
      m.hasKey(q[V]) || m.add(q[V], _[V], Array.isArray(F) ? F[0] : F);
      const H = u.indexOf(q[V].name);
      H !== -1 && (l[H] = _[V]);
    }
    s || dispose(I);
  }
  return m.disposeMasks(), a ? l : l[0];
}
function getTopologicalSortAndRecipientCounts(r, e) {
  assert$1(r != null && r.length > 0, () => "Expected at least one fetch, got none");
  let t = [], n = {};
  if (r.length === 1) {
    const s = getTopologicalSortAndRecipientCountsForOneFetch(r[0], e);
    t = s.sorted, n = s.recipientMap;
  } else {
    const s = /* @__PURE__ */ new Set();
    for (const a of r) {
      const { sorted: o, recipientMap: u } = getTopologicalSortAndRecipientCountsForOneFetch(a, e);
      for (const l of o)
        s.has(l.name) || (t.push(l), s.add(l.name));
      for (const l in u)
        n[l] == null && (n[l] = /* @__PURE__ */ new Set()), u[l].forEach((f) => n[l].add(f));
    }
  }
  return {
    sorted: t,
    recipientCounts: recipientMap2Counts(n)
  };
}
function recipientMap2Counts(r) {
  const e = {};
  for (const t in r)
    e[t] = r[t].size;
  return e;
}
function getTopologicalSortAndRecipientCountsForOneFetch(r, e) {
  const t = /* @__PURE__ */ new Set(), n = [], s = {};
  for (const u of e.names())
    t.add(u);
  const a = [], o = [];
  for (a.push(r); a.length > 0; ) {
    const u = a[a.length - 1];
    if (t.has(u.name)) {
      a.pop();
      continue;
    }
    const l = o[o.length - 1] === a.length - 1;
    if (u.inputs.length === 0 || l)
      a.pop(), n.push(u), t.add(u.name), l && o.pop();
    else {
      o.push(a.length - 1);
      for (const f of u.inputs)
        s[f.name] == null && (s[f.name] = /* @__PURE__ */ new Set()), s[f.name].add(u.name), !t.has(f.name) && a.push(f);
    }
  }
  return { sorted: n, recipientMap: s };
}
function getNodeOutputs(r) {
  let e;
  if (r.sourceLayer.inboundNodes.length === 1)
    e = r.sourceLayer.output;
  else {
    let t = null;
    for (let n = 0; n < r.sourceLayer.inboundNodes.length; ++n)
      for (const s of r.sourceLayer.inboundNodes[n].outputTensors)
        if (s.id === r.id) {
          t = n;
          break;
        }
    e = r.sourceLayer.getOutputAt(t);
  }
  return e;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ENV$2 = env();
ENV$2.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, updateCacheMaxEntries);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function calcL2Norms(r, e) {
  return tidy(() => sqrt$2(sum$2(mul(r, r), e, !0)));
}
class Constraint extends Serializable {
  getConfig() {
    return {};
  }
}
class MaxNorm extends Constraint {
  constructor(e) {
    super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return tidy(() => {
      const t = calcL2Norms(e, this.axis), n = clipByValue$2(t, 0, this.maxValue);
      return mul(e, div$1(n, add$2(epsilon$1(), t)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
}
MaxNorm.className = "MaxNorm";
registerClass(MaxNorm);
class UnitNorm extends Constraint {
  constructor(e) {
    super(), this.defaultAxis = 0, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return tidy(() => div$1(e, add$2(epsilon$1(), calcL2Norms(e, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
}
UnitNorm.className = "UnitNorm";
registerClass(UnitNorm);
class NonNeg extends Constraint {
  apply(e) {
    return relu$2(e);
  }
}
NonNeg.className = "NonNeg";
registerClass(NonNeg);
class MinMaxNorm extends Constraint {
  constructor(e) {
    super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = e.minValue != null ? e.minValue : this.defaultMinValue, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.rate = e.rate != null ? e.rate : this.defaultRate, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return tidy(() => {
      const t = calcL2Norms(e, this.axis), n = add$2(mul(this.rate, clipByValue$2(t, this.minValue, this.maxValue)), mul(1 - this.rate, t));
      return mul(e, div$1(n, add$2(epsilon$1(), t)));
    });
  }
  getConfig() {
    return {
      minValue: this.minValue,
      maxValue: this.maxValue,
      rate: this.rate,
      axis: this.axis
    };
  }
}
MinMaxNorm.className = "MinMaxNorm";
registerClass(MinMaxNorm);
const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
  maxNorm: "MaxNorm",
  minMaxNorm: "MinMaxNorm",
  nonNeg: "NonNeg",
  unitNorm: "UnitNorm"
};
function serializeConstraint(r) {
  return serializeKerasObject(r);
}
function deserializeConstraint(r, e = {}) {
  return deserializeKerasObject(r, SerializationMap.getMap().classNameMap, e, "constraint");
}
function getConstraint(r) {
  if (r == null)
    return null;
  if (typeof r == "string") {
    const t = { className: r in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[r] : r, config: {} };
    return deserializeConstraint(t);
  } else return r instanceof Constraint ? r : deserializeConstraint(r);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function maxNorm(r) {
  return new MaxNorm(r);
}
function unitNorm(r) {
  return new UnitNorm(r);
}
function nonNeg() {
  return new NonNeg();
}
function minMaxNorm(r) {
  return new MinMaxNorm(r);
}
const exports_constraints = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  maxNorm,
  minMaxNorm,
  nonNeg,
  unitNorm
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function zeros$1() {
  return new Zeros();
}
function ones() {
  return new Ones();
}
function constant(r) {
  return new Constant(r);
}
function randomUniform(r) {
  return new RandomUniform(r);
}
function randomNormal(r) {
  return new RandomNormal(r);
}
function truncatedNormal(r) {
  return new TruncatedNormal(r);
}
function identity$2(r) {
  return new Identity(r);
}
function varianceScaling(r) {
  return new VarianceScaling(r);
}
function glorotUniform(r) {
  return new GlorotUniform(r);
}
function glorotNormal(r) {
  return new GlorotNormal(r);
}
function heNormal(r) {
  return new HeNormal(r);
}
function heUniform(r) {
  return new HeUniform(r);
}
function leCunNormal(r) {
  return new LeCunNormal(r);
}
function leCunUniform(r) {
  return new LeCunUniform(r);
}
function orthogonal(r) {
  return new Orthogonal(r);
}
const exports_initializers = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  constant,
  glorotNormal,
  glorotUniform,
  heNormal,
  heUniform,
  identity: identity$2,
  leCunNormal,
  leCunUniform,
  ones,
  orthogonal,
  randomNormal,
  randomUniform,
  truncatedNormal,
  varianceScaling,
  zeros: zeros$1
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function resolveScalarsInLogs(r) {
  if (r == null)
    return;
  const e = [], t = [], n = [];
  for (const s in r) {
    const a = r[s];
    if (typeof a != "number") {
      const o = a;
      e.push(o.data()), t.push(s), n.push(o);
    }
  }
  if (e.length > 0) {
    const s = await Promise.all(e);
    for (let a = 0; a < s.length; ++a)
      r[t[a]] = s[a][0];
    dispose(n);
  }
}
function disposeTensorsInLogs(r) {
  if (r != null)
    for (const e in r) {
      const t = r[e];
      typeof t != "number" && t.dispose();
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var ModelLoggingVerbosity;
(function(r) {
  r[r.SILENT = 0] = "SILENT", r[r.VERBOSE = 1] = "VERBOSE";
})(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));
const DEFAULT_YIELD_EVERY_MS = 125;
class BaseCallback {
  constructor() {
    this.validationData = null;
  }
  setParams(e) {
    this.params = e;
  }
  async onEpochBegin(e, t) {
  }
  async onEpochEnd(e, t) {
  }
  async onBatchBegin(e, t) {
  }
  async onBatchEnd(e, t) {
  }
  async onTrainBegin(e) {
  }
  async onTrainEnd(e) {
  }
  // LayersModel needs to call Callback.setModel(), but cannot actually depend
  // on Callback because that creates a cyclic dependency.  Providing this no-op
  // method on BaseCallback breaks the cycle: this way LayersModel can depend on
  // BaseCallback but not on Callback.  The argument is typed as `Container`
  // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback
  // overrides this method and enforces that the argument is really a
  // LayersModel.
  setModel(e) {
  }
}
class CallbackList {
  // TODO(cais): When the need arises, uncomment the following lines and
  // implement the queue for time values.
  // private deltaTBatch: number;
  // private deltaTsBatchBegin: Array<number>;
  // private deltaTsBatchEnd: Array<number>;
  /**
   * Constructor of CallbackList.
   * @param callbacks Array of `Callback` instances.
   * @param queueLength Queue length for keeping running statistics over
   *   callback execution time.
   */
  constructor(e, t = 10) {
    e == null && (e = []), this.callbacks = e, this.queueLength = t;
  }
  append(e) {
    this.callbacks.push(e);
  }
  setParams(e) {
    for (const t of this.callbacks)
      t.setParams(e);
  }
  setModel(e) {
    for (const t of this.callbacks)
      t.setModel(e);
  }
  /**
   * Called at the start of an epoch.
   * @param epoch Index of epoch.
   * @param logs Dictionary of logs.
   */
  async onEpochBegin(e, t) {
    t == null && (t = {});
    for (const n of this.callbacks)
      await n.onEpochBegin(e, t);
  }
  /**
   * Called at the end of an epoch.
   * @param epoch Index of epoch.
   * @param logs Dictionary of logs.
   */
  async onEpochEnd(e, t) {
    t == null && (t = {});
    for (const n of this.callbacks)
      await n.onEpochEnd(e, t);
  }
  /**
   * Called  right before processing a batch.
   * @param batch Index of batch within the current epoch.
   * @param logs Dictionary of logs.
   */
  async onBatchBegin(e, t) {
    t == null && (t = {});
    for (const n of this.callbacks)
      await n.onBatchBegin(e, t);
  }
  /**
   * Called at the end of a batch.
   * @param batch Index of batch within the current epoch.
   * @param logs Dictionary of logs.
   */
  async onBatchEnd(e, t) {
    t == null && (t = {});
    for (const n of this.callbacks)
      await n.onBatchEnd(e, t);
  }
  /**
   * Called at the beginning of training.
   * @param logs Dictionary of logs.
   */
  async onTrainBegin(e) {
    e == null && (e = {});
    for (const t of this.callbacks)
      await t.onTrainBegin(e);
  }
  /**
   * Called at the end of training.
   * @param logs Dictionary of logs.
   */
  async onTrainEnd(e) {
    e == null && (e = {});
    for (const t of this.callbacks)
      await t.onTrainEnd(e);
  }
}
class BaseLogger extends BaseCallback {
  constructor() {
    super();
  }
  async onEpochBegin(e) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(e, t) {
    t == null && (t = {});
    const n = t.size == null ? 0 : t.size;
    this.seen += n;
    for (const s in t) {
      const a = t[s];
      if (typeof a == "number")
        this.totals.hasOwnProperty(s) || (this.totals[s] = 0), this.totals[s] = this.totals[s] + a * n;
      else {
        let o;
        s in this.totals ? o = this.totals[s] : this.totals[s] = 0;
        const u = tidy(() => add$2(this.totals[s], mul(a, n)));
        this.totals[s] = u, o != null && o.dispose();
      }
    }
  }
  async onEpochEnd(e, t) {
    if (t != null)
      for (const n of this.params.metrics)
        this.totals[n] != null && (typeof this.totals[n] == "number" ? t[n] = this.totals[n] / this.seen : tidy(() => {
          const s = mul(div$1(1, this.seen), this.totals[n]);
          t[n] = s, this.totals[n].dispose(), keep(t[n]);
        }));
  }
}
class History extends BaseCallback {
  async onTrainBegin(e) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(e, t) {
    t == null && (t = {}), this.epoch.push(e);
    for (const n in t)
      this.history[n] == null && (this.history[n] = []), this.history[n].push(t[n]);
  }
  /**
   * Await the values of all losses and metrics.
   */
  async syncData() {
    const e = [], t = [], n = [];
    for (const a in this.history) {
      const o = this.history[a];
      for (let u = 0; u < o.length; ++u)
        if (typeof o[u] != "number") {
          const l = o[u];
          e.push(l.data()), t.push(a), n.push(u);
        }
    }
    const s = await Promise.all(e);
    for (let a = 0; a < s.length; ++a)
      this.history[t[a]][n[a]].dispose(), this.history[t[a]][n[a]] = s[a][0];
  }
}
class CustomCallback extends BaseCallback {
  constructor(e, t) {
    if (super(), this.currentEpoch = 0, this.nowFunc = e.nowFunc, this.nextFrameFunc = e.nextFrameFunc || nextFrame, this.yieldEvery = t || "auto", this.yieldEvery === "auto" && (this.yieldEvery = DEFAULT_YIELD_EVERY_MS), this.yieldEvery === "never" && e.onYield != null)
      throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    isNumber(this.yieldEvery) && (this.maybeWait = debounce(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = e.onTrainBegin, this.trainEnd = e.onTrainEnd, this.epochBegin = e.onEpochBegin, this.epochEnd = e.onEpochEnd, this.batchBegin = e.onBatchBegin, this.batchEnd = e.onBatchEnd, this.yield = e.onYield;
  }
  async maybeWait(e, t, n) {
    const s = [];
    this.yield != null && (await resolveScalarsInLogs(n), s.push(this.yield(e, t, n))), s.push(this.nextFrameFunc()), await Promise.all(s);
  }
  async onEpochBegin(e, t) {
    this.currentEpoch = e, this.epochBegin != null && (await resolveScalarsInLogs(t), await this.epochBegin(e, t));
  }
  async onEpochEnd(e, t) {
    const n = [];
    this.epochEnd != null && (await resolveScalarsInLogs(t), n.push(this.epochEnd(e, t))), this.yieldEvery === "epoch" && n.push(this.nextFrameFunc()), await Promise.all(n);
  }
  async onBatchBegin(e, t) {
    this.batchBegin != null && (await resolveScalarsInLogs(t), await this.batchBegin(e, t));
  }
  async onBatchEnd(e, t) {
    const n = [];
    this.batchEnd != null && (await resolveScalarsInLogs(t), n.push(this.batchEnd(e, t))), this.yieldEvery === "batch" ? n.push(this.nextFrameFunc()) : isNumber(this.yieldEvery) && n.push(this.maybeWait(this.currentEpoch, e, t)), await Promise.all(n);
  }
  async onTrainBegin(e) {
    this.trainBegin != null && (await resolveScalarsInLogs(e), await this.trainBegin(e));
  }
  async onTrainEnd(e) {
    this.trainEnd != null && (await resolveScalarsInLogs(e), await this.trainEnd(e));
  }
}
function standardizeCallbacks(r, e) {
  return r == null && (r = {}), r instanceof BaseCallback ? [r] : Array.isArray(r) && r[0] instanceof BaseCallback ? r : toList(r).map((n) => new CustomCallback(n, e));
}
class CallbackConstructorRegistry {
  /**
   * Blocks public access to constructor.
   */
  constructor() {
  }
  /**
   * Register a tf.LayersModel.fit() callback constructor.
   *
   * The registered callback constructor will be used to instantiate
   * callbacks for every tf.LayersModel.fit() call afterwards.
   *
   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`
   *   is to be reigstered.
   * @param callbackConstructor A no-arg constructor for `tf.Callback`.
   * @throws Error, if the same callbackConstructor has been registered before,
   *   either at the same or a different `verbosityLevel`.
   */
  static registerCallbackConstructor(e, t) {
    assert$1(e >= 0 && Number.isInteger(e), () => `Verbosity level is expected to be an integer >= 0, but got ${e}`), CallbackConstructorRegistry.checkForDuplicate(t), CallbackConstructorRegistry.constructors[e] == null && (CallbackConstructorRegistry.constructors[e] = []), CallbackConstructorRegistry.constructors[e].push(t);
  }
  static checkForDuplicate(e) {
    for (const t in CallbackConstructorRegistry.constructors)
      CallbackConstructorRegistry.constructors[+t].forEach((s) => {
        if (s === e)
          throw new ValueError("Duplicate callback constructor.");
      });
  }
  /**
   * Clear all registered callback constructors.
   */
  static clear() {
    CallbackConstructorRegistry.constructors = {};
  }
  /**
   * Create callbacks using the registered callback constructors.
   *
   * Given `verbosityLevel`, all constructors registered at that level or above
   * will be called and the instantiated callbacks will be used.
   *
   * @param verbosityLevel: Level of verbosity.
   */
  static createCallbacks(e) {
    const t = [];
    for (const n in CallbackConstructorRegistry.constructors) {
      const s = +n;
      e >= s && t.push(...CallbackConstructorRegistry.constructors[s]);
    }
    return t.map((n) => new n());
  }
}
CallbackConstructorRegistry.constructors = {};
function configureCallbacks(r, e, t, n, s, a, o, u, l) {
  const f = new History(), c = [
    new BaseLogger(),
    ...CallbackConstructorRegistry.createCallbacks(e)
  ];
  r != null && c.push(...r), c.push(f);
  const h = new CallbackList(c);
  return h.setParams({
    epochs: t,
    initialEpoch: n,
    samples: s,
    steps: a,
    batchSize: o,
    verbose: e,
    doValidation: u,
    metrics: l
  }), { callbackList: h, history: f };
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function deserialize(r, e = {}, t = !1) {
  return deserializeKerasObject(r, SerializationMap.getMap().classNameMap, e, "layer", t);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function l2Normalize(r, e) {
  return tidy(() => {
    r.dtype !== "float32" && (r = cast$3(r, "float32"));
    const t = sum$2(square$1(r), e, !0), n = fill$2(t.shape, epsilon$1()), s = sqrt$2(maximum$3(t, n));
    return div$1(r, s);
  });
}
function meanSquaredError$1(r, e) {
  return tidy(() => mean$1(square$1(sub$2(e, r)), -1));
}
function meanAbsoluteError$1(r, e) {
  return tidy(() => mean$1(abs$3(sub$2(e, r)), -1));
}
function meanAbsolutePercentageError$1(r, e) {
  return tidy(() => {
    const t = sub$2(r, e), n = clipByValue$2(abs$3(r), epsilon$1(), Number.MAX_VALUE), s = abs$3(div$1(t, n));
    return mul(100, mean$1(s, -1));
  });
}
function meanSquaredLogarithmicError(r, e) {
  return tidy(() => {
    const t = clipByValue$2(e, epsilon$1(), Number.MAX_VALUE), n = log$2(add$2(1, t)), s = clipByValue$2(r, epsilon$1(), Number.MAX_VALUE), a = log$2(add$2(1, s));
    return mean$1(square$1(sub$2(n, a)), -1);
  });
}
function squaredHinge(r, e) {
  return tidy(() => {
    const t = maximum$3(0, sub$2(1, mul(r, e)));
    return mean$1(square$1(t), -1);
  });
}
function hinge(r, e) {
  return tidy(() => {
    const t = maximum$3(0, sub$2(1, mul(r, e)));
    return mean$1(t, -1);
  });
}
function categoricalHinge(r, e) {
  return tidy(() => {
    const t = sum$2(mul(r, e), -1), n = max$4(mul(sub$2(1, r), e), -1);
    return maximum$3(0, add$2(1, sub$2(n, t)));
  });
}
function logcosh(r, e) {
  return tidy(() => {
    const t = Math.log(2), n = sub$2(e, r), s = sub$2(add$2(n, softplus$2(mul(-2, n))), t);
    return mean$1(s, -1);
  });
}
function categoricalCrossentropy$2(r, e, t = !1) {
  return tidy(() => {
    if (t)
      e = softmax$3(e);
    else {
      const n = sum$2(e, e.shape.length - 1, !0);
      e = div$1(e, n);
    }
    return e = clipByValue$2(e, epsilon$1(), 1 - epsilon$1()), neg$2(sum$2(mul(cast$3(r, "float32"), log$2(e)), e.shape.length - 1));
  });
}
function sparseCategoricalCrossentropy$1(r, e, t = !1) {
  return tidy(() => {
    const n = cast$3(floor$3(flatten$1(r)), "int32");
    e = clipByValue$2(e, epsilon$1(), 1 - epsilon$1());
    const s = e.shape, a = reshape$3(oneHot$2(n, s[s.length - 1]), s);
    return categoricalCrossentropy$2(a, e, t);
  });
}
function sigmoidCrossEntropyWithLogits(r, e) {
  if (!arraysEqual(r.shape, e.shape))
    throw new ValueError(`logits and labels must have the same shape, but got shapes ${JSON.stringify(r.shape)} and ${JSON.stringify(e.shape)}`);
  return tidy(() => {
    const t = relu$2(e), n = neg$2(abs$3(e));
    return add$2(sub$2(t, mul(e, r)), log1p$2(exp$2(n)));
  });
}
function binaryCrossentropy$2(r, e) {
  return tidy(() => {
    let t;
    return t = clipByValue$2(e, epsilon$1(), 1 - epsilon$1()), t = log$2(div$1(t, sub$2(1, t))), mean$1(sigmoidCrossEntropyWithLogits(r, t), -1);
  });
}
function kullbackLeiblerDivergence(r, e) {
  return tidy(() => {
    const t = clipByValue$2(r, epsilon$1(), 1), n = clipByValue$2(e, epsilon$1(), 1);
    return sum$2(mul(r, log$2(div$1(t, n))), -1);
  });
}
function poisson(r, e) {
  return tidy(() => {
    const t = log$2(add$2(epsilon$1(), e));
    return mean$1(sub$2(e, mul(r, t)), -1);
  });
}
function cosineProximity$1(r, e) {
  return tidy(() => {
    const t = l2Normalize(r, -1), n = l2Normalize(e, -1), s = mul(t, n);
    return neg$2(sum$2(s, -1));
  });
}
const lossesMap = {
  meanSquaredError: meanSquaredError$1,
  meanAbsoluteError: meanAbsoluteError$1,
  meanAbsolutePercentageError: meanAbsolutePercentageError$1,
  meanSquaredLogarithmicError,
  squaredHinge,
  hinge,
  categoricalHinge,
  logcosh,
  categoricalCrossentropy: categoricalCrossentropy$2,
  sparseCategoricalCrossentropy: sparseCategoricalCrossentropy$1,
  binaryCrossentropy: binaryCrossentropy$2,
  kullbackLeiblerDivergence,
  poisson,
  cosineProximity: cosineProximity$1
};
function get$1(r) {
  if (typeof r == "string") {
    if (r in lossesMap)
      return lossesMap[r];
    let e = `Unknown loss ${r}`;
    throw r.toLowerCase().includes("softmaxcrossentropy") && (e = `Unknown loss ${r}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new ValueError(e);
  } else
    return r;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function binaryAccuracy$1(r, e) {
  return tidy(() => {
    const t = mul(0.5, onesLike$2(e)), n = cast$2(greater$3(e, t), r.dtype);
    return mean$1(equal$2(r, n), -1);
  });
}
function categoricalAccuracy$1(r, e) {
  return tidy(() => cast$2(equal$2(argMax$2(r, -1), argMax$2(e, -1)), "float32"));
}
function truePositives(r, e) {
  return tidy(() => cast$3(sum$2(logicalAnd$2(equal$2(r, 1), equal$2(e, 1))), "float32"));
}
function falseNegatives(r, e) {
  return tidy(() => cast$3(sum$2(logicalAnd$2(equal$2(r, 1), equal$2(e, 0))), "float32"));
}
function falsePositives(r, e) {
  return tidy(() => cast$3(sum$2(logicalAnd$2(equal$2(r, 0), equal$2(e, 1))), "float32"));
}
function precision$1(r, e) {
  return tidy(() => {
    const t = truePositives(r, e), n = falsePositives(r, e), s = add$2(t, n);
    return cast$3(where(greater$3(s, 0), div$1(t, s), 0), "float32");
  });
}
function recall$1(r, e) {
  return tidy(() => {
    const t = truePositives(r, e), n = falseNegatives(r, e), s = add$2(t, n);
    return cast$3(where(greater$3(s, 0), div$1(t, s), 0), "float32");
  });
}
function binaryCrossentropy$1(r, e) {
  return binaryCrossentropy$2(r, e);
}
function sparseCategoricalAccuracy$1(r, e) {
  return r.rank === e.rank && (r = squeeze(r, [r.rank - 1])), e = argMax$2(e, -1), e.dtype !== r.dtype && (e = cast$3(e, r.dtype)), cast$3(equal$2(r, e), "float32");
}
function r2Score$1(r, e) {
  return tidy(() => {
    const t = r.sub(e).square().sum(), n = r.sub(r.mean()).square().sum();
    return scalar(1).sub(t.div(n));
  });
}
const mse$1 = meanSquaredError$1, MSE$1 = meanSquaredError$1, mae = meanAbsoluteError$1, MAE = meanAbsoluteError$1, mape$1 = meanAbsolutePercentageError$1, MAPE$1 = meanAbsolutePercentageError$1, categoricalCrossentropy$1 = categoricalCrossentropy$2, cosine = cosineProximity$1, sparseCategoricalCrossentropy = sparseCategoricalCrossentropy$1, metricsMap = {
  binaryAccuracy: binaryAccuracy$1,
  categoricalAccuracy: categoricalAccuracy$1,
  precision: precision$1,
  categoricalCrossentropy: categoricalCrossentropy$1,
  sparseCategoricalCrossentropy,
  mse: mse$1,
  MSE: MSE$1,
  mae,
  MAE,
  mape: mape$1,
  MAPE: MAPE$1,
  cosine
};
function get(r) {
  if (typeof r == "string" && r in metricsMap)
    return metricsMap[r];
  if (typeof r != "string" && r != null)
    return r;
  throw new ValueError(`Unknown metric ${r}`);
}
function getLossOrMetricName(r) {
  if (assert(r !== null, `Unknown LossOrMetricFn ${r}`), typeof r == "string")
    return r;
  {
    let e;
    for (const t of Object.keys(lossesMap))
      if (lossesMap[t] === r) {
        e = t;
        break;
      }
    if (e !== void 0)
      return e;
    for (const t of Object.keys(metricsMap))
      if (metricsMap[t] === r) {
        e = t;
        break;
      }
    return e !== void 0 ? e : r.name;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function getOptimizer(r) {
  const e = {
    Adagrad: () => train.adagrad(0.01),
    Adadelta: () => train.adadelta(1, 0.95, epsilon$1()),
    Adam: () => train.adam(1e-3, 0.9, 0.999, epsilon$1()),
    Adamax: () => train.adamax(2e-3, 0.9, 0.999, epsilon$1(), 0),
    RMSProp: () => train.rmsprop(1e-3, 0.9, 0, epsilon$1()),
    SGD: () => train.sgd(0.01)
  };
  if (e.adagrad = e.Adagrad, e.adadelta = e.Adadelta, e.adam = e.Adam, e.adamax = e.Adamax, e.rmsprop = e.RMSProp, e.sgd = e.SGD, r in e)
    return e[r]();
  throw new ValueError(`Unknown Optimizer ${r}`);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;
function checkUserDefinedMetadata(r, e, t = !1) {
  if (r == null || typeof r != "object" || Object.getPrototypeOf(r) !== Object.prototype || !plainObjectCheck(r))
    throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (t) {
    const n = JSON.stringify(r);
    n.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH && console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);
  }
}
function plainObjectCheck(r) {
  if (r === null)
    return !0;
  if (typeof r == "object")
    if (Object.getPrototypeOf(r) === Object.prototype) {
      const e = Object.keys(r);
      for (const t of e)
        if (typeof t != "string" || !plainObjectCheck(r[t]))
          return !1;
      return !0;
    } else if (Array.isArray(r)) {
      for (const e of r)
        if (!plainObjectCheck(e))
          return !1;
      return !0;
    } else
      return !1;
  else {
    const e = typeof r;
    return e === "string" || e === "number" || e === "boolean";
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function printSummary(r, e, t, n = console.log) {
  const s = isModelSequentialLike(r), a = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
  s ? (e = e || 90, t = t || [0.32, 0.61, 0.89, 1]) : (e = e || 115, t = t || [0.24, 0.48, 0.7, 0.8, 1]), t[t.length - 1] <= 1 && (t = t.map((c) => Math.floor(e * c)));
  let o;
  if (!s) {
    a.push("Receives inputs"), o = [];
    for (const c in r.nodesByDepth)
      o.push(...r.nodesByDepth[c]);
  }
  n("_".repeat(e)), printRow(a, t, n), n("=".repeat(e));
  const u = r.layers;
  for (let c = 0; c < u.length; ++c)
    s ? printLayerSummary(u[c], t, n) : printLayerSummaryWithConnections(u[c], t, o, n), n((c === u.length - 1 ? "=" : "_").repeat(e));
  r.checkTrainableWeightsConsistency();
  const l = countTrainableParams(r), f = countParamsInWeights(r.nonTrainableWeights);
  n(`Total params: ${l + f}`), n(`Trainable params: ${l}`), n(`Non-trainable params: ${f}`), n("_".repeat(e));
}
function countTrainableParams(r) {
  let e;
  return r.collectedTrainableWeights != null ? e = countParamsInWeights(r.collectedTrainableWeights) : e = countParamsInWeights(r.trainableWeights), e;
}
function isModelSequentialLike(r) {
  let e = !0;
  const t = [], n = [];
  for (const s in r.nodesByDepth)
    t.push(r.nodesByDepth[s]);
  for (const s of t) {
    if (s.length > 1 || s.length === 1 && s[0].inboundLayers.length > 1) {
      e = !1;
      break;
    }
    n.push(...s);
  }
  if (e)
    for (const s of r.layers) {
      let a = !1;
      for (const o of s.inboundNodes)
        if (n.indexOf(o) !== -1)
          if (a) {
            e = !1;
            break;
          } else
            a = !0;
      if (!e)
        break;
    }
  return e;
}
function printRow(r, e, t = console.log) {
  let n = "";
  for (let s = 0; s < r.length; ++s)
    s > 0 && (n = n.slice(0, n.length - 1) + " "), n += r[s], n = n.slice(0, e[s]), n += " ".repeat(e[s] - n.length);
  t(n);
}
function printLayerSummary(r, e, t) {
  let n, s;
  try {
    s = r.inboundNodes.map((l) => JSON.stringify(l.inputShapes)).join(",");
  } catch {
    s = "multiple";
  }
  try {
    n = JSON.stringify(r.outputShape);
  } catch {
    n = "multiple";
  }
  const a = r.name, o = r.getClassName(), u = [
    `${a} (${o})`,
    s,
    n,
    r.countParams().toString()
  ];
  printRow(u, e, t);
}
function printLayerSummaryWithConnections(r, e, t, n) {
  let s, a;
  try {
    a = r.inboundNodes.map((h) => JSON.stringify(h.inputShapes)).join(",");
  } catch {
    a = "multiple";
  }
  try {
    s = JSON.stringify(r.outputShape);
  } catch {
    s = "multiple";
  }
  const o = [];
  for (const h of r.inboundNodes)
    if (!(t != null && t.length > 0 && t.indexOf(h) === -1))
      for (let d = 0; d < h.inboundLayers.length; ++d) {
        const m = h.inboundLayers[d].name, g = h.nodeIndices[d], y = h.tensorIndices[d];
        o.push(`${m}[${g}][${y}]`);
      }
  const u = r.name, l = r.getClassName(), f = o.length === 0 ? "" : o[0], c = [
    `${u} (${l})`,
    a,
    s,
    r.countParams().toString(),
    f
  ];
  printRow(c, e, n);
  for (let h = 1; h < o.length; ++h)
    printRow(["", "", "", "", o[h]], e, n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function isArrayItemInputOrOutputName(r, e, t) {
  return (r === "inboundNodes" || r === "outputLayers" || r === "inputLayers") && e === 0 && typeof t == "string";
}
function convertPythonicToTs(r, e) {
  if (r === null)
    return null;
  if (typeof r == "string")
    return toCamelCase(r);
  if (typeof r == "number" || typeof r == "boolean")
    return r;
  if (r instanceof Array) {
    const t = [], n = r.length;
    for (let s = 0; s < n; ++s) {
      const a = r[s];
      isArrayItemInputOrOutputName(e, s, a) ? t.push(a) : t.push(convertPythonicToTs(a, e));
    }
    return t;
  } else {
    const t = {};
    for (const n of Object.keys(r)) {
      const s = r[n];
      if (n === "name" && typeof s == "string")
        t[n] = s;
      else {
        const a = toCamelCase(n);
        t[a] = convertPythonicToTs(s, a);
      }
    }
    return t;
  }
}
function convertTsToPythonic(r, e) {
  if (r == null)
    return null;
  if (typeof r == "string")
    return toSnakeCase(r);
  if (typeof r == "number" || typeof r == "boolean")
    return r;
  if (r instanceof Array) {
    const t = [], n = r.length;
    for (let s = 0; s < n; ++s) {
      const a = r[s];
      isArrayItemInputOrOutputName(e, s, a) ? t.push(a) : t.push(convertTsToPythonic(a, e));
    }
    return t;
  } else {
    const t = {};
    for (const n of Object.keys(r)) {
      const s = r[n], a = toSnakeCase(n);
      (n === "name" || n === "className") && typeof s == "string" ? t[a] = s : t[a] = convertTsToPythonic(s, n);
    }
    return t;
  }
}
/** @license See the LICENSE file. */
const version$6 = "4.22.0";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const isKerasSavedModelFormat = (r) => {
  const e = Object.keys(r);
  if (e.length === 0)
    return !1;
  const t = e[0].split("/");
  return !isNaN(parseInt(t[t.length - 1], 10));
};
class Container extends Layer {
  constructor(e) {
    if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = e.name, this.name == null) {
      const w = this.getClassName().toLowerCase();
      this.name = getUid(w);
    }
    if (this.supportsMasking = !1, this.trainable_ = !0, Array.isArray(e.inputs) ? this.inputs = e.inputs.slice() : this.inputs = [e.inputs], Array.isArray(e.outputs) ? this.outputs = e.outputs.slice() : this.outputs = [e.outputs], unique$2(this.inputs).length !== this.inputs.length)
      throw new ValueError(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((w) => w.name)}`);
    unique$2(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((w) => w.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (const w of this.outputs) {
      const I = w.sourceLayer, T = w.nodeIndex, _ = w.tensorIndex;
      this.outputLayers.push(I), this.outputLayersNodeIndices.push(T), this.outputLayersTensorIndices.push(_);
    }
    for (const w of this.inputs) {
      const I = w.sourceLayer, T = w.nodeIndex, _ = w.tensorIndex;
      assert(T === 0, "input layer has >1 nodes"), assert(_ === 0, "input layer has >1 tensors"), this.inputLayers.push(I), this.inputLayersNodeIndices.push(T), this.inputLayersTensorIndices.push(_);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let w = 0; w < this.inputLayers.length; w++) {
      const I = this.inputLayers[w];
      if (!(I instanceof InputLayer))
        throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${w} (0-based) originates from layer type ${I.getClassName()}.`);
      this.inputNames.push(I.name), this.feedInputShapes.push(I.batchInputShape), this.feedInputNames.push(I.name);
    }
    for (const w of this.outputLayers)
      this.outputNames.push(w.name);
    this.internalInputShapes = this.inputs.map((w) => w.shape), this.internalOutputShapes = this.outputs.map((w) => w.shape);
    const t = {}, n = {}, s = {}, a = {}, o = {}, u = [], l = (w, I, T, _, F, O) => {
      (_ == null || F == null || O == null) && (_ = w.sourceLayer, F = w.nodeIndex, O = w.tensorIndex);
      const q = _.inboundNodes[F];
      if (T.indexOf(q) !== -1)
        throw new RuntimeError(`The tensor ${w.name} at layer "${_.name}" is part of a cycle.`);
      if (I.indexOf(q) !== -1)
        return;
      this.containerNodes.add(Container.nodeKey(_, F)), _.id in o || (o[_.id] = Object.keys(o).length), T.indexOf(q) === -1 && T.push(q);
      const V = q.inboundLayers.length;
      for (let H = 0; H < V; H++) {
        const R = q.inputTensors[H], $ = q.inboundLayers[H], S = q.nodeIndices[H], x = q.tensorIndices[H];
        l(R, I, T, $, S, x);
      }
      for (I.push(q); T.indexOf(q) >= 0; )
        T.splice(T.indexOf(q), 1);
      u.push(q);
    }, f = [], c = [];
    for (const w of this.outputs)
      l(w, f, c);
    const h = u.slice().reverse();
    for (const w of h) {
      n[w.id] = w, w.id in t || (t[w.id] = 0);
      let I = t[w.id];
      const T = s[w.outboundLayer.id] == null ? 0 : s[w.outboundLayer.id];
      I = Math.max(I, T), s[w.outboundLayer.id] = I, a[w.outboundLayer.id] = w.outboundLayer, t[w.id] = I;
      for (let _ = 0; _ < w.inboundLayers.length; _++) {
        const F = w.inboundLayers[_], O = w.nodeIndices[_], q = F.inboundNodes[O], V = t[q.id] == null ? 0 : t[q.id];
        t[q.id] = Math.max(I + 1, V), n[q.id] = q;
      }
    }
    const d = {};
    for (const w in t) {
      const I = t[w];
      I in d || (d[I] = []), d[I].push(n[w]);
    }
    const m = {};
    for (const w in s) {
      const I = s[w];
      I in m || (m[I] = []), m[I].push(a[w]);
    }
    let g = Object.keys(m).map((w) => parseInt(w, 10)).sort(reverseNumberCompare);
    this.layers = [];
    for (const w of g) {
      const I = m[w];
      I.sort((T, _) => {
        const F = o[T.id], O = o[_.id];
        return F < O ? -1 : F > O ? 1 : 0;
      });
      for (const T of I)
        T instanceof Container && this.internalContainerRefs.push(T), this.layers.push(T);
    }
    this.layersByDepth = m, g = Object.keys(d).map((w) => parseInt(w, 10)).sort(reverseNumberCompare);
    const y = this.inputs.slice(), b = [];
    for (const w of g)
      for (const I of d[w]) {
        const T = I.outboundLayer;
        if (T != null) {
          for (const _ of I.inputTensors)
            if (y.indexOf(_) === -1)
              throw new RuntimeError(`Graph disconnected: cannot obtain value for tensor ${_} at layer "${T.name}". The following previous layers were accessed without issue: ${b}`);
          for (const _ of I.outputTensors)
            y.push(_);
          b.push(T.name);
        }
      }
    this.nodesByDepth = d;
    const v = this.layers.map((w) => w.name);
    for (const w of v) {
      const I = v.filter((T) => T === w).length;
      if (I !== 1)
        throw new RuntimeError(`The name "${w}" is used ${I} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(v));
    }
    this.outboundNodes = [], this.inboundNodes = [], new Node({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: this.inputs,
      outputTensors: this.outputs,
      inputMasks: this.inputs.map((w) => null),
      outputMasks: this.outputs.map((w) => null),
      inputShapes: this.inputs.map((w) => w.shape),
      outputShapes: this.outputs.map((w) => w.shape)
    }), this.built = !0, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Container '${this.name}' is already disposed.`);
  }
  /**
   * Attempt to dispose a LayersModel's weights.
   *
   * This method decrease the reference count of the LayersModel object by 1.
   *
   * A LayersModel is reference-counted. Its reference count is incremented by 1
   * when it is first constructed and when it is used as a Layer of another
   * LayersModel.
   *
   * If the reference count of a LayersModel becomes 0, the `dispose` method of
   * all its constituent `Layer`s will be called.
   *
   * Note: If the reference count is greater than 0 after the decrement, the
   * `dispose` method of its constituent `Layer`s will *not* be called.
   *
   * After a LayersModel is disposed, it cannot be used in calls such as
   * 'predict`, `evaluate` or `fit` anymore.
   *
   * @returns A DisposeResult Object with the following fields:
   *   - refCountAfterDispose: The reference count of the LayersModel after this
   *     `dispose()` call.
   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
   *     during this `dispose()` call.
   * @throws {Error} If the layer is not built yet, or if the LayersModel has
   *   already been disposed.
   */
  dispose() {
    this.assertNotDisposed();
    const e = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount === 0) {
      for (const t of this.layers)
        e.numDisposedVariables += t.dispose().numDisposedVariables;
      for (const t of this.internalContainerRefs)
        e.numDisposedVariables += t.dispose().numDisposedVariables;
    }
    return e.refCountAfterDispose = this._refCount, e;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this.layers.forEach((t) => {
      t._trainableWeights.forEach((n) => n.trainable = e);
    }), this.trainable_ = e;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0)
      throw new ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable)
      return [];
    let e = [];
    for (const t of this.layers)
      e = e.concat(t.trainableWeights);
    return e;
  }
  get nonTrainableWeights() {
    const e = [];
    for (const t of this.layers)
      e.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      const t = [];
      for (const n of this.layers)
        t.push(...n.trainableWeights);
      return t.concat(e);
    }
    return e;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  /**
   * Loads all layer weights from a JSON object.
   *
   * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /
   *   TypeScript. The utility script at `scripts/pykeras.py` offers means
   *   to convert them into JSON strings compatible with this method.
   * Porting Note: TensorFlow.js Layers supports only loading by name currently.
   *
   * @param weights A JSON mapping weight names to weight values as nested
   *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight
   *   names to `tf.Tensor` objects.
   * @param strict Require that the provided weights exactly match those
   *   required by the container.  Default: `true`.  Passing `false` means that
   *   extra weights and missing weights will be silently ignored.
   */
  loadWeights(e, t = !0) {
    const n = {};
    let s = 0;
    const a = isKerasSavedModelFormat(e);
    a && this.parseWeights(e);
    for (const u of this.layers)
      for (const [l, f] of u.weights.entries()) {
        const c = a ? `${f.name.split("/").slice(0, -1).join("/") + "/"}${l}` : f.originalName;
        if (n[c] != null)
          throw new ValueError(`Duplicate weight name: ${c}`);
        n[c] = f, s++;
      }
    const o = [];
    for (const u in e) {
      let l = u;
      if (n[u] == null) {
        const f = u.split("/");
        l = f.slice(0, -2).concat([f[f.length - 1]]).join("/");
      }
      if (n[l] != null)
        o.push([n[l], e[u]]);
      else if (t)
        throw new ValueError(`Provided weight data has no target variable: ${u}`);
      delete n[l];
    }
    if (t) {
      const u = [];
      for (const l in n)
        u.push(l);
      if (u.length > 0)
        throw new ValueError(`${u.length} of ${s} weights are not set: ${u}`);
    }
    batchSetValue(o);
  }
  parseWeights(e) {
    for (const t in Object.keys(e)) {
      const n = t.split("/"), s = ["vars", "layer_checkpoint_dependencies"], a = n.map((o) => o.startsWith("_") ? o.slice(1) : o).filter((o) => !s.includes(o)).join("/");
      a !== t && (e[a] = e[t], delete e[t]);
    }
  }
  /**
   * Util shared between different serialization methods.
   * @returns LayersModel config with Keras version information added.
   */
  updatedConfig() {
    const e = this.getConfig(), t = {};
    return t.className = this.getClassName(), t.config = e, t.kerasVersion = `tfjs-layers ${version$6}`, t.backend = "TensorFlow.js", t;
  }
  /**
   * Returns a JSON string containing the network configuration.
   *
   * To load a network from a JSON save file, use
   * models.modelFromJSON(jsonString);
   * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras
   * @param returnString Whether the return value should be stringified
   *    (default: `true`).
   * @returns a JSON string if `returnString` (default), or a JSON object if
   *   `!returnString`.
   */
  // tslint:disable-next-line:no-any
  toJSON(e, t = !0) {
    const n = convertTsToPythonic(this.updatedConfig());
    return t ? JSON.stringify(n) : n;
  }
  /**
   * Call the model on new inputs.
   *
   * In this case `call` just reapplies all ops in the graph to the new inputs
   * (e.g. build a new computational graph from the provided inputs).
   *
   * @param inputs A tensor or list of tensors.
   * @param mask A mask or list of masks. A mask can be either a tensor or null
   *   (no mask).
   *
   * @return A tensor if there is a single output, or a list of tensors if there
   *   are more than one outputs.
   */
  call(e, t) {
    return tidy(() => {
      e = toList(e);
      const n = new FeedDict();
      for (let s = 0; s < this.inputs.length; ++s)
        n.add(this.inputs[s], e[s]);
      return execute(this.outputs, n, t);
    });
  }
  /**
   * Computes an output mask tensor.
   *
   * @param inputs Tensor or list of tensors.
   * @param mask Tensor or list of tensors.
   *
   * @return null or a tensor (or list of tensors, one per output tensor of the
   * layer).
   */
  computeMask(e, t) {
    return tidy(() => {
      e = toList(e);
      let n;
      return t == null ? n = pyListRepeat(null, e.length) : n = toList(t), this.runInternalGraph(e, n)[1];
    });
  }
  /**
   * Computes the output shape of the layer.
   *
   * Assumes that the layer will be built to match that input shape provided.
   *
   * @param inputShape A shape (tuple of integers) or a list of shape tuples
   *   (one per output tensor of the layer). Shape tuples can include null for
   *   free dimensions, instead of an integer.
   */
  computeOutputShape(e) {
    const t = normalizeShapeList(e);
    if (t.length !== this.inputLayers.length)
      throw new ValueError(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);
    const n = {};
    for (let u = 0; u < t.length; u++) {
      const l = this.inputLayers[u], f = t[u], c = l.name + "_0_0";
      n[c] = f;
    }
    const s = Object.keys(this.nodesByDepth).map((u) => parseInt(u, 10)).sort(reverseNumberCompare);
    if (s.length > 1)
      for (const u of s) {
        const l = this.nodesByDepth[u];
        for (const f of l) {
          const c = f.outboundLayer;
          if (this.inputLayers.map((y) => y.id).indexOf(c.id) !== -1)
            continue;
          const h = [];
          for (let y = 0; y < f.inboundLayers.length; y++) {
            const b = f.inboundLayers[y], v = f.nodeIndices[y], w = f.tensorIndices[y], I = `${b.name}_${v}_${w}`, T = n[I];
            h.push(T);
          }
          const d = c.computeOutputShape(singletonOrArray(h)), m = normalizeShapeList(d), g = c.inboundNodes.indexOf(f);
          for (let y = 0; y < m.length; y++) {
            const b = `${c.name}_${g}_${y}`;
            n[b] = m[y];
          }
        }
      }
    const a = [], o = [];
    for (let u = 0; u < this.outputLayers.length; u++) {
      const l = this.outputLayers[u], f = this.outputLayersNodeIndices[u], c = this.outputLayersTensorIndices[u], h = `${l.name}_${f}_${c}`;
      o.push(h);
    }
    for (let u = 0; u < o.length; u++) {
      const l = o[u];
      assert(l in n), a.push(n[l]);
    }
    return singletonOrArray(a);
  }
  /**
   * Computes output tensors for new inputs.
   *
   * Note:
   *   - Expects `inputs` to be a list (potentially with 1 element).
   *
   * @param inputs List of tensors
   * @param masks List of masks (tensors or null).
   * @return Three lists: outputTensors, outputMasks, outputShapes
   */
  runInternalGraph(e, t) {
    t == null && (t = pyListRepeat(null, e.length));
    const n = {};
    for (let l = 0; l < this.inputs.length; ++l) {
      const f = this.inputs[l], c = e[l], h = t[l];
      n[f.id] = [c, h];
    }
    const s = Object.keys(this.nodesByDepth).map((l) => parseInt(l, 10)).sort(reverseNumberCompare);
    for (const l of s) {
      const f = this.nodesByDepth[l];
      for (const c of f) {
        const h = c.outboundLayer, d = c.inputTensors, m = c.outputTensors, g = new Array();
        for (const y of d)
          y.id in n && g.push(n[y.id]);
        if (g.length === d.length) {
          let y = {}, b, v, w, I;
          if (c.callArgs != null && (y = c.callArgs), g.length === 1) {
            const [T, _] = g[0];
            y.mask == null && (y.mask = _), w = toList(h.call(T, y)), I = toList(h.computeMask(T, _)), b = [T], v = [_];
          } else
            b = g.map((T) => T[0]), v = g.map((T) => T[1]), y.mask == null && (y.mask = v), w = toList(h.call(b, y)), I = toList(h.computeMask(b, v));
          if (h.activityRegularizer)
            throw new NotImplementedError("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let T = 0; T < m.length; ++T) {
            const _ = m[T], F = w[T], O = I[T];
            n[_.id] = [F, O];
          }
        }
      }
    }
    const a = [], o = [], u = [];
    for (const l of this.outputs) {
      assert(l.id in n, `Could not compute output ${l.name} : ${l.id}`);
      const [f, c] = n[l.id];
      u.push(f.shape), a.push(f), o.push(c);
    }
    return [a, o, u];
  }
  /**
   * Builds a map of internal node keys to node ordering.
   * Used in serializaion a node orderings may change as unused nodes are
   * dropped. Porting Note:  This helper method was pulled out of getConfig to
   * improve readability.
   * @param layers An array of Layers in the model.
   * @returns Map of Node Keys to index order within the layer.
   */
  buildNodeConversionMap(e) {
    const t = {};
    let n;
    for (const s of this.layers) {
      n = s instanceof Container ? 1 : 0;
      for (let a = 0; a < s.inboundNodes.length; a++) {
        const o = Container.nodeKey(s, a);
        this.containerNodes.has(o) && (t[o] = n, n += 1);
      }
    }
    return t;
  }
  getLayer(e, t) {
    if (t != null)
      return this.findLayer(t);
    if (e == null)
      throw new ValueError("Provide either a layer name or layer index");
    if (typeof e == "number")
      return this.findLayer(e);
    for (const n of this.layers)
      if (n.name === e)
        return n;
    throw new ValueError(`No such layer: ${e}`);
  }
  findLayer(e) {
    if (this.layers.length <= e)
      throw new ValueError(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);
    return this.layers[e];
  }
  /**
   * Retrieves the Container's current loss values.
   *
   * Used for regularizers during training.
   */
  calculateLosses() {
    return tidy(() => {
      const e = [];
      for (const t of this.layers)
        for (let n = 0; n < t.inboundNodes.length; ++n) {
          const s = Container.nodeKey(t, n);
          this.containerNodes.has(s) && e.push(...t.calculateLosses());
        }
      return e;
    });
  }
  getConfig() {
    const e = { name: this.name }, t = this.buildNodeConversionMap(this.layers), n = [];
    for (const o of this.layers) {
      const u = o.getClassName(), l = o.getConfig(), f = [];
      for (let h = 0; h < o.inboundNodes.length; h++) {
        const d = o.inboundNodes[h], m = Container.nodeKey(o, h);
        let g = {};
        if (this.containerNodes.has(m)) {
          if (d.callArgs)
            try {
              JSON.stringify(d.callArgs), g = d.callArgs;
            } catch {
              console.warn(`Layer ${o.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), g = {};
            }
          if (d.inboundLayers.length > 0) {
            const y = [];
            for (let b = 0; b < d.inboundLayers.length; b++) {
              const v = d.inboundLayers[b], w = d.nodeIndices[b], I = d.tensorIndices[b], T = Container.nodeKey(v, w);
              let _ = t[T];
              _ == null && (_ = 0), y.push([v.name, _, I, g]);
            }
            f.push(y);
          }
        }
      }
      const c = {};
      c.name = o.name, c.className = u, c.config = l, c.inboundNodes = f, n.push(c);
    }
    e.layers = n;
    const s = [];
    for (let o = 0; o < this.inputLayers.length; o++) {
      const u = this.inputLayers[o], l = this.inputLayersNodeIndices[o], f = Container.nodeKey(u, l);
      if (!this.containerNodes.has(f))
        continue;
      let c = t[f];
      c == null && (c = 0);
      const h = this.inputLayersTensorIndices[o];
      s.push([u.name, c, h]);
    }
    e.inputLayers = s;
    const a = [];
    for (let o = 0; o < this.outputLayers.length; o++) {
      const u = this.outputLayers[o], l = this.outputLayersNodeIndices[o], f = Container.nodeKey(u, l);
      if (!this.containerNodes.has(f))
        continue;
      let c = t[f];
      c == null && (c = 0);
      const h = this.outputLayersTensorIndices[o];
      a.push([u.name, c, h]);
    }
    return e.outputLayers = a, e;
  }
  /**
   * Instantiates a LayersModel from its config (output of `get_config()`).
   * @param cls the class to create
   * @param config LayersModel config dictionary.
   * @param customObjects An optional dictionary of custom objects.
   * @param fastWeightInit Optional flag to use fast weight initialization
   *   during deserialization. This is applicable to cases in which
   *   the initialization will be immediately overwritten by loaded weight
   *   values. Default: `false`.
   * @returns A LayersModel instance.
   * @throws ValueError: In case of improperly formatted config dict.
   */
  /** @nocollapse */
  static fromConfig(e, t, n = {}, s = !1) {
    const a = {}, o = {};
    function u(b, v) {
      b.name in o ? o[b.name].push(v) : o[b.name] = [v];
    }
    function l(b, v) {
      const w = [];
      let I;
      for (const T of v) {
        const _ = T[0], F = T[1], O = T[2];
        if (I = T[3] == null ? {} : T[3], !(_ in a)) {
          u(b, v);
          return;
        }
        const q = a[_];
        if (q.inboundNodes.length <= F) {
          u(b, v);
          return;
        }
        const V = q.inboundNodes[F];
        w.push(V.outputTensors[O]);
      }
      w.length > 0 && b.apply(singletonOrArray(w), I);
    }
    function f(b) {
      const v = b.name, w = deserialize(b, t.customObjects != null ? t.customObjects : {});
      w.setFastWeightInitDuringBuild(s), a[v] = w, b.inboundNodes.forEach((T) => {
        if (!(T instanceof Array))
          throw new ValueError(`Corrupted configuration, expected array for nodeData: ${T}`);
        u(w, T);
      });
    }
    const c = t.name, h = t.layers;
    for (const b of h)
      f(b);
    for (; !isObjectEmpty(o); )
      for (const b of h) {
        const v = a[b.name];
        if (v.name in o) {
          const w = o[v.name];
          delete o[v.name];
          for (const I of w)
            l(v, I);
        }
      }
    const d = [], m = [], g = t.inputLayers;
    for (const b of g) {
      const v = b[0], w = b[1], I = b[2];
      assert(v in a);
      const _ = a[v].inboundNodes[w].outputTensors;
      d.push(_[I]);
    }
    const y = t.outputLayers;
    for (const b of y) {
      const v = b[0], w = b[1], I = b[2];
      assert(v in a);
      const _ = a[v].inboundNodes[w].outputTensors;
      m.push(_[I]);
    }
    return new e({ inputs: d, outputs: m, name: c });
  }
  /**
   * Determine whether the container is stateful.
   *
   * Porting Note: this is the equivalent of the stateful @property of
   *   the Container class in PyKeras.
   */
  get stateful() {
    if (this._stateful)
      throw new ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (const e of this.layers)
      if (e.stateful)
        return !0;
    return !1;
  }
  /**
   * Reset the state of all stateful constituent layers (if any).
   *
   * Examples of stateful layers include RNN layers whose `stateful` property
   * is set as `true`.
   */
  resetStates() {
    tidy(() => {
      this.layers.forEach((e) => {
        e.stateful && e.resetStates();
      });
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function standardizeSampleOrClassWeights(r, e, t) {
  const n = e.length;
  if (r == null || Array.isArray(r) && r.length === 0)
    return e.map((s) => null);
  if (n === 1)
    return Array.isArray(r) && r.length === 1 ? r : typeof r == "object" && e[0] in r ? [r[e[0]]] : [r];
  if (Array.isArray(r)) {
    if (r.length !== n)
      throw new Error(`Provided ${t} is an array of ${r.length} element(s), but the model has ${n} outputs. Make sure a set of weights is provided for each model output.`);
    return r;
  } else if (typeof r == "object" && Object.keys(r).length > 0 && typeof r[Object.keys(r)[0]] == "object") {
    const s = [];
    return e.forEach((a) => {
      a in r ? s.push(r[a]) : s.push(null);
    }), s;
  } else
    throw new Error(`The model has multiple (${n}) outputs, so ${t} must be either an array with ${n} elements or an object with ${e} keys. Provided ${t} not understood: ${JSON.stringify(r)}`);
}
function standardizeClassWeights(r, e) {
  return standardizeSampleOrClassWeights(r, e, "classWeight");
}
async function standardizeWeights(r, e, t, n) {
  if (t != null) {
    const s = tidy(() => {
      if (r.shape.length === 1)
        return clone(r);
      if (r.shape.length === 2) {
        if (r.shape[1] > 1)
          return argMax$2(r, 1);
        if (r.shape[1] === 1)
          return reshape$3(r, [r.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${r.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      } else
        throw new Error(`Unexpected rank of target (y) tensor (${r.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), a = Array.from(await s.data());
    dispose(s);
    const o = [];
    return a.forEach((u) => {
      if (t[u] == null)
        throw new Error(`classWeight must contain all classes in the training data. The class ${u} exists in the data but not in classWeight`);
      o.push(t[u]);
    }), tensor1d(o, "float32");
  } else
    return null;
}
function computeWeightedLoss(r, e) {
  return mul(r, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const DEFAULT_VALIDATION_BATCH_SIZE = 32;
function standardizeDataIteratorOutput(r, e) {
  let t, n;
  const s = e;
  t = s.xs, n = s.ys, assert$1(t != null && n != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`);
  const a = flattenTensorOrArrayOrMap("input", r.inputNames, t), o = flattenTensorOrArrayOrMap("output", r.outputNames, n), u = a[0].shape[0];
  assert$1(a.length === r.inputs.length, () => `LayersModel has ${r.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(r.inputNames)})`), assert$1(o.length === r.outputs.length, () => `LayersModel has ${r.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(r.outputNames)})`);
  for (let l = 0; l < a.length; l++)
    assert$1(a[l].shape[0] === u, () => `Batch size mismatch: input ${r.inputNames[l]} has ${a[l].shape[0]}; expected  ${u} based on input ${r.inputNames[0]}.`);
  for (let l = 0; l < o.length; l++)
    assert$1(o[l].shape[0] === u, () => `Batch size mismatch: output ${r.outputNames[l]} has ${o[l].shape[0]}; expected  ${u} based on input ${r.inputNames[0]}.`);
  return { xs: a, ys: o };
}
function flattenTensorOrArrayOrMap(r, e, t) {
  if (t instanceof Tensor)
    return [t];
  if (Array.isArray(t))
    return assert$1(t.length === e.length, () => `Received an array of ${t.length} Tensors, but expected ${e.length} to match the ${r} keys ${e}.`), t;
  {
    const n = [];
    for (const s of e) {
      if (t[s] == null)
        throw new ValueError(`The feature data generated by the dataset lacks the required ${r} key '${s}'.`);
      n.push(t[s]);
    }
    return n;
  }
}
function standardizeTensorValidationData(r) {
  if (r.length === 3)
    throw new NotImplementedError("Validation with sample weights is not implemented yet.");
  return { xs: r[0], ys: r[1] };
}
async function fitDataset(r, e, t) {
  const n = t.batchesPerEpoch != null;
  if (assert$1(r.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), assert$1(t != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), assert$1(t.epochs != null && t.epochs > 0 && Number.isInteger(t.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${t.epochs}`), assert$1(!n || t.batchesPerEpoch > 0 && Number.isInteger(t.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${t.batchesPerEpoch}`), assert$1(
    // tslint:disable-next-line:no-any
    t.validationSplit == null,
    () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."
  ), r.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  r.isTraining = !0;
  try {
    const s = t.validationData != null;
    let a, o;
    if (s)
      if (isDatasetObject(t.validationData))
        assert$1(t.validationBatches == null || t.validationBatches > 0 && Number.isInteger(t.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${t.validationBatches}`);
      else {
        const b = standardizeTensorValidationData(t.validationData);
        a = b.xs, o = b.ys;
      }
    const u = r.makeTrainFunction(), l = r.getDedupedMetricsNames();
    let f;
    s ? f = l.slice().concat(l.map((b) => "val_" + b)) : f = l.slice();
    const c = standardizeCallbacks(t.callbacks, t.yieldEvery), h = t.verbose == null ? 1 : t.verbose, { callbackList: d, history: m } = configureCallbacks(
      c,
      h,
      t.epochs,
      null,
      null,
      getStepsPerEpoch(e, t),
      null,
      // Batch size determined by the dataset itself.
      s,
      f
    );
    d.setModel(r), r.history = m, await d.onTrainBegin(), r.stopTraining_ = !1;
    let g = t.initialEpoch == null ? 0 : t.initialEpoch, y = await e.iterator();
    for (; g < t.epochs; ) {
      const b = {};
      await d.onEpochBegin(g);
      let v = 0, w = 0;
      for (n || (y = await e.iterator()); !n || v < t.batchesPerEpoch; ) {
        const I = await y.next();
        if (n && I.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${t.batchesPerEpoch}, but your dataset iterator ran out of data after ${v} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${t.batchesPerEpoch * t.epochs} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
        if (I.value != null) {
          const { xs: T, ys: _ } = standardizeDataIteratorOutput(r, I.value), F = {};
          F.batch = w, F.size = T[0].shape[0], await d.onBatchBegin(w, F);
          const O = [];
          if (t.classWeight != null) {
            const H = standardizeClassWeights(t.classWeight, r.outputNames);
            for (let R = 0; R < H.length; ++R)
              O.push(await standardizeWeights(_[R], null, H[R]));
          }
          const q = T.concat(_).concat(O), V = u(q);
          dispose(q);
          for (let H = 0; H < l.length; ++H) {
            const R = l[H], $ = V[H];
            F[R] = $, keep($);
          }
          await d.onBatchEnd(w, F), disposeTensorsInLogs(F), w++, v++;
        }
        if (n ? v >= t.batchesPerEpoch : I.done) {
          if (s) {
            let T;
            isDatasetObject(t.validationData) ? T = toList(await r.evaluateDataset(t.validationData, { batches: t.validationBatches })) : T = toList(r.evaluate(a, o, {
              batchSize: t.validationBatchSize == null ? DEFAULT_VALIDATION_BATCH_SIZE : t.validationBatchSize,
              verbose: 0
            }));
            for (let _ = 0; _ < r.metricsNames.length; ++_)
              b[`val_${r.metricsNames[_]}`] = T[_];
          }
          break;
        }
        if (r.stopTraining_)
          break;
      }
      if (await d.onEpochEnd(g, b), g++, r.stopTraining_)
        break;
    }
    return await d.onTrainEnd(), await r.history.syncData(), r.history;
  } finally {
    r.isTraining = !1;
  }
}
function getStepsPerEpoch(r, e) {
  let t = null;
  return e.batchesPerEpoch != null ? t = e.batchesPerEpoch : Number.isFinite(r.size) && (t = r.size), t;
}
function isDatasetObject(r) {
  return typeof r.iterator == "function";
}
function isLazyIteratorObject(r) {
  return typeof r.next == "function";
}
async function evaluateDataset(r, e, t) {
  t = t || {};
  const n = t.batches != null, s = r.testFunction;
  let a = [];
  if (t.verbose > 0)
    throw new NotImplementedError("Verbose mode is not implemented yet.");
  assert$1(!n || t.batches > 0 && Number.isInteger(t.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(t.batches)}`);
  const o = isLazyIteratorObject(e) ? e : await e.iterator();
  let u = 0, l = 0;
  for (; !n || l < t.batches; ) {
    const f = await o.next();
    if (a = tidy(() => {
      if (f.value) {
        const { xs: c, ys: h } = standardizeDataIteratorOutput(r, f.value), d = c.concat(h), m = tidy(() => s(d));
        if (dispose(d), l === 0)
          for (let y = 0; y < m.length; ++y)
            a.push(scalar(0));
        const g = d[0].shape[0];
        for (let y = 0; y < m.length; ++y) {
          const b = m[y], v = a[y];
          a[y] = tidy(() => add$2(a[y], mul(g, b))), l > 0 && dispose(v);
        }
        dispose(m), u += g, ++l;
      }
      return a;
    }), f.done) {
      n && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${t.batches} batches). You may need to use the repeat() function when building your dataset.`);
      break;
    }
  }
  for (let f = 0; f < a.length; ++f) {
    const c = a[f];
    a[f] = div$1(a[f], u), dispose(c);
  }
  return singletonOrArray(a);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function checkBatchSize(r) {
  assert$1(r > 0 && Number.isInteger(r), () => `batchSize is required to be a positive integer, but got ${r}`);
}
function sliceArrays(r, e, t) {
  return r == null ? [null] : Array.isArray(r) ? r.map((n) => sliceAlongFirstAxis(n, e, t - e)) : sliceAlongFirstAxis(r, e, t - e);
}
function sliceArraysByIndices(r, e) {
  return tidy(() => r == null ? null : Array.isArray(r) ? r.map((t) => sliceArraysByIndices(t, e)) : gather(r, e.dtype === "int32" ? e : cast$3(e, "int32")));
}
function makeBatches(r, e) {
  const t = [];
  let n = 0, s = null;
  for (; n < r; )
    s = n + e, s >= r && (s = r), t.push([n, s]), n = s;
  return t;
}
function ensureTensorsRank2OrHigher(r) {
  const e = [];
  r instanceof Tensor && (r = [r]);
  for (let t = 0; t < r.length; ++t) {
    const n = r[t];
    if (n.rank === 1)
      e.push(expandDims$2(n, 1));
    else {
      if (n.rank === 0)
        throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      e.push(n);
    }
  }
  return e;
}
function disposeNewTensors(r, e) {
  if (r == null)
    return;
  const t = [];
  if (e instanceof Tensor)
    t.push(e.id);
  else if (Array.isArray(e))
    e.forEach((s) => t.push(s.id));
  else if (e != null)
    for (const s in e) {
      const a = e[s];
      t.push(a.id);
    }
  const n = [];
  if (r instanceof Tensor)
    t.indexOf(r.id) === -1 && n.push(r);
  else if (Array.isArray(r))
    r.forEach((s) => {
      t.indexOf(s.id) === -1 && n.push(s);
    });
  else if (r != null)
    for (const s in r) {
      const a = r[s];
      t.indexOf(a.id) === -1 && n.push(a);
    }
  n.forEach((s) => {
    s.isDisposed || s.dispose();
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function isDataTensor(r) {
  return r instanceof Tensor;
}
function isDataArray(r) {
  return Array.isArray(r);
}
function isDataDict(r) {
  return !isDataTensor(r) && !isDataArray(r);
}
function standardizeInputData(r, e, t, n = !0, s = "") {
  if (e == null || e.length === 0) {
    if (r != null) {
      let o = !1;
      if (isDataArray(r) && r.length > 0)
        o = !0;
      else if (isDataDict(r)) {
        for (const u in r)
          if (r.hasOwnProperty(u)) {
            o = !0;
            break;
          }
      } else
        o = !0;
      if (o)
        throw new ValueError(`Error when checking model ${s} expected no data, but got ${r}`);
    }
    return [];
  }
  if (r == null)
    return e.map((o) => null);
  let a;
  if (isDataDict(r)) {
    r = r, a = [];
    for (const o of e) {
      if (r[o] == null)
        throw new ValueError(`No data provided for "${o}". Need data for each key in: ${e}`);
      a.push(r[o]);
    }
  } else if (isDataArray(r)) {
    if (r = r, r.length !== e.length)
      throw new ValueError(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${r}`);
    a = r;
  } else {
    if (r = r, e.length > 1)
      throw new ValueError(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${r.shape}`);
    a = [r];
  }
  if (a = ensureTensorsRank2OrHigher(a), t != null)
    for (let o = 0; o < e.length; ++o) {
      if (t[o] == null)
        continue;
      const u = a[o];
      if (u.shape.length !== t[o].length)
        throw new ValueError(`Error when checking ${s}: expected ${e[o]} to have ${t[o].length} dimension(s). but got array with shape ${u.shape}`);
      for (let l = 0; l < t[o].length; ++l) {
        if (l === 0 && !n)
          continue;
        const f = u.shape[l], c = t[o][l];
        if (c != null && c >= 0 && f !== c)
          throw new ValueError(`${s} expected a batch of elements where each example has shape [${t[o].slice(1, t[o].length)}] (i.e.,tensor shape [*,${t[o].slice(1, t[o].length)}]) but the ${s} received an input with ${u.shape[0]} examples, each with shape [${u.shape.slice(1, u.shape.length)}] (tensor shape [${u.shape}])`);
      }
    }
  return a;
}
function checkArrayLengths(r, e, t) {
  const n = unique$2(r.map((a) => a.shape[0]));
  n.sort();
  const s = unique$2(e.map((a) => a.shape[0]));
  if (s.sort(), n.length > 1)
    throw new ValueError(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(r.map((a) => a.shape))}`);
  if (s.length > 1)
    throw new ValueError(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((a) => a.shape))}`);
  if (n.length > 0 && s.length > 0 && !arraysEqual(n, s))
    throw new ValueError(`Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${s[0]} target sample(s).`);
}
function checkLossAndTargetCompatibility(r, e, t) {
  const n = [
    meanSquaredError$1,
    binaryCrossentropy$2,
    categoricalCrossentropy$2
  ];
  for (let s = 0; s < r.length; ++s) {
    const a = r[s], o = e[s], u = t[s];
    if (o != null) {
      if (o === categoricalCrossentropy$2 && a.shape[a.shape.length - 1] === 1)
        throw new ValueError(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
      if (n.indexOf(o) !== -1) {
        const l = a.shape.slice(1), f = u.slice(1);
        for (let c = 0; c < l.length; ++c) {
          const h = l[c], d = f[c];
          if (d != null && h !== d)
            throw new ValueError(`A target Tensor with shape ${a.shape} was passed for an output of shape ${u}, while using a loss function that expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
function checkInputData(r, e, t, n = !0, s = "") {
  let a;
  if (Array.isArray(r)) {
    if (r.length !== e.length)
      throw new ValueError(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${r.length} Tensors(s).`);
    a = r;
  } else {
    if (e.length > 1)
      throw new ValueError(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(r.shape)}.`);
    a = [r];
  }
  if (t != null)
    for (let o = 0; o < e.length; ++o) {
      if (t[o] == null)
        continue;
      const u = a[o];
      if (u.shape.length !== t[o].length)
        throw new ValueError(`Error when checking ${s}: expected ${e[o]} to have ${t[o].length} dimension(s), but got array with shape ${JSON.stringify(u.shape)}`);
      for (let l = 0; l < t[o].length; ++l) {
        if (l === 0 && !n)
          continue;
        const f = u.shape[l], c = t[o][l];
        if (c != null && c !== f)
          throw new ValueError(`Error when checking ${s}: expected ${e[o]} to have shape ${JSON.stringify(t[o])} but got array with shape ${JSON.stringify(u.shape)}.`);
      }
    }
}
function collectMetrics(r, e) {
  if (r == null || Array.isArray(r) && r.length === 0)
    return e.map((n) => []);
  let t;
  if (typeof r == "string" || typeof r == "function")
    t = [r];
  else if (Array.isArray(r) || typeof r == "object")
    t = r;
  else
    throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${r}`);
  if (Array.isArray(t))
    return e.map((n) => t);
  {
    const n = [];
    for (const s of e) {
      let a = t.hasOwnProperty(s) ? t[s] : [];
      Array.isArray(a) || (a = [a]), n.push(a);
    }
    return n;
  }
}
const LAYERS_MODEL_FORMAT_NAME = "layers-model";
class LayersModel extends Container {
  constructor(e) {
    super(e), this.isTraining = !1;
  }
  /**
   * Print a text summary of the model's layers.
   *
   * The summary includes
   * - Name and type of all layers that comprise the model.
   * - Output shape(s) of the layers
   * - Number of weight parameters of each layer
   * - If the model has non-sequential-like topology, the inputs each layer
   *   receives
   * - The total number of trainable and non-trainable parameters of the model.
   *
   * ```js
   * const input1 = tf.input({shape: [10]});
   * const input2 = tf.input({shape: [20]});
   * const dense1 = tf.layers.dense({units: 4}).apply(input1);
   * const dense2 = tf.layers.dense({units: 8}).apply(input2);
   * const concat = tf.layers.concatenate().apply([dense1, dense2]);
   * const output =
   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);
   *
   * const model = tf.model({inputs: [input1, input2], outputs: output});
   * model.summary();
   * ```
   *
   * @param lineLength Custom line length, in number of characters.
   * @param positions Custom widths of each of the columns, as either
   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
   *   right-most (i.e., ending) position of a column.
   * @param printFn Custom print function. Can be used to replace the default
   *   `console.log`. For example, you can use `x => {}` to mute the printed
   *   messages in the console.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  summary(e, t, n = console.log) {
    if (!this.built)
      throw new ValueError("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    printSummary(this, e, t, n);
  }
  /**
   * Configures and prepares the model for training and evaluation.  Compiling
   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`
   * or `evaluate` on an un-compiled model will throw an error.
   *
   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and
   * metrics to be used for fitting and evaluating this model.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  compile(e) {
    if (e.loss == null && (e.loss = []), this.loss = e.loss, typeof e.optimizer == "string")
      this.optimizer_ = getOptimizer(e.optimizer), this.isOptimizerOwned = !0;
    else {
      if (!(e.optimizer instanceof Optimizer))
        throw new ValueError("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = e.optimizer, this.isOptimizerOwned = !1;
    }
    let t = [];
    if (!Array.isArray(e.loss) && typeof e.loss != "string" && typeof e.loss != "function") {
      e.loss = e.loss;
      for (const o in e.loss)
        if (this.outputNames.indexOf(o) === -1)
          throw new ValueError(`Unknown entry in loss dictionary: "${o}". Only expected the following keys: ${this.outputNames}`);
      for (const o of this.outputNames)
        e.loss[o] == null && console.warn(`Output "${o}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${o} during training`), t.push(get$1(e.loss[o]));
    } else if (Array.isArray(e.loss)) {
      if (e.loss.length !== this.outputs.length)
        throw new ValueError(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);
      t = e.loss.map((u) => get$1(u));
    } else {
      const o = get$1(e.loss);
      this.outputs.forEach((u) => {
        t.push(o);
      });
    }
    this.lossFunctions = t, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let o = 0; o < this.outputs.length; ++o) {
      const u = this.internalOutputShapes[o], l = this.outputNames[o];
      this.feedOutputNames.push(l), this.feedOutputShapes.push(u), this.feedLossFns.push(this.lossFunctions[o]);
    }
    const n = [];
    this.metrics = e.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], nameScope("loss", () => {
      for (let o = 0; o < this.outputs.length; ++o) {
        if (n.indexOf(o) !== -1)
          continue;
        const u = this.lossFunctions[o];
        this.outputs.length > 1 && (this.metricsTensors.push([u, o]), this.metricsNames.push(this.outputNames[o] + "_loss"));
      }
    });
    const s = collectMetrics(e.metrics, this.outputNames), a = (o, u, l) => {
      this.outputNames.length > 1 && (u = this.outputNames[o] + "_" + u), this.metricsNames.push(u), this.metricsTensors.push([l, o]);
    };
    nameScope("metric", () => {
      for (let o = 0; o < this.outputs.length; ++o) {
        if (n.indexOf(o) !== -1)
          continue;
        const u = s[o];
        ((f) => {
          const c = "";
          let h, d, m;
          for (const g of f) {
            if (typeof g == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(g) !== -1) {
              const b = this.internalOutputShapes[o];
              b[b.length - 1] === 1 || this.lossFunctions[o] === binaryCrossentropy$2 ? ["accuracy", "acc"].indexOf(g) !== -1 ? d = binaryAccuracy$1 : ["crossentropy", "ce"].indexOf(g) !== -1 && (d = binaryCrossentropy$1) : this.lossFunctions[o] === sparseCategoricalCrossentropy$1 ? ["accuracy", "acc"].indexOf(g) !== -1 ? d = sparseCategoricalAccuracy$1 : ["crossentropy", "ce"].indexOf(g) !== -1 && (d = sparseCategoricalCrossentropy) : ["accuracy", "acc"].indexOf(g) !== -1 ? d = categoricalAccuracy$1 : ["crossentropy", "ce"].indexOf(g) !== -1 && (d = categoricalCrossentropy$1);
              let v;
              ["accuracy", "acc"].indexOf(g) !== -1 ? v = "acc" : ["crossentropy", "ce"].indexOf(g) !== -1 && (v = "ce"), m = d, h = c + v;
            } else
              m = get(g), h = c + getLossOrMetricName(g);
            let y;
            nameScope(h, () => {
              y = m;
            }), a(o, h, y);
          }
        })(u);
      }
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  /**
   * Check trainable weights count consistency.
   *
   * This will raise a warning if `this.trainableWeights` and
   * `this.collectedTrainableWeights` are inconsistent (i.e., have different
   * numbers of parameters).
   * Inconsistency will typically arise when one modifies `model.trainable`
   * without calling `model.compile()` again.
   */
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  /**
   * Returns the loss value & metrics values for the model in test mode.
   *
   * Loss and metrics are specified during `compile()`, which needs to happen
   * before calls to `evaluate()`.
   *
   * Computation is done in batches.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const result = model.evaluate(
   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});
   * result.print();
   * ```
   *
   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
   * model has multiple inputs.
   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
   * model has multiple outputs.
   * @param args A `ModelEvaluateArgs`, containing optional fields.
   *
   * @return `Scalar` test loss (if the model has a single output and no
   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
   *   and/or metrics). The attribute `model.metricsNames`
   *   will give you the display labels for the scalar outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluate(e, t, n = {}) {
    const s = n.batchSize == null ? 32 : n.batchSize;
    checkBatchSize(s);
    const o = this.standardizeUserDataXY(e, t, !0, s);
    try {
      const u = o[0].concat(o[1]);
      this.makeTestFunction();
      const l = this.testFunction, f = this.testLoop(l, u, s, n.verbose, n.steps);
      return singletonOrArray(f);
    } finally {
      disposeNewTensors(o[0], e), disposeNewTensors(o[1], t);
    }
  }
  // TODO(cais): Add code snippet below once real dataset objects are
  //   available.
  /**
   * Evaluate model using a dataset object.
   *
   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for evaluation. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs. Of the two items in the array, the
   *   first is the input feature(s) and the second is the output target(s).
   * @param args A configuration object for the dataset-based evaluation.
   * @returns Loss and metric values as an Array of `Scalar` objects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async evaluateDataset(e, t) {
    return this.makeTestFunction(), evaluateDataset(this, e, t);
  }
  /**
   * Get number of samples provided for training, evaluation or prediction.
   *
   * @param ins Input `tf.Tensor`.
   * @param batchSize Integer batch size, optional.
   * @param steps Total number of steps (batches of samples) before
   * declaring loop finished. Optional.
   * @param stepsName The public API's parameter name for `steps`.
   * @returns Number of samples provided.
   */
  checkNumSamples(e, t, n, s = "steps") {
    let a;
    if (n != null) {
      if (a = null, t != null)
        throw new ValueError(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`);
    } else if (e != null)
      Array.isArray(e) ? a = e[0].shape[0] : a = e.shape[0];
    else
      throw new ValueError(`Either the input data should have a defined shape, or ${s} shoud be specified.`);
    return a;
  }
  /**
   * Execute internal tensors of the model with input data feed.
   * @param inputs Input data feed. Must match the inputs of the model.
   * @param outputs Names of the output tensors to be fetched. Must match
   *   names of the SymbolicTensors that belong to the graph.
   * @returns Fetched values for `outputs`.
   */
  execute(e, t) {
    if (Array.isArray(t) && t.length === 0)
      throw new ValueError("`outputs` is an empty Array, which is not allowed.");
    const n = Array.isArray(t), s = n ? t : [t], a = this.retrieveSymbolicTensors(s), o = new FeedDict();
    if (e instanceof Tensor && (e = [e]), Array.isArray(e)) {
      if (e.length !== this.inputs.length)
        throw new ValueError(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let l = 0; l < this.inputs.length; ++l)
        o.add(this.inputs[l], e[l]);
    } else
      for (const l of this.inputs) {
        const f = e[l.name];
        if (f == null)
          throw new ValueError(`No value is provided for the model's input ${l.name}`);
        o.add(l, f);
      }
    const u = execute(a, o);
    return n ? u : u[0];
  }
  /**
   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.
   */
  retrieveSymbolicTensors(e) {
    const t = pyListRepeat(null, e.length);
    let n = e.length;
    for (const s of this.layers) {
      const a = Array.isArray(s.output) ? s.output : [s.output], o = a.map((u) => u.name);
      for (let u = 0; u < e.length; ++u) {
        const l = o.indexOf(e[u]);
        if (l !== -1 && (t[u] = a[l], n--), n === 0)
          break;
      }
      if (n === 0)
        break;
    }
    if (n > 0) {
      const s = [];
      throw t.forEach((a, o) => {
        a == null && s.push(e[o]);
      }), new ValueError(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(s)}`);
    }
    return t;
  }
  /**
   * Helper method to loop over some data in batches.
   *
   * Porting Note: Not using the functional approach in the Python equivalent
   *   due to the imperative backend.
   * Porting Note: Does not support step mode currently.
   *
   * @param ins: input data
   * @param batchSize: integer batch size.
   * @param verbose: verbosity model
   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of
   *   `tf.Tensor` (if multipe outputs).
   */
  predictLoop(e, t = 32, n = !1) {
    return tidy(() => {
      const s = this.checkNumSamples(e);
      if (n)
        throw new NotImplementedError("Verbose predictLoop() is not implemented yet.");
      const a = makeBatches(s, t), o = this.outputs.map((u) => []);
      for (let u = 0; u < a.length; ++u)
        tidy(() => {
          const f = a[u][0], c = a[u][1], h = sliceArrays(e, f, c), d = [];
          if (Array.isArray(h))
            for (let g = 0; g < h.length; ++g)
              d.push({ key: this.inputs[g], value: h[g] });
          else
            d.push({ key: this.inputs[0], value: h });
          const m = new FeedDict(d);
          return execute(this.outputs, m);
        }).forEach((f, c) => o[c].push(f));
      return singletonOrArray(o.map((u) => concat$2(u, 0)));
    });
  }
  /**
   * Generates output predictions for the input samples.
   *
   * Computation is done in batches.
   *
   * Note: the "step" mode of predict() is currently not supported.
   *   This is because the TensorFlow.js core backend is imperative only.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();
   * ```
   *
   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
   *   the model has multiple inputs.
   * @param args A `ModelPredictArgs` object containing optional fields.
   *
   * @return Prediction results as a `tf.Tensor`(s).
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and the model's expectations, or in case a stateful model receives a
   *   number of samples that is not a multiple of the batch size.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(e, t = {}) {
    const n = ensureTensorsRank2OrHigher(e);
    checkInputData(n, this.inputNames, this.feedInputShapes, !1);
    try {
      const s = t.batchSize == null ? 32 : t.batchSize;
      return checkBatchSize(s), this.predictLoop(n, s);
    } finally {
      disposeNewTensors(n, e);
    }
  }
  /**
   * Returns predictions for a single batch of samples.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predictOnBatch(tf.ones([8, 10])).print();
   * ```
   * @param x: Input samples, as a Tensor (for models with exactly one
   *   input) or an array of Tensors (for models with more than one input).
   * @return Tensor(s) of predictions
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predictOnBatch(e) {
    checkInputData(e, this.inputNames, this.feedInputShapes, !0);
    const t = (Array.isArray(e) ? e[0] : e).shape[0];
    return this.predictLoop(e, t);
  }
  standardizeUserDataXY(e, t, n = !0, s) {
    if (this.optimizer_ == null)
      throw new RuntimeError("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    const a = [];
    for (let o = 0; o < this.feedOutputShapes.length; ++o) {
      const u = this.feedOutputShapes[o];
      this.feedLossFns[o] === sparseCategoricalCrossentropy$1 ? a.push(u.slice(0, u.length - 1).concat([1])) : a.push(u);
    }
    if (e = standardizeInputData(e, this.feedInputNames, this.feedInputShapes, !1, "input"), t = standardizeInputData(t, this.feedOutputNames, a, !1, "target"), checkArrayLengths(e, t), checkLossAndTargetCompatibility(t, this.feedLossFns, this.feedOutputShapes), this.stateful && s != null && s > 0 && e[0].shape[0] % s !== 0)
      throw new ValueError(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);
    return [e, t];
  }
  async standardizeUserData(e, t, n, s, a = !0, o) {
    const [u, l] = this.standardizeUserDataXY(e, t, a, o);
    if (n != null)
      throw new Error("sample weight is not supported yet.");
    let f = null;
    if (s != null) {
      const c = standardizeClassWeights(s, this.outputNames);
      f = [];
      for (let h = 0; h < c.length; ++h)
        f.push(await standardizeWeights(l[h], null, c[h]));
    }
    return [u, l, f];
  }
  /**
   * Loop over some test data in batches.
   * @param f A Function returning a list of tensors.
   * @param ins Array of tensors to be fed to `f`.
   * @param batchSize Integer batch size or `null` / `undefined`.
   * @param verbose verbosity mode.
   * @param steps Total number of steps (batches of samples) before
   * declaring test finished. Ignored with the default value of `null` /
   * `undefined`.
   * @returns Array of Scalars.
   */
  testLoop(e, t, n, s = 0, a) {
    return tidy(() => {
      const o = this.checkNumSamples(t, n, a, "steps"), u = [];
      if (s > 0)
        throw new NotImplementedError("Verbose mode is not implemented yet.");
      if (a != null)
        throw new NotImplementedError("steps mode in testLoop() is not implemented yet");
      {
        const l = makeBatches(o, n), f = tensor1d(range$2(0, o));
        for (let c = 0; c < l.length; ++c) {
          const h = l[c][0], d = l[c][1], m = sliceAlongFirstAxis(f, h, d - h), g = sliceArraysByIndices(t, m), y = e(g);
          if (c === 0)
            for (let b = 0; b < y.length; ++b)
              u.push(scalar(0));
          for (let b = 0; b < y.length; ++b) {
            const v = y[b];
            u[b] = add$2(u[b], mul(d - h, v));
          }
        }
        for (let c = 0; c < u.length; ++c)
          u[c] = div$1(u[c], o);
      }
      return u;
    });
  }
  getDedupedMetricsNames() {
    const e = this.metricsNames, t = [];
    for (let n = 0; n < e.length; ++n) {
      const s = e[n];
      let a = s;
      if (count(e, s) > 1) {
        const o = count(e.slice(0, n), s);
        a += `_${o}`;
      }
      t.push(a);
    }
    return t;
  }
  /**
   * Creates a function that performs the following actions:
   *
   * 1. computes the losses
   * 2. sums them to get the total loss
   * 3. call the optimizer computes the gradients of the LayersModel's
   *    trainable weights w.r.t. the total loss and update the variables
   * 4. calculates the metrics
   * 5. returns the values of the losses and metrics.
   */
  makeTrainFunction() {
    return (e) => {
      const t = [], n = e.slice(0, this.inputs.length), s = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), a = e.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), o = [], u = () => {
        const h = [];
        for (let y = 0; y < this.inputs.length; ++y)
          h.push({ key: this.inputs[y], value: n[y] });
        const d = new FeedDict(h), m = execute(this.outputs, d, { training: !0 });
        let g;
        for (let y = 0; y < this.lossFunctions.length; ++y) {
          const b = this.lossFunctions[y];
          let v = b(s[y], m[y]);
          a[y] != null && (v = computeWeightedLoss(v, a[y]));
          const w = mean$1(v);
          t.push(w), y === 0 ? g = v : g = add$2(g, v);
        }
        for (let y = 0; y < this.metricsTensors.length; ++y) {
          let b;
          if (this.outputs.length > 1 && y < this.outputs.length)
            b = t[y];
          else {
            const v = this.metricsTensors[y][0], w = this.metricsTensors[y][1];
            b = mean$1(v(s[w], m[w]));
          }
          keep(b), o.push(b);
        }
        return g = mean$1(g), this.calculateLosses().forEach((y) => {
          g = add$2(g, y);
        }), g;
      }, l = this.collectedTrainableWeights.map((h) => h.read());
      return [this.optimizer_.minimize(u, !0, l)].concat(o);
    };
  }
  /**
   * Create a function which, when invoked with an array of `tf.Tensor`s as a
   * batch of inputs, returns the prespecified loss and metrics of the model
   * under the batch of input data.
   */
  makeTestFunction() {
    this.testFunction = (e) => tidy(() => {
      const t = [];
      let n;
      const s = e.slice(0, this.inputs.length), a = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), o = [];
      for (let f = 0; f < this.inputs.length; ++f)
        o.push({ key: this.inputs[f], value: s[f] });
      const u = new FeedDict(o), l = execute(this.outputs, u);
      for (let f = 0; f < this.lossFunctions.length; ++f) {
        const c = this.lossFunctions[f], h = mean$1(c(a[f], l[f]));
        f === 0 ? n = h : n = add$2(n, h), t.push(n);
      }
      for (let f = 0; f < this.metricsTensors.length; ++f) {
        const c = this.metricsTensors[f][0], h = this.metricsTensors[f][1], d = mean$1(c(a[h], l[h]));
        t.push(d);
      }
      return t;
    });
  }
  /**
   * Trains the model for a fixed number of epochs (iterations on a
   * dataset).
   *
   * ```js
   * const model = tf.sequential({
   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * for (let i = 1; i < 5 ; ++i) {
   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
   *       batchSize: 4,
   *       epochs: 3
   *   });
   *   console.log("Loss after Epoch " + i + " : " + h.history.loss[0]);
   * }
   * ```
   *
   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
   * model has multiple inputs. If all inputs in the model are named, you
   * can also pass a dictionary mapping input names to `tf.Tensor`s.
   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
   * the model has multiple outputs. If all outputs in the model are named,
   * you can also pass a dictionary mapping output names to `tf.Tensor`s.
   * @param args A `ModelFitArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @exception ValueError In case of mismatch between the provided input
   * data and what the model expects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fit(e, t, n = {}) {
    if (this.isTraining)
      throw new Error("Cannot start training because another fit() call is ongoing.");
    this.isTraining = !0;
    let s, a, o, u, l, f, c, h, d;
    try {
      const m = n.batchSize == null ? 32 : n.batchSize;
      checkBatchSize(m);
      const y = await this.standardizeUserData(e, t, n.sampleWeight, n.classWeight, !1, m);
      s = y[0], a = y[1], d = y[2];
      let b = !1, v;
      if (n.validationData != null && n.validationData.length > 0) {
        if (b = !0, n.validationData.length === 2)
          l = n.validationData[0], f = n.validationData[1];
        else throw n.validationData.length === 3 ? new NotImplementedError("validationData including sample weights is not supported yet.") : new ValueError(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);
        const H = await this.standardizeUserData(
          l,
          f,
          null,
          /** Unused sample weights. */
          null,
          !0,
          m
        );
        c = H[0], h = H[1], v = c.concat(h);
      } else if (n.validationSplit != null && n.validationSplit > 0 && n.validationSplit < 1) {
        b = !0;
        const V = Math.floor(s[0].shape[0] * (1 - n.validationSplit)), H = s[0].shape[0];
        c = sliceArrays(s, V, H), o = s, s = sliceArrays(s, 0, V), h = sliceArrays(a, V, H), u = a, a = sliceArrays(a, 0, V), v = c.concat(h);
      } else n.validationSteps != null && (b = !0);
      const w = s.concat(a).concat(d);
      this.checkTrainableWeightsConsistency();
      const I = this.makeTrainFunction(), T = this.getDedupedMetricsNames();
      let _, F;
      b ? (this.makeTestFunction(), _ = this.testFunction, F = T.slice().concat(T.map((V) => "val_" + V))) : (_ = null, v = [], F = T.slice());
      const O = standardizeCallbacks(n.callbacks, n.yieldEvery);
      return await this.fitLoop(I, w, T, m, n.epochs, n.verbose, O, _, v, n.shuffle, F, n.initialEpoch, null, null);
    } finally {
      this.isTraining = !1, disposeNewTensors(s, e), disposeNewTensors(a, t), disposeNewTensors(o, e), disposeNewTensors(u, t), disposeNewTensors(c, l), disposeNewTensors(h, f), d != null && dispose(d);
    }
  }
  /**
   * Abstract fit function for `f(ins)`.
   * @param f A Function returning a list of tensors. For training, this
   *   function is expected to perform the updates to the variables.
   * @param ins List of tensors to be fed to `f`.
   * @param outLabels List of strings, display names of the outputs of `f`.
   * @param batchSize Integer batch size or `== null` if unknown. Default : 32.
   * @param epochs Number of times to iterate over the data. Default : 1.
   * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.
   * @param callbacks List of callbacks to be called during training.
   * @param valF Function to call for validation.
   * @param valIns List of tensors to be fed to `valF`.
   * @param shuffle Whether to shuffle the data at the beginning of every
   * epoch. Default : true.
   * @param callbackMetrics List of strings, the display names of the metrics
   *   passed to the callbacks. They should be the concatenation of the
   *   display names of the outputs of `f` and the list of display names
   *   of the outputs of `valF`.
   * @param initialEpoch Epoch at which to start training (useful for
   *   resuming a previous training run). Default : 0.
   * @param stepsPerEpoch Total number of steps (batches on samples) before
   *   declaring one epoch finished and starting the next epoch. Ignored with
   *   the default value of `undefined` or `null`.
   * @param validationSteps Number of steps to run validation for (only if
   *   doing validation from data tensors). Not applicable for tfjs-layers.
   * @returns A `History` object.
   */
  async fitLoop(e, t, n, s, a, o, u, l, f, c, h, d, m, g) {
    s == null && (s = 32), a == null && (a = 1), c == null && (c = !0), d == null && (d = 0);
    let y = !1;
    if (l != null && f != null && (y = !0), g != null && (y = !0, m == null))
      throw new ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
    const b = this.checkNumSamples(t, s, m, "steps_per_epoch");
    let v;
    b != null && (v = range$2(0, b)), o == null && (o = 1);
    const { callbackList: w, history: I } = configureCallbacks(u, o, a, d, b, m, s, y, h);
    w.setModel(this), this.history = I, await w.onTrainBegin(), this.stopTraining_ = !1;
    for (let T = d; T < a; ++T) {
      await w.onEpochBegin(T);
      const _ = {};
      if (m != null)
        throw new NotImplementedError("stepsPerEpoch mode is not implemented yet.");
      {
        if (c === "batch")
          throw new NotImplementedError("batch shuffling is not implemneted yet");
        c && shuffle(v);
        const F = tensor1d(v), O = makeBatches(b, s);
        for (let q = 0; q < O.length; ++q) {
          const V = {};
          if (await w.onBatchBegin(q, V), tidy(() => {
            const H = O[q][0], R = O[q][1], $ = sliceAlongFirstAxis(F, H, R - H);
            V.batch = q, V.size = R - H;
            const S = sliceArraysByIndices(t, $), x = e(S);
            for (let C = 0; C < n.length; ++C) {
              const A = n[C], N = x[C];
              V[A] = N, keep(N);
            }
            if (q === O.length - 1 && y) {
              const C = this.testLoop(l, f, s);
              for (let A = 0; A < n.length; ++A) {
                const N = n[A], k = C[A];
                keep(k), _["val_" + N] = k;
              }
            }
          }), await w.onBatchEnd(q, V), disposeTensorsInLogs(V), this.stopTraining_)
            break;
        }
        F.dispose();
      }
      if (await w.onEpochEnd(T, _), this.stopTraining_)
        break;
    }
    return await w.onTrainEnd(), await this.history.syncData(), this.history;
  }
  // TODO(cais): Add code snippet below when it's possible to instantiate
  //   actual dataset objects.
  /**
   * Trains the model using a dataset object.
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for training. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs.
   *   Of the two items in the array, the first is the input feature(s) and
   *   the second is the output target(s).
   * @param args A `ModelFitDatasetArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fitDataset(e, t) {
    return fitDataset(this, e, t);
  }
  /**
   * Runs a single gradient update on a single batch of data.
   *
   * This method differs from `fit()` and `fitDataset()` in the following
   * regards:
   *   - It operates on exactly one batch of data.
   *   - It returns only the loss and metric values, instead of
   *     returning the batch-by-batch loss and metric values.
   *   - It doesn't support fine-grained options such as verbosity and
   *     callbacks.
   *
   * @param x Input data. It could be one of the following:
   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
   *     multiple inputs).
   *   - An Object mapping input names to corresponding `tf.Tensor` (if the
   *     model has named inputs).
   * @param y Target data. It could be either a `tf.Tensor` or multiple
   *   `tf.Tensor`s. It should be consistent with `x`.
   * @returns Training loss or losses (in case the model has
   *   multiple outputs), along with metrics (if any), as numbers.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async trainOnBatch(e, t) {
    const n = await this.standardizeUserData(e, t), s = n[0], a = n[1], u = this.makeTrainFunction()(s.concat(a)), l = [];
    for (const f of u) {
      const c = await f.data();
      l.push(c[0]);
    }
    return dispose(u), disposeNewTensors(n[0], e), disposeNewTensors(n[1], t), singletonOrArray(l);
  }
  /**
   * Extract weight values of the model.
   *
   * @param config: An instance of `io.SaveConfig`, which specifies
   * model-saving options such as whether only trainable weights are to be
   * saved.
   * @returns A `NamedTensorMap` mapping original weight names (i.e.,
   *   non-uniqueified weight names) to their values.
   */
  getNamedWeights(e) {
    const t = [], n = e != null && e.trainableOnly, s = n ? this.trainableWeights : this.weights, a = this.getWeights(n);
    for (let o = 0; o < s.length; ++o)
      n && !s[o].trainable || t.push({ name: s[o].originalName, tensor: a[o] });
    return t;
  }
  /**
   * Setter used for force stopping of LayersModel.fit() (i.e., training).
   *
   * Example:
   *
   * ```js
   * const input = tf.input({shape: [10]});
   * const output = tf.layers.dense({units: 1}).apply(input);
   * const model = tf.model({inputs: [input], outputs: [output]});
   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
   * const xs = tf.ones([8, 10]);
   * const ys = tf.zeros([8, 1]);
   *
   * const history = await model.fit(xs, ys, {
   *   epochs: 10,
   *   callbacks: {
   *     onEpochEnd: async (epoch, logs) => {
   *       if (epoch === 2) {
   *         model.stopTraining = true;
   *       }
   *     }
   *   }
   * });
   *
   * // There should be only 3 values in the loss array, instead of 10
   * values,
   * // due to the stopping after 3 epochs.
   * console.log(history.history.loss);
   * ```
   */
  set stopTraining(e) {
    this.stopTraining_ = e;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(e) {
    this.optimizer_ !== e && (this.optimizer_ = e, this.isOptimizerOwned = !1);
  }
  dispose() {
    const e = super.dispose();
    if (e.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      const t = memory().numTensors;
      this.optimizer_.dispose(), e.numDisposedVariables += t - memory().numTensors;
    }
    return e;
  }
  getLossIdentifiers() {
    let e;
    if (typeof this.loss == "string")
      e = toSnakeCase(this.loss);
    else if (Array.isArray(this.loss)) {
      for (const t of this.loss)
        if (typeof t != "string")
          throw new Error("Serialization of non-string loss is not supported.");
      e = this.loss.map((t) => toSnakeCase(t));
    } else {
      const t = Object.keys(this.loss);
      e = {};
      const n = this.loss;
      for (const s of t)
        if (typeof n[s] == "string")
          e[s] = toSnakeCase(n[s]);
        else
          throw new Error("Serialization of non-string loss is not supported.");
    }
    return e;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function")
      return [toSnakeCase(getLossOrMetricName(this.metrics))];
    if (Array.isArray(this.metrics))
      return this.metrics.map((e) => toSnakeCase(getLossOrMetricName(e)));
    {
      const e = {};
      for (const t in this.metrics)
        e[t] = toSnakeCase(getLossOrMetricName(this.metrics[t]));
      return e;
    }
  }
  getTrainingConfig() {
    return {
      loss: this.getLossIdentifiers(),
      metrics: this.getMetricIdentifiers(),
      optimizer_config: {
        class_name: this.optimizer.getClassName(),
        config: this.optimizer.getConfig()
      }
    };
  }
  loadTrainingConfig(e) {
    if (e.weighted_metrics != null)
      throw new Error("Loading weight_metrics is not supported yet.");
    if (e.loss_weights != null)
      throw new Error("Loading loss_weights is not supported yet.");
    if (e.sample_weight_mode != null)
      throw new Error("Loading sample_weight_mode is not supported yet.");
    const t = convertPythonicToTs(e.optimizer_config), n = deserialize(t);
    let s;
    if (typeof e.loss == "string")
      s = toCamelCase(e.loss);
    else if (Array.isArray(e.loss))
      s = e.loss.map((o) => toCamelCase(o));
    else if (e.loss != null) {
      s = {};
      for (const o in e.loss)
        s[o] = toCamelCase(e.loss[o]);
    }
    let a;
    if (Array.isArray(e.metrics))
      a = e.metrics.map((o) => toCamelCase(o));
    else if (e.metrics != null) {
      a = {};
      for (const o in e.metrics)
        a[o] = toCamelCase(e.metrics[o]);
    }
    this.compile({ loss: s, metrics: a, optimizer: n });
  }
  /**
   * Save the configuration and/or weights of the LayersModel.
   *
   * An `IOHandler` is an object that has a `save` method of the proper
   * signature defined. The `save` method manages the storing or
   * transmission of serialized data ("artifacts") that represent the
   * model's topology and weights onto or via a specific medium, such as
   * file downloads, local storage, IndexedDB in the web browser and HTTP
   * requests to a server. TensorFlow.js provides `IOHandler`
   * implementations for a number of frequently used saving mediums, such as
   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
   * for more details.
   *
   * This method also allows you to refer to certain types of `IOHandler`s
   * as URL-like string shortcuts, such as 'localstorage://' and
   * 'indexeddb://'.
   *
   * Example 1: Save `model`'s topology and weights to browser [local
   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
   * then load it back.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * console.log('Prediction from original model:');
   * model.predict(tf.ones([1, 3])).print();
   *
   * const saveResults = await model.save('localstorage://my-model-1');
   *
   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
   * console.log('Prediction from loaded model:');
   * loadedModel.predict(tf.ones([1, 3])).print();
   * ```
   *
   * Example 2. Saving `model`'s topology and weights to browser
   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
   * then load it back.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * console.log('Prediction from original model:');
   * model.predict(tf.ones([1, 3])).print();
   *
   * const saveResults = await model.save('indexeddb://my-model-1');
   *
   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
   * console.log('Prediction from loaded model:');
   * loadedModel.predict(tf.ones([1, 3])).print();
   * ```
   *
   * Example 3. Saving `model`'s topology and weights as two files
   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from
   * browser.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * const saveResults = await model.save('downloads://my-model-1');
   * ```
   *
   * Example 4. Send  `model`'s topology and weights to an HTTP server.
   * See the documentation of `tf.io.http` for more details
   * including specifying request parameters and implementation of the
   * server.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * const saveResults = await model.save('http://my-server/model/upload');
   * ```
   *
   * @param handlerOrURL An instance of `IOHandler` or a URL-like,
   * scheme-based string shortcut for `IOHandler`.
   * @param config Options for saving the model.
   * @returns A `Promise` of `SaveResult`, which summarizes the result of
   * the saving, such as byte sizes of the saved artifacts for the model's
   *   topology and weight values.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  async save(e, t) {
    if (typeof e == "string") {
      const f = getSaveHandlers(e);
      if (f.length === 0)
        throw new ValueError(`Cannot find any save handlers for URL '${e}'`);
      if (f.length > 1)
        throw new ValueError(`Found more than one (${f.length}) save handlers for URL '${e}'`);
      e = f[0];
    }
    if (e.save == null)
      throw new ValueError("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    const n = await encodeWeights(this.getNamedWeights(t)), u = {
      modelTopology: this.toJSON(null, !1),
      format: LAYERS_MODEL_FORMAT_NAME,
      generatedBy: `TensorFlow.js tfjs-layers v${version$6}`,
      convertedBy: null
    };
    if ((t == null ? !1 : t.includeOptimizer) && this.optimizer != null) {
      u.trainingConfig = this.getTrainingConfig();
      const f = "optimizer", { data: c, specs: h } = await encodeWeights(await this.optimizer.getWeights(), f);
      n.specs.push(...h), n.data = concatenateArrayBuffers([n.data, c]);
    }
    return this.userDefinedMetadata != null && (checkUserDefinedMetadata(this.userDefinedMetadata, this.name, !0), u.userDefinedMetadata = this.userDefinedMetadata), u.weightData = n.data, u.weightSpecs = n.specs, e.save(u);
  }
  /**
   * Set user-defined metadata.
   *
   * The set metadata will be serialized together with the topology
   * and weights of the model during `save()` calls.
   *
   * @param setUserDefinedMetadata
   */
  setUserDefinedMetadata(e) {
    checkUserDefinedMetadata(e, this.name), this.userDefinedMetadata = e;
  }
  /**
   * Get user-defined metadata.
   *
   * The metadata is supplied via one of the two routes:
   *   1. By calling `setUserDefinedMetadata()`.
   *   2. Loaded during model loading (if the model is constructed
   *      via `tf.loadLayersModel()`.)
   *
   * If no user-defined metadata is available from either of the
   * two routes, this function will return `undefined`.
   */
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
}
LayersModel.className = "Model";
registerClass(LayersModel);
class Functional extends LayersModel {
}
Functional.className = "Functional";
registerClass(Functional);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function modelFromJSON(r, e) {
  "modelTopology" in r || (r = { modelTopology: r }), r = r;
  let t = r.modelTopology;
  t.model_config != null && (t = t.model_config);
  const n = convertPythonicToTs(t), s = deserialize(n, e);
  if (r.weightsManifest != null) {
    const a = await loadWeights$1(r.weightsManifest, r.pathPrefix, s.weights.map((u) => u.originalName)), o = {};
    for (const u of s.weights)
      o[u.originalName] = a[u.originalName];
    s.loadWeights(o), dispose(a);
  }
  return s;
}
async function loadLayersModel(r, e) {
  if (e == null && (e = {}), typeof r == "string") {
    const t = getLoadHandlers(r, e);
    if (t.length === 0)
      t.push(browserHTTPRequest(r, e));
    else if (t.length > 1)
      throw new ValueError(`Found more than one (${t.length}) load handlers for URL '${r}'`);
    r = t[0];
  }
  return loadLayersModelFromIOHandler(r, void 0, e);
}
async function loadLayersModelFromIOHandler(r, e, t) {
  if (t == null && (t = {}), r.load == null)
    throw new ValueError("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
  const n = await r.load();
  let s = n.modelTopology;
  s.model_config != null && (s = s.model_config);
  const a = t.strict == null ? !0 : t.strict, o = n.weightData != null && n.weightSpecs != null && a, u = deserialize(convertPythonicToTs(s), e, o), l = n.trainingConfig;
  if (l != null && u.loadTrainingConfig(l), n.userDefinedMetadata != null && u.setUserDefinedMetadata(n.userDefinedMetadata), n.weightData != null) {
    if (n.weightSpecs == null)
      throw new ValueError("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
    const { modelWeights: f, optimizerWeights: c } = decodeModelAndOptimizerWeights(n.weightData, n.weightSpecs);
    u.loadWeights(f, a), u.optimizer != null && c.length > 0 && await u.optimizer.setWeights(c), dispose(f), dispose(c.map((h) => h.tensor));
  }
  return u;
}
function decodeModelAndOptimizerWeights(r, e) {
  const t = decodeWeights(r, e), n = {}, s = [];
  return e.forEach((a) => {
    a.group === "optimizer" ? s.push({ name: a.name, tensor: t[a.name] }) : n[a.name] = t[a.name];
  }), { modelWeights: n, optimizerWeights: s };
}
class Sequential extends LayersModel {
  constructor(e) {
    if (super({ inputs: [], outputs: [] }), e = e || {}, this.trainable = !0, this.built = !1, this.name = e.name != null ? e.name : getUid("sequential_"), e.layers != null)
      for (const t of e.layers)
        this.add(t);
  }
  // Helper function to Sequential.add  Throws if the new output shape will be
  // invalid.
  checkShape(e) {
    if (e.inboundNodes[0].outputTensors[0].shape.some((n) => n < 0))
      throw new ValueError(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`);
  }
  /**
   * Adds a layer instance on top of the layer stack.
   *
   * ```js
   *  const model = tf.sequential();
   *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));
   *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));
   *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));
   *  // Note that the untrained model is random at this point.
   *  model.predict(tf.randomNormal([10, 1])).print();
   * ```
   * @param layer Layer instance.
   *
   * @exception ValueError In case the `layer` argument does not know its
   * input shape.
   * @exception ValueError In case the `layer` argument has multiple output
   *   tensors, or is already connected somewhere else (forbidden in
   *   `Sequential` models).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  add(e) {
    const t = e instanceof Sequential || e instanceof LayersModel;
    let n;
    if (t) {
      if (n = e, n.outputs.length !== 1)
        throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (n.inputs.length !== 1)
        throw new ValueError("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (e.inboundNodes.length === 0) {
        if (e.batchInputShape == null)
          throw new ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        const s = Input({
          batchShape: e.batchInputShape,
          dtype: e.dtype,
          name: e.name + "_input"
        });
        e.apply(s);
      }
      if (t)
        this.outputs = n.outputs, this.inputs = n.inputs;
      else {
        if (e.inboundNodes.length !== 1)
          throw new ValueError(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);
        if (e.inboundNodes[0].outputTensors.length !== 1)
          throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(e), this.outputs = [e.inboundNodes[0].outputTensors[0]], this.inputs = getSourceInputs(this.outputs[0]);
      }
      this.inboundNodes = [], new Node({
        outboundLayer: this,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: this.inputs,
        outputTensors: this.outputs,
        // no model-level masking for now
        inputMasks: pyListRepeat(null, this.inputs.length),
        outputMasks: [null],
        inputShapes: this.inputs.map((s) => s.shape),
        outputShapes: this.outputs[0].shape
      });
    } else {
      const s = e.apply(this.outputs[0]);
      if (Array.isArray(s))
        throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(e), this.outputs = [s], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(e), this.built = !1;
  }
  /**
   * Removes the last layer in the model.
   *
   * @exception TypeError if there are no layers in the model.
   */
  pop() {
    if (this.layers.length === 0)
      throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0)
      this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      const e = this.layers.length - 1;
      this.layers[e].outboundNodes = [], this.outputs = [this.layers[e].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(e, t) {
    return this.model == null && this.build(), this.model.call(e, t);
  }
  build(e) {
    if (getExactlyOneShape(e), this.inputs.length === 0 || this.outputs.length === 0)
      throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new LayersModel({
      inputs: this.inputs,
      outputs: this.outputs[0],
      name: this.name + "_model"
    }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  /**
   * Print a text summary of the Sequential model's layers.
   *
   * The summary includes
   * - Name and type of all layers that comprise the model.
   * - Output shape(s) of the layers
   * - Number of weight parameters of each layer
   * - The total number of trainable and non-trainable parameters of the
   * model.
   *
   * ```js
   * const model = tf.sequential();
   * model.add(
   *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));
   * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
   *
   * model.summary();
   * ```
   *
   * @param lineLength Custom line length, in number of characters.
   * @param positions Custom widths of each of the columns, as either
   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
   *   right-most (i.e., ending) position of a column.
   * @param printFn Custom print function. Can be used to replace the default
   *   `console.log`. For example, you can use `x => {}` to mute the printed
   *   messages in the console.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  summary(e, t, n = console.log) {
    this.built || this.build(), super.summary(e, t, n);
  }
  /**
   * Sets the weights of the model.
   *
   * @param weights Should be a list of Tensors with shapes and types matching
   *   the output of `model.getWeights()`.
   */
  setWeights(e) {
    this.model == null && this.build(), this.model.setWeights(e);
  }
  /**
   * Returns the loss value & metrics values for the model in test mode.
   *
   * Loss and metrics are specified during `compile()`, which needs to happen
   * before calls to `evaluate()`.
   *
   * Computation is done in batches.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {
   *   batchSize: 4,
   * });
   * result.print();
   * ```
   *
   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
   * model has multiple inputs.
   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
   * model has multiple outputs.
   * @param args A `ModelEvaluateConfig`, containing optional fields.
   *
   * @return `Scalar` test loss (if the model has a single output and no
   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
   *   and/or metrics). The attribute `model.metricsNames`
   *   will give you the display labels for the scalar outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluate(e, t, n = {}) {
    if (!this.built)
      throw new RuntimeError("The model needs to be compiled before being used.");
    return this.model.evaluate(e, t, n);
  }
  // TODO(cais): Add code snippet below once real dataset objects are
  //   available.
  /**
   * Evaluate model using a dataset object.
   *
   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for evaluation. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs. Of the two items in the array, the
   *   first is the input feature(s) and the second is the output target(s).
   * @param args A configuration object for the dataset-based evaluation.
   * @returns Loss and metric values as an Array of `Scalar` objects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async evaluateDataset(e, t) {
    if (!this.built)
      throw new RuntimeError("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(e, t);
  }
  /**
   * Generates output predictions for the input samples.
   *
   * Computation is done in batches.
   *
   * Note: the "step" mode of predict() is currently not supported.
   *   This is because the TensorFlow.js core backend is imperative only.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predict(tf.ones([2, 10])).print();
   * ```
   *
   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
   *   the model has multiple inputs.
   * @param conifg A `ModelPredictConfig` object containing optional fields.
   *
   * @return `tf.Tensor`(s) of predictions.
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and the model's expectations, or in case a stateful model receives a
   *   number of samples that is not a multiple of the batch size.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(e, t = {}) {
    return this.model == null && this.build(), this.model.predict(e, t);
  }
  /**
   * Returns predictions for a single batch of samples.
   *
   * @param x: Input samples, as a Tensor, or list of Tensors (if the model
   *   has multiple inputs).
   * @return Tensor(s) of predictions
   */
  predictOnBatch(e) {
    return this.model == null && this.build(), this.model.predictOnBatch(e);
  }
  /**
   * See `LayersModel.compile`.
   *
   * @param args
   */
  compile(e) {
    this.build(), this.model.compile(e), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(e) {
    this.model.optimizer = e;
  }
  /**
   * Trains the model for a fixed number of epochs (iterations on a dataset).
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
   *   batchSize: 4,
   *   epochs: 3
   * });
   * console.log(history.history.loss[0]);
   * ```
   *
   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
   * model has multiple inputs. If all inputs in the model are named, you can
   * also pass a dictionary mapping input names to `tf.Tensor`s.
   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
   * the model has multiple outputs. If all outputs in the model are named, you
   *  can also pass a dictionary mapping output names to `tf.Tensor`s.
   * @param args  A `ModelFitConfig`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and what the model expects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fit(e, t, n = {}) {
    if (!this.built)
      throw new RuntimeError("The model needs to be compiled before being used.");
    return this.model.fit(e, t, n);
  }
  /**
   * Trains the model using a dataset object.
   *
   * ```js
   * const xArray = [
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   * ];
   * const yArray = [1, 1, 1, 1];
   * // Create a dataset from the JavaScript array.
   * const xDataset = tf.data.array(xArray);
   * const yDataset = tf.data.array(yArray);
   * // Zip combines the `x` and `y` Datasets into a single Dataset, the
   * // iterator of which will return an object containing of two tensors,
   * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle
   * // four such samples into a single object, with the same keys now pointing
   * // to tensors that hold 4 examples, organized along the batch dimension.
   * // The call to `shuffle(4)` causes each iteration through the dataset to
   * // happen in a different order.  The size of the shuffle window is 4.
   * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})
   *     .batch(4)
   *     .shuffle(4);
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const history = await model.fitDataset(xyDataset, {
   *   epochs: 4,
   *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}
   * });
   * ```
   *
   * @param dataset A dataset object. Its `iterator()` method is expected to
   *   generate a dataset iterator object, the `next()` method of which is
   *   expected to produce data batches for evaluation. The return value of the
   *   `next()` call ought to contain a boolean `done` field and a `value`
   *   field.
   *
   *   The `value` field is expected to be an object of with fields
   *   `xs` and `ys`, which point to the feature tensor and the target tensor,
   *   respectively. This case is for models with exactly one input and one
   *   output (e.g. a sequential model). For example:
   *   ```js
   *   {value: {xs: xsTensor, ys: ysTensor}, done: false}
   *   ```
   *
   *   If the model has multiple inputs, the `xs` field of `value` should
   *   be an object mapping input names to their respective feature tensors.
   *   For example:
   *   ```js
   *   {
   *     value: {
   *       xs: {
   *         input_1: xsTensor1,
   *         input_2: xsTensor2
   *       },
   *       ys: ysTensor
   *     },
   *     done: false
   *   }
   *   ```
   *   If the model has multiple outputs, the `ys` field of `value` should
   *   be an object mapping output names to their respective target tensors.
   *   For example:
   *   ```js
   *   {
   *     value: {
   *       xs: xsTensor,
   *       ys: {
   *         output_1: ysTensor1,
   *         output_2: ysTensor2
   *       },
   *     },
   *     done: false
   *   }
   *   ```
   * @param args A `ModelFitDatasetArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  async fitDataset(e, t) {
    if (!this.built)
      throw new RuntimeError("The model needs to be compiled before being used.");
    return this.model.fitDataset(e, t);
  }
  /**
   * Runs a single gradient update on a single batch of data.
   *
   * This method differs from `fit()` and `fitDataset()` in the following
   * regards:
   *   - It operates on exactly one batch of data.
   *   - It returns only the loss and metric values, instead of
   *     returning the batch-by-batch loss and metric values.
   *   - It doesn't support fine-grained options such as verbosity and
   *     callbacks.
   *
   * @param x Input data. It could be one of the following:
   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
   *     multiple inputs).
   *   - An Object mapping input names to corresponding `tf.Tensor` (if the
   *     model has named inputs).
   * @param y Target data. It could be either a `tf.Tensor` or multiple
   *   `tf.Tensor`s. It should be consistent with `x`.
   * @returns Training loss or losses (in case the model has
   *   multiple outputs), along with metrics (if any), as numbers.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async trainOnBatch(e, t) {
    return this.model.trainOnBatch(e, t);
  }
  /* See parent class for JsDoc */
  /** @nocollapse */
  static fromConfig(e, t, n = {}, s = !1) {
    let a, o = {};
    if (t instanceof Array) {
      if (t[0].className == null || t[0].className === "Merge")
        throw new ValueError("Legacy serialization format not supported yet.");
      a = t;
    } else
      assert$1(t.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), a = t.layers, delete t.layers, o = t;
    const u = new e(o);
    if (!(u instanceof Sequential))
      throw new NotImplementedError(`Sequential.fromConfig called on non-Sequential input: ${u}`);
    for (const l of a) {
      const c = deserialize(l, void 0, s);
      s && c.setFastWeightInitDuringBuild(!0), u.add(c);
    }
    return u;
  }
  /**
   * Setter used for force stopping of LayersModel.fit() (i.e., training).
   *
   * Example:
   *
   * ```js
   * const model = tf.sequential();
   * model.add(tf.layers.dense({units: 1, inputShape: [10]}));
   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
   * const xs = tf.ones([8, 10]);
   * const ys = tf.zeros([8, 1]);
   *
   * const history = await model.fit(xs, ys, {
   *   epochs: 10,
   *   callbacks: {
   *     onEpochEnd: async (epoch, logs) => {
   *       if (epoch === 2) {
   *         model.stopTraining = true;
   *       }
   *     }
   *   }
   * });
   *
   * // There should be only 3 values in the loss array, instead of 10 values,
   * // due to the stopping after 3 epochs.
   * console.log(history.history.loss);
   * ```
   */
  set stopTraining(e) {
    if (this.model == null)
      throw new ValueError("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = e;
  }
  get stopTraining() {
    if (this.model == null)
      throw new ValueError("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  // TODO(cais): Override get trainableWeights() here
  // tslint:disable-next-line:no-any
  getConfig() {
    const e = [];
    for (const t of this.layers) {
      const n = {};
      n.className = t.getClassName(), n.config = t.getConfig(), e.push(n);
    }
    return { name: this.name, layers: e };
  }
}
Sequential.className = "Sequential";
registerClass(Sequential);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function model$1(r) {
  return new LayersModel(r);
}
function sequential(r) {
  return new Sequential(r);
}
function input(r) {
  return Input(r);
}
function registerCallbackConstructor(r, e) {
  CallbackConstructorRegistry.registerCallbackConstructor(r, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Activation$1 = class extends Serializable {
  getConfig() {
    return {};
  }
};
class Elu extends Activation$1 {
  /**
   * Calculate the activation function.
   *
   * @param x: Input.
   * @param alpha: Scaling factor the negative section.
   * @return Output of the ELU activation.
   */
  apply(e, t = 1) {
    return elu$3(e, t);
  }
}
Elu.className = "elu";
registerClass(Elu);
class Selu extends Activation$1 {
  apply(e) {
    return selu$2(e);
  }
}
Selu.className = "selu";
registerClass(Selu);
class Relu extends Activation$1 {
  apply(e) {
    return relu$2(e);
  }
}
Relu.className = "relu";
registerClass(Relu);
class Relu6 extends Activation$1 {
  apply(e) {
    return tidy(() => minimum$3(6, relu$2(e)));
  }
}
Relu6.className = "relu6";
registerClass(Relu6);
class Linear extends Activation$1 {
  apply(e) {
    return e;
  }
}
Linear.className = "linear";
registerClass(Linear);
class Sigmoid extends Activation$1 {
  apply(e) {
    return sigmoid$2(e);
  }
}
Sigmoid.className = "sigmoid";
registerClass(Sigmoid);
class HardSigmoid extends Activation$1 {
  apply(e) {
    return hardSigmoid(e);
  }
}
HardSigmoid.className = "hardSigmoid";
registerClass(HardSigmoid);
class Softplus extends Activation$1 {
  apply(e) {
    return softplus$2(e);
  }
}
Softplus.className = "softplus";
registerClass(Softplus);
class Softsign extends Activation$1 {
  apply(e) {
    return softsign(e);
  }
}
Softsign.className = "softsign";
registerClass(Softsign);
class Tanh extends Activation$1 {
  apply(e) {
    return tanh$2(e);
  }
}
Tanh.className = "tanh";
registerClass(Tanh);
let Softmax$1 = class extends Activation$1 {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @param axis Integer, axis along which the softmax normalization is applied.
   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
   * an error.
   *
   * @returns a Tensor of the same shape as x
   *
   * @throws ValueError: In case `dim(x) < 2`.
   */
  apply(e, t = -1) {
    return softmax$3(e, t);
  }
};
Softmax$1.className = "softmax";
registerClass(Softmax$1);
class LogSoftmax extends Activation$1 {
  /**
   * Calculate the activation function of log softmax:
   * log( exp(x_i) / sum(exp(x)) )
   *
   * @param x Tensor.
   * @param axis Integer, axis along which the softmax normalization is applied.
   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
   * an error.
   *
   * @returns a Tensor of the same shape as x
   *
   * @throws ValueError: In case `dim(x) < 2`.
   */
  apply(e, t = -1) {
    return logSoftmax(e, t);
  }
}
LogSoftmax.className = "logSoftmax";
registerClass(LogSoftmax);
class Gelu extends Activation$1 {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @returns a Tensor of the same shape as x
   */
  apply(e) {
    return tidy(() => tidy(() => {
      const t = Math.sqrt(2), n = mul(0.5, add$2(1, erf$2(div$1(e, t))));
      return mul(e, n);
    }));
  }
}
Gelu.className = "gelu";
registerClass(Gelu);
class GeluNew extends Activation$1 {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @returns a Tensor of the same shape as x
   */
  apply(e) {
    return tidy(() => mul(0.5, mul(e, add$2(1, tanh$2(mul(sqrt$2(div$1(2, Math.PI)), add$2(e, mul(0.044715, pow$3(e, 3)))))))));
  }
}
GeluNew.className = "gelu_new";
registerClass(GeluNew);
class Mish extends Activation$1 {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @returns a Tensor of the same shape as x
   */
  apply(e) {
    return tidy(() => mul(e, tanh$2(softplus$2(e))));
  }
}
Mish.className = "mish";
registerClass(Mish);
class Swish extends Activation$1 {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @param alpha Scaling factor for the sigmoid function.
   * @returns a Tensor of the same shape as x
   */
  apply(e, t = 1) {
    return tidy(() => mul(sigmoid$2(mul(e, t)), e));
  }
}
Swish.className = "swish";
registerClass(Swish);
function serializeActivation(r) {
  return r.getClassName();
}
function deserializeActivation(r, e = {}) {
  return deserializeKerasObject(r, SerializationMap.getMap().classNameMap, e, "activation");
}
function getActivation(r) {
  if (r == null) {
    const e = {};
    return e.className = "linear", e.config = {}, deserializeActivation(e);
  }
  if (typeof r == "string") {
    const e = {};
    return e.className = r, e.config = {}, deserializeActivation(e);
  } else return r instanceof Activation$1 ? r : deserializeActivation(r);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function assertObjectArgs(r) {
  if (r != null && typeof r != "object")
    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${r}`);
}
class Regularizer extends Serializable {
}
class L1L2 extends Regularizer {
  constructor(e) {
    super(), assertObjectArgs(e), this.l1 = e == null || e.l1 == null ? 0.01 : e.l1, this.l2 = e == null || e.l2 == null ? 0.01 : e.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  /**
   * Porting note: Renamed from __call__.
   * @param x Variable of which to calculate the regularization score.
   */
  apply(e) {
    return tidy(() => {
      let t = zeros$2([1]);
      return this.hasL1 && (t = add$2(t, sum$2(mul(this.l1, abs$3(e))))), this.hasL2 && (t = add$2(t, sum$2(mul(this.l2, square$1(e))))), reshape$3(t, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e({ l1: t.l1, l2: t.l2 });
  }
}
L1L2.className = "L1L2";
registerClass(L1L2);
function l1$1(r) {
  return assertObjectArgs(r), new L1L2({ l1: r != null ? r.l1 : null, l2: 0 });
}
function l2$1(r) {
  return assertObjectArgs(r), new L1L2({ l2: r != null ? r.l2 : null, l1: 0 });
}
const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
  l1l2: "L1L2"
};
function serializeRegularizer(r) {
  return serializeKerasObject(r);
}
function deserializeRegularizer(r, e = {}) {
  return deserializeKerasObject(r, SerializationMap.getMap().classNameMap, e, "regularizer");
}
function getRegularizer(r) {
  if (r == null)
    return null;
  if (typeof r == "string") {
    const t = { className: r in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[r] : r, config: {} };
    return deserializeRegularizer(t);
  } else return r instanceof Regularizer ? r : deserializeRegularizer(r);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class ReLU extends Layer {
  constructor(e) {
    super(e ?? {}), this.supportsMasking = !0, e != null && (this.maxValue = e.maxValue);
  }
  call(e, t) {
    e = getExactlyOneTensor(e);
    let n = relu$2(e);
    return this.maxValue != null && (n = clipByValue$2(n, 0, this.maxValue)), n;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { maxValue: this.maxValue }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
ReLU.className = "ReLU";
registerClass(ReLU);
class LeakyReLU extends Layer {
  constructor(e) {
    super(e ?? {}), this.DEFAULT_ALPHA = 0.3, e == null && (e = {}), this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
  }
  call(e, t) {
    const n = getExactlyOneTensor(e);
    return leakyRelu$2(n, this.alpha);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
LeakyReLU.className = "LeakyReLU";
registerClass(LeakyReLU);
class PReLU extends Layer {
  constructor(e) {
    if (super(e ?? {}), this.DEFAULT_ALPHA_INITIALIZER = "zeros", e == null && (e = {}), this.supportsMasking = !0, this.alphaInitializer = getInitializer(e.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = getRegularizer(e.alphaRegularizer), this.alphaConstraint = getConstraint(e.alphaConstraint), e.sharedAxes == null)
      this.sharedAxes = null;
    else if (Array.isArray(e.sharedAxes))
      this.sharedAxes = e.sharedAxes;
    else if (typeof e.sharedAxes == "number")
      this.sharedAxes = [e.sharedAxes];
    else
      throw new ValueError(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);
  }
  build(e) {
    e = getExactlyOneShape(e);
    const t = e.slice(1);
    if (this.sharedAxes != null)
      for (const s of this.sharedAxes)
        t[s - 1] = 1;
    this.alpha = this.addWeight("alpha", t, "float32", this.alphaInitializer, this.alphaRegularizer, !0, this.alphaConstraint);
    const n = {};
    if (this.sharedAxes != null)
      for (let s = 1; s < e.length; ++s)
        n[s] = e[s];
    this.inputSpec = [new InputSpec({
      ndim: e.length,
      axes: n
    })], this.built = !0;
  }
  call(e, t) {
    return e = getExactlyOneTensor(e), prelu$3(e, this.alpha.read());
  }
  getConfig() {
    const e = {
      alphaInitializer: serializeInitializer(this.alphaInitializer),
      alphaRegularizer: serializeRegularizer(this.alphaRegularizer),
      alphaConstraint: serializeConstraint(this.alphaConstraint),
      sharedAxes: this.sharedAxes
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
PReLU.className = "PReLU";
registerClass(PReLU);
let ELU$3 = class extends Layer {
  constructor(e) {
    if (super(e ?? {}), this.DEFAULT_ALPHA = 1, e == null && (e = {}), e.alpha != null && e.alpha !== this.DEFAULT_ALPHA)
      throw new NotImplementedError(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
  }
  call(e, t) {
    const n = getExactlyOneTensor(e);
    return elu$4(n);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
ELU$3.className = "ELU";
registerClass(ELU$3);
class ThresholdedReLU extends Layer {
  constructor(e) {
    super(e ?? {}), this.DEFAULT_THETA = 1, e == null && (e = {}), this.theta = e.theta == null ? this.DEFAULT_THETA : e.theta;
  }
  call(e, t) {
    const n = getExactlyOneTensor(e);
    return mul(n, cast$3(greater$3(n, this.theta), "float32"));
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { theta: this.theta }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
ThresholdedReLU.className = "ThresholdedReLU";
registerClass(ThresholdedReLU);
class Softmax extends Layer {
  constructor(e) {
    super(e ?? {}), this.DEFAULT_AXIS = 1, e == null && (e = {}), this.softmax = new Softmax$1().apply, this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis;
  }
  call(e, t) {
    return tidy(() => {
      let n = getExactlyOneTensor(e);
      const s = t.mask;
      if (s != null) {
        const a = mul(sub$2(ones$1(n.shape), cast$3(s, n.dtype)), scalar(-1e9));
        n = add$2(n, a);
      }
      return this.axis instanceof Array ? this.axis.length > 1 ? exp$2(sub$2(n, logSumExp(n, this.axis, !0))) : this.softmax(n, this.axis[0]) : this.softmax(n, this.axis);
    });
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { axis: this.axis }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Softmax.className = "Softmax";
registerClass(Softmax);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function normalizeArray(r, e, t) {
  if (typeof r == "number")
    return pyListRepeat(r, e);
  if (r.length !== e)
    throw new ValueError(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${r.length} elements.`);
  for (let n = 0; n < e; ++n) {
    const s = r[n];
    if (!isInteger(s))
      throw new ValueError(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(r)} including a non-integer number ${s}`);
  }
  return r;
}
function convOutputLength(r, e, t, n, s = 1) {
  if (r == null)
    return r;
  const a = e + (e - 1) * (s - 1);
  let o;
  return t === "same" ? o = r : o = r - a + 1, Math.floor((o + n - 1) / n);
}
function deconvLength(r, e, t, n) {
  if (r == null)
    return null;
  if (n === "valid")
    r = r * e + max$2([t - e, 0]);
  else if (n === "same")
    r = r * e;
  else
    throw new ValueError(`Unsupport padding mode: ${n}.`);
  return r;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function preprocessConv2DInput(r, e) {
  return tidy(() => (checkDataFormat(e), e === "channelsFirst" ? transpose$2(r, [0, 2, 3, 1]) : r));
}
function preprocessConv3DInput(r, e) {
  return tidy(() => (checkDataFormat(e), e === "channelsFirst" ? transpose$2(r, [0, 2, 3, 4, 1]) : r));
}
function conv1dWithBias(r, e, t, n = 1, s = "valid", a, o = 1) {
  return tidy(() => {
    if (a == null && (a = imageDataFormat()), checkDataFormat(a), r.shape.length !== 3)
      throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ${r.shape.length} instead.`);
    if (e.shape.length !== 3)
      throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);
    if (t != null && t.shape.length !== 1)
      throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);
    if (a === "channelsFirst" && (r = transpose$2(r, [0, 2, 1])), s === "causal")
      throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    let u = conv1d$1(r, e, n, s === "same" ? "same" : "valid", "NWC", o);
    return t != null && (u = biasAdd(u, t)), u;
  });
}
function conv2dWithBiasActivation(r, e, t, n = [1, 1], s = "valid", a, o, u = null) {
  return tidy(() => {
    if (a == null && (a = imageDataFormat()), checkDataFormat(a), r.rank !== 3 && r.rank !== 4)
      throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${r.rank}.`);
    if (e.rank !== 3 && e.rank !== 4)
      throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${r.rank}.`);
    let l = preprocessConv2DInput(r, a);
    if (s === "causal")
      throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return l = conv2d$2({
      x: l,
      filter: e,
      strides: n,
      pad: s === "same" ? "same" : "valid",
      dilations: o,
      dataFormat: "NHWC",
      bias: t,
      activation: u
    }), a === "channelsFirst" && (l = transpose$2(l, [0, 3, 1, 2])), l;
  });
}
function conv3dWithBias(r, e, t, n = [1, 1, 1], s = "valid", a, o) {
  return tidy(() => {
    if (a == null && (a = imageDataFormat()), checkDataFormat(a), r.rank !== 4 && r.rank !== 5)
      throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ${r.rank}.`);
    if (e.rank !== 4 && e.rank !== 5)
      throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${r.rank}.`);
    let u = preprocessConv3DInput(r, a);
    if (s === "causal")
      throw new NotImplementedError("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return u = conv3d$1(u, e, n, s === "same" ? "same" : "valid", "NDHWC", o), t != null && (u = biasAdd(u, t)), a === "channelsFirst" && (u = transpose$2(u, [0, 4, 1, 2, 3])), u;
  });
}
class BaseConv extends Layer {
  constructor(e, t) {
    if (super(t), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", BaseConv.verifyArgs(t), this.rank = e, assertPositiveInteger(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
      throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = normalizeArray(t.kernelSize, e, "kernelSize"), this.strides = normalizeArray(t.strides == null ? 1 : t.strides, e, "strides"), this.padding = t.padding == null ? "valid" : t.padding, checkPaddingMode(this.padding), this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, checkDataFormat(this.dataFormat), this.activation = getActivation(t.activation), this.useBias = t.useBias == null ? !0 : t.useBias, this.biasInitializer = getInitializer(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = getConstraint(t.biasConstraint), this.biasRegularizer = getRegularizer(t.biasRegularizer), this.activityRegularizer = getRegularizer(t.activityRegularizer), this.dilationRate = normalizeArray(t.dilationRate == null ? 1 : t.dilationRate, e, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)
      throw new ValueError(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2)
        throw new ValueError(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3)
        throw new ValueError(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(e) {
    if (assert("kernelSize" in e, "required key 'kernelSize' not in config"), typeof e.kernelSize != "number" && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 3))
      throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`);
  }
  getConfig() {
    const e = {
      kernelSize: this.kernelSize,
      strides: this.strides,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      activation: serializeActivation(this.activation),
      useBias: this.useBias,
      biasInitializer: serializeInitializer(this.biasInitializer),
      biasRegularizer: serializeRegularizer(this.biasRegularizer),
      activityRegularizer: serializeRegularizer(this.activityRegularizer),
      biasConstraint: serializeConstraint(this.biasConstraint)
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class Conv extends BaseConv {
  constructor(e, t) {
    super(e, t), this.kernel = null, Conv.verifyArgs(t), this.filters = t.filters, assertPositiveInteger(this.filters, "filters"), this.kernelInitializer = getInitializer(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = getConstraint(t.kernelConstraint), this.kernelRegularizer = getRegularizer(t.kernelRegularizer);
  }
  build(e) {
    e = getExactlyOneShape(e);
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new ValueError(`The channel dimension of the input should be defined. Found ${e[t]}`);
    const n = e[t], s = this.kernelSize.concat([n, this.filters]);
    this.kernel = this.addWeight("kernel", s, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [t]: n } }], this.built = !0;
  }
  call(e, t) {
    return tidy(() => {
      e = getExactlyOneTensor(e);
      let n;
      const s = this.bias == null ? null : this.bias.read(), a = mapActivationToFusedKernel(this.activation.getClassName());
      if (a != null && this.rank === 2)
        n = conv2dWithBiasActivation(e, this.kernel.read(), s, this.strides, this.padding, this.dataFormat, this.dilationRate, a);
      else {
        if (this.rank === 1)
          n = conv1dWithBias(e, this.kernel.read(), s, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2)
          n = conv2dWithBiasActivation(e, this.kernel.read(), s, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else if (this.rank === 3)
          n = conv3dWithBias(e, this.kernel.read(), s, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else
          throw new NotImplementedError("convolutions greater than 3D are not implemented yet.");
        this.activation != null && (n = this.activation.apply(n));
      }
      return n;
    });
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = [], n = this.dataFormat === "channelsLast" ? e.slice(1, e.length - 1) : e.slice(2);
    for (let a = 0; a < n.length; ++a) {
      const o = convOutputLength(n[a], this.kernelSize[a], this.padding, this.strides[a], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[a]);
      t.push(o);
    }
    let s = [e[0]];
    return this.dataFormat === "channelsLast" ? (s = s.concat(t), s.push(this.filters)) : (s.push(this.filters), s = s.concat(t)), s;
  }
  getConfig() {
    const e = {
      filters: this.filters,
      kernelInitializer: serializeInitializer(this.kernelInitializer),
      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
      kernelConstraint: serializeConstraint(this.kernelConstraint)
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  static verifyArgs(e) {
    if (!("filters" in e) || typeof e.filters != "number" || e.filters < 1)
      throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`);
  }
}
class Conv2D extends Conv {
  constructor(e) {
    super(2, e), Conv2D.verifyArgs(e);
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 2))
      throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`);
  }
}
Conv2D.className = "Conv2D";
registerClass(Conv2D);
class Conv3D extends Conv {
  constructor(e) {
    super(3, e), Conv3D.verifyArgs(e);
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !(Array.isArray(e.kernelSize) && (e.kernelSize.length === 1 || e.kernelSize.length === 3)))
      throw new ValueError(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`);
  }
}
Conv3D.className = "Conv3D";
registerClass(Conv3D);
class Conv2DTranspose extends Conv2D {
  constructor(e) {
    if (super(e), this.inputSpec = [new InputSpec({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid")
      throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e) {
    if (e = getExactlyOneShape(e), e.length !== 4)
      throw new ValueError("Input should have rank 4; Received input shape: " + JSON.stringify(e));
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");
    const n = e[t], s = this.kernelSize.concat([this.filters, n]);
    this.kernel = this.addWeight("kernel", s, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new InputSpec({ ndim: 4, axes: { [t]: n } })], this.built = !0;
  }
  call(e, t) {
    return tidy(() => {
      let n = getExactlyOneTensor(e);
      if (n.shape.length !== 4)
        throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);
      const s = n.shape, a = s[0];
      let o, u;
      this.dataFormat === "channelsFirst" ? (o = 2, u = 3) : (o = 1, u = 2);
      const l = s[o], f = s[u], c = this.kernelSize[0], h = this.kernelSize[1], d = this.strides[0], m = this.strides[1], g = deconvLength(l, d, c, this.padding), y = deconvLength(f, m, h, this.padding), b = [a, g, y, this.filters];
      this.dataFormat !== "channelsLast" && (n = transpose$2(n, [0, 2, 3, 1]));
      let v = conv2dTranspose$1(n, this.kernel.read(), b, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (v = transpose$2(v, [0, 3, 1, 2])), this.bias != null && (v = biasAdd(v, this.bias.read(), this.dataFormat)), this.activation != null && (v = this.activation.apply(v)), v;
    });
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = e.slice();
    let n, s, a;
    this.dataFormat === "channelsFirst" ? (n = 1, s = 2, a = 3) : (n = 3, s = 1, a = 2);
    const o = this.kernelSize[0], u = this.kernelSize[1], l = this.strides[0], f = this.strides[1];
    return t[n] = this.filters, t[s] = deconvLength(t[s], l, o, this.padding), t[a] = deconvLength(t[a], f, u, this.padding), t;
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.dilationRate, e;
  }
}
Conv2DTranspose.className = "Conv2DTranspose";
registerClass(Conv2DTranspose);
class Conv3DTranspose extends Conv3D {
  constructor(e) {
    if (super(e), this.inputSpec = [new InputSpec({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid")
      throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e) {
    if (e = getExactlyOneShape(e), e.length !== 5)
      throw new ValueError("Input should have rank 5; Received input shape: " + JSON.stringify(e));
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");
    const n = e[t], s = this.kernelSize.concat([this.filters, n]);
    this.kernel = this.addWeight("kernel", s, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new InputSpec({ ndim: 5, axes: { [t]: n } })], this.built = !0;
  }
  call(e, t) {
    return tidy(() => {
      let n = getExactlyOneTensor(e);
      if (n.shape.length !== 5)
        throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);
      const s = n.shape, a = s[0];
      let o, u, l;
      this.dataFormat === "channelsFirst" ? (l = 2, o = 3, u = 4) : (l = 1, o = 2, u = 3);
      const f = s[l], c = s[o], h = s[u], d = this.kernelSize[0], m = this.kernelSize[1], g = this.kernelSize[2], y = this.strides[0], b = this.strides[1], v = this.strides[2], w = deconvLength(f, y, d, this.padding), I = deconvLength(c, b, m, this.padding), T = deconvLength(h, v, g, this.padding), _ = [a, w, I, T, this.filters];
      this.dataFormat !== "channelsLast" && (n = transpose$2(n, [0, 2, 3, 4, 1]));
      let F = conv3dTranspose$1(n, this.kernel.read(), _, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (F = transpose$2(F, [0, 4, 1, 2, 3])), this.bias !== null && (F = biasAdd(F, this.bias.read(), this.dataFormat)), this.activation !== null && (F = this.activation.apply(F)), F;
    });
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = e.slice();
    let n, s, a, o;
    this.dataFormat === "channelsFirst" ? (n = 1, s = 2, a = 3, o = 4) : (n = 4, s = 1, a = 2, o = 3);
    const u = this.kernelSize[0], l = this.kernelSize[1], f = this.kernelSize[2], c = this.strides[0], h = this.strides[1], d = this.strides[2];
    return t[n] = this.filters, t[s] = deconvLength(t[s], c, u, this.padding), t[a] = deconvLength(t[a], h, l, this.padding), t[o] = deconvLength(t[o], d, f, this.padding), t;
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.dilationRate, e;
  }
}
Conv3DTranspose.className = "Conv3DTranspose";
registerClass(Conv3DTranspose);
class SeparableConv extends Conv {
  constructor(e, t) {
    if (super(e, t), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, t.filters == null)
      throw new ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (t.kernelInitializer != null || t.kernelRegularizer != null || t.kernelConstraint != null)
      throw new ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (t.padding != null && t.padding !== "same" && t.padding !== "valid")
      throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);
    this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = getInitializer(t.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = getRegularizer(t.depthwiseRegularizer), this.depthwiseConstraint = getConstraint(t.depthwiseConstraint), this.pointwiseInitializer = getInitializer(t.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = getRegularizer(t.pointwiseRegularizer), this.pointwiseConstraint = getConstraint(t.pointwiseConstraint);
  }
  build(e) {
    if (e = getExactlyOneShape(e), e.length < this.rank + 2)
      throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(e)}`);
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null || e[t] < 0)
      throw new ValueError(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);
    const n = e[t], s = this.kernelSize.concat([n, this.depthMultiplier]), a = [];
    for (let u = 0; u < this.rank; ++u)
      a.push(1);
    a.push(n * this.depthMultiplier, this.filters);
    const o = !0;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", s, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, o, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", a, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, o, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, o, this.biasConstraint) : this.bias = null, this.inputSpec = [new InputSpec({ ndim: this.rank + 2, axes: { [t]: n } })], this.built = !0;
  }
  call(e, t) {
    return tidy(() => {
      e = getExactlyOneTensor(e);
      let n;
      if (this.rank === 1)
        throw new NotImplementedError("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (e = transpose$2(e, [0, 2, 3, 1])), n = separableConv2d$1(e, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (n = biasAdd(n, this.bias.read(), this.dataFormat)), this.activation != null && (n = this.activation.apply(n)), this.dataFormat === "channelsFirst" && (n = transpose$2(n, [0, 3, 1, 2])), n;
    });
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, delete e.kernelInitializer, delete e.kernelRegularizer, delete e.kernelConstraint, e.depthwiseInitializer = serializeInitializer(this.depthwiseInitializer), e.pointwiseInitializer = serializeInitializer(this.pointwiseInitializer), e.depthwiseRegularizer = serializeRegularizer(this.depthwiseRegularizer), e.pointwiseRegularizer = serializeRegularizer(this.pointwiseRegularizer), e.depthwiseConstraint = serializeConstraint(this.depthwiseConstraint), e.pointwiseConstraint = serializeConstraint(this.pointwiseConstraint), e;
  }
}
SeparableConv.className = "SeparableConv";
class SeparableConv2D extends SeparableConv {
  constructor(e) {
    super(2, e);
  }
}
SeparableConv2D.className = "SeparableConv2D";
registerClass(SeparableConv2D);
class Conv1D extends Conv {
  constructor(e) {
    super(1, e), Conv1D.verifyArgs(e), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, delete e.dataFormat, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 1))
      throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`);
  }
}
Conv1D.className = "Conv1D";
registerClass(Conv1D);
class Cropping2D extends Layer {
  constructor(e) {
    super(e), typeof e.cropping == "number" ? this.cropping = [[e.cropping, e.cropping], [e.cropping, e.cropping]] : typeof e.cropping[0] == "number" ? this.cropping = [
      [e.cropping[0], e.cropping[0]],
      [e.cropping[1], e.cropping[1]]
    ] : this.cropping = e.cropping, this.dataFormat = e.dataFormat === void 0 ? "channelsLast" : e.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(e) {
    return this.dataFormat === "channelsFirst" ? [
      e[0],
      e[1],
      e[2] - this.cropping[0][0] - this.cropping[0][1],
      e[3] - this.cropping[1][0] - this.cropping[1][1]
    ] : [
      e[0],
      e[1] - this.cropping[0][0] - this.cropping[0][1],
      e[2] - this.cropping[1][0] - this.cropping[1][1],
      e[3]
    ];
  }
  call(e, t) {
    return tidy(() => {
      if (e = getExactlyOneTensor(e), this.dataFormat === "channelsLast") {
        const n = sliceAlongAxis(e, this.cropping[0][0], e.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return sliceAlongAxis(n, this.cropping[1][0], e.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        const n = sliceAlongAxis(e, this.cropping[0][0], e.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return sliceAlongAxis(n, this.cropping[1][0], e.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    const e = { cropping: this.cropping, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Cropping2D.className = "Cropping2D";
registerClass(Cropping2D);
class UpSampling2D extends Layer {
  constructor(e) {
    super(e), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = e.size == null ? this.DEFAULT_SIZE : e.size, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, checkDataFormat(this.dataFormat), this.interpolation = e.interpolation == null ? "nearest" : e.interpolation, checkInterpolationFormat(this.interpolation);
  }
  computeOutputShape(e) {
    if (this.dataFormat === "channelsFirst") {
      const t = e[2] == null ? null : this.size[0] * e[2], n = e[3] == null ? null : this.size[1] * e[3];
      return [e[0], e[1], t, n];
    } else {
      const t = e[1] == null ? null : this.size[0] * e[1], n = e[2] == null ? null : this.size[1] * e[2];
      return [e[0], t, n, e[3]];
    }
  }
  call(e, t) {
    return tidy(() => {
      let n = getExactlyOneTensor(e);
      const s = n.shape;
      if (this.dataFormat === "channelsFirst") {
        n = transpose$2(n, [0, 2, 3, 1]);
        const a = this.size[0] * s[2], o = this.size[1] * s[3], u = this.interpolation === "nearest" ? image$1.resizeNearestNeighbor(n, [a, o]) : image$1.resizeBilinear(n, [a, o]);
        return transpose$2(u, [0, 3, 1, 2]);
      } else {
        const a = this.size[0] * s[1], o = this.size[1] * s[2];
        return this.interpolation === "nearest" ? image$1.resizeNearestNeighbor(n, [a, o]) : image$1.resizeBilinear(n, [a, o]);
      }
    });
  }
  getConfig() {
    const e = {
      size: this.size,
      dataFormat: this.dataFormat,
      interpolation: this.interpolation
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
UpSampling2D.className = "UpSampling2D";
registerClass(UpSampling2D);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function depthwiseConv2d$1(r, e, t = [1, 1], n = "valid", s, a) {
  return tidy(() => {
    s == null && (s = imageDataFormat()), checkDataFormat(s);
    let o = preprocessConv2DInput(r, s);
    if (r.rank !== 4)
      throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ${r.rank}-D`);
    if (e.rank !== 4)
      throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);
    return o = depthwiseConv2d$3(o, e, t, n === "same" ? "same" : "valid", "NHWC", a), s === "channelsFirst" && (o = transpose$2(o, [0, 3, 1, 2])), o;
  });
}
class DepthwiseConv2D extends BaseConv {
  constructor(e) {
    super(2, e), this.depthwiseKernel = null, this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = getInitializer(e.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = getConstraint(e.depthwiseConstraint), this.depthwiseRegularizer = getRegularizer(e.depthwiseRegularizer);
  }
  build(e) {
    if (e = getExactlyOneShape(e), e.length < 4)
      throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);
    const t = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (e[t] == null || e[t] < 0)
      throw new ValueError(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);
    const n = e[t], s = [
      this.kernelSize[0],
      this.kernelSize[1],
      n,
      this.depthMultiplier
    ];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", s, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [n * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(e, t) {
    return tidy(() => {
      e = getExactlyOneTensor(e);
      let n = depthwiseConv2d$1(e, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (n = biasAdd(n, this.bias.read(), this.dataFormat)), this.activation != null && (n = this.activation.apply(n)), n;
    });
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2], s = this.dataFormat === "channelsFirst" ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier, a = convOutputLength(t, this.kernelSize[0], this.padding, this.strides[0]), o = convOutputLength(n, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [e[0], s, a, o] : [e[0], a, o, s];
  }
  getConfig() {
    const e = super.getConfig();
    return e.depthMultiplier = this.depthMultiplier, e.depthwiseInitializer = serializeInitializer(this.depthwiseInitializer), e.depthwiseRegularizer = serializeRegularizer(this.depthwiseRegularizer), e.depthwiseConstraint = serializeConstraint(this.depthwiseRegularizer), e;
  }
}
DepthwiseConv2D.className = "DepthwiseConv2D";
registerClass(DepthwiseConv2D);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function standardizeArgs(r, e, t, n) {
  if (Array.isArray(r)) {
    if (e != null || t != null)
      throw new ValueError("When inputs is an array, neither initialState or constants should be provided");
    n != null && (t = r.slice(r.length - n, r.length), r = r.slice(0, r.length - n)), r.length > 1 && (e = r.slice(1, r.length)), r = r[0];
  }
  function s(a) {
    return a == null || Array.isArray(a) ? a : [a];
  }
  return e = s(e), t = s(t), { inputs: r, initialState: e, constants: t };
}
function rnn$1(r, e, t, n = !1, s, a, o = !1, u = !1) {
  return tidy(() => {
    const l = e.shape.length;
    if (l < 3)
      throw new ValueError(`Input should be at least 3D, but is ${l}D.`);
    const f = [1, 0].concat(range$2(2, l));
    e = transpose$2(e, f), o && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), s != null && (s = cast$3(cast$3(s, "bool"), "float32"), s.rank === l - 1 && (s = expandDims$3(s, -1)), s = transpose$2(s, f)), n && (e = reverse$2(e, 0), s != null && (s = reverse$2(s, 0)));
    const c = [];
    let h, d = t;
    const m = e.shape[0], g = unstack(e);
    let y;
    s != null && (y = unstack(s));
    for (let v = 0; v < m; ++v) {
      const w = g[v], I = tidy(() => r(w, d));
      if (s == null)
        h = I[0], d = I[1];
      else {
        const T = tidy(() => {
          const _ = y[v], F = sub$2(onesLike$2(_), _), O = add$2(mul(I[0], _), mul(d[0], F)), q = d.map((V, H) => add$2(mul(I[1][H], _), mul(V, F)));
          return { output: O, newStates: q };
        });
        h = T.output, d = T.newStates;
      }
      u && c.push(h);
    }
    let b;
    return u && (b = stack(c, 1)), [h, b, d];
  });
}
class RNN extends Layer {
  constructor(e) {
    super(e);
    let t;
    if (e.cell == null)
      throw new ValueError("cell property is missing for the constructor of RNN.");
    if (Array.isArray(e.cell) ? t = new StackedRNNCells({ cells: e.cell }) : t = e.cell, t.stateSize == null)
      throw new ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = t, this.returnSequences = e.returnSequences == null ? !1 : e.returnSequences, this.returnState = e.returnState == null ? !1 : e.returnState, this.goBackwards = e.goBackwards == null ? !1 : e.goBackwards, this._stateful = e.stateful == null ? !1 : e.stateful, this.unroll = e.unroll == null ? !1 : e.unroll, this.supportsMasking = !0, this.inputSpec = [new InputSpec({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  // Porting Note: This is the equivalent of `RNN.states` property getter in
  //   PyKeras.
  getStates() {
    if (this.states_ == null) {
      const e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return range$2(0, e).map((t) => null);
    } else
      return this.states_;
  }
  // Porting Note: This is the equivalent of the `RNN.states` property setter in
  //   PyKeras.
  setStates(e) {
    this.states_ = e;
  }
  computeOutputShape(e) {
    isArrayOfShapes(e) && (e = e[0]), e = e;
    let t = this.cell.stateSize;
    Array.isArray(t) || (t = [t]);
    const n = t[0];
    let s;
    if (this.returnSequences ? s = [e[0], e[1], n] : s = [e[0], n], this.returnState) {
      const a = [];
      for (const o of t)
        a.push([e[0], o]);
      return [s].concat(a);
    } else
      return s;
  }
  computeMask(e, t) {
    return tidy(() => {
      Array.isArray(t) && (t = t[0]);
      const n = this.returnSequences ? t : null;
      if (this.returnState) {
        const s = this.states.map((a) => null);
        return [n].concat(s);
      } else
        return n;
    });
  }
  /**
   * Get the current state tensors of the RNN.
   *
   * If the state hasn't been set, return an array of `null`s of the correct
   * length.
   */
  get states() {
    if (this.states_ == null) {
      const e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, t = [];
      for (let n = 0; n < e; ++n)
        t.push(null);
      return t;
    } else
      return this.states_;
  }
  set states(e) {
    this.states_ = e;
  }
  build(e) {
    if (this.numConstants != null)
      throw new NotImplementedError("Constants support is not implemented in RNN yet.");
    isArrayOfShapes(e) && (e = e[0]), e = e;
    const t = this.stateful ? e[0] : null, n = e.slice(2);
    this.inputSpec[0] = new InputSpec({ shape: [t, null, ...n] });
    const s = [e[0]].concat(e.slice(2));
    this.cell.build(s);
    let a;
    if (Array.isArray(this.cell.stateSize) ? a = this.cell.stateSize : a = [this.cell.stateSize], this.stateSpec != null) {
      if (!arraysEqual(this.stateSpec.map((o) => o.shape[o.shape.length - 1]), a))
        throw new ValueError(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else
      this.stateSpec = a.map((o) => new InputSpec({ shape: [null, o] }));
    this.stateful && this.resetStates();
  }
  /**
   * Reset the state tensors of the RNN.
   *
   * If the `states` argument is `undefined` or `null`, will set the
   * state tensor(s) of the RNN to all-zero tensors of the appropriate
   * shape(s).
   *
   * If `states` is provided, will set the state tensors of the RNN to its
   * value.
   *
   * @param states Optional externally-provided initial states.
   * @param training Whether this call is done during training. For stateful
   *   RNNs, this affects whether the old states are kept or discarded. In
   *   particular, if `training` is `true`, the old states will be kept so
   *   that subsequent backpropgataion through time (BPTT) may work properly.
   *   Else, the old states will be discarded.
   */
  resetStates(e, t = !1) {
    tidy(() => {
      if (!this.stateful)
        throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const n = this.inputSpec[0].shape[0];
      if (n == null)
        throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((s) => zeros$2([n, s])) : this.states_ = [zeros$2([n, this.cell.stateSize])];
      else if (e == null)
        dispose(this.states_), this.keptStates != null && (dispose(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((s) => zeros$2([n, s])) : this.states_[0] = zeros$2([n, this.cell.stateSize]);
      else {
        if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length)
          throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
        t === !0 ? this.keptStates.push(this.states_.slice()) : dispose(this.states_);
        for (let s = 0; s < this.states_.length; ++s) {
          const a = e[s], o = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[s] : this.cell.stateSize, u = [n, o];
          if (!arraysEqual(a.shape, u))
            throw new ValueError(`State ${s} is incompatible with layer ${this.name}: expected shape=${u}, received shape=${a.shape}`);
          this.states_[s] = a;
        }
      }
      this.states_ = this.states_.map((s) => keep(s.clone()));
    });
  }
  apply(e, t) {
    let n = t == null ? null : t.initialState, s = t == null ? null : t.constants;
    t == null && (t = {});
    const a = standardizeArgs(e, n, s, this.numConstants);
    e = a.inputs, n = a.initialState, s = a.constants;
    let o = [], u = [];
    if (n != null) {
      t.initialState = n, o = o.concat(n), this.stateSpec = [];
      for (const f of n)
        this.stateSpec.push(new InputSpec({ shape: f.shape }));
      u = u.concat(this.stateSpec);
    }
    if (s != null && (t.constants = s, o = o.concat(s), this.numConstants = s.length), o[0] instanceof SymbolicTensor) {
      const f = [e].concat(o), c = this.inputSpec.concat(u), h = this.inputSpec;
      this.inputSpec = c;
      const d = super.apply(f, t);
      return this.inputSpec = h, d;
    } else
      return super.apply(e, t);
  }
  // tslint:disable-next-line:no-any
  call(e, t) {
    return tidy(() => {
      const n = t == null ? null : t.mask, s = t == null ? null : t.training;
      let a = t == null ? null : t.initialState;
      e = getExactlyOneTensor(e), a == null && (this.stateful ? a = this.states_ : a = this.getInitialState(e));
      const o = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (a.length !== o)
        throw new ValueError(`RNN Layer has ${o} state(s) but was passed ${a.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      const u = { training: s }, f = rnn$1((g, y) => {
        const b = this.cell.call([g].concat(y), u);
        return [b[0], b.slice(1)];
      }, e, a, this.goBackwards, n, null, this.unroll, this.returnSequences), c = f[0], h = f[1], d = f[2];
      this.stateful && this.resetStates(d, s);
      const m = this.returnSequences ? h : c;
      return this.returnState ? [m].concat(d) : m;
    });
  }
  getInitialState(e) {
    return tidy(() => {
      let t = zeros$2(e.shape);
      return t = sum$2(t, [1, 2]), t = expandDims$2(t), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((n) => n > 1 ? tile$2(t, [1, n]) : t) : this.cell.stateSize > 1 ? [tile$2(t, [1, this.cell.stateSize])] : [t];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.cell != null && this.cell.setFastWeightInitDuringBuild(e);
  }
  getConfig() {
    const e = super.getConfig(), t = {
      returnSequences: this.returnSequences,
      returnState: this.returnState,
      goBackwards: this.goBackwards,
      stateful: this.stateful,
      unroll: this.unroll
    };
    this.numConstants != null && (t.numConstants = this.numConstants);
    const n = this.cell.getConfig();
    return this.getClassName() === RNN.className && (t.cell = {
      className: this.cell.getClassName(),
      config: n
    }), Object.assign(Object.assign(Object.assign({}, n), e), t);
  }
  /** @nocollapse */
  static fromConfig(e, t, n = {}) {
    const s = t.cell, a = deserialize(s, n);
    return new e(Object.assign(t, { cell: a }));
  }
}
RNN.className = "RNN";
registerClass(RNN);
class RNNCell extends Layer {
}
class SimpleRNNCell extends RNNCell {
  constructor(e) {
    super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, assertPositiveInteger(this.units, "units"), this.activation = getActivation(e.activation == null ? this.DEFAULT_ACTIVATION : e.activation), this.useBias = e.useBias == null ? !0 : e.useBias, this.kernelInitializer = getInitializer(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = getInitializer(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = getInitializer(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = getRegularizer(e.kernelRegularizer), this.recurrentRegularizer = getRegularizer(e.recurrentRegularizer), this.biasRegularizer = getRegularizer(e.biasRegularizer), this.kernelConstraint = getConstraint(e.kernelConstraint), this.recurrentConstraint = getConstraint(e.recurrentConstraint), this.biasConstraint = getConstraint(e.biasConstraint), this.dropout = min$2([1, max$2([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = min$2([
      1,
      max$2([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])
    ]), this.dropoutFunc = e.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    e = getExactlyOneShape(e), this.kernel = this.addWeight("kernel", [e[e.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:
  //   `inputs` and `states`. Here, the two tensors are combined into an
  //   `Tensor[]` Array as the first input argument.
  //   Similarly, PyKeras' equivalent of this method returns two values:
  //    `output` and `[output]`. Here the two are combined into one length-2
  //    `Tensor[]`, consisting of `output` repeated.
  call(e, t) {
    return tidy(() => {
      if (e = e, e.length !== 2)
        throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);
      let n = e[1];
      e = e[0];
      const s = t.training == null ? !1 : t.training;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = generateDropoutMask({
        ones: () => onesLike$2(e),
        rate: this.dropout,
        training: s,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = generateDropoutMask({
        ones: () => onesLike$2(n),
        rate: this.recurrentDropout,
        training: s,
        dropoutFunc: this.dropoutFunc
      }));
      let a;
      const o = this.dropoutMask, u = this.recurrentDropoutMask;
      o != null ? a = dot$1(mul(e, o), this.kernel.read()) : a = dot$1(e, this.kernel.read()), this.bias != null && (a = biasAdd(a, this.bias.read())), u != null && (n = mul(n, u));
      let l = add$2(a, dot$1(n, this.recurrentKernel.read()));
      return this.activation != null && (l = this.activation.apply(l)), [l, l];
    });
  }
  getConfig() {
    const e = super.getConfig(), t = {
      units: this.units,
      activation: serializeActivation(this.activation),
      useBias: this.useBias,
      kernelInitializer: serializeInitializer(this.kernelInitializer),
      recurrentInitializer: serializeInitializer(this.recurrentInitializer),
      biasInitializer: serializeInitializer(this.biasInitializer),
      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
      biasRegularizer: serializeRegularizer(this.biasRegularizer),
      activityRegularizer: serializeRegularizer(this.activityRegularizer),
      kernelConstraint: serializeConstraint(this.kernelConstraint),
      recurrentConstraint: serializeConstraint(this.recurrentConstraint),
      biasConstraint: serializeConstraint(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout
    };
    return Object.assign(Object.assign({}, e), t);
  }
}
SimpleRNNCell.className = "SimpleRNNCell";
registerClass(SimpleRNNCell);
class SimpleRNN extends RNN {
  constructor(e) {
    e.cell = new SimpleRNNCell(e), super(e);
  }
  call(e, t) {
    return tidy(() => {
      this.cell.dropoutMask != null && (dispose(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (dispose(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const n = t == null ? null : t.mask, s = t == null ? null : t.training, a = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: s, initialState: a });
    });
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t);
  }
}
SimpleRNN.className = "SimpleRNN";
registerClass(SimpleRNN);
class GRUCell extends RNNCell {
  constructor(e) {
    if (super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.resetAfter)
      throw new ValueError("GRUCell does not support reset_after parameter set to true.");
    this.units = e.units, assertPositiveInteger(this.units, "units"), this.activation = getActivation(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = getActivation(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? !0 : e.useBias, this.kernelInitializer = getInitializer(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = getInitializer(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = getInitializer(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = getRegularizer(e.kernelRegularizer), this.recurrentRegularizer = getRegularizer(e.recurrentRegularizer), this.biasRegularizer = getRegularizer(e.biasRegularizer), this.kernelConstraint = getConstraint(e.kernelConstraint), this.recurrentConstraint = getConstraint(e.recurrentConstraint), this.biasConstraint = getConstraint(e.biasConstraint), this.dropout = min$2([1, max$2([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = min$2([
      1,
      max$2([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])
    ]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    e = getExactlyOneShape(e);
    const t = e[e.length - 1];
    this.kernel = this.addWeight("kernel", [t, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(e, t) {
    return tidy(() => {
      if (e = e, e.length !== 2)
        throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);
      const n = t.training == null ? !1 : t.training;
      let s = e[1];
      e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = generateDropoutMask({
        ones: () => onesLike$2(e),
        rate: this.dropout,
        training: n,
        count: 3,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = generateDropoutMask({
        ones: () => onesLike$2(s),
        rate: this.recurrentDropout,
        training: n,
        count: 3,
        dropoutFunc: this.dropoutFunc
      }));
      const a = this.dropoutMask, o = this.recurrentDropoutMask;
      let u, l, f;
      0 < this.dropout && this.dropout < 1 && (e = mul(e, a[0]));
      let c = dot$1(e, this.kernel.read());
      this.useBias && (c = biasAdd(c, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (s = mul(s, o[0]));
      const h = this.recurrentKernel.read(), [d, m] = split$2(h, [2 * this.units, this.units], h.rank - 1), g = dot$1(s, d), [y, b, v] = split$2(c, 3, c.rank - 1), [w, I] = split$2(g, 2, g.rank - 1);
      u = this.recurrentActivation.apply(add$2(y, w)), l = this.recurrentActivation.apply(add$2(b, I));
      const T = dot$1(mul(l, s), m);
      f = this.activation.apply(add$2(v, T));
      const _ = add$2(mul(u, s), mul(add$2(1, neg$2(u)), f));
      return [_, _];
    });
  }
  getConfig() {
    const e = super.getConfig(), t = {
      units: this.units,
      activation: serializeActivation(this.activation),
      recurrentActivation: serializeActivation(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: serializeInitializer(this.kernelInitializer),
      recurrentInitializer: serializeInitializer(this.recurrentInitializer),
      biasInitializer: serializeInitializer(this.biasInitializer),
      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
      biasRegularizer: serializeRegularizer(this.biasRegularizer),
      activityRegularizer: serializeRegularizer(this.activityRegularizer),
      kernelConstraint: serializeConstraint(this.kernelConstraint),
      recurrentConstraint: serializeConstraint(this.recurrentConstraint),
      biasConstraint: serializeConstraint(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation,
      resetAfter: !1
    };
    return Object.assign(Object.assign({}, e), t);
  }
}
GRUCell.className = "GRUCell";
registerClass(GRUCell);
class GRU extends RNN {
  constructor(e) {
    e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new GRUCell(e), super(e);
  }
  call(e, t) {
    return tidy(() => {
      this.cell.dropoutMask != null && (dispose(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (dispose(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const n = t == null ? null : t.mask, s = t == null ? null : t.training, a = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: s, initialState: a });
    });
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e(t);
  }
}
GRU.className = "GRU";
registerClass(GRU);
class LSTMCell extends RNNCell {
  constructor(e) {
    super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, assertPositiveInteger(this.units, "units"), this.activation = getActivation(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = getActivation(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? !0 : e.useBias, this.kernelInitializer = getInitializer(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = getInitializer(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = getInitializer(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = e.unitForgetBias, this.kernelRegularizer = getRegularizer(e.kernelRegularizer), this.recurrentRegularizer = getRegularizer(e.recurrentRegularizer), this.biasRegularizer = getRegularizer(e.biasRegularizer), this.kernelConstraint = getConstraint(e.kernelConstraint), this.recurrentConstraint = getConstraint(e.recurrentConstraint), this.biasConstraint = getConstraint(e.biasConstraint), this.dropout = min$2([1, max$2([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = min$2([
      1,
      max$2([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])
    ]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    var t;
    e = getExactlyOneShape(e);
    const n = e[e.length - 1];
    this.kernel = this.addWeight("kernel", [n, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint);
    let s;
    if (this.useBias) {
      if (this.unitForgetBias) {
        const a = this.biasInitializer, o = this.units;
        s = new (t = class extends Initializer {
          apply(l, f) {
            const c = a.apply([o]), h = new Ones().apply([o]), d = a.apply([o * 2]);
            return concatAlongFirstAxis(concatAlongFirstAxis(c, h), d);
          }
        }, /** @nocollapse */
        t.className = "CustomInit", t)();
      } else
        s = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.units * 4], null, s, this.biasRegularizer, !0, this.biasConstraint);
    } else
      this.bias = null;
    this.built = !0;
  }
  call(e, t) {
    return tidy(() => {
      const n = t.training == null ? !1 : t.training;
      if (e = e, e.length !== 3)
        throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
      let s = e[1];
      const a = e[2];
      e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = generateDropoutMask({
        ones: () => onesLike$2(e),
        rate: this.dropout,
        training: n,
        count: 4,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = generateDropoutMask({
        ones: () => onesLike$2(s),
        rate: this.recurrentDropout,
        training: n,
        count: 4,
        dropoutFunc: this.dropoutFunc
      }));
      const o = this.dropoutMask, u = this.recurrentDropoutMask;
      let l, f, c, h;
      0 < this.dropout && this.dropout < 1 && (e = mul(e, o[0]));
      let d = dot$1(e, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (s = mul(s, u[0])), d = add$2(d, dot$1(s, this.recurrentKernel.read())), this.useBias && (d = biasAdd(d, this.bias.read()));
      const [m, g, y, b] = split$2(d, 4, d.rank - 1);
      l = this.recurrentActivation.apply(m), f = this.recurrentActivation.apply(g), c = add$2(mul(f, a), mul(l, this.activation.apply(y))), h = this.recurrentActivation.apply(b);
      const v = mul(h, this.activation.apply(c));
      return [v, v, c];
    });
  }
  getConfig() {
    const e = super.getConfig(), t = {
      units: this.units,
      activation: serializeActivation(this.activation),
      recurrentActivation: serializeActivation(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: serializeInitializer(this.kernelInitializer),
      recurrentInitializer: serializeInitializer(this.recurrentInitializer),
      biasInitializer: serializeInitializer(this.biasInitializer),
      unitForgetBias: this.unitForgetBias,
      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
      biasRegularizer: serializeRegularizer(this.biasRegularizer),
      activityRegularizer: serializeRegularizer(this.activityRegularizer),
      kernelConstraint: serializeConstraint(this.kernelConstraint),
      recurrentConstraint: serializeConstraint(this.recurrentConstraint),
      biasConstraint: serializeConstraint(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation
    };
    return Object.assign(Object.assign({}, e), t);
  }
}
LSTMCell.className = "LSTMCell";
registerClass(LSTMCell);
class LSTM extends RNN {
  constructor(e) {
    e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new LSTMCell(e), super(e);
  }
  call(e, t) {
    return tidy(() => {
      this.cell.dropoutMask != null && (dispose(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (dispose(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const n = t == null ? null : t.mask, s = t == null ? null : t.training, a = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: s, initialState: a });
    });
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e(t);
  }
}
LSTM.className = "LSTM";
registerClass(LSTM);
class StackedRNNCells extends RNNCell {
  constructor(e) {
    super(e), this.cells = e.cells;
  }
  get stateSize() {
    const e = [];
    for (const t of this.cells.slice().reverse())
      Array.isArray(t.stateSize) ? e.push(...t.stateSize) : e.push(t.stateSize);
    return e;
  }
  call(e, t) {
    return tidy(() => {
      e = e;
      let n = e.slice(1);
      const s = [];
      for (const u of this.cells.slice().reverse())
        Array.isArray(u.stateSize) ? s.push(n.splice(0, u.stateSize.length)) : s.push(n.splice(0, 1));
      s.reverse();
      const a = [];
      let o;
      for (let u = 0; u < this.cells.length; ++u) {
        const l = this.cells[u];
        n = s[u], u === 0 ? o = [e[0]].concat(n) : o = [o[0]].concat(n), o = l.call(o, t), a.push(o.slice(1));
      }
      n = [];
      for (const u of a.slice().reverse())
        n.push(...u);
      return [o[0]].concat(n);
    });
  }
  build(e) {
    isArrayOfShapes(e) && (e = e[0]), e = e;
    let t;
    this.cells.forEach((n, s) => {
      nameScope(`RNNCell_${s}`, () => {
        n.build(e), Array.isArray(n.stateSize) ? t = n.stateSize[0] : t = n.stateSize, e = [e[0], t];
      });
    }), this.built = !0;
  }
  getConfig() {
    const e = super.getConfig(), t = (a) => ({
      className: a.getClassName(),
      config: a.getConfig()
    }), s = { cells: this.cells.map(t) };
    return Object.assign(Object.assign({}, e), s);
  }
  /** @nocollapse */
  static fromConfig(e, t, n = {}) {
    const s = [];
    for (const a of t.cells)
      s.push(deserialize(a, n));
    return new e({ cells: s });
  }
  get trainableWeights() {
    if (!this.trainable)
      return [];
    const e = [];
    for (const t of this.cells)
      e.push(...t.trainableWeights);
    return e;
  }
  get nonTrainableWeights() {
    const e = [];
    for (const t of this.cells)
      e.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      const t = [];
      for (const n of this.cells)
        t.push(...n.trainableWeights);
      return t.concat(e);
    }
    return e;
  }
  /**
   * Retrieve the weights of a the model.
   *
   * @returns A flat `Array` of `tf.Tensor`s.
   */
  getWeights() {
    const e = [];
    for (const t of this.cells)
      e.push(...t.weights);
    return batchGetValue(e);
  }
  /**
   * Set the weights of the model.
   *
   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching
   *     the output of `getWeights()`.
   */
  setWeights(e) {
    const t = [];
    for (const n of this.cells) {
      const s = n.weights.length, a = e.splice(s);
      for (let o = 0; o < n.weights.length; ++o)
        t.push([n.weights[o], a[o]]);
    }
    batchSetValue(t);
  }
}
StackedRNNCells.className = "StackedRNNCells";
registerClass(StackedRNNCells);
function generateDropoutMask(r) {
  const { ones: e, rate: t, training: n = !1, count: s = 1, dropoutFunc: a } = r, o = () => a != null ? a(e(), t) : dropout$1(e(), t), u = () => inTrainPhase(o, e, n);
  return !s || s <= 1 ? keep(u().clone()) : Array(s).fill(void 0).map(u).map((f) => keep(f.clone()));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var __rest = function(r, e) {
  var t = {};
  for (var n in r) Object.prototype.hasOwnProperty.call(r, n) && e.indexOf(n) < 0 && (t[n] = r[n]);
  if (r != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, n = Object.getOwnPropertySymbols(r); s < n.length; s++)
      e.indexOf(n[s]) < 0 && Object.prototype.propertyIsEnumerable.call(r, n[s]) && (t[n[s]] = r[n[s]]);
  return t;
};
class ConvRNN2D extends RNN {
  constructor(e) {
    if (e.unroll)
      throw new NotImplementedError("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(e.cell))
      throw new NotImplementedError("It is not possible at the moment to stack convolutional cells.");
    super(e), this.inputSpec = [new InputSpec({ ndim: 5 })];
  }
  call(e, t) {
    return tidy(() => {
      if (this.cell.dropoutMask != null && (dispose(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (dispose(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), t && t.constants)
        throw new ValueError("ConvRNN2D cell does not support constants");
      const n = t == null ? null : t.mask, s = t == null ? null : t.training, a = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: s, initialState: a });
    });
  }
  computeOutputShape(e) {
    let t = this.computeSingleOutputShape(e);
    return this.returnSequences || (t = [t[0], ...t.slice(2)]), this.returnState && (t = [t, ...Array(2).fill([e[0], ...t.slice(-3)])]), t;
  }
  getInitialState(e) {
    return tidy(() => {
      const { stateSize: t } = this.cell, n = e.shape, s = this.computeSingleOutputShape(n), a = [s[0], ...s.slice(2)], o = zeros$2(a);
      return Array.isArray(t) ? Array(t.length).fill(o) : [o];
    });
  }
  resetStates(e, t = !1) {
    tidy(() => {
      if (!this.stateful)
        throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const n = this.inputSpec[0].shape, s = this.computeSingleOutputShape(n), a = [s[0], ...s.slice(2)];
      if (n[0] == null)
        throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => zeros$2(a)) : this.states_ = [zeros$2(a)];
      else if (e == null)
        dispose(this.states_), this.keptStates != null && (dispose(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => zeros$2(a)) : this.states_[0] = zeros$2(a);
      else {
        if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length)
          throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
        t ? this.keptStates.push(this.states_.slice()) : dispose(this.states_);
        for (let u = 0; u < this.states_.length; ++u) {
          const l = e[u], f = a;
          if (!arraysEqual(l.shape, f))
            throw new ValueError(`State ${u} is incompatible with layer ${this.name}: expected shape=${f}, received shape=${l.shape}`);
          this.states_[u] = l;
        }
      }
      this.states_ = this.states_.map((u) => keep(u.clone()));
    });
  }
  computeSingleOutputShape(e) {
    const { dataFormat: t, filters: n, kernelSize: s, padding: a, strides: o, dilationRate: u } = this.cell, l = t === "channelsFirst", f = e[l ? 3 : 2], c = e[l ? 4 : 3], h = convOutputLength(f, s[0], a, o[0], u[0]), d = convOutputLength(c, s[1], a, o[1], u[1]);
    return [
      ...e.slice(0, 2),
      ...l ? [n, h, d] : [h, d, n]
    ];
  }
}
ConvRNN2D.className = "ConvRNN2D";
class ConvLSTM2DCell extends LSTMCell {
  constructor(e) {
    const { filters: t, kernelSize: n, strides: s, padding: a, dataFormat: o, dilationRate: u } = e;
    super(Object.assign(Object.assign({}, e), { units: t })), this.filters = t, assertPositiveInteger(this.filters, "filters"), this.kernelSize = normalizeArray(n, 2, "kernelSize"), this.kernelSize.forEach((l) => assertPositiveInteger(l, "kernelSize")), this.strides = normalizeArray(s || 1, 2, "strides"), this.strides.forEach((l) => assertPositiveInteger(l, "strides")), this.padding = a || "valid", checkPaddingMode(this.padding), this.dataFormat = o || "channelsLast", checkDataFormat(this.dataFormat), this.dilationRate = normalizeArray(u || 1, 2, "dilationRate"), this.dilationRate.forEach((l) => assertPositiveInteger(l, "dilationRate"));
  }
  build(e) {
    var t;
    e = getExactlyOneShape(e);
    const n = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[n] == null)
      throw new ValueError(`The channel dimension of the input should be defined. Found ${e[n]}`);
    const s = e[n], a = 4, o = this.kernelSize.concat([s, this.filters * a]);
    this.kernel = this.addWeight("kernel", o, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint);
    const u = this.kernelSize.concat([this.filters, this.filters * a]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", u, null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
      let l;
      if (this.unitForgetBias) {
        const f = this.biasInitializer, c = this.filters;
        l = new (t = class extends Initializer {
          apply(d, m) {
            const g = f.apply([c]), y = ones$1([c]), b = f.apply([c * 2]);
            return concatenate$1([g, y, b]);
          }
        }, /** @nocollapse */
        t.className = "CustomInit", t)();
      } else
        l = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.filters * a], null, l, this.biasRegularizer, !0, this.biasConstraint);
    }
    this.built = !0;
  }
  call(e, t) {
    return tidy(() => {
      if (e.length !== 3)
        throw new ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
      const n = t.training || !1, s = e[0], a = e[1], o = e[2], u = 4;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = generateDropoutMask({
        ones: () => onesLike$2(s),
        rate: this.dropout,
        training: n,
        count: u,
        dropoutFunc: this.dropoutFunc
      }));
      const l = this.dropoutMask, f = (E, M, P) => !M || !M[P] ? E : mul(M[P], E);
      let c = f(s, l, 0), h = f(s, l, 1), d = f(s, l, 2), m = f(s, l, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = generateDropoutMask({
        ones: () => onesLike$2(a),
        rate: this.recurrentDropout,
        training: n,
        count: u,
        dropoutFunc: this.dropoutFunc
      }));
      const g = this.recurrentDropoutMask;
      let y = f(a, g, 0), b = f(a, g, 1), v = f(a, g, 2), w = f(a, g, 3);
      const I = 3, [T, _, F, O] = split$2(this.kernel.read(), u, I), [q, V, H, R] = this.useBias ? split$2(this.bias.read(), u) : [null, null, null, null];
      c = this.inputConv(c, T, q, this.padding), h = this.inputConv(h, _, V, this.padding), d = this.inputConv(d, F, H, this.padding), m = this.inputConv(m, O, R, this.padding);
      const [$, S, x, C] = split$2(this.recurrentKernel.read(), u, I);
      y = this.recurrentConv(y, $), b = this.recurrentConv(b, S), v = this.recurrentConv(v, x), w = this.recurrentConv(w, C);
      const A = this.recurrentActivation.apply(add$2(c, y)), N = this.recurrentActivation.apply(add$2(h, b)), k = add$2(mul(N, o), mul(A, this.activation.apply(add$2(d, v)))), D = mul(this.recurrentActivation.apply(add$2(m, w)), this.activation.apply(k));
      return [D, D, k];
    });
  }
  getConfig() {
    const e = super.getConfig(), { units: t } = e, n = __rest(e, ["units"]), s = {
      filters: this.filters,
      kernelSize: this.kernelSize,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      strides: this.strides
    };
    return Object.assign(Object.assign({}, n), s);
  }
  inputConv(e, t, n, s) {
    const a = conv2d$3(e, t, this.strides, s || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return n ? biasAdd(a, n, this.dataFormat) : a;
  }
  recurrentConv(e, t) {
    return conv2d$3(e, t, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
}
ConvLSTM2DCell.className = "ConvLSTM2DCell";
registerClass(ConvLSTM2DCell);
class ConvLSTM2D extends ConvRNN2D {
  constructor(e) {
    const t = new ConvLSTM2DCell(e);
    super(Object.assign(Object.assign({}, e), { cell: t }));
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t);
  }
}
ConvLSTM2D.className = "ConvLSTM2D";
registerClass(ConvLSTM2D);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Dropout extends Layer {
  constructor(e) {
    super(e), this.rate = Math.max(Math.min(e.rate, 1), 0), this.noiseShape = e.noiseShape, this.seed = e.seed, this.supportsMasking = !0;
  }
  getNoiseShape(e) {
    if (this.noiseShape == null)
      return this.noiseShape;
    const t = e.shape, n = [];
    for (let s = 0; s < this.noiseShape.length; ++s)
      n.push(this.noiseShape[s] == null ? t[s] : this.noiseShape[s]);
    return n;
  }
  call(e, t) {
    return tidy(() => {
      this.invokeCallHook(e, t);
      const n = getExactlyOneTensor(e);
      if (0 < this.rate && this.rate < 1) {
        const s = t.training == null ? !1 : t.training, a = this.getNoiseShape(n);
        return inTrainPhase(() => dropout$1(n, this.rate, a, this.seed), () => n, s);
      }
      return e;
    });
  }
  getConfig() {
    const e = {
      rate: this.rate,
      noiseShape: this.noiseShape,
      seed: this.seed
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  dispose() {
    return super.dispose();
  }
}
Dropout.className = "Dropout";
registerClass(Dropout);
class SpatialDropout1D extends Dropout {
  constructor(e) {
    super(e), this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(e) {
    const t = e.shape;
    return [t[0], 1, t[2]];
  }
}
SpatialDropout1D.className = "SpatialDropout1D";
registerClass(SpatialDropout1D);
class Dense extends Layer {
  constructor(e) {
    if (super(e), this.activation = null, this.useBias = !0, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.batchInputShape == null && e.inputShape == null && e.inputDim != null) {
      let t = null;
      e.batchSize != null && (t = e.batchSize), this.batchInputShape = [t, e.inputDim];
    }
    this.units = e.units, assertPositiveInteger(this.units, "units"), this.activation = getActivation(e.activation), e.useBias != null && (this.useBias = e.useBias), this.kernelInitializer = getInitializer(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = getInitializer(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = getConstraint(e.kernelConstraint), this.biasConstraint = getConstraint(e.biasConstraint), this.kernelRegularizer = getRegularizer(e.kernelRegularizer), this.biasRegularizer = getRegularizer(e.biasRegularizer), this.activityRegularizer = getRegularizer(e.activityRegularizer), this.supportsMasking = !0, this.inputSpec = [{ minNDim: 2 }];
  }
  build(e) {
    e = getExactlyOneShape(e);
    const t = e[e.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [t, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: t } }], this.built = !0;
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = e.slice();
    return t[t.length - 1] = this.units, t;
  }
  call(e, t) {
    return tidy(() => {
      this.invokeCallHook(e, t);
      const n = getExactlyOneTensor(e), s = mapActivationToFusedKernel(this.activation.getClassName());
      let a;
      return s != null ? a = dot$1(n, this.kernel.read(), s, this.bias ? this.bias.read() : null) : (a = dot$1(n, this.kernel.read()), this.bias != null && (a = biasAdd(a, this.bias.read())), this.activation != null && (a = this.activation.apply(a))), a;
    });
  }
  getConfig() {
    const e = {
      units: this.units,
      activation: serializeActivation(this.activation),
      useBias: this.useBias,
      kernelInitializer: serializeInitializer(this.kernelInitializer),
      biasInitializer: serializeInitializer(this.biasInitializer),
      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
      biasRegularizer: serializeRegularizer(this.biasRegularizer),
      activityRegularizer: serializeRegularizer(this.activityRegularizer),
      kernelConstraint: serializeConstraint(this.kernelConstraint),
      biasConstraint: serializeConstraint(this.biasConstraint)
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Dense.className = "Dense";
registerClass(Dense);
class Flatten extends Layer {
  constructor(e) {
    e = e || {}, super(e), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = e.dataFormat;
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    for (const t of e.slice(1))
      if (t == null)
        throw new ValueError(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [e[0], arrayProd(e, 1)];
  }
  call(e, t) {
    return tidy(() => {
      this.invokeCallHook(e, t);
      let n = getExactlyOneTensor(e);
      if (this.dataFormat === "channelsFirst" && n.rank > 1) {
        const s = [0];
        for (let a = 2; a < n.rank; ++a)
          s.push(a);
        s.push(1), n = transpose$2(n, s);
      }
      return batchFlatten(n);
    });
  }
  getConfig() {
    const e = {};
    this.dataFormat != null && (e.dataFormat = this.dataFormat);
    const t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Flatten.className = "Flatten";
registerClass(Flatten);
class Activation extends Layer {
  constructor(e) {
    super(e), this.supportsMasking = !0, this.activation = getActivation(e.activation);
  }
  call(e, t) {
    return tidy(() => {
      this.invokeCallHook(e, t);
      const n = getExactlyOneTensor(e);
      return this.activation.apply(n);
    });
  }
  getConfig() {
    const e = { activation: serializeActivation(this.activation) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Activation.className = "Activation";
registerClass(Activation);
class RepeatVector extends Layer {
  constructor(e) {
    super(e), this.n = e.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(e) {
    return [e[0], this.n, e[1]];
  }
  call(e, t) {
    return tidy(() => (e = getExactlyOneTensor(e), repeat(e, this.n)));
  }
  getConfig() {
    const e = {
      n: this.n
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
RepeatVector.className = "RepeatVector";
registerClass(RepeatVector);
class Reshape extends Layer {
  constructor(e) {
    super(e), this.targetShape = e.targetShape;
    for (let t = 0; t < this.targetShape.length; ++t)
      this.isUnknown(this.targetShape[t]) && (this.targetShape[t] = null);
  }
  isUnknown(e) {
    return e < 0 || e == null;
  }
  /**
   * Finds and replaces a missing dimension in output shape.
   *
   * This is a near direct port of the internal Numpy function
   * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.
   *
   * @param inputShape: Original shape of array begin reshape.
   * @param outputShape: Target shape of the array, with at most a single
   * `null` or negative number, which indicates an underdetermined dimension
   * that should be derived from `inputShape` and the known dimensions of
   *   `outputShape`.
   * @returns: The output shape with `null` replaced with its computed value.
   * @throws: ValueError: If `inputShape` and `outputShape` do not match.
   */
  fixUnknownDimension(e, t) {
    const n = "Total size of new array must be unchanged.", s = t.slice();
    let a = 1, o = null;
    for (let l = 0; l < s.length; ++l) {
      const f = s[l];
      if (this.isUnknown(f))
        if (o === null)
          o = l;
        else
          throw new ValueError("Can only specifiy one unknown dimension.");
      else
        a *= f;
    }
    const u = arrayProd(e);
    if (o !== null) {
      if (a === 0 || u % a !== 0)
        throw new ValueError(n);
      s[o] = u / a;
    } else if (u !== a)
      throw new ValueError(n);
    return s;
  }
  computeOutputShape(e) {
    let t = !1;
    for (let n = 0; n < e.length; ++n)
      if (this.isUnknown(e[n])) {
        t = !0;
        break;
      }
    return t ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape));
  }
  call(e, t) {
    return tidy(() => {
      this.invokeCallHook(e, t);
      const n = getExactlyOneTensor(e), s = n.shape, a = s.slice(0, 1).concat(this.fixUnknownDimension(s.slice(1), this.targetShape));
      return reshape$3(n, a);
    });
  }
  getConfig() {
    const e = {
      targetShape: this.targetShape
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Reshape.className = "Reshape";
registerClass(Reshape);
class Permute extends Layer {
  constructor(e) {
    if (super(e), e.dims == null)
      throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(e.dims))
      throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);
    const t = range$2(1, e.dims.length + 1);
    if (!arraysEqual(e.dims.slice().sort(), t))
      throw new Error("Invalid permutation `dims`: " + JSON.stringify(e.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = e.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new InputSpec({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = e.slice();
    return this.dims.forEach((n, s) => {
      t[s + 1] = e[n];
    }), t;
  }
  call(e, t) {
    return transpose$2(getExactlyOneTensor(e), this.dimsIncludingBatch);
  }
  getConfig() {
    const e = {
      dims: this.dims
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Permute.className = "Permute";
registerClass(Permute);
class Masking extends Layer {
  constructor(e) {
    super(e ?? {}), this.supportsMasking = !0, e != null ? this.maskValue = e.maskValue == null ? 0 : e.maskValue : this.maskValue = 0;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { maskValue: this.maskValue };
    return Object.assign(t, e), t;
  }
  computeMask(e, t) {
    const n = getExactlyOneTensor(e);
    return any$2(notEqual$2(n, this.maskValue), -1);
  }
  call(e, t) {
    return tidy(() => {
      this.invokeCallHook(e, t);
      const n = getExactlyOneTensor(e), o = any$2(notEqual$2(n, this.maskValue), -1, !0);
      return mul(n, cast$3(o, n.dtype));
    });
  }
}
Masking.className = "Masking";
registerClass(Masking);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Embedding extends Layer {
  constructor(e) {
    if (super(e), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", e.batchInputShape == null && e.inputShape == null) {
      let t = null;
      e.batchSize != null && (t = e.batchSize), e.inputLength == null ? this.batchInputShape = [t, null] : this.batchInputShape = [t].concat(toList(e.inputLength));
    }
    this.inputDim = e.inputDim, assertPositiveInteger(this.inputDim, "inputDim"), this.outputDim = e.outputDim, assertPositiveInteger(this.outputDim, "outputDim"), this.embeddingsInitializer = getInitializer(e.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = getRegularizer(e.embeddingsRegularizer), this.activityRegularizer = getRegularizer(e.activityRegularizer), this.embeddingsConstraint = getConstraint(e.embeddingsConstraint), this.maskZero = e.maskZero, this.supportsMasking = e.maskZero, this.inputLength = e.inputLength;
  }
  build(e) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
  }
  // Override warnOnIncompatibleInputShape because an embedding layer allows
  // the input to have varying ranks.
  warnOnIncompatibleInputShape(e) {
  }
  computeMask(e, t) {
    return tidy(() => this.maskZero ? (e = getExactlyOneTensor(e), notEqual$2(e, zerosLike$2(e))) : null);
  }
  computeOutputShape(e) {
    if (e = getExactlyOneShape(e), this.inputLength == null)
      return [...e, this.outputDim];
    const t = toList(this.inputLength);
    if (t.length !== e.length - 1)
      throw new ValueError(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
    {
      let n = 0;
      for (let s = 0; s < t.length; ++s) {
        const a = t[s], o = e[s + 1];
        if (a != null && o != null && a !== o)
          throw new ValueError(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
        a == null && (t[n] = o), n++;
      }
    }
    return [e[0], ...t, this.outputDim];
  }
  call(e, t) {
    return tidy(() => {
      this.invokeCallHook(e, t);
      let n = getExactlyOneTensor(e);
      n.dtype !== "int32" && (n = cast$2(n, "int32"));
      const s = gather(this.embeddings.read(), reshape$3(n, [n.size]));
      return reshape$3(s, getExactlyOneShape(this.computeOutputShape(n.shape)));
    });
  }
  getConfig() {
    const e = {
      inputDim: this.inputDim,
      outputDim: this.outputDim,
      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),
      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),
      activityRegularizer: serializeRegularizer(this.activityRegularizer),
      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),
      maskZero: this.maskZero,
      inputLength: this.inputLength
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Embedding.className = "Embedding";
registerClass(Embedding);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Merge extends Layer {
  constructor(e) {
    super(e || {}), this.supportsMasking = !0;
  }
  /**
   * Logic for merging multiple tensors, to be overridden by subclasses.
   * @param inputs
   */
  mergeFunction(e) {
    throw new NotImplementedError();
  }
  /**
   * Computes the shape of the result of an elementwise operation.
   *
   * @param shape1: Shape of the first tensor.
   * @param shape2: Shape of the second tensor.
   * @returns Expected output shape when an elementwise operation is carried
   *   out on 2 tensors with shapes `shape1` and `shape2`.
   * @throws ValueError: If `shape1` and `shape2` are not compatible for
   *   element-wise operations.
   */
  computeElementwiseOpOutputShape(e, t) {
    if (e == null || t == null)
      return null;
    if (e.length < t.length)
      return this.computeElementwiseOpOutputShape(t, e);
    if (t.length === 0)
      return e;
    const n = e.slice(0, e.length - t.length);
    for (let s = 0; s < t.length; ++s) {
      const a = e[e.length - t.length + s], o = t[s];
      if (a == null || o == null || a < 0 || o < 0)
        n.push(null);
      else if (a === 1)
        n.push(o);
      else if (o === 1)
        n.push(a);
      else {
        if (a !== o)
          throw new ValueError("Operands could not be broadcast together with shapes " + JSON.stringify(e) + " " + JSON.stringify(t));
        n.push(a);
      }
    }
    return n;
  }
  build(e) {
    if (Array.isArray(e) && !Array.isArray(e[0]) && (e = [getExactlyOneShape(e)]), e = e, e.length < 2)
      throw new ValueError(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);
    let t = [];
    for (const a of e)
      a != null && a[0] !== null && t.push(a[0]);
    if (t = unique$2(t), t.length > 1)
      throw new ValueError(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);
    let n = e[0] == null ? null : e[0].slice(1);
    for (let a = 1; a < e.length; ++a) {
      const o = e[a] == null ? null : e[a].slice(1);
      n = this.computeElementwiseOpOutputShape(n, o);
    }
    const s = e.map((a) => a.length);
    e.indexOf(null) === -1 && unique$2(s).length === 1 ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
  }
  call(e, t) {
    return tidy(() => {
      if (e = e, this.reshapeRequired) {
        const n = [], s = e.map((a) => a.rank);
        if (s.indexOf(null) === -1) {
          const a = max$2(s);
          for (let o of e) {
            const u = o.rank;
            for (let l = 0; l < a - u; ++l)
              o = expandDims$2(o, 1);
            n.push(o);
          }
          return this.mergeFunction(n);
        } else {
          let a = !1;
          for (const l of e) {
            const f = l.rank;
            if (f == null) {
              const c = l.shape, h = c[0], d = c.slice(1).concat([h]);
              let m = reshape$3(l, [h].concat(arrayProd(c.slice(1))));
              m = transpose$2(m, [1, 0]), m = reshape$3(m, d), n.push(m), a = !0;
            } else if (f > 1) {
              const c = range$2(1, f).concat([0]);
              n.push(transpose$2(l, c)), a = !0;
            } else
              n.push(l);
          }
          let o = this.mergeFunction(n);
          const u = o.rank;
          if (a) {
            if (u == null) {
              const l = o.shape, f = l.length, c = l[f - 1], h = [c].concat(l.slice(0, l.length - 1));
              o = reshape$3(transpose$2(reshape$3(o, [-1, c]), [1, 0]), h);
            } else if (u > 1) {
              const l = [u - 1].concat(range$2(0, u - 1));
              o = transpose$2(o, l);
            }
          }
          return o;
        }
      } else
        return this.mergeFunction(e);
    });
  }
  computeOutputShape(e) {
    e = e;
    let t;
    e[0] == null ? t = null : t = e[0].slice(1);
    for (let s = 1; s < e.length; ++s) {
      const a = e[s] == null ? null : e[s].slice(1);
      t = this.computeElementwiseOpOutputShape(t, a);
    }
    let n = [];
    for (const s of e)
      s != null && s[0] !== null && n.push(s[0]);
    return n = unique$2(n), n.length === 1 ? t = n.concat(t) : t = [null].concat(t), t;
  }
  computeMask(e, t) {
    return tidy(() => {
      if (t == null)
        return null;
      if (!Array.isArray(t))
        throw new ValueError("`mask` should be an Array");
      if (!Array.isArray(e))
        throw new ValueError("`inputs` should be an Array");
      if (t.length !== e.length)
        throw new ValueError(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);
      if (t.every((s) => s == null))
        return null;
      t = t.map((s) => s == null ? s : expandDims$3(s, 0));
      let n = t[0];
      for (let s = 1; s < t.length - 1; ++s)
        n = logicalAnd$2(n, t[s]);
      return n;
    });
  }
}
class Add extends Merge {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return tidy(() => {
      let t = e[0].clone();
      for (let n = 1; n < e.length; ++n)
        t = add$2(t, e[n]);
      return t;
    });
  }
}
Add.className = "Add";
registerClass(Add);
class Multiply extends Merge {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return tidy(() => {
      let t = e[0].clone();
      for (let n = 1; n < e.length; ++n)
        t = mul(t, e[n]);
      return t;
    });
  }
}
Multiply.className = "Multiply";
registerClass(Multiply);
class Average extends Merge {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return tidy(() => {
      let t = e[0].clone();
      for (let n = 1; n < e.length; ++n)
        t = add$2(t, e[n]);
      return mul(1 / e.length, t);
    });
  }
}
Average.className = "Average";
registerClass(Average);
class Maximum extends Merge {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return tidy(() => {
      let t = e[0];
      for (let n = 1; n < e.length; ++n)
        t = maximum$3(t, e[n]);
      return t;
    });
  }
}
Maximum.className = "Maximum";
registerClass(Maximum);
class Minimum extends Merge {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return tidy(() => {
      let t = e[0];
      for (let n = 1; n < e.length; ++n)
        t = minimum$3(t, e[n]);
      return t;
    });
  }
}
Minimum.className = "Minimum";
registerClass(Minimum);
class Concatenate extends Merge {
  constructor(e) {
    super(e), this.DEFAULT_AXIS = -1, e == null && (e = {}), this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(e) {
    if (!(Array.isArray(e) && Array.isArray(e[0])) || e.length === 1)
      throw new ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");
    e = e;
    let t = !0;
    for (const s of e)
      if (s != null) {
        t = !1;
        break;
      }
    if (t)
      return;
    const n = [];
    for (let s = 0; s < e.length; ++s) {
      const a = e[s].slice();
      a.splice(this.axis, 1);
      let o = !1;
      for (const u of n)
        if (arraysEqual(u, a)) {
          o = !0;
          break;
        }
      o || n.push(a);
    }
    if (n.length > 1)
      throw new ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e));
  }
  mergeFunction(e) {
    return tidy(() => concatenate$1(e, this.axis));
  }
  computeOutputShape(e) {
    if (!(Array.isArray(e) && Array.isArray(e[0])))
      throw new ValueError("A `Concatenate` layer should be called on a list of inputs.");
    const t = e, n = t[0].slice(), s = this.axis < 0 ? n.length + this.axis : this.axis;
    for (const a of t.slice(1)) {
      if (n[s] == null || a[s] == null) {
        n[s] = null;
        break;
      }
      n[s] += a[s];
    }
    return n;
  }
  computeMask(e, t) {
    if (t == null)
      return null;
    if (!Array.isArray(t))
      throw new ValueError("`mask` should be an array for Concatenate");
    if (!Array.isArray(e))
      throw new ValueError("`inputs` should be an array for Concatenate");
    if (t.length !== e.length)
      throw new ValueError(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);
    return tidy(() => {
      let n = !0;
      if (t.forEach((o) => {
        if (o != null) {
          n = !1;
          return;
        }
      }), n)
        return null;
      const s = [];
      for (let o = 0; o < e.length; ++o)
        t[o] == null ? s.push(cast$3(onesLike$2(e[o]), "bool")) : t[o].rank < e[o].rank ? s.push(expandDims$3(t[o], -1)) : s.push(t[o]);
      const a = concat$2(s, this.axis);
      return all$2(a, -1, !1);
    });
  }
  getConfig() {
    const e = {
      axis: this.axis
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Concatenate.className = "Concatenate";
registerClass(Concatenate);
function interpretAxis(r, e) {
  for (; r < 0; )
    r += e;
  return r;
}
function batchDot(r, e, t) {
  if (r.shape.length > 3 || e.shape.length > 3)
    throw new NotImplementedError("batchDot is not implemented for tensors of 4D or higher rank yet");
  if (assert$1(r.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${r.shape.length}`), assert$1(r.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`), typeof t == "number" && (t = [t, t]), r.dtype === "complex64" || e.dtype === "complex64")
    throw new NotImplementedError("batchDot is not implemented for complex64-type Tensors yet.");
  const n = r.shape.length, s = e.shape.length;
  t == null && (t = [n - 1, s - 2]);
  const a = t;
  return tidy(() => {
    let o;
    if (n > s) {
      o = n - s;
      const l = [];
      for (let f = 0; f < o; ++f)
        l.push(1);
      e = reshape$3(e, e.shape.concat(l));
    } else if (s > n) {
      o = s - n;
      const l = [];
      for (let f = 0; f < o; ++f)
        l.push(1);
      r = reshape$3(r, r.shape.concat(l));
    } else
      o = 0;
    let u;
    if (r.shape.length === 2 && e.shape.length === 2)
      a[0] === a[1] ? u = sum$2(mul(r, e), a[0]) : u = sum$2(mul(transpose$2(r, [1, 0]), e), a[1]);
    else {
      const l = a[0] !== r.shape.length - 1, f = a[1] === e.shape.length - 1;
      u = matMul$1(r, e, l, f);
    }
    if (o > 0) {
      let l;
      n > s ? l = n + s - 3 : l = n - 1;
      const f = [];
      for (let c = l; c < l + o; ++c)
        f.push(c);
      u = squeeze(u, f);
    }
    return u.shape.length === 1 && (u = expandDims$3(u, 1)), u;
  });
}
class Dot extends Merge {
  constructor(e) {
    super(e), this.axes = e.axes, this.normalize = e.normalize == null ? !1 : e.normalize, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(e) {
    assert$1(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const t = e[0], n = e[1];
    if (t.length > 3 || n.length > 3)
      throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");
    const s = this.interpretAxes(t, n);
    if (t[s[0]] !== n[s[1]])
      throw new ValueError(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`);
  }
  mergeFunction(e) {
    if (e.length !== 2)
      throw new ValueError(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);
    let t = e[0], n = e[1], s;
    return Array.isArray(this.axes) ? s = this.axes.map((a, o) => interpretAxis(a, e[o].shape.length)) : s = [
      interpretAxis(this.axes, t.shape.length),
      interpretAxis(this.axes, n.shape.length)
    ], this.normalize && (t = l2Normalize(t, s[0]), n = l2Normalize(n, s[1])), batchDot(t, n, s);
  }
  interpretAxes(e, t) {
    let n;
    return Array.isArray(this.axes) ? n = this.axes : n = [
      interpretAxis(this.axes, e.length),
      interpretAxis(this.axes, t.length)
    ], n;
  }
  computeOutputShape(e) {
    assert$1(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const t = e[0].slice(), n = e[1].slice();
    if (t.length > 3 || n.length > 3)
      throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");
    const s = this.interpretAxes(t, n);
    t.splice(s[0], 1), n.splice(s[1], 1), n.splice(0, 1);
    const a = t.concat(n);
    return a.length === 1 && a.push(1), a;
  }
  computeMask(e, t) {
    return null;
  }
  getConfig() {
    const e = {
      axes: this.axes,
      normalize: this.normalize
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Dot.className = "Dot";
registerClass(Dot);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class GaussianNoise extends Layer {
  constructor(e) {
    super(e), this.supportsMasking = !0, this.stddev = e.stddev;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { stddev: this.stddev };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return tidy(() => {
      this.invokeCallHook(e, t);
      const n = getExactlyOneTensor(e);
      return inTrainPhase(() => add$2(randomNormal$1(n.shape, 0, this.stddev), n), () => n, t.training || !1);
    });
  }
}
GaussianNoise.className = "GaussianNoise";
registerClass(GaussianNoise);
class GaussianDropout extends Layer {
  constructor(e) {
    super(e), this.supportsMasking = !0, this.rate = e.rate;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return tidy(() => {
      this.invokeCallHook(e, t);
      const n = getExactlyOneTensor(e);
      return this.rate > 0 && this.rate < 1 ? inTrainPhase(() => {
        const a = Math.sqrt(this.rate / (1 - this.rate));
        return mul(n, randomNormal$1(n.shape, 1, a));
      }, () => n, t.training || !1) : n;
    });
  }
}
GaussianDropout.className = "GaussianDropout";
registerClass(GaussianDropout);
class AlphaDropout extends Layer {
  constructor(e) {
    super(e), this.supportsMasking = !0, this.rate = e.rate, this.noiseShape = e.noiseShape;
  }
  _getNoiseShape(e) {
    return this.noiseShape || getExactlyOneTensor(e).shape;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return tidy(() => {
      if (this.rate < 1 && this.rate > 0) {
        const n = this._getNoiseShape(e);
        return inTrainPhase(() => {
          const a = getExactlyOneTensor(e), u = -1.6732632423543772 * 1.0507009873554805;
          let l = greaterEqual$2(randomUniform$1(n), this.rate);
          l = cast$2(l, "float32");
          const f = ((1 - this.rate) * (1 + this.rate * u ** 2)) ** -0.5, c = -f * u * this.rate, h = add$2(mul(a, l), mul(add$2(l, -1), u));
          return add$2(mul(h, f), c);
        }, () => getExactlyOneTensor(e), t.training || !1);
      }
      return e;
    });
  }
}
AlphaDropout.className = "AlphaDropout";
registerClass(AlphaDropout);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function batchNormalization$1(r, e, t, n, s, a = 1e-3) {
  let o;
  if (r.rank === 2)
    o = batchNorm2d(r, e, t, n, s, a);
  else if (r.rank === 3)
    o = batchNorm3d(r, e, t, n, s, a);
  else if (r.rank === 4)
    o = batchNorm4d(r, e, t, n, s, a);
  else
    throw new NotImplementedError(`batchNormalization is not implemented for array of rank ${r.rank} yet`);
  return o;
}
function regularNormalizeBatchInTraining(r, e, t, n, s = 1e-3) {
  return tidy(() => {
    const a = moments(r, n), o = a.mean, u = a.variance;
    return [batchNormalization$1(r, o, u, t, e, s), o, u];
  });
}
function broadcastNormalizeBatchInTraining(r, e, t, n, s = 1e-3) {
  return tidy(() => {
    const a = moments(r, n), o = a.mean, u = a.variance, l = [];
    for (const g of range$2(0, r.rank))
      n.indexOf(g) !== -1 ? l.push(1) : l.push(r.shape[g]);
    const f = reshape$3(o, l), c = reshape$3(u, l), h = e == null ? null : reshape$3(e, l), d = t == null ? null : reshape$3(t, l);
    return [batchNormalization$1(r, f, c, d, h, s), o, u];
  });
}
function normalizeBatchInTraining(r, e, t, n, s = 1e-3) {
  return arraysEqual(n.slice().sort(), range$2(0, r.rank - 1)) ? regularNormalizeBatchInTraining(r, e, t, n, s) : broadcastNormalizeBatchInTraining(r, e, t, n, s);
}
class BatchNormalization extends Layer {
  constructor(e) {
    e == null && (e = {}), super(e), this.supportsMasking = !0, this.axis = e.axis == null ? -1 : e.axis, this.momentum = e.momentum == null ? 0.99 : e.momentum, this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? !0 : e.center, this.scale = e.scale == null ? !0 : e.scale, this.betaInitializer = getInitializer(e.betaInitializer || "zeros"), this.gammaInitializer = getInitializer(e.gammaInitializer || "ones"), this.movingMeanInitializer = getInitializer(e.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = getInitializer(e.movingVarianceInitializer || "ones"), this.betaConstraint = getConstraint(e.betaConstraint), this.gammaConstraint = getConstraint(e.gammaConstraint), this.betaRegularizer = getRegularizer(e.betaRegularizer), this.gammaRegularizer = getRegularizer(e.gammaRegularizer);
  }
  build(e) {
    e = getExactlyOneShape(e);
    const t = this.axis >= 0 ? this.axis : this.axis + e.length, n = e[t];
    if (n == null)
      throw new ValueError(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);
    this.inputSpec = [new InputSpec({ ndim: e.length, axes: { [t]: n } })];
    const s = [n];
    this.scale && (this.gamma = this.addWeight("gamma", s, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", s, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", s, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", s, null, this.movingVarianceInitializer, null, !1), this.built = !0;
  }
  call(e, t) {
    return tidy(() => {
      const n = t.training == null ? !1 : t.training, s = getExactlyOneTensor(e), a = s.shape, o = a.length, u = range$2(0, o), l = this.axis >= 0 ? this.axis : this.axis + o;
      u.splice(l, 1);
      const f = pyListRepeat(1, o);
      f[l] = a[l];
      const c = u.slice();
      c.sort();
      const h = !arraysEqual(c, range$2(0, o).slice(0, o - 1)), d = () => {
        if (h) {
          const w = reshape$3(this.movingMean.read(), f), I = reshape$3(this.movingVariance.read(), f), T = this.center ? reshape$3(this.beta.read(), f) : null, _ = this.scale ? reshape$3(this.gamma.read(), f) : null;
          return batchNormalization$1(s, w, I, T, _, this.epsilon);
        } else
          return batchNormalization$1(s, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
      };
      if (!n)
        return d();
      const [m, g, y] = normalizeBatchInTraining(s, this.gamma.read(), this.beta.read(), u, this.epsilon), b = (w, I, T) => {
        tidy(() => {
          const _ = 1 - T, F = w.read(), O = mul(sub$2(F, I), _);
          w.write(sub$2(F, O));
        });
      };
      return (() => {
        b(this.movingMean, g, this.momentum), b(this.movingVariance, y, this.momentum);
      })(), m;
    });
  }
  getConfig() {
    const e = {
      axis: this.axis,
      momentum: this.momentum,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: serializeInitializer(this.betaInitializer),
      gammaInitializer: serializeInitializer(this.gammaInitializer),
      movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),
      movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer),
      betaRegularizer: serializeRegularizer(this.betaRegularizer),
      gammaRegularizer: serializeRegularizer(this.gammaRegularizer),
      betaConstraint: serializeConstraint(this.betaConstraint),
      gammaConstraint: serializeConstraint(this.gammaConstraint)
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
BatchNormalization.className = "BatchNormalization";
registerClass(BatchNormalization);
class LayerNormalization extends Layer {
  constructor(e) {
    if (e == null && (e = {}), super(e), this.axis = e.axis == null ? -1 : e.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis))
        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else if (Array.isArray(this.axis)) {
      for (const t of this.axis)
        if (!Number.isInteger(t))
          throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    } else
      throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
    this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? !0 : e.center, this.scale = e.scale == null ? !0 : e.scale, this.betaInitializer = getInitializer(e.betaInitializer || "zeros"), this.gammaInitializer = getInitializer(e.gammaInitializer || "ones"), this.betaRegularizer = getRegularizer(e.betaRegularizer), this.gammaRegularizer = getRegularizer(e.gammaRegularizer), this.supportsMasking = !0;
  }
  build(e) {
    e = getExactlyOneShape(e);
    const t = e.length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let a = 0; a < this.axis.length; ++a)
      this.axis[a] < 0 && (this.axis[a] += t);
    for (const a of this.axis)
      if (a < 0 || a >= t)
        throw new Error(`Invalid axis: ${a}`);
    if (this.axis.length !== unique$2(this.axis).length)
      throw new Error(`Found duplicate axes in: ${this.axis}`);
    const n = this.axis.map((a) => e[a]), s = !0;
    this.scale ? this.gamma = this.addWeight("gamma", n, "float32", this.gammaInitializer, this.gammaRegularizer, s) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", n, "float32", this.betaInitializer, this.betaRegularizer, s) : this.beta = null, this.built = !0;
  }
  call(e, t) {
    const n = getExactlyOneTensor(e), s = n.shape, a = s.length;
    return tidy(() => {
      let { mean: u, variance: l } = moments(n, this.axis, !0);
      const f = pyListRepeat(1, a);
      for (const y of this.axis)
        f[y] = s[y];
      const c = (y) => y != null && y.shape.length !== a ? reshape$3(y, f) : y;
      let h = this.scale ? c(this.gamma.read()) : null, d = this.center ? c(this.beta.read()) : null;
      const m = [], g = [];
      for (let y = 0; y < a; ++y)
        this.axis.indexOf(y) !== -1 ? (m.push(s[y]), g.push(1)) : (m.push(1), g.push(s[y]));
      return u = tile$3(u, m), l = tile$3(l, m), h != null && (h = tile$3(h, g)), d != null && (d = tile$3(d, g)), batchNormalization$1(n, u, l, d, h, this.epsilon);
    });
  }
  getConfig() {
    const e = {
      axis: this.axis,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: serializeInitializer(this.betaInitializer),
      gammaInitializer: serializeInitializer(this.gammaInitializer),
      betaRegularizer: serializeRegularizer(this.betaRegularizer),
      gammaRegularizer: serializeRegularizer(this.gammaRegularizer)
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
LayerNormalization.className = "LayerNormalization";
registerClass(LayerNormalization);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function spatial2dPadding(r, e, t) {
  return tidy(() => {
    if (r.rank !== 4)
      throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ${r.rank}-D tensor.`);
    if (e == null && (e = [[1, 1], [1, 1]]), e.length !== 2 || e[0].length !== 2 || e[1].length !== 2)
      throw new ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (t == null && (t = imageDataFormat()), t !== "channelsLast" && t !== "channelsFirst")
      throw new ValueError(`Unknown data format: ${t}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
    let n;
    return t === "channelsFirst" ? n = [[0, 0], [0, 0], e[0], e[1]] : n = [[0, 0], e[0], e[1], [0, 0]], pad(r, n);
  });
}
class ZeroPadding2D extends Layer {
  constructor(e) {
    if (e == null && (e = {}), super(e), this.dataFormat = e.dataFormat == null ? imageDataFormat() : e.dataFormat, e.padding == null)
      this.padding = [[1, 1], [1, 1]];
    else if (typeof e.padding == "number")
      this.padding = [[e.padding, e.padding], [e.padding, e.padding]];
    else {
      if (e.padding = e.padding, e.padding.length !== 2)
        throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);
      let t, n;
      if (typeof e.padding[0] == "number")
        t = [e.padding[0], e.padding[0]], n = [e.padding[1], e.padding[1]];
      else {
        if (e.padding = e.padding, e.padding[0].length !== 2)
          throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);
        if (t = e.padding[0], e.padding[1].length !== 2)
          throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);
        n = e.padding[1];
      }
      this.padding = [t, n];
    }
    this.inputSpec = [new InputSpec({ ndim: 4 })];
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    let t, n;
    return this.dataFormat === "channelsFirst" ? (e[2] != null && e[2] >= 0 ? t = e[2] + this.padding[0][0] + this.padding[0][1] : t = null, e[3] != null && e[3] >= 0 ? n = e[3] + this.padding[1][0] + this.padding[1][1] : n = null, [e[0], e[1], t, n]) : (e[1] != null && e[1] >= 0 ? t = e[1] + this.padding[0][0] + this.padding[0][1] : t = null, e[2] != null && e[2] >= 0 ? n = e[2] + this.padding[1][0] + this.padding[1][1] : n = null, [e[0], t, n, e[3]]);
  }
  call(e, t) {
    return tidy(() => spatial2dPadding(getExactlyOneTensor(e), this.padding, this.dataFormat));
  }
  getConfig() {
    const e = {
      padding: this.padding,
      dataFormat: this.dataFormat
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
ZeroPadding2D.className = "ZeroPadding2D";
registerClass(ZeroPadding2D);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function pool2d(r, e, t, n, s, a) {
  return tidy(() => {
    checkDataFormat(s), checkPoolMode(a), checkPaddingMode(n), t == null && (t = [1, 1]), n == null && (n = "valid"), s == null && (s = imageDataFormat()), a == null && (a = "max"), r = preprocessConv2DInput(r, s);
    let o;
    const u = n === "same" ? "same" : "valid";
    return a === "max" ? o = maxPool$2(r, e, t, u) : o = avgPool$2(
      // TODO(cais): Rank check?
      r,
      e,
      t,
      u
    ), s === "channelsFirst" && (o = transpose$2(o, [0, 3, 1, 2])), o;
  });
}
function pool3d$1(r, e, t, n, s, a) {
  return tidy(() => {
    checkDataFormat(s), checkPoolMode(a), checkPaddingMode(n), t == null && (t = [1, 1, 1]), n == null && (n = "valid"), s == null && (s = imageDataFormat()), a == null && (a = "max"), r = preprocessConv3DInput(r, s);
    let o;
    const u = n === "same" ? "same" : "valid";
    return a === "max" ? o = maxPool3d$1(r, e, t, u) : o = avgPool3d$1(r, e, t, u), s === "channelsFirst" && (o = transpose$2(o, [0, 4, 1, 2, 3])), o;
  });
}
class Pooling1D extends Layer {
  /**
   *
   * @param args Parameters for the Pooling layer.
   *
   * config.poolSize defaults to 2.
   */
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = 2), super(e), typeof e.poolSize == "number")
      this.poolSize = [e.poolSize];
    else if (Array.isArray(e.poolSize) && e.poolSize.length === 1 && typeof e.poolSize[0] == "number")
      this.poolSize = e.poolSize;
    else
      throw new ValueError(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);
    if (assertPositiveInteger(this.poolSize, "poolSize"), e.strides == null)
      this.strides = this.poolSize;
    else if (typeof e.strides == "number")
      this.strides = [e.strides];
    else if (Array.isArray(e.strides) && e.strides.length === 1 && typeof e.strides[0] == "number")
      this.strides = e.strides;
    else
      throw new ValueError(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);
    assertPositiveInteger(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, checkPaddingMode(this.padding), this.inputSpec = [new InputSpec({ ndim: 3 })];
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = convOutputLength(e[1], this.poolSize[0], this.padding, this.strides[0]);
    return [e[0], t, e[2]];
  }
  call(e, t) {
    return tidy(() => {
      this.invokeCallHook(e, t), e = expandDims$2(getExactlyOneTensor(e), 2);
      const n = this.poolingFunction(getExactlyOneTensor(e), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return squeeze(n, [2]);
    });
  }
  getConfig() {
    const e = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class MaxPooling1D extends Pooling1D {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, a) {
    return checkDataFormat(a), checkPaddingMode(s), pool2d(e, t, n, s, a, "max");
  }
}
MaxPooling1D.className = "MaxPooling1D";
registerClass(MaxPooling1D);
class AveragePooling1D extends Pooling1D {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, a) {
    return checkDataFormat(a), checkPaddingMode(s), pool2d(e, t, n, s, a, "avg");
  }
}
AveragePooling1D.className = "AveragePooling1D";
registerClass(AveragePooling1D);
class Pooling2D extends Layer {
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = [2, 2]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize], e.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(e.strides)) {
      if (e.strides.length !== 2)
        throw new ValueError(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);
      this.strides = e.strides;
    } else
      this.strides = [e.strides, e.strides];
    assertPositiveInteger(this.poolSize, "poolSize"), assertPositiveInteger(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, checkDataFormat(this.dataFormat), checkPaddingMode(this.padding), this.inputSpec = [new InputSpec({ ndim: 4 })];
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2];
    return t = convOutputLength(t, this.poolSize[0], this.padding, this.strides[0]), n = convOutputLength(n, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, n] : [e[0], t, n, e[3]];
  }
  call(e, t) {
    return tidy(() => (this.invokeCallHook(e, t), this.poolingFunction(getExactlyOneTensor(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const e = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class MaxPooling2D extends Pooling2D {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, a) {
    return checkDataFormat(a), checkPaddingMode(s), pool2d(e, t, n, s, a, "max");
  }
}
MaxPooling2D.className = "MaxPooling2D";
registerClass(MaxPooling2D);
class AveragePooling2D extends Pooling2D {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, a) {
    return checkDataFormat(a), checkPaddingMode(s), pool2d(e, t, n, s, a, "avg");
  }
}
AveragePooling2D.className = "AveragePooling2D";
registerClass(AveragePooling2D);
class Pooling3D extends Layer {
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = [2, 2, 2]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize, e.poolSize], e.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(e.strides)) {
      if (e.strides.length !== 3)
        throw new ValueError(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);
      this.strides = e.strides;
    } else
      this.strides = [e.strides, e.strides, e.strides];
    assertPositiveInteger(this.poolSize, "poolSize"), assertPositiveInteger(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, checkDataFormat(this.dataFormat), checkPaddingMode(this.padding), this.inputSpec = [new InputSpec({ ndim: 5 })];
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2], s = this.dataFormat === "channelsFirst" ? e[4] : e[3];
    return t = convOutputLength(t, this.poolSize[0], this.padding, this.strides[0]), n = convOutputLength(n, this.poolSize[1], this.padding, this.strides[1]), s = convOutputLength(s, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, n, s] : [e[0], t, n, s, e[4]];
  }
  call(e, t) {
    return tidy(() => (this.invokeCallHook(e, t), this.poolingFunction(getExactlyOneTensor(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const e = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class MaxPooling3D extends Pooling3D {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, a) {
    return checkDataFormat(a), checkPaddingMode(s), pool3d$1(e, t, n, s, a, "max");
  }
}
MaxPooling3D.className = "MaxPooling3D";
registerClass(MaxPooling3D);
class AveragePooling3D extends Pooling3D {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, a) {
    return checkDataFormat(a), checkPaddingMode(s), pool3d$1(e, t, n, s, a, "avg");
  }
}
AveragePooling3D.className = "AveragePooling3D";
registerClass(AveragePooling3D);
class GlobalPooling1D extends Layer {
  constructor(e) {
    super(e), this.inputSpec = [new InputSpec({ ndim: 3 })];
  }
  computeOutputShape(e) {
    return [e[0], e[2]];
  }
  call(e, t) {
    throw new NotImplementedError();
  }
}
class GlobalAveragePooling1D extends GlobalPooling1D {
  constructor(e) {
    super(e || {});
  }
  call(e, t) {
    return tidy(() => {
      const n = getExactlyOneTensor(e);
      return mean$1(n, 1);
    });
  }
}
GlobalAveragePooling1D.className = "GlobalAveragePooling1D";
registerClass(GlobalAveragePooling1D);
class GlobalMaxPooling1D extends GlobalPooling1D {
  constructor(e) {
    super(e || {});
  }
  call(e, t) {
    return tidy(() => {
      const n = getExactlyOneTensor(e);
      return max$4(n, 1);
    });
  }
}
GlobalMaxPooling1D.className = "GlobalMaxPooling1D";
registerClass(GlobalMaxPooling1D);
class GlobalPooling2D extends Layer {
  constructor(e) {
    super(e), this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, checkDataFormat(this.dataFormat), this.inputSpec = [new InputSpec({ ndim: 4 })];
  }
  computeOutputShape(e) {
    return e = e, this.dataFormat === "channelsLast" ? [e[0], e[3]] : [e[0], e[1]];
  }
  call(e, t) {
    throw new NotImplementedError();
  }
  getConfig() {
    const e = { dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class GlobalAveragePooling2D extends GlobalPooling2D {
  call(e, t) {
    return tidy(() => {
      const n = getExactlyOneTensor(e);
      return this.dataFormat === "channelsLast" ? mean$1(n, [1, 2]) : mean$1(n, [2, 3]);
    });
  }
}
GlobalAveragePooling2D.className = "GlobalAveragePooling2D";
registerClass(GlobalAveragePooling2D);
class GlobalMaxPooling2D extends GlobalPooling2D {
  call(e, t) {
    return tidy(() => {
      const n = getExactlyOneTensor(e);
      return this.dataFormat === "channelsLast" ? max$4(n, [1, 2]) : max$4(n, [2, 3]);
    });
  }
}
GlobalMaxPooling2D.className = "GlobalMaxPooling2D";
registerClass(GlobalMaxPooling2D);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Wrapper extends Layer {
  constructor(e) {
    super(e), this.layer = e.layer;
  }
  build(e) {
    this.built = !0;
  }
  // TODO(cais): Implement activityRegularizer getter.
  get trainable() {
    return this.layer != null ? this.layer.trainable : !1;
  }
  set trainable(e) {
    this.layer != null && (this.layer.trainable = e);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  // TODO(cais): Implement setter for trainableWeights.
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  // TODO(cais): Implement setter for nonTrainableWeights.
  get updates() {
    return this.layer._updates;
  }
  // TODO(cais): Implement getUpdatesFor().
  get losses() {
    return this.layer.losses;
  }
  // TODO(cais): Implement getLossesFor().
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(e) {
    this.layer.setWeights(e);
  }
  getConfig() {
    const e = {
      layer: {
        className: this.layer.getClassName(),
        config: this.layer.getConfig()
      }
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.layer != null && this.layer.setFastWeightInitDuringBuild(e);
  }
  /** @nocollapse */
  static fromConfig(e, t, n = {}) {
    const s = t.layer, a = deserialize(s, n);
    delete t.layer;
    const o = { layer: a };
    return Object.assign(o, t), new e(o);
  }
}
class TimeDistributed extends Wrapper {
  constructor(e) {
    super(e), this.supportsMasking = !0;
  }
  build(e) {
    if (e = getExactlyOneShape(e), e.length < 3)
      throw new ValueError(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);
    this.inputSpec = [{ shape: e }];
    const t = [e[0]].concat(e.slice(2));
    this.layer.built || (this.layer.build(t), this.layer.built = !0), super.build(e);
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = [e[0]].concat(e.slice(2)), n = this.layer.computeOutputShape(t), s = e[1];
    return [n[0], s].concat(n.slice(1));
  }
  call(e, t) {
    return tidy(() => (e = getExactlyOneTensor(e), rnn$1(
      (o, u) => [getExactlyOneTensor(this.layer.call(o, t)), []],
      e,
      [],
      !1,
      null,
      null,
      !1,
      !0
      /* needPerStepOutputs */
    )[1]));
  }
}
TimeDistributed.className = "TimeDistributed";
registerClass(TimeDistributed);
function checkBidirectionalMergeMode(r) {
  checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES, "BidirectionalMergeMode", r);
}
const DEFAULT_BIDIRECTIONAL_MERGE_MODE = "concat";
class Bidirectional extends Wrapper {
  constructor(e) {
    super(e);
    const t = e.layer.getConfig(), n = {};
    n.className = e.layer.getClassName(), n.config = t, this.forwardLayer = deserialize(n), t.goBackwards = t.goBackwards !== !0;
    const s = {};
    if (s.className = e.layer.getClassName(), s.config = t, this.backwardLayer = deserialize(s), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = e.mergeMode === void 0 ? DEFAULT_BIDIRECTIONAL_MERGE_MODE : e.mergeMode, checkBidirectionalMergeMode(this.mergeMode), e.weights)
      throw new NotImplementedError("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = e.layer.stateful, this.returnSequences = e.layer.returnSequences, this.returnState = e.layer.returnState, this.supportsMasking = !0, this._trainable = !0, this.inputSpec = e.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(e) {
    this._trainable = e, this.forwardLayer != null && (this.forwardLayer.trainable = e), this.backwardLayer != null && (this.backwardLayer.trainable = e);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(e) {
    const t = e.length, n = Math.floor(t / 2);
    this.forwardLayer.setWeights(e.slice(0, n)), this.backwardLayer.setWeights(e.slice(n));
  }
  computeOutputShape(e) {
    let t = this.forwardLayer.computeOutputShape(e);
    Array.isArray(t) && Array.isArray(t[0]) || (t = [t]), t = t;
    let n, s, a;
    return this.returnState && (a = t.slice(1)), n = t[0], n = n, this.mergeMode === "concat" ? (n[n.length - 1] *= 2, s = [n]) : this.mergeMode == null ? s = [n, n.slice()] : s = [n], this.returnState ? this.mergeMode == null ? s.concat(a).concat(a.slice()) : [n].concat(a).concat(a.slice()) : singletonOrArray(s);
  }
  apply(e, t) {
    let n = t == null ? null : t.initialState, s = t == null ? null : t.constants;
    t == null && (t = {});
    const a = standardizeArgs(e, n, s, this.numConstants);
    if (e = a.inputs, n = a.initialState, s = a.constants, Array.isArray(e) && (n = e.slice(1), e = e[0]), (n == null || n.length === 0) && s == null)
      return super.apply(e, t);
    const o = [], u = [];
    if (n != null) {
      const f = n.length;
      if (f % 2 > 0)
        throw new ValueError("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      t.initialState = n, o.push(...n);
      const c = n.map((h) => new InputSpec({ shape: h.shape }));
      this.forwardLayer.stateSpec = c.slice(0, f / 2), this.backwardLayer.stateSpec = c.slice(f / 2), u.push(...c);
    }
    if (s != null)
      throw new NotImplementedError("Support for constants in Bidirectional layers is not implemented yet.");
    const l = o[0] instanceof SymbolicTensor;
    for (const f of o)
      if (f instanceof SymbolicTensor !== l)
        throw new ValueError("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (l) {
      const f = [e].concat(o), c = this.inputSpec.concat(u), h = this.inputSpec;
      this.inputSpec = c;
      const d = super.apply(f, t);
      return this.inputSpec = h, d;
    } else
      return super.apply(e, t);
  }
  call(e, t) {
    return tidy(() => {
      const n = t.initialState;
      let s, a;
      if (n == null)
        s = this.forwardLayer.call(e, t), a = this.backwardLayer.call(e, t);
      else {
        const l = n.slice(0, n.length / 2), f = n.slice(n.length / 2);
        s = this.forwardLayer.call(e, Object.assign(t, { initialState: l })), a = this.backwardLayer.call(e, Object.assign(t, { initialState: f }));
      }
      let o;
      this.returnState && (Array.isArray(s) && (o = s.slice(1).concat(a.slice(1))), s = s[0], a = a[0]), this.returnSequences && (a = reverse$2(a, 1));
      let u;
      return this.mergeMode === "concat" ? u = concatenate$1([s, a]) : this.mergeMode === "sum" ? u = add$2(s, a) : this.mergeMode === "ave" ? u = mul(0.5, add$2(s, a)) : this.mergeMode === "mul" ? u = mul(s, a) : this.mergeMode == null && (u = [s, a]), this.returnState ? this.mergeMode == null ? u.concat(o) : [u].concat(o) : u;
    });
  }
  resetStates(e) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(e) {
    nameScope(this.forwardLayer.name, () => {
      this.forwardLayer.build(e);
    }), nameScope(this.backwardLayer.name, () => {
      this.backwardLayer.build(e);
    }), this.built = !0;
  }
  computeMask(e, t) {
    Array.isArray(t) && (t = t[0]);
    let n;
    if (this.returnSequences ? this.mergeMode == null ? n = [t, t] : n = t : this.mergeMode == null ? n = [null, null] : n = null, this.returnState) {
      const a = this.forwardLayer.states.map((o) => null);
      return Array.isArray(n) ? n.concat(a).concat(a) : [n].concat(a).concat(a);
    } else
      return n;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  // TODO(cais): Implement constraints().
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(e), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(e);
  }
  getConfig() {
    const e = {
      mergeMode: this.mergeMode
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    const n = deserialize(t.layer);
    if (delete t.layer, t.numConstants != null)
      throw new NotImplementedError("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    const s = t;
    return s.layer = n, new e(s);
  }
}
Bidirectional.className = "Bidirectional";
registerClass(Bidirectional);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Rescaling extends Layer {
  constructor(e) {
    super(e), this.scale = e.scale, e.offset ? this.offset = e.offset : this.offset = 0;
  }
  getConfig() {
    const e = {
      scale: this.scale,
      offset: this.offset
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  call(e, t) {
    return tidy(() => (e = getExactlyOneTensor(e), e.dtype !== "float32" && (e = cast$2(e, "float32")), add$2(mul(e, this.scale), this.offset)));
  }
}
Rescaling.className = "Rescaling";
registerClass(Rescaling);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const { resizeBilinear: resizeBilinear$2, cropAndResize: cropAndResize$2 } = image$1;
class CenterCrop extends Layer {
  constructor(e) {
    super(e), this.height = e.height, this.width = e.width;
  }
  centerCrop(e, t, n, s, a, o, u, l) {
    return tidy(() => {
      let f, c = !1;
      const h = t / o, d = n / u, m = (s + t) / o, g = (a + n) / u, y = [h, d, m, g], b = [];
      e.rank === 3 ? (c = !0, f = stack([e])) : f = e;
      for (let _ = 0; _ < f.shape[0]; _++)
        b.push(y);
      const v = tensor(b, [b.length, 4]), w = range$3(0, b.length, 1, "int32"), T = cropAndResize$2(f, v, w, [s, a], "nearest");
      return cast$2(c ? getExactlyOneTensor(unstack(T)) : T, l);
    });
  }
  upsize(e, t, n, s) {
    return tidy(() => {
      const a = resizeBilinear$2(e, [t, n]);
      return cast$2(a, s);
    });
  }
  call(e, t) {
    return tidy(() => {
      const n = getExactlyOneTensor(e), s = n.dtype, a = n.shape, o = a[a.length - 3], u = a[a.length - 2];
      let l = 0;
      o !== this.height && (l = Math.floor((o - this.height) / 2));
      let f = 0;
      return u !== this.width && (f = Math.floor((u - this.width) / 2), f === 0 && (f = 1)), l >= 0 && f >= 0 ? this.centerCrop(n, l, f, this.height, this.width, o, u, s) : this.upsize(e, this.height, this.width, s);
    });
  }
  getConfig() {
    const e = {
      height: this.height,
      width: this.width
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = e.length - 3, n = e.length - 2;
    return e[t] = this.height, e[n] = this.width, e;
  }
}
CenterCrop.className = "CenterCrop";
registerClass(CenterCrop);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function encodeCategoricalInputs(r, e, t, n) {
  let s = getExactlyOneTensor(r);
  if (s.dtype !== "int32" && (s = cast$2(s, "int32")), e === "int")
    return s;
  const a = s.shape;
  if (s.rank === 0 && (s = expandDims$3(s, -1)), e === "oneHot" && s.shape[s.shape.length - 1] !== 1 && (s = expandDims$3(s, -1)), s.rank > 2)
    throw new ValueError(`When outputMode is not int, maximum output rank is 2 Received outputMode ${e} and input shape ${a} which would result in output rank ${s.rank}.`);
  const o = ["multiHot", "oneHot"].includes(e), u = s;
  let l;
  if (typeof n < "u" && e === "count" ? l = denseBincount$2(u, n, t, o) : l = denseBincount$2(u, [], t, o), e !== "tfIdf")
    return l;
  if (n)
    return mul(l, n);
  throw new ValueError("When outputMode is 'tfIdf', weights must be provided.");
}
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class CategoryEncoding extends Layer {
  constructor(e) {
    super(e), this.numTokens = e.numTokens, e.outputMode ? this.outputMode = e.outputMode : this.outputMode = "multiHot";
  }
  getConfig() {
    const e = {
      numTokens: this.numTokens,
      outputMode: this.outputMode
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  computeOutputShape(e) {
    return e = getExactlyOneShape(e), e == null ? [this.numTokens] : this.outputMode === "oneHot" && e[e.length - 1] !== 1 ? (e.push(this.numTokens), e) : (e[e.length - 1] = this.numTokens, e);
  }
  call(e, t) {
    return tidy(() => {
      e = getExactlyOneTensor(e), e.dtype !== "int32" && (e = cast$2(e, "int32"));
      let n;
      if (typeof t.countWeights < "u") {
        if (this.outputMode !== "count")
          throw new ValueError(`countWeights is not used when outputMode !== count.
              Received countWeights=${t.countWeights}`);
        n = getExactlyOneTensor(t.countWeights);
      }
      const s = max$4(e), a = min$4(e), o = greater$3(this.numTokens, s).bufferSync().get(0), u = greaterEqual$2(a, 0).bufferSync().get(0);
      if (!(o && u))
        throw new ValueError(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);
      return encodeCategoricalInputs(e, this.outputMode, this.numTokens, n);
    });
  }
}
CategoryEncoding.className = "CategoryEncoding";
registerClass(CategoryEncoding);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const INTERPOLATION_KEYS$1 = ["bilinear", "nearest"], INTERPOLATION_METHODS$1 = new Set(INTERPOLATION_KEYS$1);
class Resizing extends Layer {
  constructor(e) {
    if (super(e), this.height = e.height, this.width = e.width, e.interpolation)
      if (INTERPOLATION_METHODS$1.has(e.interpolation))
        this.interpolation = e.interpolation;
      else
        throw new ValueError(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);
    else
      this.interpolation = "bilinear";
    this.cropToAspectRatio = !!e.cropToAspectRatio;
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = e[2];
    return [this.height, this.width, t];
  }
  getConfig() {
    const e = {
      height: this.height,
      width: this.width,
      interpolation: this.interpolation,
      cropToAspectRatio: this.cropToAspectRatio
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  call(e, t) {
    return tidy(() => {
      const n = [this.height, this.width];
      if (this.interpolation === "bilinear")
        return image$1.resizeBilinear(e, n, !this.cropToAspectRatio);
      if (this.interpolation === "nearest")
        return image$1.resizeNearestNeighbor(e, n, !this.cropToAspectRatio);
      throw new Error(`Interpolation is ${this.interpolation} but only ${[...INTERPOLATION_METHODS$1]} are supported`);
    });
  }
}
Resizing.className = "Resizing";
registerClass(Resizing);
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class RandomSeed {
  constructor(e) {
    this.seed = e;
  }
  next() {
    if (this.seed !== void 0)
      return this.seed++;
  }
}
RandomSeed.className = "RandomSeed";
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class BaseRandomLayer extends Layer {
  constructor(e) {
    super(e), this.randomGenerator = new RandomSeed(e.seed);
  }
  getConfig() {
    const e = {
      seed: this.randomGenerator.seed
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
BaseRandomLayer.className = "BaseRandomLayer";
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const INTERPOLATION_KEYS = ["bilinear", "nearest"], INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);
class RandomWidth extends BaseRandomLayer {
  constructor(e) {
    super(e);
    const { factor: t, interpolation: n = "bilinear" } = e;
    if (this.factor = t, Array.isArray(this.factor) && this.factor.length === 2)
      this.widthLower = this.factor[0], this.widthUpper = this.factor[1];
    else if (!Array.isArray(this.factor) && this.factor > 0)
      this.widthLower = -this.factor, this.widthUpper = this.factor;
    else
      throw new ValueError(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);
    if (this.widthLower < -1 || this.widthUpper < -1)
      throw new ValueError(`factor must have values larger than -1. Got: ${this.factor}`);
    if (this.widthUpper < this.widthLower)
      throw new ValueError(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);
    if (n)
      if (INTERPOLATION_METHODS.has(n))
        this.interpolation = n;
      else
        throw new ValueError(`Invalid interpolation parameter: ${n} is not implemented`);
  }
  getConfig() {
    const e = {
      factor: this.factor,
      interpolation: this.interpolation
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  computeOutputShape(e) {
    e = getExactlyOneShape(e);
    const t = e[2];
    return [this.imgHeight, -1, t];
  }
  call(e, t) {
    return tidy(() => {
      const n = getExactlyOneTensor(e);
      this.imgHeight = n.shape[n.shape.length - 3];
      const s = n.shape[n.shape.length - 2];
      this.widthFactor = randomUniform$1([1], 1 + this.widthLower, 1 + this.widthUpper, "float32", this.randomGenerator.next());
      let a = this.widthFactor.dataSync()[0] * s;
      a = Math.round(a);
      const o = [this.imgHeight, a];
      switch (this.interpolation) {
        case "bilinear":
          return image$1.resizeBilinear(e, o);
        case "nearest":
          return image$1.resizeNearestNeighbor(e, o);
        default:
          throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...INTERPOLATION_METHODS]} are supported`);
      }
    });
  }
}
RandomWidth.className = "RandomWidth";
registerClass(RandomWidth);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function inputLayer(r) {
  return new InputLayer(r);
}
function elu$2(r) {
  return new ELU$3(r);
}
function reLU(r) {
  return new ReLU(r);
}
function leakyReLU(r) {
  return new LeakyReLU(r);
}
function prelu$2(r) {
  return new PReLU(r);
}
function softmax$2(r) {
  return new Softmax(r);
}
function thresholdedReLU(r) {
  return new ThresholdedReLU(r);
}
function conv1d(r) {
  return new Conv1D(r);
}
function conv2d$1(r) {
  return new Conv2D(r);
}
function conv2dTranspose(r) {
  return new Conv2DTranspose(r);
}
function conv3d(r) {
  return new Conv3D(r);
}
function conv3dTranspose(r) {
  return new Conv3DTranspose(r);
}
function separableConv2d(r) {
  return new SeparableConv2D(r);
}
function cropping2D(r) {
  return new Cropping2D(r);
}
function upSampling2d(r) {
  return new UpSampling2D(r);
}
function depthwiseConv2d(r) {
  return new DepthwiseConv2D(r);
}
function activation(r) {
  return new Activation(r);
}
function dense(r) {
  return new Dense(r);
}
function dropout(r) {
  return new Dropout(r);
}
function spatialDropout1d(r) {
  return new SpatialDropout1D(r);
}
function flatten(r) {
  return new Flatten(r);
}
function repeatVector(r) {
  return new RepeatVector(r);
}
function reshape$2(r) {
  return new Reshape(r);
}
function permute(r) {
  return new Permute(r);
}
function embedding(r) {
  return new Embedding(r);
}
function add$1(r) {
  return new Add(r);
}
function average(r) {
  return new Average(r);
}
function concatenate(r) {
  return new Concatenate(r);
}
function maximum$2(r) {
  return new Maximum(r);
}
function minimum$2(r) {
  return new Minimum(r);
}
function multiply$2(r) {
  return new Multiply(r);
}
function dot(r) {
  return new Dot(r);
}
function batchNormalization(r) {
  return new BatchNormalization(r);
}
function layerNormalization(r) {
  return new LayerNormalization(r);
}
function zeroPadding2d(r) {
  return new ZeroPadding2D(r);
}
function averagePooling1d(r) {
  return new AveragePooling1D(r);
}
function avgPool1d(r) {
  return averagePooling1d(r);
}
function avgPooling1d(r) {
  return averagePooling1d(r);
}
function averagePooling2d(r) {
  return new AveragePooling2D(r);
}
function avgPool2d(r) {
  return averagePooling2d(r);
}
function avgPooling2d(r) {
  return averagePooling2d(r);
}
function averagePooling3d(r) {
  return new AveragePooling3D(r);
}
function avgPool3d(r) {
  return averagePooling3d(r);
}
function avgPooling3d(r) {
  return averagePooling3d(r);
}
function globalAveragePooling1d(r) {
  return new GlobalAveragePooling1D(r);
}
function globalAveragePooling2d(r) {
  return new GlobalAveragePooling2D(r);
}
function globalMaxPooling1d(r) {
  return new GlobalMaxPooling1D(r);
}
function globalMaxPooling2d(r) {
  return new GlobalMaxPooling2D(r);
}
function maxPooling1d(r) {
  return new MaxPooling1D(r);
}
function maxPooling2d(r) {
  return new MaxPooling2D(r);
}
function maxPooling3d(r) {
  return new MaxPooling3D(r);
}
function gru(r) {
  return new GRU(r);
}
function gruCell(r) {
  return new GRUCell(r);
}
function lstm(r) {
  return new LSTM(r);
}
function lstmCell(r) {
  return new LSTMCell(r);
}
function simpleRNN(r) {
  return new SimpleRNN(r);
}
function simpleRNNCell(r) {
  return new SimpleRNNCell(r);
}
function convLstm2d(r) {
  return new ConvLSTM2D(r);
}
function convLstm2dCell(r) {
  return new ConvLSTM2DCell(r);
}
function rnn(r) {
  return new RNN(r);
}
function stackedRNNCells(r) {
  return new StackedRNNCells(r);
}
function bidirectional(r) {
  return new Bidirectional(r);
}
function timeDistributed(r) {
  return new TimeDistributed(r);
}
const globalMaxPool1d = globalMaxPooling1d, globalMaxPool2d = globalMaxPooling2d, maxPool1d = maxPooling1d, maxPool2d = maxPooling2d;
function gaussianNoise(r) {
  return new GaussianNoise(r);
}
function gaussianDropout(r) {
  return new GaussianDropout(r);
}
function alphaDropout(r) {
  return new AlphaDropout(r);
}
function masking(r) {
  return new Masking(r);
}
function rescaling(r) {
  return new Rescaling(r);
}
function centerCrop(r) {
  return new CenterCrop(r);
}
function resizing(r) {
  return new Resizing(r);
}
function categoryEncoding(r) {
  return new CategoryEncoding(r);
}
function randomWidth(r) {
  return new RandomWidth(r);
}
const exports_layers = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Layer,
  RNN,
  RNNCell,
  activation,
  add: add$1,
  alphaDropout,
  average,
  averagePooling1d,
  averagePooling2d,
  averagePooling3d,
  avgPool1d,
  avgPool2d,
  avgPool3d,
  avgPooling1d,
  avgPooling2d,
  avgPooling3d,
  batchNormalization,
  bidirectional,
  categoryEncoding,
  centerCrop,
  concatenate,
  conv1d,
  conv2d: conv2d$1,
  conv2dTranspose,
  conv3d,
  conv3dTranspose,
  convLstm2d,
  convLstm2dCell,
  cropping2D,
  dense,
  depthwiseConv2d,
  dot,
  dropout,
  elu: elu$2,
  embedding,
  flatten,
  gaussianDropout,
  gaussianNoise,
  globalAveragePooling1d,
  globalAveragePooling2d,
  globalMaxPool1d,
  globalMaxPool2d,
  globalMaxPooling1d,
  globalMaxPooling2d,
  gru,
  gruCell,
  input,
  inputLayer,
  layerNormalization,
  leakyReLU,
  lstm,
  lstmCell,
  masking,
  maxPool1d,
  maxPool2d,
  maxPooling1d,
  maxPooling2d,
  maxPooling3d,
  maximum: maximum$2,
  minimum: minimum$2,
  multiply: multiply$2,
  permute,
  prelu: prelu$2,
  randomWidth,
  reLU,
  repeatVector,
  rescaling,
  reshape: reshape$2,
  resizing,
  rnn,
  separableConv2d,
  simpleRNN,
  simpleRNNCell,
  softmax: softmax$2,
  spatialDropout1d,
  stackedRNNCells,
  thresholdedReLU,
  timeDistributed,
  upSampling2d,
  zeroPadding2d
}, Symbol.toStringTag, { value: "Module" }));
function binaryAccuracy(r, e) {
  return binaryAccuracy$1(r, e);
}
function binaryCrossentropy(r, e) {
  return binaryCrossentropy$1(r, e);
}
function sparseCategoricalAccuracy(r, e) {
  return sparseCategoricalAccuracy$1(r, e);
}
function categoricalAccuracy(r, e) {
  return categoricalAccuracy$1(r, e);
}
function categoricalCrossentropy(r, e) {
  return categoricalCrossentropy$1(r, e);
}
function precision(r, e) {
  return precision$1(r, e);
}
function recall(r, e) {
  return recall$1(r, e);
}
function cosineProximity(r, e) {
  return cosineProximity$1(r, e);
}
function meanAbsoluteError(r, e) {
  return meanAbsoluteError$1(r, e);
}
function meanAbsolutePercentageError(r, e) {
  return meanAbsolutePercentageError$1(r, e);
}
function MAPE(r, e) {
  return meanAbsolutePercentageError$1(r, e);
}
function mape(r, e) {
  return meanAbsolutePercentageError$1(r, e);
}
function meanSquaredError(r, e) {
  return meanSquaredError$1(r, e);
}
function MSE(r, e) {
  return meanSquaredError$1(r, e);
}
function mse(r, e) {
  return meanSquaredError$1(r, e);
}
function r2Score(r, e) {
  return r2Score$1(r, e);
}
const exports_metrics = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  MAPE,
  MSE,
  binaryAccuracy,
  binaryCrossentropy,
  categoricalAccuracy,
  categoricalCrossentropy,
  cosineProximity,
  mape,
  meanAbsoluteError,
  meanAbsolutePercentageError,
  meanSquaredError,
  mse,
  precision,
  r2Score,
  recall,
  sparseCategoricalAccuracy
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const exports_models = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  modelFromJSON
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function l1l2(r) {
  return new L1L2(r);
}
function l1(r) {
  return l1$1(r);
}
function l2(r) {
  return l2$1(r);
}
const exports_regularizers = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  l1,
  l1l2,
  l2
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Callback extends BaseCallback {
  constructor() {
    super(...arguments), this.model = null;
  }
  setModel(e) {
    if (!(e instanceof LayersModel))
      throw new Error("model must be a LayersModel, not some other Container");
    this.model = e;
  }
}
function less$2(r, e) {
  return r < e;
}
function greater$2(r, e) {
  return r > e;
}
class EarlyStopping extends Callback {
  constructor(e) {
    if (super(), e == null && (e = {}), e.restoreBestWeights)
      throw new NotImplementedError("restoreBestWeights = True is not implemented in EarlyStopping yet.");
    this.monitor = e.monitor || "val_loss", this.minDelta = Math.abs(e.minDelta || 0), this.patience = e.patience || 0, this.verbose = e.verbose || 0, this.mode = e.mode || "auto", this.baseline = e.baseline, ["auto", "min", "max"].indexOf(this.mode) === -1 && (console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`), this.mode = "auto"), this.mode === "min" ? this.monitorFunc = less$2 : this.mode === "max" ? this.monitorFunc = greater$2 : this.monitor.indexOf("acc") !== -1 ? this.monitorFunc = greater$2 : this.monitorFunc = less$2, this.monitorFunc === less$2 && (this.minDelta *= -1);
  }
  async onTrainBegin(e) {
    this.wait = 0, this.stoppedEpoch = 0, this.baseline != null ? this.best = this.baseline : this.best = this.monitorFunc === less$2 ? 1 / 0 : -1 / 0;
  }
  async onEpochEnd(e, t) {
    await resolveScalarsInLogs(t);
    const n = this.getMonitorValue(t);
    n != null && (this.monitorFunc(n - this.minDelta, this.best) ? (this.best = n, this.wait = 0) : (this.wait++, this.wait >= this.patience && (this.stoppedEpoch = e, this.model.stopTraining = !0)));
  }
  async onTrainEnd(e) {
    this.stoppedEpoch > 0 && this.verbose && console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);
  }
  getMonitorValue(e) {
    e == null && (e = {});
    const t = e[this.monitor];
    return t == null && console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`), t;
  }
}
function earlyStopping(r) {
  return new EarlyStopping(r);
}
const callbacks = { earlyStopping };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ENV$1 = env();
ENV$1.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => !1, (r) => {
  r && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
var DataType;
(function(r) {
  r[r.DT_INVALID = 0] = "DT_INVALID", r[r.DT_FLOAT = 1] = "DT_FLOAT", r[r.DT_DOUBLE = 2] = "DT_DOUBLE", r[r.DT_INT32 = 3] = "DT_INT32", r[r.DT_UINT8 = 4] = "DT_UINT8", r[r.DT_INT16 = 5] = "DT_INT16", r[r.DT_INT8 = 6] = "DT_INT8", r[r.DT_STRING = 7] = "DT_STRING", r[r.DT_COMPLEX64 = 8] = "DT_COMPLEX64", r[r.DT_INT64 = 9] = "DT_INT64", r[r.DT_BOOL = 10] = "DT_BOOL", r[r.DT_QINT8 = 11] = "DT_QINT8", r[r.DT_QUINT8 = 12] = "DT_QUINT8", r[r.DT_QINT32 = 13] = "DT_QINT32", r[r.DT_BFLOAT16 = 14] = "DT_BFLOAT16", r[r.DT_QINT16 = 15] = "DT_QINT16", r[r.DT_QUINT16 = 16] = "DT_QUINT16", r[r.DT_UINT16 = 17] = "DT_UINT16", r[r.DT_COMPLEX128 = 18] = "DT_COMPLEX128", r[r.DT_HALF = 19] = "DT_HALF", r[r.DT_RESOURCE = 20] = "DT_RESOURCE", r[r.DT_VARIANT = 21] = "DT_VARIANT", r[r.DT_UINT32 = 22] = "DT_UINT32", r[r.DT_UINT64 = 23] = "DT_UINT64", r[r.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", r[r.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", r[r.DT_INT32_REF = 103] = "DT_INT32_REF", r[r.DT_UINT8_REF = 104] = "DT_UINT8_REF", r[r.DT_INT16_REF = 105] = "DT_INT16_REF", r[r.DT_INT8_REF = 106] = "DT_INT8_REF", r[r.DT_STRING_REF = 107] = "DT_STRING_REF", r[r.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", r[r.DT_INT64_REF = 109] = "DT_INT64_REF", r[r.DT_BOOL_REF = 110] = "DT_BOOL_REF", r[r.DT_QINT8_REF = 111] = "DT_QINT8_REF", r[r.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", r[r.DT_QINT32_REF = 113] = "DT_QINT32_REF", r[r.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", r[r.DT_QINT16_REF = 115] = "DT_QINT16_REF", r[r.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", r[r.DT_UINT16_REF = 117] = "DT_UINT16_REF", r[r.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", r[r.DT_HALF_REF = 119] = "DT_HALF_REF", r[r.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", r[r.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", r[r.DT_UINT32_REF = 122] = "DT_UINT32_REF", r[r.DT_UINT64_REF = 123] = "DT_UINT64_REF";
})(DataType || (DataType = {}));
var SaverDef;
(function(r) {
  (function(e) {
    e[e.LEGACY = 0] = "LEGACY", e[e.V1 = 1] = "V1", e[e.V2 = 2] = "V2";
  })(r.CheckpointFormatVersion || (r.CheckpointFormatVersion = {}));
})(SaverDef || (SaverDef = {}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CUSTOM_OPS = {};
function registerOp(r, e) {
  const t = {
    tfOpName: r,
    category: "custom",
    inputs: [],
    attrs: [],
    customExecutor: e
  };
  CUSTOM_OPS[r] = t;
}
function getRegisteredOp(r) {
  return CUSTOM_OPS[r];
}
function deregisterOp(r) {
  delete CUSTOM_OPS[r];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getParamValue(r, e, t, n, s) {
  const a = e.inputParams[r];
  if (a && a.inputIndexStart !== void 0) {
    const u = a.inputIndexStart, l = a.inputIndexEnd === 0 ? void 0 : a.inputIndexEnd === void 0 ? u + 1 : a.inputIndexEnd, f = u < 0 ? e.inputNames.length + u : u;
    if (a.type === "tensor")
      return getTensor(e.inputNames[f], t, n, s);
    if (a.type === "tensors") {
      const d = e.inputs.slice(u, l);
      return e.inputNames.slice(u, l).filter((g, y) => {
        var b;
        return ((b = d[y]) === null || b === void 0 ? void 0 : b.op) !== "NoOp";
      }).map((g) => getTensor(g, t, n, s));
    }
    const c = getTensor(e.inputNames[f], t, n, s), h = c.dataSync();
    return a.type === "number" ? h[0] : toNestedArray(c.shape, h);
  }
  const o = e.attrParams[r];
  return o && o.value;
}
function getTensor(r, e, t, n) {
  const [s, a] = parseNodeName(r, t);
  if (n != null) {
    const u = n.getHashTableHandleByName(s);
    if (u != null)
      return u;
  }
  const o = t.currentContextIds.find((u) => !!e[getNodeNameWithContextId(s, u)]);
  return o !== void 0 ? e[getNodeNameWithContextId(s, o)][a] : void 0;
}
function getTensorsForCurrentContext(r, e, t) {
  return e[getNodeNameWithContextId(r, t.currentContextId)];
}
function getNodeNameAndIndex(r, e) {
  const [t, n, s] = parseNodeName(r, e);
  return [
    getNodeNameWithContextId(t, e && e.currentContextId),
    n,
    s
  ];
}
function getNodeNameWithContextId(r, e) {
  return e ? `${r}-${e}` : r;
}
function parseNodeName(r, e) {
  if (r === "")
    return ["", 0, void 0];
  const t = e != null && e.parseNodeNameCache != null;
  if (t) {
    const a = e.parseNodeNameCache.get(r);
    if (a != null)
      return a;
  }
  const n = r.split(":");
  let s;
  if (n.length === 1)
    s = [r, 0, void 0];
  else {
    const a = n[0], o = n.length === 3 ? n[1] : void 0, u = Number(n[n.length - 1]);
    s = [a, u, o];
  }
  return t && e.parseNodeNameCache.set(r, s), s;
}
function getPadding(r, e, t) {
  let n = getParamValue("pad", r, e, t);
  if (n === "explicit") {
    n = getParamValue("explicitPaddings", r, e, t);
    const s = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let a = 0; a < 4; a++)
      s[a][0] = n[a * 2], s[a][1] = n[a * 2 + 1];
    return s;
  }
  return n;
}
function cloneTensor(r) {
  return r.kept ? r : clone(r);
}
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$i = [
  {
    tfOpName: "Add",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AddV2",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AddN",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "BiasAdd",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sub",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "RealDiv",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Div",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "DivNoNan",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FloorDiv",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Mul",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Maximum",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Minimum",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Pow",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SquaredDifference",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Mod",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FloorMod",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], arithmetic = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$i
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$h = [
  {
    tfOpName: "Abs",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Acos",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Asin",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atan2",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "y",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Ceil",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ClipByValue",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "clipValueMin",
        type: "number"
      },
      {
        start: 2,
        name: "clipValueMax",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Complex",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "real",
        type: "tensor"
      },
      {
        start: 1,
        name: "imag",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ComplexAbs",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Cos",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Cosh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Elu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Exp",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Floor",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Log",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Imag",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "outputType",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Neg",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Real",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "outputType",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Prelu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "alpha",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Relu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Relu6",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Selu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sigmoid",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sin",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sinh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sqrt",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Rsqrt",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Square",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tanh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sign",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Round",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Expm1",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Log1p",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Reciprocal",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Softplus",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Asinh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Acosh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atanh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Erf",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LeakyRelu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "alpha",
        name: "alpha",
        type: "number",
        defaultValue: 0.2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "IsNan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "IsFinite",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "IsInf",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], basicMath = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$h
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$g = [
  {
    tfOpName: "EmptyTensorList",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 1,
        name: "maxNumElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LoopCond",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "pred",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Switch",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "pred",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Merge",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Enter",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "frame_name",
        name: "frameName",
        type: "string"
      },
      {
        tfName: "is_constant",
        name: "isConstant",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Exit",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "NextIteration",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "size",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "dynamic_size",
        name: "dynamicSize",
        type: "bool"
      },
      {
        tfName: "clear_after_read",
        name: "clearAfterRead",
        type: "bool"
      },
      {
        tfName: "identical_element_shapes",
        name: "identicalElementShapes",
        type: "bool"
      },
      {
        tfName: "tensor_array_name",
        name: "name",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "TensorArrayWriteV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayReadV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayGatherV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      }
    ]
  },
  {
    tfOpName: "TensorArrayScatterV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorArrayConcatV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape_except0",
        name: "elementShapeExcept0",
        type: "shape",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArraySplitV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 2,
        name: "lengths",
        type: "number[]"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorArraySizeV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "flowIn",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "TensorArrayCloseV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "StatelessIf",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "cond",
        type: "tensor"
      },
      {
        start: 1,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "then_branch",
        name: "thenBranch",
        type: "func"
      },
      {
        tfName: "else_branch",
        name: "elseBranch",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "If",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "cond",
        type: "tensor"
      },
      {
        start: 1,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "then_branch",
        name: "thenBranch",
        type: "func"
      },
      {
        tfName: "else_branch",
        name: "elseBranch",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "StatelessWhile",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "cond",
        name: "cond",
        type: "func"
      },
      {
        tfName: "body",
        name: "body",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "While",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "cond",
        name: "cond",
        type: "func"
      },
      {
        tfName: "body",
        name: "body",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "TensorListScatter",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListScatterV2",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 3,
        name: "numElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListGather",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListGetItem",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListSetItem",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListReserve",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 1,
        name: "numElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListFromTensor",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListStack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      },
      {
        tfName: "num_elements",
        name: "numElements",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListSplit",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 2,
        name: "lengths",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListConcat",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListConcatV2",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListPopBack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListPushBack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListLength",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "TensorListResize",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      }
    ]
  }
], control = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$g
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$f = [
  {
    tfOpName: "AvgPool",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPool",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: [],
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPoolWithArgmax",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "include_batch_in_index",
        name: "includeBatchInIndex",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AvgPool3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPool3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Conv1D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "stride",
        name: "stride",
        type: "number"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NWC"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "dilation",
        name: "dilation",
        type: "number",
        defaultValue: 1
      }
    ]
  },
  {
    tfOpName: "Conv2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "useCudnnOnGpu",
        name: "useCudnnOnGpu",
        type: "bool"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "_FusedConv2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "use_cudnn_on_gpu",
        name: "useCudnnOnGpu",
        type: "bool",
        defaultValue: !0
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        defaultValue: [
          1,
          1,
          1,
          1
        ]
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-4
      },
      {
        tfName: "leakyrelu_alpha",
        name: "leakyreluAlpha",
        type: "number",
        defaultValue: 0.2
      }
    ]
  },
  {
    tfOpName: "Conv2DBackpropInput",
    category: "convolution",
    inputs: [
      {
        start: 2,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 0,
        name: "outputShape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "DepthwiseConv2d",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "DepthwiseConv2dNative",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "FusedDepthwiseConv2dNative",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        defaultValue: [
          1,
          1,
          1,
          1
        ]
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      }
    ]
  },
  {
    tfOpName: "Conv3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Dilation2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "rates",
        name: "dilations",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      }
    ]
  }
], convolution = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$f
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$e = [
  {
    tfOpName: "Fill",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      },
      {
        start: 1,
        name: "value",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LinSpace",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "start",
        type: "number"
      },
      {
        start: 1,
        name: "stop",
        type: "number"
      },
      {
        start: 2,
        name: "num",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "OneHot",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "depth",
        type: "number"
      },
      {
        start: 2,
        name: "onValue",
        type: "number",
        defaultValue: 1
      },
      {
        start: 3,
        name: "offValue",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Ones",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "OnesLike",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "RandomStandardNormal",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "seed",
        name: "seed",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "RandomUniform",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "minval",
        name: "minval",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "maxval",
        name: "maxval",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "seed",
        name: "seed",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "RandomUniformInt",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "minval",
        name: "minval",
        type: "number"
      },
      {
        tfName: "maxval",
        name: "maxval",
        type: "number"
      },
      {
        tfName: "seed",
        name: "seed",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Range",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "start",
        type: "number"
      },
      {
        start: 1,
        name: "stop",
        type: "number"
      },
      {
        start: 2,
        name: "step",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "Tidx",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TruncatedNormal",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "means",
        name: "mean",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "stddev",
        name: "stdDev",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "seed",
        name: "seed",
        type: "number"
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Zeros",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "ZerosLike",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Multinomial",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "logits",
        type: "tensor"
      },
      {
        start: 1,
        name: "numSamples",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "seed",
        name: "seed",
        type: "number"
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "output_dtype",
        name: "output_dtype",
        type: "dtype"
      }
    ]
  }
], creation = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$e
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$d = [
  {
    tfOpName: "NonMaxSuppressionV2",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV3",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV4",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "T_threshold",
        name: "threshold",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "pad_to_max_output_size",
        name: "padToMaxOutputSize",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV5",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      },
      {
        start: 5,
        name: "softNmsSigma",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "Where",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ListDiff",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "y",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], dynamic = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$d
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$c = [
  {
    tfOpName: "LowerBound",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "sortedSequence",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "TopKV2",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "k",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "sorted",
        name: "sorted",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "UpperBound",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "sortedSequence",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Unique",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "UniqueV2",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  }
], evaluation = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$c
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$b = [
  {
    tfOpName: "PlaceholderWithDefault",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "default",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "shape",
        name: "shape",
        type: "shape"
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Placeholder",
    category: "graph",
    attrs: [
      {
        tfName: "shape",
        name: "shape",
        type: "shape"
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Const",
    category: "graph"
  },
  {
    tfOpName: "Identity",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "IdentityN",
    category: "graph",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "x",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Snapshot",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Rank",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Size",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Shape",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "ShapeN",
    category: "graph",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "x",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Print",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "data",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "message",
        name: "message",
        type: "string"
      },
      {
        tfName: "first_n",
        name: "firstN",
        type: "number",
        notSupported: !0
      },
      {
        tfName: "summarize",
        name: "summarize",
        type: "number",
        defaultValue: 3
      }
    ]
  },
  {
    tfOpName: "NoOp",
    category: "graph",
    inputs: []
  },
  {
    tfOpName: "StopGradient",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "FakeQuantWithMinMaxVars",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "min",
        name: "min",
        type: "number"
      },
      {
        tfName: "max",
        name: "max",
        type: "number"
      }
    ]
  }
], graph = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$b
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$a = [
  {
    tfOpName: "HashTable",
    category: "hash_table",
    inputs: [],
    attrs: [
      {
        tfName: "shared_name",
        name: "sharedName",
        type: "string"
      },
      {
        tfName: "use_node_name_sharing",
        name: "useNodeNameSharing",
        type: "bool"
      },
      {
        tfName: "key_dtype",
        name: "keyDType",
        type: "dtype"
      },
      {
        tfName: "value_dtype",
        name: "valueDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "HashTableV2",
    category: "hash_table",
    inputs: [],
    attrs: [
      {
        tfName: "shared_name",
        name: "sharedName",
        type: "string"
      },
      {
        tfName: "use_node_name_sharing",
        name: "useNodeNameSharing",
        type: "bool"
      },
      {
        tfName: "key_dtype",
        name: "keyDType",
        type: "dtype"
      },
      {
        tfName: "value_dtype",
        name: "valueDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LookupTableImport",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableImportV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableFind",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableFindV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableSize",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "LookupTableSizeV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "InitializeTable",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "InitializeTableV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ]
  }
], hashTable = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$a
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$9 = [
  {
    tfOpName: "ResizeBilinear",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "align_corners",
        name: "alignCorners",
        type: "bool"
      },
      {
        tfName: "half_pixel_centers",
        name: "halfPixelCenters",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ResizeNearestNeighbor",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "align_corners",
        name: "alignCorners",
        type: "bool"
      },
      {
        tfName: "half_pixel_centers",
        name: "halfPixelCenters",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "CropAndResize",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "image",
        type: "tensor"
      },
      {
        start: 1,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 2,
        name: "boxInd",
        type: "tensor"
      },
      {
        start: 3,
        name: "cropSize",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "method",
        name: "method",
        type: "string"
      },
      {
        tfName: "extrapolation_value",
        name: "extrapolationValue",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "ImageProjectiveTransformV3",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "transforms",
        type: "tensor"
      },
      {
        start: 2,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 3,
        name: "fillValue",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "interpolation",
        name: "interpolation",
        type: "string"
      },
      {
        tfName: "fill_mode",
        name: "fillMode",
        type: "string"
      }
    ]
  }
], image = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$9
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$8 = [
  {
    tfOpName: "Equal",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "NotEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Greater",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "GreaterEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Less",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LessEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalAnd",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalNot",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalOr",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Select",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      },
      {
        start: 1,
        name: "a",
        type: "tensor"
      },
      {
        start: 2,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SelectV2",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      },
      {
        start: 1,
        name: "a",
        type: "tensor"
      },
      {
        start: 2,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "BitwiseAnd",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "y",
        type: "tensor"
      }
    ]
  }
], logical = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$8
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$7 = [
  {
    tfOpName: "_FusedMatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-4
      },
      {
        tfName: "transpose_a",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "transpose_b",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "leakyrelu_alpha",
        name: "leakyreluAlpha",
        type: "number",
        defaultValue: 0.2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "transpose_a",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "transpose_b",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "BatchMatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "adj_x",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "adj_y",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "BatchMatMulV2",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "adj_x",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "adj_y",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Transpose",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "perm",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Einsum",
    category: "matrices",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "equation",
        name: "equation",
        type: "string"
      },
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "MatrixBandPart",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "numLower",
        type: "tensor"
      },
      {
        start: 1,
        name: "numUpper",
        type: "tensor"
      }
    ]
  }
], matrices = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$7
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$6 = [
  {
    tfOpName: "EuclideanNorm",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool",
        defaultValue: !1
      }
    ]
  },
  {
    tfOpName: "FusedBatchNorm",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FusedBatchNormV2",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FusedBatchNormV3",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LRN",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "depth_radius",
        name: "radius",
        type: "number",
        defaultValue: 5
      },
      {
        tfName: "bias",
        name: "bias",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "alpha",
        name: "alpha",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "beta",
        name: "beta",
        type: "number",
        defaultValue: 0.5
      }
    ]
  },
  {
    tfOpName: "Softmax",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "LogSoftmax",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  }
], normalization = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$6
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$5 = [
  {
    tfOpName: "Bincount",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      },
      {
        start: 2,
        name: "weights",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "DenseBincount",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      },
      {
        start: 2,
        name: "weights",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "binary_output",
        name: "binaryOutput",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Max",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Mean",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Min",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Sum",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "All",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Any",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "ArgMax",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "ArgMin",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "Prod",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Cumprod",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "exclusive",
        name: "exclusive",
        type: "bool"
      },
      {
        tfName: "reverse",
        name: "reverse",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Cumsum",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "exclusive",
        name: "exclusive",
        type: "bool"
      },
      {
        tfName: "reverse",
        name: "reverse",
        type: "bool"
      }
    ]
  }
], reduction = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$5
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$4 = [
  {
    tfOpName: "ConcatV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        end: -1,
        name: "tensors",
        type: "tensors"
      },
      {
        start: -1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      }
    ]
  },
  {
    tfOpName: "Concat",
    category: "slice_join",
    inputs: [
      {
        start: 1,
        end: 0,
        name: "tensors",
        type: "tensors"
      },
      {
        start: 0,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      }
    ]
  },
  {
    tfOpName: "GatherV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "batch_dims",
        name: "batchDims",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Gather",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Reverse",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "dims",
        type: "bool[]"
      }
    ]
  },
  {
    tfOpName: "ReverseV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Slice",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "begin",
        type: "number[]"
      },
      {
        start: 2,
        name: "size",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "StridedSlice",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "begin",
        type: "number[]"
      },
      {
        start: 2,
        name: "end",
        type: "number[]"
      },
      {
        start: 3,
        name: "strides",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "begin_mask",
        name: "beginMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "end_mask",
        name: "endMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "new_axis_mask",
        name: "newAxisMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "ellipsis_mask",
        name: "ellipsisMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "shrink_axis_mask",
        name: "shrinkAxisMask",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Pack",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Unpack",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "num",
        name: "num",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tile",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "reps",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Split",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "axis",
        type: "number",
        defaultValue: 0
      },
      {
        start: 1,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "num_split",
        name: "numOrSizeSplits",
        type: "number",
        defaultValue: 1
      }
    ]
  },
  {
    tfOpName: "SplitV",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "numOrSizeSplits",
        type: "number[]"
      },
      {
        start: 2,
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "ScatterNd",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      },
      {
        start: 2,
        name: "shape",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "GatherNd",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseToDense",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "sparseIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "sparseValues",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        defaultValue: !1,
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorScatterUpdate",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ]
  }
], sliceJoin = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$4
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$3 = [
  {
    tfOpName: "SparseFillEmptyRows",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      },
      {
        start: 2,
        name: "denseShape",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseReshape",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "inputIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "inputShape",
        type: "tensor"
      },
      {
        start: 2,
        name: "newShape",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SparseSegmentMean",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "segmentIds",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseSegmentSum",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "segmentIds",
        type: "tensor"
      }
    ]
  }
], sparse = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$3
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$2 = [
  {
    tfOpName: "FFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "IFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "RFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "fft_length",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "IRFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "fft_length",
        type: "number",
        notSupported: !0
      }
    ]
  }
], spectral = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$2
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json$1 = [
  {
    tfOpName: "StaticRegexReplace",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "pattern",
        name: "pattern",
        type: "string"
      },
      {
        tfName: "rewrite",
        name: "rewrite",
        type: "string"
      },
      {
        tfName: "replace_global",
        name: "replaceGlobal",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "StringNGrams",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "dataSplits",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "separator",
        name: "separator",
        type: "string"
      },
      {
        tfName: "ngram_widths",
        name: "nGramWidths",
        type: "number[]"
      },
      {
        tfName: "left_pad",
        name: "leftPad",
        type: "string"
      },
      {
        tfName: "right_pad",
        name: "rightPad",
        type: "string"
      },
      {
        tfName: "pad_width",
        name: "padWidth",
        type: "number"
      },
      {
        tfName: "preserve_short_sequences",
        name: "preserveShortSequences",
        type: "bool"
      }
    ],
    outputs: [
      "ngrams",
      "ngrams_splits"
    ]
  },
  {
    tfOpName: "StringSplit",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "delimiter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "skip_empty",
        name: "skipEmpty",
        type: "bool"
      }
    ],
    outputs: [
      "indices",
      "values",
      "shape"
    ]
  },
  {
    tfOpName: "StringToHashBucketFast",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "num_buckets",
        name: "numBuckets",
        type: "number"
      }
    ]
  }
], string = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: json$1
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
  {
    tfOpName: "Cast",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "SrcT",
        name: "sdtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "DstT",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "ExpandDims",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "MirrorPad",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "mode",
        name: "mode",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "Pad",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "constant_value",
        name: "constantValue",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "PadV2",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      },
      {
        start: 2,
        name: "constantValue",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Reshape",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "shape",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "EnsureShape",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "shape",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Squeeze",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        tfDeprecatedName: "squeeze_dims",
        name: "axis",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "SpaceToBatchND",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "blockShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "paddings",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "BatchToSpaceND",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "blockShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "crops",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "DepthToSpace",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "block_size",
        name: "blockSize",
        type: "number"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "BroadcastTo",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: []
  },
  {
    tfOpName: "BroadcastArgs",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "s0",
        type: "tensor"
      },
      {
        start: 1,
        name: "s1",
        type: "tensor"
      }
    ],
    attrs: []
  }
], transformation = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json
}, Symbol.toStringTag, { value: "Module" }));
class OperationMapper {
  // Singleton instance for the mapper
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  // Loads the op mapping from the JSON file.
  constructor() {
    const e = [
      arithmetic,
      basicMath,
      control,
      convolution,
      creation,
      dynamic,
      evaluation,
      graph,
      hashTable,
      image,
      logical,
      matrices,
      normalization,
      reduction,
      sliceJoin,
      sparse,
      spectral,
      string,
      transformation
    ], t = [].concat(...e.map((n) => n.json));
    this.opMappers = t.reduce((n, s) => (n[s.tfOpName] = s, n), {});
  }
  // Converts the model inference graph from Tensorflow GraphDef to local
  // representation for TensorFlow.js API
  transformGraph(e, t = {}) {
    const n = e.node, s = [], a = [], o = [], u = n.reduce((y, b) => (y[b.name] = this.mapNode(b), b.op.startsWith("Placeholder") ? s.push(y[b.name]) : b.op === "Const" ? a.push(y[b.name]) : (b.input == null || b.input.length === 0) && o.push(y[b.name]), y), {});
    let l = [];
    const f = [];
    let c = {}, h = {};
    t != null && (c = this.mapSignatureEntries(t.inputs), h = this.mapSignatureEntries(t.outputs));
    const d = Object.keys(u);
    d.forEach((y) => {
      const b = u[y];
      b.inputNames.forEach((v, w) => {
        const [I, , T] = getNodeNameAndIndex(v), _ = u[I];
        if (_.outputs != null) {
          const F = _.outputs.indexOf(T);
          if (F !== -1) {
            const O = `${I}:${F}`;
            b.inputNames[w] = O;
          }
        }
        b.inputs.push(_), _.children.push(b);
      });
    }), Object.keys(h).length === 0 ? d.forEach((y) => {
      const b = u[y];
      b.children.length === 0 && f.push(b);
    }) : Object.keys(h).forEach((y) => {
      const [b] = getNodeNameAndIndex(y), v = u[b];
      v != null && (v.signatureKey = h[y], f.push(v));
    }), Object.keys(c).length > 0 ? Object.keys(c).forEach((y) => {
      const [b] = getNodeNameAndIndex(y), v = u[b];
      v && (v.signatureKey = c[y], l.push(v));
    }) : l = s;
    let m = {};
    e.library != null && e.library.function != null && (m = e.library.function.reduce((y, b) => (y[b.signature.name] = this.mapFunction(b), y), {}));
    const g = { nodes: u, inputs: l, outputs: f, weights: a, placeholders: s, signature: t, functions: m };
    return o.length > 0 && (g.initNodes = o), g;
  }
  mapSignatureEntries(e) {
    return Object.keys(e || {}).reduce((t, n) => (t[e[n].name] = n, t), {});
  }
  mapNode(e) {
    const t = getRegisteredOp(e.op) || this.opMappers[e.op] || {};
    e.attr == null && (e.attr = {});
    const n = {
      name: e.name,
      op: e.op,
      category: t.category,
      inputNames: (e.input || []).map((s) => s.startsWith("^") ? s.slice(1) : s),
      inputs: [],
      children: [],
      inputParams: {},
      attrParams: {},
      rawAttrs: e.attr,
      outputs: t.outputs
    };
    return t.inputs != null && (n.inputParams = t.inputs.reduce((s, a) => (s[a.name] = {
      type: a.type,
      inputIndexStart: a.start,
      inputIndexEnd: a.end
    }, s), {})), t.attrs != null && (n.attrParams = t.attrs.reduce((s, a) => {
      const o = a.type;
      let u;
      switch (a.type) {
        case "string":
          u = getStringParam(e.attr, a.tfName, a.defaultValue), u === void 0 && a.tfDeprecatedName && (u = getStringParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "string[]":
          u = getStringArrayParam(e.attr, a.tfName, a.defaultValue), u === void 0 && a.tfDeprecatedName && (u = getStringArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "number":
          u = getNumberParam(e.attr, a.tfName, a.defaultValue || 0), u === void 0 && a.tfDeprecatedName && (u = getNumberParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "number[]":
          u = getNumericArrayParam(e.attr, a.tfName, a.defaultValue), u === void 0 && a.tfDeprecatedName && (u = getNumericArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "bool":
          u = getBoolParam(e.attr, a.tfName, a.defaultValue), u === void 0 && a.tfDeprecatedName && (u = getBoolParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "bool[]":
          u = getBoolArrayParam(e.attr, a.tfName, a.defaultValue), u === void 0 && a.tfDeprecatedName && (u = getBoolArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "shape":
          u = getTensorShapeParam(e.attr, a.tfName, a.defaultValue), u === void 0 && a.tfDeprecatedName && (u = getTensorShapeParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "shape[]":
          u = getTensorShapeArrayParam(e.attr, a.tfName, a.defaultValue), u === void 0 && a.tfDeprecatedName && (u = getTensorShapeArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "dtype":
          u = getDtypeParam(e.attr, a.tfName, a.defaultValue), u === void 0 && a.tfDeprecatedName && (u = getDtypeParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "dtype[]":
          u = getDtypeArrayParam(e.attr, a.tfName, a.defaultValue), u === void 0 && a.tfDeprecatedName && (u = getDtypeArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "func":
          u = getFuncParam(e.attr, a.tfName, a.defaultValue), u === void 0 && a.tfDeprecatedName && (u = getFuncParam(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "tensor":
        case "tensors":
          break;
        default:
          throw new Error(`Unsupported param type: ${a.type} for op: ${e.op}`);
      }
      return s[a.name] = { value: u, type: o }, s;
    }, {})), n;
  }
  // map the TFunctionDef to TFJS graph object
  mapFunction(e) {
    const t = e.nodeDef, n = [], s = [];
    let a = {};
    t != null && (a = t.reduce((h, d) => (h[d.name] = this.mapNode(d), d.op === "Const" && s.push(h[d.name]), h), {}));
    const o = [], u = [];
    e.signature.inputArg.forEach((h) => {
      const [d] = getNodeNameAndIndex(h.name), m = {
        name: d,
        op: "Placeholder",
        inputs: [],
        inputNames: [],
        category: "graph",
        inputParams: {},
        attrParams: { dtype: { value: parseDtypeParam(h.type), type: "dtype" } },
        children: []
      };
      m.signatureKey = h.name, o.push(m), a[d] = m;
    }), Object.keys(a).forEach((h) => {
      const d = a[h];
      d.inputNames.forEach((m, g) => {
        const [y, , b] = getNodeNameAndIndex(m), v = a[y];
        if (v.outputs != null) {
          const w = v.outputs.indexOf(b);
          if (w !== -1) {
            const I = `${y}:${w}`;
            d.inputNames[g] = I;
          }
        }
        d.inputs.push(v), v.children.push(d);
      });
    });
    const f = e.ret;
    e.signature.outputArg.forEach((h) => {
      const [d, m] = getNodeNameAndIndex(f[h.name]), g = a[d];
      g != null && (g.defaultOutput = m, u.push(g));
    });
    const c = this.mapArgsToSignature(e);
    return { nodes: a, inputs: o, outputs: u, weights: s, placeholders: n, signature: c };
  }
  mapArgsToSignature(e) {
    return {
      methodName: e.signature.name,
      inputs: e.signature.inputArg.reduce((t, n) => (t[n.name] = this.mapArgToTensorInfo(n), t), {}),
      outputs: e.signature.outputArg.reduce((t, n) => (t[n.name] = this.mapArgToTensorInfo(n, e.ret), t), {})
    };
  }
  mapArgToTensorInfo(e, t) {
    let n = e.name;
    return t != null && (n = t[n]), { name: n, dtype: e.type };
  }
}
function decodeBase64(r) {
  const e = env().global;
  if (typeof e.atob < "u")
    return e.atob(r);
  if (typeof Buffer < "u")
    return new Buffer(r, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function parseStringParam(r, e) {
  const t = Array.isArray(r) ? String.fromCharCode.apply(null, r) : decodeBase64(r);
  return e ? t : t.toLowerCase();
}
function getStringParam(r, e, t, n = !1) {
  const s = r[e];
  return s != null ? parseStringParam(s.s, n) : t;
}
function getBoolParam(r, e, t) {
  const n = r[e];
  return n ? n.b : t;
}
function getNumberParam(r, e, t) {
  const n = r[e] || {}, s = n.i != null ? n.i : n.f != null ? n.f : t;
  return typeof s == "number" ? s : parseInt(s, 10);
}
function parseDtypeParam(r) {
  switch (typeof r == "string" && (r = DataType[r]), r) {
    case DataType.DT_FLOAT:
    case DataType.DT_HALF:
      return "float32";
    case DataType.DT_INT32:
    case DataType.DT_INT64:
    case DataType.DT_INT8:
    case DataType.DT_UINT8:
      return "int32";
    case DataType.DT_BOOL:
      return "bool";
    case DataType.DT_DOUBLE:
      return "float32";
    case DataType.DT_STRING:
      return "string";
    case DataType.DT_COMPLEX64:
    case DataType.DT_COMPLEX128:
      return "complex64";
    default:
      return null;
  }
}
function getFuncParam(r, e, t) {
  const n = r[e];
  return n && n.func ? n.func.name : t;
}
function getDtypeParam(r, e, t) {
  const n = r[e];
  return n && n.type ? parseDtypeParam(n.type) : t;
}
function getDtypeArrayParam(r, e, t) {
  const n = r[e];
  return n && n.list && n.list.type ? n.list.type.map((s) => parseDtypeParam(s)) : t;
}
function parseTensorShapeParam(r) {
  if (!r.unknownRank)
    return r.dim != null ? r.dim.map((e) => typeof e.size == "number" ? e.size : parseInt(e.size, 10)) : [];
}
function getTensorShapeParam(r, e, t) {
  const n = r[e];
  return n && n.shape ? parseTensorShapeParam(n.shape) : t;
}
function getNumericArrayParam(r, e, t) {
  const n = r[e];
  return n ? ((n.list.f && n.list.f.length ? n.list.f : n.list.i) || []).map((s) => typeof s == "number" ? s : parseInt(s, 10)) : t;
}
function getStringArrayParam(r, e, t, n = !1) {
  const s = r[e];
  return s && s.list && s.list.s ? s.list.s.map((a) => parseStringParam(a, n)) : t;
}
function getTensorShapeArrayParam(r, e, t) {
  const n = r[e];
  return n && n.list && n.list.shape ? n.list.shape.map((s) => parseTensorShapeParam(s)) : t;
}
function getBoolArrayParam(r, e, t) {
  const n = r[e];
  return n && n.list && n.list.b ? n.list.b : t;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class NodeValueImpl {
  constructor(e, t, n) {
    this.node = e, this.tensorMap = t, this.context = n, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map((s) => this.getInput(s)), e.rawAttrs != null && (this.attrs = Object.keys(e.rawAttrs).reduce((s, a) => (s[a] = this.getAttr(a), s), {}));
  }
  /**
   * Return the value of the attribute or input param.
   * @param name String: name of attribute or input param.
   */
  getInput(e) {
    return getTensor(e, this.tensorMap, this.context);
  }
  /**
   * Return the value of the attribute or input param.
   * @param name String: name of attribute or input param.
   */
  getAttr(e, t) {
    const n = this.node.rawAttrs[e];
    if (n.tensor != null)
      return getTensor(e, this.tensorMap, this.context);
    if (n.i != null || n.f != null)
      return getNumberParam(this.node.rawAttrs, e, t);
    if (n.s != null)
      return getStringParam(this.node.rawAttrs, e, t);
    if (n.b != null)
      return getBoolParam(this.node.rawAttrs, e, t);
    if (n.shape != null)
      return getTensorShapeParam(this.node.rawAttrs, e, t);
    if (n.type != null)
      return getDtypeParam(this.node.rawAttrs, e, t);
    if (n.list != null) {
      if (n.list.i != null || n.list.f != null)
        return getNumericArrayParam(this.node.rawAttrs, e, t);
      if (n.list.s != null)
        return getStringArrayParam(this.node.rawAttrs, e, t);
      if (n.list.shape != null)
        return getTensorShapeArrayParam(this.node.rawAttrs, e, t);
      if (n.list.b != null)
        return getBoolArrayParam(this.node.rawAttrs, e, t);
      if (n.list.type != null)
        return getDtypeArrayParam(this.node.rawAttrs, e, t);
    }
    return t;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tfOps = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  OP_SCOPE_SUFFIX,
  abs: abs$3,
  acos: acos$2,
  acosh: acosh$2,
  add: add$2,
  addN: addN$2,
  all: all$2,
  any: any$2,
  argMax: argMax$2,
  argMin: argMin$2,
  asin: asin$2,
  asinh: asinh$2,
  atan: atan$2,
  atan2: atan2$2,
  atanh: atanh$2,
  avgPool: avgPool$2,
  avgPool3d: avgPool3d$1,
  basicLSTMCell,
  batchNorm: batchNorm$2,
  batchNorm2d,
  batchNorm3d,
  batchNorm4d,
  batchToSpaceND: batchToSpaceND$2,
  bincount: bincount$2,
  bitwiseAnd: bitwiseAnd$2,
  booleanMaskAsync,
  broadcastArgs: broadcastArgs$2,
  broadcastTo,
  buffer: buffer$1,
  cast: cast$3,
  ceil: ceil$2,
  clipByValue: clipByValue$2,
  clone,
  complex: complex$2,
  concat: concat$2,
  concat1d,
  concat2d,
  concat3d,
  concat4d,
  conv1d: conv1d$1,
  conv2d: conv2d$3,
  conv2dTranspose: conv2dTranspose$1,
  conv3d: conv3d$1,
  conv3dTranspose: conv3dTranspose$1,
  cos: cos$2,
  cosh: cosh$2,
  cosineWindow,
  cumprod: cumprod$2,
  cumsum: cumsum$2,
  denseBincount: denseBincount$2,
  depthToSpace: depthToSpace$2,
  depthwiseConv2d: depthwiseConv2d$3,
  diag: diag$2,
  dilation2d,
  div: div$1,
  divNoNan,
  dot: dot$2,
  dropout: dropout$2,
  einsum: einsum$2,
  elu: elu$4,
  enclosingPowerOfTwo,
  ensureShape,
  equal: equal$2,
  erf: erf$2,
  euclideanNorm,
  exp: exp$2,
  expandDims: expandDims$3,
  expm1: expm1$2,
  eye,
  fft: fft$2,
  fill: fill$2,
  floor: floor$3,
  floorDiv: floorDiv$2,
  fused: fused_ops,
  gather: gather$1,
  gatherND,
  greater: greater$3,
  greaterEqual: greaterEqual$2,
  ifft: ifft$2,
  imag: imag$2,
  image: image$1,
  inTopKAsync,
  irfft,
  isFinite: isFinite$3,
  isInf: isInf$2,
  isNaN: isNaN$3,
  leakyRelu: leakyRelu$2,
  less: less$3,
  lessEqual: lessEqual$2,
  linalg,
  linspace,
  localResponseNormalization,
  log: log$2,
  log1p: log1p$2,
  logSigmoid,
  logSoftmax,
  logSumExp,
  logicalAnd: logicalAnd$2,
  logicalNot: logicalNot$2,
  logicalOr: logicalOr$2,
  logicalXor,
  losses,
  lowerBound: lowerBound$1,
  matMul: matMul$1,
  max: max$4,
  maxPool: maxPool$2,
  maxPool3d: maxPool3d$1,
  maxPoolWithArgmax,
  maximum: maximum$3,
  mean: mean$1,
  meshgrid,
  min: min$4,
  minimum: minimum$3,
  mirrorPad: mirrorPad$1,
  mod: mod$2,
  moments,
  movingAverage,
  mul,
  multiRNNCell,
  multinomial: multinomial$2,
  neg: neg$2,
  norm,
  notEqual: notEqual$2,
  oneHot: oneHot$2,
  ones: ones$1,
  onesLike: onesLike$2,
  op,
  outerProduct,
  pad,
  pad1d,
  pad2d,
  pad3d,
  pad4d,
  pool: pool$1,
  pow: pow$3,
  prelu: prelu$3,
  print,
  prod: prod$2,
  raggedGather: raggedGather$2,
  raggedRange: raggedRange$2,
  raggedTensorToTensor: raggedTensorToTensor$2,
  rand,
  randomGamma,
  randomNormal: randomNormal$2,
  randomStandardNormal,
  randomUniform: randomUniform$1,
  randomUniformInt,
  range: range$3,
  real: real$2,
  reciprocal: reciprocal$2,
  relu: relu$2,
  relu6: relu6$2,
  reshape: reshape$3,
  reverse: reverse$2,
  reverse1d,
  reverse2d,
  reverse3d,
  reverse4d,
  rfft,
  round: round$2,
  rsqrt: rsqrt$2,
  scalar,
  scatterND,
  searchSorted: searchSorted$2,
  selu: selu$2,
  separableConv2d: separableConv2d$1,
  setdiff1dAsync,
  sigmoid: sigmoid$2,
  sign: sign$2,
  signal,
  sin: sin$2,
  sinh: sinh$2,
  slice: slice$2,
  slice1d,
  slice2d,
  slice3d,
  slice4d,
  softmax: softmax$3,
  softplus: softplus$2,
  spaceToBatchND: spaceToBatchND$2,
  sparse: sparse$1,
  sparseToDense: sparseToDense$2,
  spectral: spectral$1,
  split: split$2,
  sqrt: sqrt$2,
  square: square$2,
  squaredDifference: squaredDifference$2,
  squeeze,
  stack,
  step: step$2,
  stridedSlice: stridedSlice$2,
  string: string$1,
  sub: sub$2,
  sum: sum$2,
  tan: tan$2,
  tanh: tanh$2,
  tensor,
  tensor1d,
  tensor2d,
  tensor3d,
  tensor4d,
  tensor5d,
  tensor6d,
  tensorScatterUpdate: tensorScatterUpdate$2,
  tile: tile$3,
  topk,
  transpose: transpose$2,
  truncatedNormal: truncatedNormal$1,
  unique: unique$3,
  unsortedSegmentSum: unsortedSegmentSum$2,
  unstack,
  upperBound: upperBound$1,
  variable,
  where,
  whereAsync,
  zeros: zeros$2,
  zerosLike: zerosLike$2
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$k = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "BiasAdd":
    case "AddV2":
    case "Add":
      return [n.add(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "AddN":
      return [n.addN(getParamValue("tensors", r, e, t))];
    case "FloorMod":
    case "Mod":
      return [n.mod(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "Mul":
      return [n.mul(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "RealDiv":
    case "Div":
      return [n.div(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "DivNoNan":
      return [n.divNoNan(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "FloorDiv":
      return [n.floorDiv(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "Sub":
      return [n.sub(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "Minimum":
      return [n.minimum(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "Maximum":
      return [n.maximum(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "Pow":
      return [n.pow(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "SquaredDifference":
      return [n.squaredDifference(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$j = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "Abs":
    case "ComplexAbs":
      return [n.abs(getParamValue("x", r, e, t))];
    case "Acos":
      return [n.acos(getParamValue("x", r, e, t))];
    case "Acosh":
      return [n.acosh(getParamValue("x", r, e, t))];
    case "Asin":
      return [n.asin(getParamValue("x", r, e, t))];
    case "Asinh":
      return [n.asinh(getParamValue("x", r, e, t))];
    case "Atan":
      return [n.atan(getParamValue("x", r, e, t))];
    case "Atan2":
      return [n.atan2(getParamValue("x", r, e, t), getParamValue("y", r, e, t))];
    case "Atanh":
      return [n.atanh(getParamValue("x", r, e, t))];
    case "Ceil":
      return [n.ceil(getParamValue("x", r, e, t))];
    case "Complex":
      return [n.complex(getParamValue("real", r, e, t), getParamValue("imag", r, e, t))];
    case "Cos":
      return [n.cos(getParamValue("x", r, e, t))];
    case "Cosh":
      return [n.cosh(getParamValue("x", r, e, t))];
    case "Elu":
      return [n.elu(getParamValue("x", r, e, t))];
    case "Erf":
      return [n.erf(getParamValue("x", r, e, t))];
    case "Exp":
      return [n.exp(getParamValue("x", r, e, t))];
    case "Expm1":
      return [n.expm1(getParamValue("x", r, e, t))];
    case "Floor":
      return [n.floor(getParamValue("x", r, e, t))];
    case "Log":
      return [n.log(getParamValue("x", r, e, t))];
    case "Log1p":
      return [n.log1p(getParamValue("x", r, e, t))];
    case "Imag":
      return [n.imag(getParamValue("x", r, e, t))];
    case "Neg":
      return [n.neg(getParamValue("x", r, e, t))];
    case "Reciprocal":
      return [n.reciprocal(getParamValue("x", r, e, t))];
    case "Real":
      return [n.real(getParamValue("x", r, e, t))];
    case "Relu":
      return [n.relu(getParamValue("x", r, e, t))];
    case "Round":
      return [n.round(getParamValue("x", r, e, t))];
    case "Selu":
      return [n.selu(getParamValue("x", r, e, t))];
    case "Sigmoid":
      return [n.sigmoid(getParamValue("x", r, e, t))];
    case "Sin":
      return [n.sin(getParamValue("x", r, e, t))];
    case "Sign":
      return [n.sign(getParamValue("x", r, e, t))];
    case "Sinh":
      return [n.sinh(getParamValue("x", r, e, t))];
    case "Softplus":
      return [n.softplus(getParamValue("x", r, e, t))];
    case "Sqrt":
      return [n.sqrt(getParamValue("x", r, e, t))];
    case "Square":
      return [n.square(getParamValue("x", r, e, t))];
    case "Tanh":
      return [n.tanh(getParamValue("x", r, e, t))];
    case "Tan":
      return [n.tan(getParamValue("x", r, e, t))];
    case "ClipByValue":
      return [n.clipByValue(getParamValue("x", r, e, t), getParamValue("clipValueMin", r, e, t), getParamValue("clipValueMax", r, e, t))];
    case "Relu6":
      return [n.relu6(getParamValue("x", r, e, t))];
    case "Rsqrt":
      return [n.rsqrt(getTensor(r.inputNames[0], e, t))];
    case "LeakyRelu":
      return [n.leakyRelu(getParamValue("x", r, e, t), getParamValue("alpha", r, e, t))];
    case "Prelu":
      return [n.prelu(getParamValue("x", r, e, t), getParamValue("alpha", r, e, t))];
    case "IsNan":
      return [n.isNaN(getTensor(r.inputNames[0], e, t))];
    case "IsInf":
      return [n.isInf(getTensor(r.inputNames[0], e, t))];
    case "IsFinite":
      return [n.isFinite(getTensor(r.inputNames[0], e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function assertShapesMatchAllowUndefinedSize(r, e, t = "") {
  if (!(typeof r == "number" || typeof e == "number")) {
    assert$1(r.length === e.length, () => t + ` Shapes ${r} and ${e} must match`);
    for (let n = 0; n < r.length; n++) {
      const s = r[n], a = e[n];
      assert$1(s < 0 || a < 0 || s === a, () => t + ` Shapes ${r} and ${e} must match`);
    }
  }
}
function fullDefinedShape(r) {
  return !(typeof r == "number" || r.some((e) => e < 0));
}
function inferElementShape(r, e, t) {
  let n = mergeElementShape(r, t);
  const s = !fullDefinedShape(n);
  if (s && e.length === 0)
    throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${n}`);
  if (s && e.forEach((a) => {
    n = mergeElementShape(a.shape, n);
  }), !fullDefinedShape(n))
    throw new Error(`Non-fully-defined elementShape: ${n}`);
  return n;
}
function mergeElementShape(r, e) {
  if (typeof r == "number")
    return e;
  if (typeof e == "number")
    return r;
  if (r.length !== e.length)
    throw new Error(`Incompatible ranks during merge: ${r} vs. ${e}`);
  const t = [];
  for (let n = 0; n < r.length; ++n) {
    const s = r[n], a = e[n];
    if (s >= 0 && a >= 0 && s !== a)
      throw new Error(`Incompatible shape during merge: ${r} vs. ${e}`);
    t[n] = s >= 0 ? s : a;
  }
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TensorArray {
  constructor(e, t, n, s, a, o, u) {
    this.name = e, this.dtype = t, this.maxSize = n, this.elementShape = s, this.identicalElementShapes = a, this.dynamicSize = o, this.clearAfterRead = u, this.tensors = [], this.closed_ = !1, this.idTensor = scalar(0), keep(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  /**
   * Dispose the tensors and idTensor and mark the TensoryArray as closed.
   */
  clearAndClose(e) {
    this.tensors.forEach((t) => {
      (e == null || !e.has(t.tensor.id)) && t.tensor.dispose();
    }), this.tensors = [], this.closed_ = !0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  /**
   * Read the value at location index in the TensorArray.
   * @param index Number the index to read from.
   */
  read(e) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || e >= this.size())
      throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);
    const t = this.tensors[e];
    if (t.cleared)
      throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
    return this.clearAfterRead && (t.cleared = !0), t.read = !0, t.tensor;
  }
  /**
   * Helper method to read multiple tensors from the specified indices.
   */
  readMany(e) {
    return e.map((t) => this.read(t));
  }
  /**
   * Write value into the index of the TensorArray.
   * @param index number the index to write to.
   * @param tensor
   */
  write(e, t) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || !this.dynamicSize && e >= this.maxSize)
      throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);
    const n = this.tensors[e] || {};
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = t.shape), assertShapesMatchAllowUndefinedSize(this.elementShape, t.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${e}.`), n.read)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);
    if (n.written)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);
    n.tensor = t, keep(t), n.written = !0, this.tensors[e] = n;
  }
  /**
   * Helper method to write multiple tensors to the specified indices.
   */
  writeMany(e, t) {
    if (e.length !== t.length)
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);
    e.forEach((n, s) => this.write(n, t[s]));
  }
  /**
   * Return selected values in the TensorArray as a packed Tensor. All of
   * selected values must have been written and their shapes must all match.
   * @param [indices] number[] Optional. Taking values in [0, max_value). If the
   *    TensorArray is not dynamic, max_value=size(). If not specified returns
   *    all tensors in the original order.
   * @param [dtype]
   */
  gather(e, t) {
    if (t && t !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);
    if (e)
      e = e.slice(0, this.size());
    else {
      e = [];
      for (let s = 0; s < this.size(); s++)
        e.push(s);
    }
    if (e.length === 0)
      return tensor([], [0].concat(this.elementShape));
    const n = this.readMany(e);
    return assertShapesMatchAllowUndefinedSize(this.elementShape, n[0].shape, "TensorArray shape mismatch: "), stack(n, 0);
  }
  /**
   * Return the values in the TensorArray as a concatenated Tensor.
   */
  concat(e) {
    if (e && e !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);
    if (this.size() === 0)
      return tensor([], [0].concat(this.elementShape));
    const t = [];
    for (let s = 0; s < this.size(); s++)
      t.push(s);
    const n = this.readMany(t);
    return assertShapesMatchAllowUndefinedSize(this.elementShape, n[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`), concat$2(n, 0);
  }
  /**
   * Scatter the values of a Tensor in specific indices of a TensorArray.
   * @param indices number[] values in [0, max_value). If the
   *    TensorArray is not dynamic, max_value=size().
   * @param tensor Tensor input tensor.
   */
  scatter(e, t) {
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    if (e.length !== t.shape[0])
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);
    const n = Math.max(...e);
    if (!this.dynamicSize && n >= this.maxSize)
      throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);
    this.writeMany(e, unstack(t, 0));
  }
  /**
   * Split the values of a Tensor into the TensorArray.
   * @param length number[] with the lengths to use when splitting value along
   *    its first dimension.
   * @param tensor Tensor, the tensor to split.
   */
  split(e, t) {
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    let n = 0;
    const s = e.map((l) => (n += l, n));
    if (n !== t.shape[0])
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${t.shape}`);
    if (!this.dynamicSize && e.length !== this.maxSize)
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);
    const a = n === 0 ? 0 : t.size / n, o = [];
    tidy(() => {
      t = reshape$3(t, [1, n, a]);
      for (let l = 0; l < e.length; ++l) {
        const c = [0, l === 0 ? 0 : s[l - 1], 0], h = [1, e[l], a];
        o[l] = reshape$3(slice$2(t, c, h), this.elementShape);
      }
      return o;
    });
    const u = [];
    for (let l = 0; l < e.length; l++)
      u[l] = l;
    this.writeMany(u, o);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TensorList {
  get id() {
    return this.idTensor.id;
  }
  /**
   *
   * @param tensors list of tensors
   * @param elementShape shape of each tensor, this can be a single number (any
   * shape is allowed) or partial shape (dim = -1).
   * @param elementDtype data type of each tensor
   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1
   *   meaning that the size of `tensors` is unbounded.
   */
  constructor(e, t, n, s = -1) {
    this.tensors = e, this.elementShape = t, this.elementDtype = n, e != null && e.forEach((a) => {
      if (n !== a.dtype)
        throw new Error(`Invalid data types; op elements ${n}, but list elements ${a.dtype}`);
      assertShapesMatchAllowUndefinedSize(t, a.shape, "TensorList shape mismatch: "), keep(a);
    }), this.idTensor = scalar(0), this.maxNumElements = s, keep(this.idTensor);
  }
  /**
   * Get a new TensorList containing a copy of the underlying tensor container.
   */
  copy() {
    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);
  }
  /**
   * Dispose the tensors and idTensor and clear the tensor list.
   */
  clearAndClose(e) {
    this.tensors.forEach((t) => {
      (e == null || !e.has(t.id)) && t.dispose();
    }), this.tensors.length = 0, this.idTensor.dispose();
  }
  /**
   * The size of the tensors in the tensor list.
   */
  size() {
    return this.tensors.length;
  }
  /**
   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)
   * tf.Tensor.
   * @param elementShape shape of each tensor
   * @param elementDtype data type of each tensor
   * @param numElements the number of elements to stack
   */
  stack(e, t, n = -1) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    if (n !== -1 && this.tensors.length !== n)
      throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);
    assertShapesMatchAllowUndefinedSize(e, this.elementShape, "TensorList shape mismatch: ");
    const s = inferElementShape(this.elementShape, this.tensors, e);
    return tidy(() => {
      const a = this.tensors.map((o) => reshape$3(o, s));
      return stack(a, 0);
    });
  }
  /**
   * Pop a tensor from the end of the list.
   * @param elementShape shape of the tensor
   * @param elementDtype data type of the tensor
   */
  popBack(e, t) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    if (this.size() === 0)
      throw new Error("Trying to pop from an empty list.");
    const n = inferElementShape(this.elementShape, this.tensors, e), s = this.tensors.pop();
    return s.kept = !1, assertShapesMatchAllowUndefinedSize(s.shape, e, "TensorList shape mismatch: "), reshape$3(s, n);
  }
  /**
   * Push a tensor to the end of the list.
   * @param tensor Tensor to be pushed.
   */
  pushBack(e) {
    if (e.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);
    if (assertShapesMatchAllowUndefinedSize(e.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size())
      throw new Error("Trying to push element into a full list.");
    keep(e), this.tensors.push(e);
  }
  /**
   * Update the size of the list.
   * @param size the new size of the list.
   */
  resize(e) {
    if (e < 0)
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);
    if (this.maxNumElements !== -1 && e > this.maxNumElements)
      throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);
    const t = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);
    t.tensors.length = e;
    for (let n = 0; n < Math.min(this.tensors.length, e); ++n)
      t.tensors[n] = this.tensors[n];
    return t;
  }
  /**
   * Retrieve the element at the provided index
   * @param elementShape shape of the tensor
   * @param elementDtype dtype of the tensor
   * @param elementIndex index of the tensor
   */
  getItem(e, t, n) {
    if (n !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);
    if (e < 0 || e > this.tensors.length)
      throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);
    if (this.tensors[e] == null)
      throw new Error(`element at index ${e} is null.`);
    assertShapesMatchAllowUndefinedSize(this.tensors[e].shape, t, "TensorList shape mismatch: ");
    const s = inferElementShape(this.elementShape, this.tensors, t);
    return reshape$3(this.tensors[e], s);
  }
  /**
   * Set the tensor at the index
   * @param elementIndex index of the tensor
   * @param tensor the tensor to be inserted into the list
   */
  setItem(e, t) {
    if (t.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);
    if (e < 0 || this.maxNumElements !== -1 && e >= this.maxNumElements)
      throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);
    assertShapesMatchAllowUndefinedSize(this.elementShape, t.shape, "TensorList shape mismatch: "), keep(t), this.tensors[e] != null && (this.tensors[e].kept = !1), this.tensors[e] = t;
  }
  /**
   * Return selected values in the TensorList as a stacked Tensor. All of
   * selected values must have been written and their shapes must all match.
   * @param indices indices of tensors to gather
   * @param elementDtype output tensor dtype
   * @param elementShape output tensor element shape
   */
  gather(e, t, n) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    assertShapesMatchAllowUndefinedSize(this.elementShape, n, "TensorList shape mismatch: "), e = e.slice(0, this.size());
    const s = inferElementShape(this.elementShape, this.tensors, n);
    return e.length === 0 ? tensor([], [0].concat(s)) : tidy(() => {
      const a = e.map((o) => reshape$3(this.tensors[o], s));
      return stack(a, 0);
    });
  }
  /**
   * Return the values in the TensorList as a concatenated Tensor.
   * @param elementDtype output tensor dtype
   * @param elementShape output tensor element shape
   */
  concat(e, t) {
    if (e && e !== this.elementDtype)
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);
    assertShapesMatchAllowUndefinedSize(this.elementShape, t, "TensorList shape mismatch: ");
    const n = inferElementShape(this.elementShape, this.tensors, t);
    return this.size() === 0 ? tensor([], [0].concat(n)) : tidy(() => {
      const s = this.tensors.map((a) => reshape$3(a, n));
      return concat$2(s, 0);
    });
  }
}
function fromTensor(r, e, t) {
  const n = r.dtype;
  if (r.shape.length < 1)
    throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);
  if (r.dtype !== t)
    throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${t}`);
  const s = r.shape.slice(1);
  assertShapesMatchAllowUndefinedSize(s, e, "TensorList shape mismatch: ");
  const a = unstack(r);
  return new TensorList(a, e, n);
}
function reserve(r, e, t, n) {
  return new TensorList([], r, e, n);
}
function scatter(r, e, t, n) {
  if (e.length !== r.shape[0])
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${r.shape[0]}`);
  const s = Math.max(...e);
  if (n != null && n !== -1 && s >= n)
    throw new Error(`Max index must be < array size (${s}  vs. ${n})`);
  const a = new TensorList([], t, r.dtype, n), o = unstack(r, 0);
  return e.forEach((u, l) => {
    a.setItem(u, o[l]);
  }), a;
}
function split$1(r, e, t) {
  let n = 0;
  const s = e.map((c) => (n += c, n));
  if (n !== r.shape[0])
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${r.shape}`);
  const a = r.shape.slice(1), o = mergeElementShape(a, t), u = n === 0 ? 0 : r.size / n, l = tidy(() => {
    const c = [];
    r = reshape$3(r, [1, n, u]);
    for (let h = 0; h < e.length; ++h) {
      const m = [0, h === 0 ? 0 : s[h - 1], 0], g = [1, e[h], u];
      c[h] = reshape$3(slice$2(r, m, g), o);
    }
    return r.dispose(), c;
  }), f = new TensorList([], t, r.dtype, e.length);
  for (let c = 0; c < l.length; c++)
    f.setItem(c, l[c]);
  return f;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$i = async (r, e, t) => {
  switch (r.op) {
    case "If":
    case "StatelessIf": {
      const n = getParamValue("thenBranch", r, e, t), s = getParamValue("elseBranch", r, e, t), a = getParamValue("cond", r, e, t), o = getParamValue("args", r, e, t);
      return (await a.data())[0] ? t.functionMap[n].executeFunctionAsync(o, t.tensorArrayMap, t.tensorListMap) : t.functionMap[s].executeFunctionAsync(o, t.tensorArrayMap, t.tensorListMap);
    }
    case "While":
    case "StatelessWhile": {
      const n = getParamValue("body", r, e, t), s = getParamValue("cond", r, e, t), a = getParamValue("args", r, e, t), o = await t.functionMap[s].executeFunctionAsync(a, t.tensorArrayMap, t.tensorListMap), u = a.map((c) => c.id);
      let l = await o[0].data();
      o.forEach((c) => {
        !c.kept && u.indexOf(c.id) === -1 && c.dispose();
      });
      let f = a;
      for (; l[0]; ) {
        const c = f;
        f = await t.functionMap[n].executeFunctionAsync(f, t.tensorArrayMap, t.tensorListMap);
        const h = f.map((m) => m.id);
        c.forEach((m) => {
          !m.kept && u.indexOf(m.id) === -1 && h.indexOf(m.id) === -1 && m.dispose();
        });
        const d = await t.functionMap[s].executeFunctionAsync(f, t.tensorArrayMap, t.tensorListMap);
        l = await d[0].data(), d.forEach((m) => {
          !m.kept && u.indexOf(m.id) === -1 && h.indexOf(m.id) === -1 && m.dispose();
        });
      }
      return f;
    }
    case "LoopCond": {
      const n = getParamValue("pred", r, e, t);
      return [cloneTensor(n)];
    }
    case "Switch": {
      const n = getParamValue("pred", r, e, t);
      let s = getParamValue("data", r, e, t);
      return s.kept || (s = cloneTensor(s)), (await n.data())[0] ? [void 0, s] : [s, void 0];
    }
    case "Merge": {
      const n = r.inputNames.find((s) => getTensor(s, e, t) !== void 0);
      if (n) {
        const s = getTensor(n, e, t);
        return [cloneTensor(s)];
      }
      return;
    }
    case "Enter": {
      const n = getParamValue("frameName", r, e, t), s = getParamValue("tensor", r, e, t);
      return t.enterFrame(n), [cloneTensor(s)];
    }
    case "Exit": {
      const n = getParamValue("tensor", r, e, t);
      return t.exitFrame(), [cloneTensor(n)];
    }
    case "NextIteration": {
      const n = getParamValue("tensor", r, e, t);
      return t.nextIteration(), [cloneTensor(n)];
    }
    case "TensorArrayV3": {
      const n = getParamValue("size", r, e, t), s = getParamValue("dtype", r, e, t), a = getParamValue("elementShape", r, e, t), o = getParamValue("dynamicSize", r, e, t), u = getParamValue("clearAfterRead", r, e, t), l = getParamValue("identicalElementShapes", r, e, t), f = getParamValue("name", r, e, t), c = new TensorArray(f, s, n, a, l, o, u);
      return t.addTensorArray(c), [c.idTensor, scalar(1)];
    }
    case "TensorArrayWriteV3": {
      const n = getParamValue("tensorArrayId", r, e, t), s = getParamValue("index", r, e, t), a = getParamValue("tensor", r, e, t), o = t.getTensorArray(n.id);
      return o.write(s, a), [o.idTensor];
    }
    case "TensorArrayReadV3": {
      const n = getParamValue("tensorArrayId", r, e, t), s = getParamValue("index", r, e, t);
      return [t.getTensorArray(n.id).read(s)];
    }
    case "TensorArrayGatherV3": {
      const n = getParamValue("tensorArrayId", r, e, t), s = getParamValue("indices", r, e, t), a = getParamValue("dtype", r, e, t);
      return [t.getTensorArray(n.id).gather(s, a)];
    }
    case "TensorArrayScatterV3": {
      const n = getParamValue("tensorArrayId", r, e, t), s = getParamValue("indices", r, e, t), a = getParamValue("tensor", r, e, t), o = t.getTensorArray(n.id);
      return o.scatter(s, a), [o.idTensor];
    }
    case "TensorArrayConcatV3": {
      const n = getParamValue("tensorArrayId", r, e, t), s = t.getTensorArray(n.id), a = getParamValue("dtype", r, e, t);
      return [s.concat(a)];
    }
    case "TensorArraySplitV3": {
      const n = getParamValue("tensorArrayId", r, e, t), s = getParamValue("tensor", r, e, t), a = getParamValue("lengths", r, e, t), o = t.getTensorArray(n.id);
      return o.split(a, s), [o.idTensor];
    }
    case "TensorArraySizeV3": {
      const n = getParamValue("tensorArrayId", r, e, t), s = t.getTensorArray(n.id);
      return [scalar(s.size(), "int32")];
    }
    case "TensorArrayCloseV3": {
      const n = getParamValue("tensorArrayId", r, e, t), s = t.getTensorArray(n.id);
      return s.clearAndClose(), [s.idTensor];
    }
    case "TensorListSetItem": {
      const n = getParamValue("tensorListId", r, e, t), s = getParamValue("index", r, e, t), a = getParamValue("tensor", r, e, t), o = t.getTensorList(n.id);
      return o.setItem(s, a), [o.idTensor];
    }
    case "TensorListGetItem": {
      const n = getParamValue("tensorListId", r, e, t), s = getParamValue("index", r, e, t), a = getParamValue("elementShape", r, e, t), o = getParamValue("elementDType", r, e, t);
      return [t.getTensorList(n.id).getItem(s, a, o)];
    }
    case "TensorListScatterV2":
    case "TensorListScatter": {
      const n = getParamValue("indices", r, e, t), s = getParamValue("tensor", r, e, t), a = getParamValue("elementShape", r, e, t), o = getParamValue("numElements", r, e, t), u = scatter(s, n, a, o);
      return t.addTensorList(u), [u.idTensor];
    }
    case "TensorListReserve":
    case "EmptyTensorList": {
      const n = getParamValue("elementShape", r, e, t), s = getParamValue("elementDType", r, e, t);
      let a;
      r.op === "TensorListReserve" ? a = "numElements" : a = "maxNumElements";
      const o = getParamValue(a, r, e, t), u = r.op === "TensorListReserve" ? -1 : o, l = reserve(n, s, o, u);
      return t.addTensorList(l), [l.idTensor];
    }
    case "TensorListGather": {
      const n = getParamValue("tensorListId", r, e, t), s = getParamValue("indices", r, e, t), a = getParamValue("elementShape", r, e, t), o = getParamValue("elementDType", r, e, t);
      return [t.getTensorList(n.id).gather(s, o, a)];
    }
    case "TensorListStack": {
      const n = getParamValue("tensorListId", r, e, t), s = getParamValue("elementShape", r, e, t), a = getParamValue("elementDType", r, e, t), o = getParamValue("numElements", r, e, t);
      return [t.getTensorList(n.id).stack(s, a, o)];
    }
    case "TensorListFromTensor": {
      const n = getParamValue("tensor", r, e, t), s = getParamValue("elementShape", r, e, t), a = getParamValue("elementDType", r, e, t), o = fromTensor(n, s, a);
      return t.addTensorList(o), [o.idTensor];
    }
    case "TensorListConcat":
    case "TensorListConcatV2": {
      const n = getParamValue("tensorListId", r, e, t), s = t.getTensorList(n.id), a = getParamValue("dtype", r, e, t), o = getParamValue("elementShape", r, e, t);
      return [s.concat(a, o)];
    }
    case "TensorListPushBack": {
      const n = getParamValue("tensorListId", r, e, t), s = getParamValue("tensor", r, e, t), a = t.getTensorList(n.id);
      return a.pushBack(s), [a.idTensor];
    }
    case "TensorListPopBack": {
      const n = getParamValue("tensorListId", r, e, t), s = getParamValue("elementShape", r, e, t), a = getParamValue("elementDType", r, e, t);
      return [t.getTensorList(n.id).popBack(s, a)];
    }
    case "TensorListSplit": {
      const n = getParamValue("tensor", r, e, t), s = getParamValue("elementShape", r, e, t), a = getParamValue("lengths", r, e, t), o = split$1(n, a, s);
      return t.addTensorList(o), [o.idTensor];
    }
    case "TensorListLength": {
      const n = getParamValue("tensorListId", r, e, t), s = t.getTensorList(n.id);
      return [scalar(s.size(), "int32")];
    }
    case "TensorListResize": {
      const n = getParamValue("tensorListId", r, e, t), s = getParamValue("size", r, e, t), o = t.getTensorList(n.id).resize(s);
      return t.addTensorList(o), [o.idTensor];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fusedConvAndDepthWiseParams(r, e, t) {
  const [n, s] = getParamValue("fusedOps", r, e, t), a = n === "biasadd", o = !a, u = s === "prelu", l = n === "fusedbatchnorm", f = getParamValue("numArgs", r, e, t);
  if (a) {
    if (u && f !== 2)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
    if (!u && a && f !== 1)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
  }
  if (l)
    throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
  const c = getParamValue("strides", r, e, t), h = getPadding(r, e, t), d = getParamValue("dataFormat", r, e, t).toUpperCase(), m = getParamValue("dilations", r, e, t);
  let [g, y] = getParamValue("args", r, e, t);
  o && (y = g, g = void 0);
  const b = getParamValue("leakyreluAlpha", r, e, t);
  return {
    stride: c,
    pad: h,
    dataFormat: d,
    dilations: m,
    biasArg: g,
    preluArg: y,
    activationFunc: s,
    leakyreluAlpha: b
  };
}
const executeOp$h = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "Conv1D": {
      const s = getParamValue("stride", r, e, t), a = getParamValue("pad", r, e, t), o = getParamValue("dataFormat", r, e, t).toUpperCase(), u = getParamValue("dilation", r, e, t);
      return [n.conv1d(getParamValue("x", r, e, t), getParamValue("filter", r, e, t), s, a, o, u)];
    }
    case "Conv2D": {
      const s = getParamValue("strides", r, e, t), a = getPadding(r, e, t), o = getParamValue("dataFormat", r, e, t).toUpperCase(), u = getParamValue("dilations", r, e, t);
      return [n.conv2d(getParamValue("x", r, e, t), getParamValue("filter", r, e, t), [s[1], s[2]], a, o, [u[1], u[2]])];
    }
    case "_FusedConv2D": {
      const { stride: s, pad: a, dataFormat: o, dilations: u, biasArg: l, preluArg: f, activationFunc: c, leakyreluAlpha: h } = fusedConvAndDepthWiseParams(r, e, t);
      return [n.fused.conv2d({
        x: getParamValue("x", r, e, t),
        filter: getParamValue("filter", r, e, t),
        strides: [s[1], s[2]],
        pad: a,
        dataFormat: o,
        dilations: [u[1], u[2]],
        bias: l,
        activation: c,
        preluActivationWeights: f,
        leakyreluAlpha: h
      })];
    }
    case "FusedDepthwiseConv2dNative": {
      const { stride: s, pad: a, dataFormat: o, dilations: u, biasArg: l, preluArg: f, activationFunc: c, leakyreluAlpha: h } = fusedConvAndDepthWiseParams(r, e, t);
      return [n.fused.depthwiseConv2d({
        x: getParamValue("x", r, e, t),
        filter: getParamValue("filter", r, e, t),
        strides: [s[1], s[2]],
        pad: a,
        dataFormat: o,
        dilations: [u[1], u[2]],
        bias: l,
        activation: c,
        preluActivationWeights: f,
        leakyreluAlpha: h
      })];
    }
    case "Conv2DBackpropInput":
    case "Conv2dTranspose": {
      const s = getParamValue("outputShape", r, e, t), a = getParamValue("strides", r, e, t), o = getPadding(r, e, t);
      return [n.conv2dTranspose(getParamValue("x", r, e, t), getParamValue("filter", r, e, t), s, [a[1], a[2]], o)];
    }
    case "DepthwiseConv2dNative":
    case "DepthwiseConv2d": {
      const s = getParamValue("strides", r, e, t), a = getPadding(r, e, t), o = getParamValue("dilations", r, e, t), u = getParamValue("dataFormat", r, e, t).toUpperCase();
      return [n.depthwiseConv2d(getParamValue("input", r, e, t), getParamValue("filter", r, e, t), [s[1], s[2]], a, u, [o[1], o[2]])];
    }
    case "Conv3D": {
      const s = getParamValue("strides", r, e, t), a = getParamValue("pad", r, e, t), o = getParamValue("dataFormat", r, e, t).toUpperCase(), u = getParamValue("dilations", r, e, t);
      return [n.conv3d(getParamValue("x", r, e, t), getParamValue("filter", r, e, t), [s[1], s[2], s[3]], a, o, [u[1], u[2], u[3]])];
    }
    case "AvgPool": {
      const s = getParamValue("strides", r, e, t), a = getParamValue("pad", r, e, t), o = getParamValue("kernelSize", r, e, t);
      return [n.avgPool(getParamValue("x", r, e, t), [o[1], o[2]], [s[1], s[2]], a)];
    }
    case "MaxPool": {
      const s = getParamValue("strides", r, e, t), a = getParamValue("pad", r, e, t), o = getParamValue("kernelSize", r, e, t);
      return [n.maxPool(getParamValue("x", r, e, t), [o[1], o[2]], [s[1], s[2]], a)];
    }
    case "MaxPoolWithArgmax": {
      const s = getParamValue("strides", r, e, t), a = getParamValue("pad", r, e, t), o = getParamValue("kernelSize", r, e, t), u = getParamValue("includeBatchInIndex", r, e, t), { result: l, indexes: f } = n.maxPoolWithArgmax(getParamValue("x", r, e, t), [o[1], o[2]], [s[1], s[2]], a, u);
      return [l, f];
    }
    case "AvgPool3D": {
      const s = getParamValue("strides", r, e, t), a = getParamValue("pad", r, e, t), o = getParamValue("kernelSize", r, e, t);
      return [n.avgPool3d(getParamValue("x", r, e, t), [o[1], o[2], o[3]], [s[1], s[2], s[3]], a)];
    }
    case "MaxPool3D": {
      const s = getParamValue("strides", r, e, t), a = getParamValue("pad", r, e, t), o = getParamValue("kernelSize", r, e, t);
      return [n.maxPool3d(getParamValue("x", r, e, t), [o[1], o[2], o[3]], [s[1], s[2], s[3]], a)];
    }
    case "Dilation2D": {
      const s = getParamValue("strides", r, e, t), a = getParamValue("pad", r, e, t), o = getParamValue("dilations", r, e, t), u = s[1], l = s[2], f = o[1], c = o[2];
      return [n.dilation2d(
        getParamValue("x", r, e, t),
        getParamValue("filter", r, e, t),
        [u, l],
        a,
        [f, c],
        "NHWC"
        /* dataFormat */
      )];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$g = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "Fill": {
      const s = getParamValue("shape", r, e, t), a = getParamValue("dtype", r, e, t), o = getParamValue("value", r, e, t);
      return [n.fill(s, o, a)];
    }
    case "LinSpace": {
      const s = getParamValue("start", r, e, t), a = getParamValue("stop", r, e, t), o = getParamValue("num", r, e, t);
      return [n.linspace(s, a, o)];
    }
    case "Multinomial": {
      const s = getParamValue("logits", r, e, t), a = getParamValue("numSamples", r, e, t), o = getParamValue("seed", r, e, t);
      return [n.multinomial(s, a, o)];
    }
    case "OneHot": {
      const s = getParamValue("indices", r, e, t), a = getParamValue("depth", r, e, t), o = getParamValue("onValue", r, e, t), u = getParamValue("offValue", r, e, t), l = getParamValue("dtype", r, e, t);
      return [n.oneHot(s, a, o, u, l)];
    }
    case "Ones":
      return [n.ones(getParamValue("shape", r, e, t), getParamValue("dtype", r, e, t))];
    case "OnesLike":
      return [n.onesLike(getParamValue("x", r, e, t))];
    case "RandomStandardNormal":
      return [n.randomStandardNormal(getParamValue("shape", r, e, t), getParamValue("dtype", r, e, t), getParamValue("seed", r, e, t))];
    case "RandomUniform":
      return [n.randomUniform(
        // tslint:disable-next-line:no-any
        getParamValue("shape", r, e, t),
        getParamValue("minval", r, e, t),
        getParamValue("maxval", r, e, t),
        getParamValue("dtype", r, e, t)
      )];
    case "RandomUniformInt":
      return [n.randomUniformInt(getParamValue("shape", r, e, t), getParamValue("minval", r, e, t), getParamValue("maxval", r, e, t), getParamValue("seed", r, e, t))];
    case "Range": {
      const s = getParamValue("start", r, e, t), a = getParamValue("stop", r, e, t), o = getParamValue("step", r, e, t);
      return [n.range(s, a, o, getParamValue("dtype", r, e, t))];
    }
    case "TruncatedNormal": {
      const s = getParamValue("shape", r, e, t), a = getParamValue("mean", r, e, t), o = getParamValue("stdDev", r, e, t), u = getParamValue("seed", r, e, t);
      return [n.truncatedNormal(s, a, o, getParamValue("dtype", r, e, t), u)];
    }
    case "Zeros":
      return [n.zeros(getParamValue("shape", r, e, t), getParamValue("dtype", r, e, t))];
    case "ZerosLike":
      return [n.zerosLike(getParamValue("x", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nmsParams(r, e, t) {
  const n = getParamValue("boxes", r, e, t), s = getParamValue("scores", r, e, t), a = getParamValue("maxOutputSize", r, e, t), o = getParamValue("iouThreshold", r, e, t), u = getParamValue("scoreThreshold", r, e, t), l = getParamValue("softNmsSigma", r, e, t);
  return {
    boxes: n,
    scores: s,
    maxOutputSize: a,
    iouThreshold: o,
    scoreThreshold: u,
    softNmsSigma: l
  };
}
const executeOp$f = async (r, e, t, n, s = tfOps) => {
  switch (r.op) {
    case "NonMaxSuppressionV5": {
      const { boxes: a, scores: o, maxOutputSize: u, iouThreshold: l, scoreThreshold: f, softNmsSigma: c } = nmsParams(r, e, t), h = await s.image.nonMaxSuppressionWithScoreAsync(a, o, u, l, f, c);
      return [h.selectedIndices, h.selectedScores];
    }
    case "NonMaxSuppressionV4": {
      const { boxes: a, scores: o, maxOutputSize: u, iouThreshold: l, scoreThreshold: f } = nmsParams(r, e, t), c = getParamValue("padToMaxOutputSize", r, e, t), h = await s.image.nonMaxSuppressionPaddedAsync(a, o, u, l, f, c);
      return [h.selectedIndices, h.validOutputs];
    }
    case "NonMaxSuppressionV3":
    case "NonMaxSuppressionV2": {
      const { boxes: a, scores: o, maxOutputSize: u, iouThreshold: l, scoreThreshold: f } = nmsParams(r, e, t);
      return [await s.image.nonMaxSuppressionAsync(a, o, u, l, f)];
    }
    case "Where": {
      const a = s.cast(getParamValue("condition", r, e, t), "bool"), o = [await s.whereAsync(a)];
      return a.dispose(), o;
    }
    case "ListDiff":
      return s.setdiff1dAsync(getParamValue("x", r, e, t), getParamValue("y", r, e, t));
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$e = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "LowerBound": {
      const s = getParamValue("sortedSequence", r, e, t), a = getParamValue("values", r, e, t);
      return [n.lowerBound(s, a)];
    }
    case "TopKV2": {
      const s = getParamValue("x", r, e, t), a = getParamValue("k", r, e, t), o = getParamValue("sorted", r, e, t), u = n.topk(s, a, o);
      return [u.values, u.indices];
    }
    case "UpperBound": {
      const s = getParamValue("sortedSequence", r, e, t), a = getParamValue("values", r, e, t);
      return [n.upperBound(s, a)];
    }
    case "Unique": {
      const s = getParamValue("x", r, e, t), a = n.unique(s);
      return [a.values, a.indices];
    }
    case "UniqueV2": {
      const s = getParamValue("x", r, e, t), a = getParamValue("axis", r, e, t), o = n.unique(s, a);
      return [o.values, o.indices];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$d = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "Const":
      return e[r.name];
    case "PlaceholderWithDefault":
      const s = getParamValue("default", r, e, t);
      return [getTensor(r.name, e, t) || s];
    case "Placeholder":
      return [getTensor(r.name, e, t)];
    case "Identity":
    case "StopGradient":
    case "FakeQuantWithMinMaxVars": {
      const c = getParamValue("x", r, e, t);
      return [cloneTensor(c)];
    }
    case "IdentityN":
      return getParamValue("x", r, e, t).map((c) => cloneTensor(c));
    case "Snapshot":
      const a = getParamValue("x", r, e, t);
      return [cloneTensor(a)];
    case "Shape":
      return [n.tensor1d(getParamValue("x", r, e, t).shape, "int32")];
    case "ShapeN":
      return getParamValue("x", r, e, t).map((c) => n.tensor1d(c.shape));
    case "Size":
      return [n.scalar(getParamValue("x", r, e, t).size, "int32")];
    case "Rank":
      return [n.scalar(getParamValue("x", r, e, t).rank, "int32")];
    case "NoOp":
      return [n.scalar(1)];
    case "Print":
      const o = getParamValue("x", r, e, t), u = getParamValue("data", r, e, t), l = getParamValue("message", r, e, t), f = getParamValue("summarize", r, e, t);
      console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(l);
      for (let c = 0; c < u.length; c++)
        console.log(Array.prototype.slice.call(u[c].dataSync()).slice(0, f));
      return [o];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class HashTable {
  get id() {
    return this.handle.id;
  }
  /**
   * Constructor of HashTable. Creates a hash table.
   *
   * @param keyDType `dtype` of the table keys.
   * @param valueDType `dtype` of the table values.
   */
  constructor(e, t) {
    this.keyDType = e, this.valueDType = t, this.handle = scalar(0), this.tensorMap = /* @__PURE__ */ new Map(), keep(this.handle);
  }
  /**
   * Dispose the tensors and handle and clear the hashtable.
   */
  clearAndClose() {
    this.tensorMap.forEach((e) => e.dispose()), this.tensorMap.clear(), this.handle.dispose();
  }
  /**
   * The number of items in the hash table.
   */
  size() {
    return this.tensorMap.size;
  }
  /**
   * The number of items in the hash table as a rank-0 tensor.
   */
  tensorSize() {
    return scalar(this.size(), "int32");
  }
  /**
   * Replaces the contents of the table with the specified keys and values.
   * @param keys Keys to store in the hashtable.
   * @param values Values to store in the hashtable.
   */
  async import(e, t) {
    this.checkKeyAndValueTensor(e, t);
    const n = await e.data();
    return this.tensorMap.forEach((s) => s.dispose()), this.tensorMap.clear(), tidy(() => {
      const s = unstack(t), a = n.length, o = s.length;
      assert$1(a === o, () => `The number of elements doesn't match, keys has ${a} elements, the values has ${o} elements.`);
      for (let u = 0; u < a; u++) {
        const l = n[u], f = s[u];
        keep(f), this.tensorMap.set(l, f);
      }
      return this.handle;
    });
  }
  /**
   * Looks up keys in a hash table, outputs the corresponding values.
   *
   * Performs batch lookups, for every element in the key tensor, `find`
   * stacks the corresponding value into the return tensor.
   *
   * If an element is not present in the table, the given `defaultValue` is
   * used.
   *
   * @param keys Keys to look up. Must have the same type as the keys of the
   *     table.
   * @param defaultValue The scalar `defaultValue` is the value output for keys
   *     not present in the table. It must also be of the same type as the
   *     table values.
   */
  async find(e, t) {
    this.checkKeyAndValueTensor(e, t);
    const n = await e.data();
    return tidy(() => {
      const s = [];
      for (let a = 0; a < n.length; a++) {
        const o = n[a], u = this.findWithDefault(o, t);
        s.push(u);
      }
      return stack(s);
    });
  }
  // tslint:disable-next-line: no-any
  findWithDefault(e, t) {
    const n = this.tensorMap.get(e);
    return n ?? t;
  }
  checkKeyAndValueTensor(e, t) {
    if (e.dtype !== this.keyDType)
      throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);
    if (t.dtype !== this.valueDType)
      throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$c = async (r, e, t, n) => {
  switch (r.op) {
    case "HashTable":
    case "HashTableV2": {
      const s = n.getHashTableHandleByName(r.name);
      if (s != null)
        return [s];
      {
        const a = getParamValue("keyDType", r, e, t), o = getParamValue("valueDType", r, e, t), u = new HashTable(a, o);
        return n.addHashTable(r.name, u), [u.handle];
      }
    }
    case "InitializeTable":
    case "InitializeTableV2":
    case "LookupTableImport":
    case "LookupTableImportV2": {
      const s = getParamValue("tableHandle", r, e, t, n), a = getParamValue("keys", r, e, t), o = getParamValue("values", r, e, t);
      return [await n.getHashTableById(s.id).import(a, o)];
    }
    case "LookupTableFind":
    case "LookupTableFindV2": {
      const s = getParamValue("tableHandle", r, e, t, n), a = getParamValue("keys", r, e, t), o = getParamValue("defaultValue", r, e, t);
      return [await n.getHashTableById(s.id).find(a, o)];
    }
    case "LookupTableSize":
    case "LookupTableSizeV2": {
      const s = getParamValue("tableHandle", r, e, t, n);
      return [n.getHashTableById(s.id).tensorSize()];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$b = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "ResizeBilinear": {
      const s = getParamValue("images", r, e, t), a = getParamValue("size", r, e, t), o = getParamValue("alignCorners", r, e, t), u = getParamValue("halfPixelCenters", r, e, t);
      return [n.image.resizeBilinear(s, [a[0], a[1]], o, u)];
    }
    case "ResizeNearestNeighbor": {
      const s = getParamValue("images", r, e, t), a = getParamValue("size", r, e, t), o = getParamValue("alignCorners", r, e, t), u = getParamValue("halfPixelCenters", r, e, t);
      return [n.image.resizeNearestNeighbor(s, [a[0], a[1]], o, u)];
    }
    case "CropAndResize": {
      const s = getParamValue("image", r, e, t), a = getParamValue("boxes", r, e, t), o = getParamValue("boxInd", r, e, t), u = getParamValue("cropSize", r, e, t), l = getParamValue("method", r, e, t), f = getParamValue("extrapolationValue", r, e, t);
      return [n.image.cropAndResize(s, a, o, u, l, f)];
    }
    case "ImageProjectiveTransformV3": {
      const s = getParamValue("images", r, e, t), a = getParamValue("transforms", r, e, t), o = getParamValue("outputShape", r, e, t), u = getParamValue("fillValue", r, e, t), l = getParamValue("interpolation", r, e, t), f = getParamValue("fillMode", r, e, t);
      return [n.image.transform(s, a, l.toLowerCase(), f.toLowerCase(), u, o)];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$a = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "Equal":
      return [n.equal(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "NotEqual":
      return [n.notEqual(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "Greater":
      return [n.greater(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "GreaterEqual":
      return [n.greaterEqual(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "Less":
      return [n.less(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "LessEqual":
      return [n.lessEqual(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "LogicalAnd":
      return [n.logicalAnd(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "LogicalNot":
      return [n.logicalNot(getParamValue("a", r, e, t))];
    case "LogicalOr":
      return [n.logicalOr(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "Select":
    case "SelectV2":
      return [n.where(getParamValue("condition", r, e, t), getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    case "BitwiseAnd":
      return [n.bitwiseAnd(getParamValue("a", r, e, t), getParamValue("b", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$9 = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "BatchMatMul":
    case "BatchMatMulV2":
    case "MatMul":
      return [n.matMul(getParamValue("a", r, e, t), getParamValue("b", r, e, t), getParamValue("transposeA", r, e, t), getParamValue("transposeB", r, e, t))];
    case "Einsum":
      return [n.einsum(getParamValue("equation", r, e, t), ...getParamValue("tensors", r, e, t))];
    case "Transpose":
      return [n.transpose(getParamValue("x", r, e, t), getParamValue("perm", r, e, t))];
    case "_FusedMatMul":
      const [s, a] = getParamValue("fusedOps", r, e, t), o = s === "biasadd", u = a === "prelu", l = getParamValue("numArgs", r, e, t), f = getParamValue("leakyreluAlpha", r, e, t);
      if (o) {
        if (u && l !== 2)
          throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
        if (!u && l !== 1)
          throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
      }
      const [c, h] = getParamValue("args", r, e, t);
      return [n.fused.matMul({
        a: getParamValue("a", r, e, t),
        b: getParamValue("b", r, e, t),
        transposeA: getParamValue("transposeA", r, e, t),
        transposeB: getParamValue("transposeB", r, e, t),
        bias: c,
        activation: a,
        preluActivationWeights: h,
        leakyreluAlpha: f
      })];
    case "MatrixBandPart":
      return [n.linalg.bandPart(getParamValue("a", r, e, t), getParamValue("numLower", r, e, t), getParamValue("numUpper", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$8 = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "EuclideanNorm":
      return [n.euclideanNorm(getParamValue("x", r, e, t), getParamValue("axis", r, e, t), getParamValue("keepDims", r, e, t))];
    case "FusedBatchNorm":
    case "FusedBatchNormV2":
      return [n.batchNorm(getParamValue("x", r, e, t), getParamValue("mean", r, e, t), getParamValue("variance", r, e, t), getParamValue("offset", r, e, t), getParamValue("scale", r, e, t), getParamValue("epsilon", r, e, t))];
    case "FusedBatchNormV3":
      return [n.batchNorm(getParamValue("x", r, e, t), getParamValue("mean", r, e, t), getParamValue("variance", r, e, t), getParamValue("offset", r, e, t), getParamValue("scale", r, e, t), getParamValue("epsilon", r, e, t))];
    case "LRN":
      return [n.localResponseNormalization(getParamValue("x", r, e, t), getParamValue("radius", r, e, t), getParamValue("bias", r, e, t), getParamValue("alpha", r, e, t), getParamValue("beta", r, e, t))];
    case "Softmax":
      return [n.softmax(getParamValue("x", r, e, t))];
    case "LogSoftmax":
      return [n.logSoftmax(getParamValue("x", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$7 = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "RaggedGather": {
      const { outputNestedSplits: s, outputDenseValues: a } = n.raggedGather(getParamValue("paramsNestedSplits", r, e, t), getParamValue("paramsDenseValues", r, e, t), getParamValue("indices", r, e, t), getParamValue("outputRaggedRank", r, e, t));
      return s.concat(a);
    }
    case "RaggedRange": {
      const { rtNestedSplits: s, rtDenseValues: a } = n.raggedRange(getParamValue("starts", r, e, t), getParamValue("limits", r, e, t), getParamValue("splits", r, e, t));
      return [s, a];
    }
    case "RaggedTensorToTensor":
      return [n.raggedTensorToTensor(getParamValue("shape", r, e, t), getParamValue("values", r, e, t), getParamValue("defaultValue", r, e, t), getParamValue("rowPartitionTensors", r, e, t), getParamValue("rowPartitionTypes", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$6 = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "Max": {
      const u = getParamValue("axis", r, e, t), l = getParamValue("keepDims", r, e, t);
      return [n.max(getParamValue("x", r, e, t), u, l)];
    }
    case "Mean": {
      const u = getParamValue("axis", r, e, t), l = getParamValue("keepDims", r, e, t);
      return [n.mean(getParamValue("x", r, e, t), u, l)];
    }
    case "Min": {
      const u = getParamValue("axis", r, e, t), l = getParamValue("keepDims", r, e, t);
      return [n.min(getParamValue("x", r, e, t), u, l)];
    }
    case "Sum": {
      const u = getParamValue("axis", r, e, t), l = getParamValue("keepDims", r, e, t);
      return [n.sum(getParamValue("x", r, e, t), u, l)];
    }
    case "All": {
      const u = getParamValue("axis", r, e, t), l = getParamValue("keepDims", r, e, t);
      return [n.all(getParamValue("x", r, e, t), u, l)];
    }
    case "Any": {
      const u = getParamValue("axis", r, e, t), l = getParamValue("keepDims", r, e, t);
      return [n.any(getParamValue("x", r, e, t), u, l)];
    }
    case "ArgMax": {
      const u = getParamValue("axis", r, e, t);
      return [n.argMax(getParamValue("x", r, e, t), u)];
    }
    case "ArgMin": {
      const u = getParamValue("axis", r, e, t);
      return [n.argMin(getParamValue("x", r, e, t), u)];
    }
    case "Prod": {
      const u = getParamValue("axis", r, e, t), l = getParamValue("keepDims", r, e, t);
      return [n.prod(getParamValue("x", r, e, t), u, l)];
    }
    case "Cumprod": {
      const u = getParamValue("axis", r, e, t), l = getParamValue("exclusive", r, e, t), f = getParamValue("reverse", r, e, t);
      return [n.cumprod(getParamValue("x", r, e, t), u, l, f)];
    }
    case "Cumsum": {
      const u = getParamValue("axis", r, e, t), l = getParamValue("exclusive", r, e, t), f = getParamValue("reverse", r, e, t);
      return [n.cumsum(getParamValue("x", r, e, t), u, l, f)];
    }
    case "Bincount":
      const s = getParamValue("x", r, e, t), a = getParamValue("weights", r, e, t), o = getParamValue("size", r, e, t);
      return [n.bincount(s, a, o)];
    case "DenseBincount": {
      const u = getParamValue("x", r, e, t), l = getParamValue("weights", r, e, t), f = getParamValue("size", r, e, t), c = getParamValue("binaryOutput", r, e, t);
      return [n.denseBincount(u, l, f, c)];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$5 = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "ConcatV2":
    case "Concat": {
      const s = getParamValue("n", r, e, t), a = getParamValue("axis", r, e, t);
      let o = getParamValue("tensors", r, e, t);
      return o = o.slice(0, s), [n.concat(o, a)];
    }
    case "Gather": {
      const s = getParamValue("x", r, e, t), a = getParamValue("indices", r, e, t);
      return [n.gather(s, n.cast(a, "int32"), 0)];
    }
    case "GatherV2": {
      const s = getParamValue("axis", r, e, t), a = getParamValue("batchDims", r, e, t), o = getParamValue("x", r, e, t), u = getParamValue("indices", r, e, t);
      return [n.gather(o, n.cast(u, "int32"), s, a)];
    }
    case "Reverse": {
      const s = getParamValue("dims", r, e, t), a = [];
      for (let u = 0; u < s.length; u++)
        s[u] && a.push(u);
      const o = getParamValue("x", r, e, t);
      return [n.reverse(o, a)];
    }
    case "ReverseV2": {
      const s = getParamValue("axis", r, e, t), a = getParamValue("x", r, e, t);
      return [n.reverse(a, s)];
    }
    case "Slice": {
      const s = getParamValue("begin", r, e, t), a = getParamValue("size", r, e, t);
      return [n.slice(getParamValue("x", r, e, t), s, a)];
    }
    case "StridedSlice": {
      const s = getParamValue("begin", r, e, t), a = getParamValue("end", r, e, t), o = getParamValue("strides", r, e, t), u = getParamValue("beginMask", r, e, t), l = getParamValue("endMask", r, e, t), f = getParamValue("ellipsisMask", r, e, t), c = getParamValue("newAxisMask", r, e, t), h = getParamValue("shrinkAxisMask", r, e, t), d = getParamValue("x", r, e, t);
      return [n.stridedSlice(d, s, a, o, u, l, f, c, h)];
    }
    case "Pack":
      return tidy(() => {
        const s = getParamValue("axis", r, e, t), a = getParamValue("tensors", r, e, t), o = a[0].shape, u = n.squeeze(a[0]).shape, l = a.map((f) => {
          const c = arraysEqual(f.shape, o);
          if (!c && !arraysEqual(n.squeeze(f).shape, u))
            throw new Error("the input tensors shape does not match");
          return c ? f : n.reshape(f, o);
        });
        return [n.stack(l, s)];
      });
    case "Unpack": {
      const s = getParamValue("axis", r, e, t), a = getParamValue("tensor", r, e, t);
      return n.unstack(a, s);
    }
    case "Tile": {
      const s = getParamValue("reps", r, e, t);
      return [n.tile(getParamValue("x", r, e, t), s)];
    }
    case "Split":
    case "SplitV": {
      const s = getParamValue("axis", r, e, t), a = getParamValue("numOrSizeSplits", r, e, t), o = getParamValue("x", r, e, t);
      return n.split(o, a, s);
    }
    case "ScatterNd": {
      const s = getParamValue("indices", r, e, t), a = getParamValue("values", r, e, t), o = getParamValue("shape", r, e, t);
      return [n.scatterND(s, a, o)];
    }
    case "GatherNd": {
      const s = getParamValue("x", r, e, t), a = getParamValue("indices", r, e, t);
      return [n.gatherND(s, a)];
    }
    case "SparseToDense": {
      const s = getParamValue("sparseIndices", r, e, t), a = getParamValue("outputShape", r, e, t), o = getParamValue("sparseValues", r, e, t), u = getParamValue("defaultValue", r, e, t);
      return [n.sparseToDense(s, o, a, o.dtype === u.dtype ? u : n.cast(u, o.dtype))];
    }
    case "TensorScatterUpdate": {
      const s = getParamValue("indices", r, e, t), a = getParamValue("values", r, e, t), o = getParamValue("tensor", r, e, t);
      return [n.tensorScatterUpdate(o, s, a)];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$4 = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "SparseFillEmptyRows": {
      const { outputIndices: s, outputValues: a, emptyRowIndicator: o, reverseIndexMap: u } = n.sparse.sparseFillEmptyRows(getParamValue("indices", r, e, t), getParamValue("values", r, e, t), getParamValue("denseShape", r, e, t), getParamValue("defaultValue", r, e, t));
      return [
        s,
        a,
        o,
        u
      ];
    }
    case "SparseReshape": {
      const { outputIndices: s, outputShape: a } = n.sparse.sparseReshape(getParamValue("inputIndices", r, e, t), getParamValue("inputShape", r, e, t), getParamValue("newShape", r, e, t));
      return [s, a];
    }
    case "SparseSegmentMean":
      return [n.sparse.sparseSegmentMean(getParamValue("data", r, e, t), getParamValue("indices", r, e, t), getParamValue("segmentIds", r, e, t))];
    case "SparseSegmentSum":
      return [n.sparse.sparseSegmentSum(getParamValue("data", r, e, t), getParamValue("indices", r, e, t), getParamValue("segmentIds", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$3 = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "FFT":
      return [n.fft(getParamValue("x", r, e, t))];
    case "IFFT":
      return [n.ifft(getParamValue("x", r, e, t))];
    case "RFFT":
      return [n.rfft(getParamValue("x", r, e, t))];
    case "IRFFT":
      return [n.irfft(getParamValue("x", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$2 = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "StaticRegexReplace":
      return [n.string.staticRegexReplace(getParamValue("input", r, e, t), getParamValue("pattern", r, e, t), getParamValue("rewrite", r, e, t), getParamValue("replaceGlobal", r, e, t))];
    case "StringNGrams": {
      const { nGrams: s, nGramsSplits: a } = n.string.stringNGrams(getParamValue("data", r, e, t), getParamValue("dataSplits", r, e, t), getParamValue("separator", r, e, t), getParamValue("nGramWidths", r, e, t), getParamValue("leftPad", r, e, t), getParamValue("rightPad", r, e, t), getParamValue("padWidth", r, e, t), getParamValue("preserveShortSequences", r, e, t));
      return [s, a];
    }
    case "StringSplit": {
      const { indices: s, values: a, shape: o } = n.string.stringSplit(getParamValue("input", r, e, t), getParamValue("delimiter", r, e, t), getParamValue("skipEmpty", r, e, t));
      return [s, a, o];
    }
    case "StringToHashBucketFast":
      return [n.string.stringToHashBucketFast(getParamValue("input", r, e, t), getParamValue("numBuckets", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp$1 = (r, e, t, n = tfOps) => {
  switch (r.op) {
    case "Cast":
      return [n.cast(getParamValue("x", r, e, t), getParamValue("dtype", r, e, t))];
    case "ExpandDims": {
      const s = getParamValue("axis", r, e, t);
      return [n.expandDims(getParamValue("x", r, e, t), s)];
    }
    case "Squeeze": {
      const s = getParamValue("axis", r, e, t);
      return [n.squeeze(getParamValue("x", r, e, t), s)];
    }
    case "Reshape":
      return [n.reshape(getParamValue("x", r, e, t), getParamValue("shape", r, e, t))];
    case "EnsureShape":
      return [n.ensureShape(getParamValue("x", r, e, t), getParamValue("shape", r, e, t))];
    case "MirrorPad":
      return [n.mirrorPad(getParamValue("x", r, e, t), getParamValue("padding", r, e, t), getParamValue("mode", r, e, t))];
    case "PadV2":
    case "Pad":
      return [n.pad(getParamValue("x", r, e, t), getParamValue("padding", r, e, t), getParamValue("constantValue", r, e, t))];
    case "SpaceToBatchND": {
      const s = getParamValue("blockShape", r, e, t), a = getParamValue("paddings", r, e, t);
      return [n.spaceToBatchND(getParamValue("x", r, e, t), s, a)];
    }
    case "BatchToSpaceND": {
      const s = getParamValue("blockShape", r, e, t), a = getParamValue("crops", r, e, t);
      return [n.batchToSpaceND(getParamValue("x", r, e, t), s, a)];
    }
    case "DepthToSpace": {
      const s = getParamValue("blockSize", r, e, t), a = getParamValue("dataFormat", r, e, t).toUpperCase();
      return [n.depthToSpace(getParamValue("x", r, e, t), s, a)];
    }
    case "BroadcastTo":
      return [n.broadcastTo(getParamValue("x", r, e, t), getParamValue("shape", r, e, t))];
    case "BroadcastArgs":
      return [n.broadcastArgs(getParamValue("s0", r, e, t), getParamValue("s1", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function executeOp(r, e, t, n, s = tidy) {
  const a = ((o, u, l) => {
    switch (o.category) {
      case "arithmetic":
        return s(() => executeOp$k(o, u, l));
      case "basic_math":
        return s(() => executeOp$j(o, u, l));
      case "control":
        return executeOp$i(o, u, l);
      case "convolution":
        return s(() => executeOp$h(o, u, l));
      case "creation":
        return s(() => executeOp$g(o, u, l));
      case "dynamic":
        return executeOp$f(o, u, l);
      case "evaluation":
        return s(() => executeOp$e(o, u, l));
      case "image":
        return s(() => executeOp$b(o, u, l));
      case "graph":
        return s(() => executeOp$d(o, u, l));
      case "logical":
        return s(() => executeOp$a(o, u, l));
      case "matrices":
        return s(() => executeOp$9(o, u, l));
      case "normalization":
        return s(() => executeOp$8(o, u, l));
      case "ragged":
        return s(() => executeOp$7(o, u, l));
      case "reduction":
        return s(() => executeOp$6(o, u, l));
      case "slice_join":
        return s(() => executeOp$5(o, u, l));
      case "sparse":
        return s(() => executeOp$4(o, u, l));
      case "spectral":
        return s(() => executeOp$3(o, u, l));
      case "string":
        return s(() => executeOp$2(o, u, l));
      case "transformation":
        return s(() => executeOp$1(o, u, l));
      case "hash_table":
        return executeOp$c(o, u, l, n);
      case "custom":
        const f = getRegisteredOp(o.op);
        if (f && f.customExecutor)
          return f.customExecutor(new NodeValueImpl(o, u, l));
        throw TypeError(`Custom op ${o.op} is not registered.`);
      default:
        throw TypeError(`Unknown op '${o.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
    }
  })(r, e, t);
  return isPromise(a) ? a.then((o) => [].concat(o)) : [].concat(a);
}
class ExecutionContext {
  constructor(e = {}, t = {}, n = {}, s = {}, a) {
    this.weightMap = e, this.tensorArrayMap = t, this.tensorListMap = n, this.functionMap = s, this.parseNodeNameCache = a, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
  }
  newFrame(e, t) {
    return { id: e, frameName: t, iterationId: 0 };
  }
  /**
   * Set the current context
   * @param contexts: ExecutionContextInfo[] the current path of execution
   * frames
   */
  set currentContext(e) {
    this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  /**
   * Returns the current context in string format.
   */
  get currentContextId() {
    return this._currentContextIds[0];
  }
  /**
   * Returns the current context and all parent contexts in string format.
   * This allow access to the nodes in the current and parent frames.
   */
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    const e = [];
    for (let t = 0; t < this.contexts.length - 1; t++) {
      const n = this.contexts.slice(0, this.contexts.length - t);
      e.push(this.contextIdforContexts(n));
    }
    e.push(""), this._currentContextIds = e;
  }
  contextIdforContexts(e) {
    return e ? e.map((t) => t.id === 0 && t.iterationId === 0 ? "" : `${t.frameName}-${t.iterationId}`).join("/") : "";
  }
  /**
   * Enter a new frame, a new context is pushed on the current context list.
   * @param frameId new frame id
   */
  enterFrame(e) {
    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  /**
   * Exit the current frame, the last context is removed from the current
   * context list.
   */
  exitFrame() {
    if (this.contexts && this.contexts.length > 1)
      this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    else
      throw new Error("Cannot exit frame, the context is empty");
  }
  /**
   * Enter the next iteration of a loop, the iteration id of last context is
   * increased.
   */
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice(), this.lastId++;
      const e = Object.assign({}, this.contexts[this.contexts.length - 1]);
      e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else
      throw new Error("Cannot increase frame iteration, the context is empty");
  }
  getWeight(e) {
    return this.weightMap[e];
  }
  addTensorArray(e) {
    this.tensorArrayMap[e.id] = e;
  }
  getTensorArray(e) {
    return this.tensorArrayMap[e];
  }
  addTensorList(e) {
    this.tensorListMap[e.id] = e;
  }
  getTensorList(e) {
    return this.tensorListMap[e];
  }
  dispose(e) {
    for (const t in this.tensorArrayMap)
      this.tensorArrayMap[t].clearAndClose(e);
    for (const t in this.tensorListMap)
      this.tensorListMap[t].clearAndClose(e);
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getExecutionSubgraph(r, e, t, n) {
  const s = /* @__PURE__ */ new Set(), a = [];
  let o = null, u = null;
  const l = /* @__PURE__ */ new Set(), f = new Set(Object.keys(r).map((d) => parseNodeName(d)[0]));
  n = n || [];
  const c = new Set(n.map((d) => parseNodeName(d.name)[0])), h = [...e];
  for (; h.length > 0; ) {
    const d = h.pop();
    if ((isControlFlow(d) || isDynamicShape(d) || isHashTable(d)) && o == null && (o = d, u = o.children.map((m) => m.name).filter((m) => s.has(m))), s.add(d.name), t[d.name] == null && !f.has(d.name) && !c.has(d.name)) {
      if (d.inputs.length === 0) {
        a.push(d.name);
        continue;
      }
      d.inputs.forEach((m) => {
        l.has(m.name) || (l.add(m.name), h.push(m));
      });
    }
  }
  return { inputs: r, outputs: e, usedNodes: s, missingInputs: a, dynamicNode: o, syncInputs: u };
}
function getNodesInTopologicalOrder(r, e) {
  const { usedNodes: t, inputs: n } = e, s = Object.keys(n).map((b) => parseNodeName(b)[0]).map((b) => r.nodes[b]), a = r.initNodes || [], o = (b) => t.has(typeof b == "string" ? b : b.name);
  function u(b) {
    return [...new Map(b.map((v) => [v.name, v])).values()];
  }
  const l = u([
    ...s,
    ...r.weights,
    ...a
  ]).filter(o), f = u([
    ...l,
    ...Object.values(r.nodes)
  ]).filter(o), c = new Map(f.map((b) => [b.name, b])), h = {};
  for (const b of f) {
    h[b.name] = h[b.name] || 0;
    for (const v of b.children)
      o(v) || (h[v.name] = Number.POSITIVE_INFINITY), h[v.name] = (h[v.name] || 0) + 1;
  }
  const d = Object.entries(h).filter(([, b]) => b === 0).map(([b]) => b), m = [...d];
  for (; d.length > 0; ) {
    const b = d.pop(), v = c.get(b);
    for (const w of v.children.filter(o))
      --h[w.name] === 0 && (m.push(w.name), d.push(w.name));
  }
  const g = m.map((b) => c.get(b)), y = filterPredefinedReachableNodes(g, l);
  return validateNodesExecutionOrder(y, l), y;
}
function filterPredefinedReachableNodes(r, e) {
  const t = new Map(r.map((o) => [o.name, o])), n = e.map((o) => o.name), s = new Set(n);
  for (; n.length > 0; ) {
    const o = n.pop(), u = t.get(o);
    for (const l of u.children)
      !t.has(l.name) || s.has(l.name) || (s.add(l.name), n.push(l.name));
  }
  return r.filter((o) => s.has(o.name));
}
class NodesExecutionOrderError extends Error {
  constructor(e) {
    super(`NodesExecutionOrderError: ${e}`);
  }
}
function validateNodesExecutionOrder(r, e) {
  const t = new Map(r.map((u, l) => [u.name, l])), n = new Set(e.map((u) => u.name)), s = (u) => n.has(typeof u == "string" ? u : u.name), a = new Set(r.map((u) => u.name)), o = (u) => a.has(typeof u == "string" ? u : u.name);
  for (const u of r) {
    for (const l of u.children.filter(o)) {
      if (!t.has(l.name))
        throw new NodesExecutionOrderError(`Child ${l.name} of node ${u.name} is unreachable.`);
      if (t.get(u.name) > t.get(l.name))
        throw new NodesExecutionOrderError(`Node ${u.name} is scheduled to run after its child ${l.name}.`);
    }
    if (!s(u))
      for (const l of u.inputs) {
        if (!t.has(l.name))
          throw new NodesExecutionOrderError(`Input ${l.name} of node ${u.name} is unreachable.`);
        if (t.get(l.name) > t.get(u.name))
          throw new NodesExecutionOrderError(`Node ${u.name} is scheduled to run before its input ${l.name}.`);
      }
  }
}
function getNodeLiveUntilMap(r) {
  const e = new Map(r.map((u, l) => [u.name, l])), t = Number.MAX_SAFE_INTEGER, n = r.map((u, l) => isControlFlow(u) ? t : l), s = (u) => {
    const l = n[e.get(u.name)];
    return l ?? -1;
  }, a = r.map((u, l) => u.children.map(s).reduce((f, c) => Math.max(f, c), n[l])), o = /* @__PURE__ */ new Map();
  for (let u = 0; u < r.length; ++u) {
    const l = a[u];
    if (l === t)
      continue;
    const f = r[u], c = r[l];
    o.has(c.name) || o.set(c.name, []), o.get(c.name).push(f);
  }
  return o;
}
const CONTROL_FLOW_OPS = /* @__PURE__ */ new Set([
  "Switch",
  "Merge",
  "Enter",
  "Exit",
  "NextIteration",
  "StatelessIf",
  "StatelessWhile",
  "if",
  "While"
]), DYNAMIC_SHAPE_OPS = /* @__PURE__ */ new Set([
  "NonMaxSuppressionV2",
  "NonMaxSuppressionV3",
  "NonMaxSuppressionV5",
  "Where"
]), HASH_TABLE_OPS = /* @__PURE__ */ new Set([
  "HashTable",
  "HashTableV2",
  "LookupTableImport",
  "LookupTableImportV2",
  "LookupTableFind",
  "LookupTableFindV2",
  "LookupTableSize",
  "LookupTableSizeV2"
]);
function isControlFlow(r) {
  return CONTROL_FLOW_OPS.has(r.op);
}
function isDynamicShape(r) {
  return DYNAMIC_SHAPE_OPS.has(r.op);
}
function isHashTable(r) {
  return HASH_TABLE_OPS.has(r.op);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GraphExecutor {
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(e) {
    const t = Object.keys(e).map((n) => e[n].map((s) => s.id));
    this._weightIds = [].concat(...t), this._weightMap = e;
  }
  /**
   * Set `ResourceManager` shared by executors of a model.
   * @param resourceManager: `ResourceManager` of the `GraphModel`.
   */
  set resourceManager(e) {
    this._resourceManager = e;
  }
  get inputs() {
    return this._inputs.map((e) => ({
      name: e.name,
      shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,
      dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0
    }));
  }
  get outputs() {
    return this._outputs.map((e) => ({
      name: e.name,
      shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,
      dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0
    }));
  }
  get inputNodes() {
    return this._inputs.map((e) => e.signatureKey || e.name);
  }
  get outputNodes() {
    return this._outputs.map((e) => {
      const t = e.signatureKey || e.name;
      return e.defaultOutput ? `${t}:${e.defaultOutput}` : t;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((e, t) => (e[t] = this._functions[t].signature, e), {});
  }
  /**
   *
   * @param graph Graph the model or function graph to be executed.
   * @param parent When building function exector you need to set the parent
   * executor. Since the weights and function executor maps are set at parant
   * level, that function executor can access the function maps and weight maps
   * through the parent.
   */
  constructor(e, t) {
    this.graph = e, this.parent = t, this.compiledMap = /* @__PURE__ */ new Map(), this.parseNodeNameCache = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPARATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.keepIntermediateTensors = !1, this._outputs = e.outputs, this._inputs = e.inputs, this._initNodes = e.initNodes, this._signature = e.signature, this._functions = e.functions, e.functions != null && Object.keys(e.functions).forEach((n) => {
      this._functionExecutorMap[n] = new GraphExecutor(e.functions[n], this);
    });
  }
  getCompilationKey(e, t) {
    const n = e.map((a) => a.name).sort(), s = t.map((a) => a.name).sort();
    return n.join(this.SEPARATOR) + "--" + s.join(this.SEPARATOR);
  }
  /**
   * Compiles the inference graph and returns the minimal set of nodes that are
   * required for execution, in the correct execution order.
   * @returns {Object} compilation The compile result.
   * @returns {Node[]} compilation.orderedNodes Nodes in the correct execution
   *     order.
   * @returns {Map<string, Node[]>} compilation.nodeLiveUntilMap A map from node
   *     to disposable nodes after its execution. That is, for a node `x`,
   *     `nodeLiveUntilMap[x]` indicates all nodes whose intermediate
   *     tensors should be disposed after `x` is executed.
   */
  compile(e, t) {
    const n = getExecutionSubgraph(e, t, this.weightMap, this._initNodes), { missingInputs: s, dynamicNode: a, syncInputs: o } = n;
    if (a != null)
      throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${o}]`);
    if (s.length > 0) {
      const f = t.map((h) => h.name), c = Object.keys(e);
      throw new Error(`Cannot compute the outputs [${f}] from the provided inputs [${c}]. Missing the following inputs: [${s}]`);
    }
    const u = getNodesInTopologicalOrder(this.graph, n), l = getNodeLiveUntilMap(u);
    return { orderedNodes: u, nodeLiveUntilMap: l };
  }
  cloneAndKeepTensor(e) {
    if (e == null)
      return null;
    const t = e.clone();
    return keep(t), t;
  }
  cloneTensorList(e) {
    return e ? e.map((n) => this.cloneAndKeepTensor(n)) : null;
  }
  cloneTensorMap(e) {
    return Object.fromEntries(Object.entries(e).map(([t, n]) => [t, this.cloneTensorList(n)]));
  }
  /**
   * Executes the inference for given input tensors.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs Optional. output node name from the Tensorflow model, if
   * no outputs are specified, the default outputs of the model would be used.
   * You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   */
  execute(e, t) {
    this.disposeIntermediateTensors(), e = this.mapInputs(e);
    const n = Object.keys(e).sort();
    this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t);
    const s = n.map((d) => this.graph.nodes[parseNodeName(d)[0]]), a = t.map((d) => parseNodeName(d)[0]), o = new Set(a);
    let u = a.map((d) => this.graph.nodes[d]);
    u.length === 0 && (u = this._outputs);
    const l = this.getCompilationKey(s, u);
    let f = this.compiledMap.get(l);
    f == null && (f = this.compile(e, u), this.compiledMap.set(l, f));
    try {
      this.keepIntermediateTensors = env().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (d) {
      this.keepIntermediateTensors = !1, console.warn(d.message);
    }
    const c = {}, h = {};
    return tidy(() => {
      const d = new ExecutionContext(this.weightMap, c, h, this.functionExecutorMap, this.parseNodeNameCache), m = Object.assign({}, this.weightMap);
      this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap)), Object.keys(e).forEach((v) => {
        const [w, I] = parseNodeName(v, d), T = [];
        T[I] = e[v], m[w] = T, this.keepIntermediateTensors && (this.clonedTensorsMap[w] = this.cloneTensorList(T));
      });
      const g = this.getFrozenTensorIds(m), { orderedNodes: y, nodeLiveUntilMap: b } = f;
      for (const v of y) {
        if (m[v.name])
          continue;
        const w = executeOp(v, m, d, this._resourceManager);
        if (isPromise(w))
          throw new Error(`The execution of the op '${v.op}' returned a promise. Please use model.executeAsync() instead.`);
        m[v.name] = w, this.keepIntermediateTensors && (this.clonedTensorsMap[v.name] = this.cloneTensorList(w)), this.checkTensorForDisposalWithNodeLiveUntilInfo(v, m, d, g, o, b.get(v.name));
      }
      return this.parent == null && d.dispose(g), t.map((v) => getTensor(v, m, d));
    });
  }
  getFrozenTensorIds(e) {
    const t = [].concat.apply([], Object.keys(e).map((n) => e[n]).map((n) => n.map((s) => s.id)));
    return new Set(t);
  }
  checkTensorForDisposal(e, t, n, s, a, o, u) {
    if (!(isControlFlow(t) || o.has(e))) {
      for (const l of n[e])
        l != null && (u[l.id] = (u[l.id] || 0) + t.children.length);
      for (const l of t.inputs) {
        if (isControlFlow(l))
          continue;
        const f = getTensorsForCurrentContext(l.name, n, s);
        if (f != null)
          for (const c of f) {
            if (!c || c.kept || a.has(c.id))
              continue;
            const h = u[c.id];
            h === 1 ? (c.dispose(), delete u[c.id]) : h != null && u[c.id]--;
          }
      }
    }
  }
  checkTensorForDisposalWithNodeLiveUntilInfo(e, t, n, s, a, o) {
    function u(l) {
      return isControlFlow(l) || a.has(l.name);
    }
    if (!(isControlFlow(e) || o == null))
      for (const l of o) {
        if (u(l))
          continue;
        const f = getTensorsForCurrentContext(l.name, t, n);
        for (const c of f)
          !c || c.kept || s.has(c.id) || c.dispose();
      }
  }
  /**
   * Executes the inference for given input tensors in Async fashion.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs output node name from the Tensorflow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   */
  async executeAsync(e, t) {
    return this._executeAsync(e, t);
  }
  disposeIntermediateTensors() {
    this.clonedTensorsMap && (Object.values(this.clonedTensorsMap).forEach((e) => {
      for (const t of e)
        t && !t.isDisposed && t.dispose();
    }), this.clonedTensorsMap = null);
  }
  getIntermediateTensors() {
    return this.clonedTensorsMap;
  }
  /**
   * Executes the inference for given input tensors in Async fashion.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs Optional. output node name from the Tensorflow model,
   * if no outputs are specified, the default outputs of the model would be
   * used. You can inspect intermediate nodes of the model by adding them to
   * the outputs array.
   * @param isFunctionExecution Optional. Flag for executing a function.
   * @param tensorArrayMap Optional, global TensorArray map by id. Used for
   * function execution.
   * @param tensorArrayMap Optional global TensorList map by id. Used for
   * function execution.
   */
  async _executeAsync(e, t, n = !1, s = {}, a = {}) {
    this.disposeIntermediateTensors(), n || (e = this.mapInputs(e), this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t));
    try {
      this.keepIntermediateTensors = env().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (d) {
      this.keepIntermediateTensors = !1, console.warn(d.message);
    }
    const o = new ExecutionContext(this.weightMap, s, a, this.functionExecutorMap, this.parseNodeNameCache);
    this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap));
    const u = await this.executeWithControlFlow(e, o, t, n), l = t.map((d) => getTensor(d, u, o)), f = l.map((d) => d.id), c = Object.keys(e).map((d) => e[d].id), h = /* @__PURE__ */ new Set([...f, ...c, ...this.weightIds]);
    return Object.values(u).forEach((d) => {
      d.forEach((m) => {
        m && !m.isDisposed && !h.has(m.id) && m.dispose();
      });
    }), this.parent == null && o.dispose(h), l;
  }
  async executeFunctionAsync(e, t, n) {
    const s = e.reduce((a, o, u) => (a[this.inputs[u].name] = o, a), {});
    return this._executeAsync(s, this.outputNodes, !0, t, n);
  }
  /**
   * When there are control flow nodes in the graph, the graph execution use
   * ExecutionContext to keep track of the frames and loop iterators.
   * @param inputs placeholder tensors for the graph.
   * @param context the execution context object for current execution.
   * @param outputNames Optional. output node name from the Tensorflow model,
   * if no outputs are specified, the default outputs of the model would be
   * used. You can inspect intermediate nodes of the model by adding them to
   * the outputs array.
   * @param isFunctionExecution Flag for executing a function.
   */
  async executeWithControlFlow(e, t, n, s) {
    const a = Object.keys(e), o = a.map((T) => this.graph.nodes[parseNodeName(T)[0]]), u = n.map((T) => parseNodeName(T)[0]), l = new Set(u);
    let f = u.map((T) => this.graph.nodes[T]);
    f.length === 0 && (f = this._outputs);
    const { usedNodes: c, missingInputs: h, dynamicNode: d, syncInputs: m } = getExecutionSubgraph(e, f, this.weightMap, this._initNodes), g = [
      ...o,
      ...this.graph.weights,
      ...this._initNodes || []
    ].map((T) => ({ node: T, contexts: t.currentContext })), y = Object.assign({}, this.weightMap);
    Object.keys(e).forEach((T) => {
      const [_, F] = parseNodeName(T), O = [];
      O[F] = e[T], y[_] = O;
    });
    const b = {}, v = this.getFrozenTensorIds(y), w = {};
    for (; g.length > 0; ) {
      const T = this.processStack(o, g, t, y, w, v, l, b, c);
      await Promise.all(T);
    }
    d == null && !s && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
    const I = f.filter((T) => !isControlFlow(T) && !getTensor(T.name, y, t)).map((T) => T.name);
    if (I.length > 0) {
      let T = "";
      throw d != null && (T = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${m}]`), new Error(`Cannot compute the outputs [${I}] from the provided inputs [${a}]. Consider providing the following inputs: [${h}]. ${T}`);
    }
    return y;
  }
  processStack(e, t, n, s, a, o, u, l, f) {
    const c = [];
    for (; t.length > 0; ) {
      const h = t.pop();
      n.currentContext = h.contexts;
      let d = "";
      if (h.node.op === "Enter" && getParamValue("isConstant", h.node, s, n) && ([d] = getNodeNameAndIndex(h.node.name, n)), s[h.node.name] == null) {
        const m = executeOp(h.node, s, n, this._resourceManager);
        d || ([d] = getNodeNameAndIndex(h.node.name, n));
        const g = n.currentContext;
        isPromise(m) ? c.push(m.then((y) => (s[d] = y, this.keepIntermediateTensors && (this.clonedTensorsMap[d] = this.cloneTensorList(y)), n.currentContext = g, this.checkTensorForDisposal(d, h.node, s, n, o, u, l), this.processChildNodes(h.node, t, n, s, a, f), y))) : (s[d] = m, this.keepIntermediateTensors && (this.clonedTensorsMap[d] = this.cloneTensorList(m)), this.checkTensorForDisposal(d, h.node, s, n, o, u, l), this.processChildNodes(h.node, t, n, s, a, f));
      } else
        this.processChildNodes(h.node, t, n, s, a, f);
    }
    return c;
  }
  processChildNodes(e, t, n, s, a, o) {
    e.children.forEach((u) => {
      const [l] = getNodeNameAndIndex(u.name, n);
      a[l] || !o.has(u.name) || (u.op === "Merge" ? u.inputNames.some((f) => !!getTensor(f, s, n)) && (a[l] = !0, t.push({ contexts: n.currentContext, node: u })) : u.inputNames.every((f) => !!getTensor(f, s, n)) && (a[l] = !0, t.push({ contexts: n.currentContext, node: u })));
    });
  }
  /**
   * Releases the memory used by the weight tensors.
   */
  dispose() {
    Object.keys(this.weightMap).forEach((e) => this.weightMap[e].forEach((t) => t.dispose()));
  }
  checkInputShapeAndType(e) {
    Object.keys(e).forEach((t) => {
      const n = e[t], [s] = parseNodeName(t), a = this.graph.nodes[s];
      if (a.attrParams.shape && a.attrParams.shape.value) {
        const o = a.attrParams.shape.value, u = o.length === n.shape.length && n.shape.every((l, f) => o[f] === -1 || o[f] === l);
        assert$1(u, () => `The shape of dict['${a.name}'] provided in model.execute(dict) must be [${o}], but was [${n.shape}]`);
      }
      a.attrParams.dtype && a.attrParams.dtype.value && assert$1(n.dtype === a.attrParams.dtype.value, () => `The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`);
    });
  }
  mapInputs(e) {
    var t, n;
    const s = {};
    for (const a in e) {
      const o = (n = (t = this._signature) === null || t === void 0 ? void 0 : t.inputs) === null || n === void 0 ? void 0 : n[a];
      o != null ? s[o.name] = e[a] : s[a] = e[a];
    }
    return s;
  }
  checkInputs(e) {
    const t = Object.keys(e).filter((n) => {
      const [s] = parseNodeName(n);
      return this.graph.nodes[s] == null;
    });
    if (t.length > 0)
      throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`);
  }
  mapOutputs(e) {
    return e.map((t) => {
      var n, s;
      const a = (s = (n = this._signature) === null || n === void 0 ? void 0 : n.outputs) === null || s === void 0 ? void 0 : s[t];
      return a != null ? a.name : t;
    }, {});
  }
  checkOutputs(e) {
    e.forEach((t) => {
      const [n] = parseNodeName(t);
      if (!this.graph.nodes[n])
        throw new Error(`The output '${t}' is not found in the graph`);
    });
  }
}
class ResourceManager {
  constructor(e = {}, t = {}) {
    this.hashTableNameToHandle = e, this.hashTableMap = t;
  }
  /**
   * Register a `HashTable` in the resource manager.
   *
   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,
   * where id is the table handle tensor's id.
   *
   * @param name Op node name that creates the `HashTable`.
   * @param hashTable The `HashTable` to be added to resource manager.
   */
  addHashTable(e, t) {
    this.hashTableNameToHandle[e] = t.handle, this.hashTableMap[t.id] = t;
  }
  /**
   * Get the table handle by node name.
   * @param name Op node name that creates the `HashTable`. This name is also
   *     used in the inputs list of lookup and import `HashTable` ops.
   */
  getHashTableHandleByName(e) {
    return this.hashTableNameToHandle[e];
  }
  /**
   * Get the actual `HashTable` by its handle tensor's id.
   * @param id The id of the handle tensor.
   */
  getHashTableById(e) {
    return this.hashTableMap[e];
  }
  /**
   * Dispose `ResourceManager`, including its hashTables and tensors in them.
   */
  dispose() {
    for (const e in this.hashTableMap)
      this.hashTableMap[e].clearAndClose(), delete this.hashTableMap[e];
    for (const e in this.hashTableNameToHandle)
      this.hashTableNameToHandle[e].dispose(), delete this.hashTableNameToHandle[e];
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TFHUB_SEARCH_PARAM = "?tfjs-format=file", DEFAULT_MODEL_NAME$1 = "model.json";
class GraphModel {
  // Returns the version information for the tensorflow model GraphDef.
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  get modelStructuredOutputKeys() {
    return this.structuredOutputKeys;
  }
  /**
   * @param modelUrl url for the model, or an `io.IOHandler`.
   * @param weightManifestUrl url for the weight file generated by
   * scripts/convert.py script.
   * @param requestOption options for Request, which allows to send credentials
   * and custom headers.
   * @param onProgress Optional, progress callback function, fired periodically
   * before the load is completed.
   */
  constructor(e, t = {}, n = io) {
    this.modelUrl = e, this.loadOptions = t, this.version = "n/a", this.io = n, t == null && (this.loadOptions = {}), this.resourceManager = new ResourceManager();
  }
  findIOHandler() {
    const e = this.modelUrl;
    if (e.load != null)
      this.handler = e;
    else if (this.loadOptions.requestInit != null)
      this.handler = this.io.browserHTTPRequest(e, this.loadOptions);
    else {
      const t = this.io.getLoadHandlers(e, this.loadOptions);
      if (t.length === 0)
        t.push(this.io.browserHTTPRequest(e, this.loadOptions));
      else if (t.length > 1)
        throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);
      this.handler = t[0];
    }
  }
  /**
   * Loads the model and weight files, construct the in memory weight map and
   * compile the inference graph.
   */
  load() {
    if (this.findIOHandler(), this.handler.load == null)
      throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    const e = this.handler.load();
    return isPromise(e) ? e.then((t) => t.getWeightStream == null ? this.loadSync(t) : this.loadStreaming(t)) : this.loadSync(e);
  }
  /**
   * Synchronously construct the in memory weight map and
   * compile the inference graph.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  loadSync(e) {
    const t = this.io.decodeWeights(e.weightData, e.weightSpecs);
    return this.loadWithWeightMap(e, t);
  }
  async loadStreaming(e) {
    if (e.getWeightStream == null)
      throw new Error("Model artifacts missing streamWeights function");
    const t = await decodeWeightsStream(e.getWeightStream(), e.weightSpecs);
    return this.loadWithWeightMap(e, t);
  }
  loadWithWeightMap(e, t) {
    this.artifacts = e;
    const n = this.artifacts.modelTopology;
    let s = this.artifacts.signature;
    if (this.artifacts.userDefinedMetadata != null) {
      const a = this.artifacts.userDefinedMetadata;
      a.signature != null && (s = a.signature), a.structuredOutputKeys != null && (this.structuredOutputKeys = a.structuredOutputKeys);
    }
    if (this.signature = s, this.version = `${n.versions.producer}.${n.versions.minConsumer}`, this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(n, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(t), this.executor.resourceManager = this.resourceManager, e.modelInitializer != null && e.modelInitializer.node != null) {
      const a = OperationMapper.Instance.transformGraph(e.modelInitializer);
      this.initializer = new GraphExecutor(a), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializerSignature = e.initializerSignature;
    }
    return !0;
  }
  /**
   * Save the configuration and/or weights of the GraphModel.
   *
   * An `IOHandler` is an object that has a `save` method of the proper
   * signature defined. The `save` method manages the storing or
   * transmission of serialized data ("artifacts") that represent the
   * model's topology and weights onto or via a specific medium, such as
   * file downloads, local storage, IndexedDB in the web browser and HTTP
   * requests to a server. TensorFlow.js provides `IOHandler`
   * implementations for a number of frequently used saving mediums, such as
   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
   * for more details.
   *
   * This method also allows you to refer to certain types of `IOHandler`s
   * as URL-like string shortcuts, such as 'localstorage://' and
   * 'indexeddb://'.
   *
   * Example 1: Save `model`'s topology and weights to browser [local
   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
   * then load it back.
   *
   * ```js
   * const modelUrl =
   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
   * const model = await tf.loadGraphModel(modelUrl);
   * const zeros = tf.zeros([1, 224, 224, 3]);
   * model.predict(zeros).print();
   *
   * const saveResults = await model.save('localstorage://my-model-1');
   *
   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');
   * console.log('Prediction from loaded model:');
   * model.predict(zeros).print();
   * ```
   *
   * @param handlerOrURL An instance of `IOHandler` or a URL-like,
   * scheme-based string shortcut for `IOHandler`.
   * @param config Options for saving the model.
   * @returns A `Promise` of `SaveResult`, which summarizes the result of
   * the saving, such as byte sizes of the saved artifacts for the model's
   *   topology and weight values.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  async save(e, t) {
    if (typeof e == "string") {
      const n = this.io.getSaveHandlers(e);
      if (n.length === 0)
        throw new Error(`Cannot find any save handlers for URL '${e}'`);
      if (n.length > 1)
        throw new Error(`Found more than one (${n.length}) save handlers for URL '${e}'`);
      e = n[0];
    }
    if (e.save == null)
      throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    return e.save(this.artifacts);
  }
  addStructuredOutputNames(e) {
    if (this.structuredOutputKeys) {
      const t = e instanceof Tensor ? [e] : e, n = {};
      return t.forEach((s, a) => n[this.structuredOutputKeys[a]] = s), n;
    }
    return e;
  }
  /**
   * Execute the inference for the input tensors.
   *
   * @param input The input tensors, when there is single input for the model,
   * inputs param should be a `tf.Tensor`. For models with multiple inputs,
   * inputs params should be in either `tf.Tensor`[] if the input order is
   * fixed, or otherwise NamedTensorMap format.
   *
   * For model with multiple inputs, we recommend you use NamedTensorMap as the
   * input type, if you use `tf.Tensor`[], the order of the array needs to
   * follow the
   * order of inputNodes array. @see {@link GraphModel.inputNodes}
   *
   * You can also feed any intermediate nodes using the NamedTensorMap as the
   * input type. For example, given the graph
   *    InputNode => Intermediate => OutputNode,
   * you can execute the subgraph Intermediate => OutputNode by calling
   *    model.execute('IntermediateNode' : tf.tensor(...));
   *
   * This is useful for models that uses tf.dynamic_rnn, where the intermediate
   * state needs to be fed manually.
   *
   * For batch inference execution, the tensors for each input need to be
   * concatenated together. For example with mobilenet, the required input shape
   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
   * If we are provide a batched data of 100 images, the input tensor should be
   * in the shape of [100, 244, 244, 3].
   *
   * @param config Prediction configuration for specifying the batch size.
   * Currently the batch size option is ignored for graph model.
   *
   * @returns Inference result tensors. If the model is converted and it
   * originally had structured_outputs in tensorflow, then a NamedTensorMap
   * will be returned matching the structured_outputs. If no structured_outputs
   * are present, the output will be single `tf.Tensor` if the model has single
   * output node, otherwise Tensor[].
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(e, t) {
    const n = this.execute(e, this.outputNodes);
    return this.addStructuredOutputNames(n);
  }
  /**
   * Execute the inference for the input tensors in async fashion, use this
   * method when your model contains control flow ops.
   *
   * @param input The input tensors, when there is single input for the model,
   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,
   * inputs params should be in either `tf.Tensor`[] if the input order is
   * fixed, or otherwise NamedTensorMap format.
   *
   * For model with multiple inputs, we recommend you use NamedTensorMap as the
   * input type, if you use `tf.Tensor`[], the order of the array needs to
   * follow the
   * order of inputNodes array. @see {@link GraphModel.inputNodes}
   *
   * You can also feed any intermediate nodes using the NamedTensorMap as the
   * input type. For example, given the graph
   *    InputNode => Intermediate => OutputNode,
   * you can execute the subgraph Intermediate => OutputNode by calling
   *    model.execute('IntermediateNode' : tf.tensor(...));
   *
   * This is useful for models that uses tf.dynamic_rnn, where the intermediate
   * state needs to be fed manually.
   *
   * For batch inference execution, the tensors for each input need to be
   * concatenated together. For example with mobilenet, the required input shape
   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
   * If we are provide a batched data of 100 images, the input tensor should be
   * in the shape of [100, 244, 244, 3].
   *
   * @param config Prediction configuration for specifying the batch size.
   * Currently the batch size option is ignored for graph model.
   *
   * @returns A Promise of inference result tensors. If the model is converted
   * and it originally had structured_outputs in tensorflow, then a
   * NamedTensorMap will be returned matching the structured_outputs. If no
   * structured_outputs are present, the output will be single `tf.Tensor` if
   * the model has single output node, otherwise Tensor[].
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async predictAsync(e, t) {
    const n = await this.executeAsync(e, this.outputNodes);
    return this.addStructuredOutputNames(n);
  }
  normalizeInputs(e) {
    var t;
    if (!(e instanceof Tensor) && !Array.isArray(e)) {
      const a = (t = this.signature) === null || t === void 0 ? void 0 : t.inputs;
      if (a != null)
        for (const o in a) {
          const u = a[o];
          u.resourceId != null && (e[o] = this.resourceIdToCapturedInput[u.resourceId]);
        }
      return e;
    }
    e = Array.isArray(e) ? e : [e];
    const n = Object.keys(this.resourceIdToCapturedInput).length;
    if (e.length + n !== this.inputNodes.length)
      throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length - n} non-resource placeholders, while there are ${e.length} input tensors provided.`);
    let s = 0;
    return this.inputNodes.reduce((a, o) => {
      var u, l, f;
      const c = (f = (l = (u = this.signature) === null || u === void 0 ? void 0 : u.inputs) === null || l === void 0 ? void 0 : l[o]) === null || f === void 0 ? void 0 : f.resourceId;
      return c != null ? a[o] = this.resourceIdToCapturedInput[c] : a[o] = e[s++], a;
    }, {});
  }
  normalizeOutputs(e) {
    return e = e || this.outputNodes, Array.isArray(e) ? e : [e];
  }
  executeInitializerGraph() {
    return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.execute({}, []) : this.initializer.execute({}, Object.keys(this.initializerSignature.outputs));
  }
  async executeInitializerGraphAsync() {
    return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.executeAsync({}, []) : this.initializer.executeAsync({}, Object.keys(this.initializerSignature.outputs));
  }
  setResourceIdToCapturedInput(e) {
    if (this.resourceIdToCapturedInput = {}, this.initializerSignature) {
      const t = this.initializerSignature.outputs, n = Object.keys(t);
      for (let s = 0; s < n.length; s++) {
        const a = n[s], o = t[a];
        this.resourceIdToCapturedInput[o.resourceId] = e[s];
      }
    }
  }
  /**
   * Executes inference for the model for given input tensors.
   * @param inputs tensor, tensor array or tensor map of the inputs for the
   * model, keyed by the input node names.
   * @param outputs output node name from the TensorFlow model, if no
   * outputs are specified, the default outputs of the model would be used.
   * You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   *
   * @returns A single tensor if provided with a single output or no outputs
   * are provided and there is only one default output, otherwise return a
   * tensor array. The order of the tensor array is the same as the outputs
   * if provided, otherwise the order of outputNodes attribute of the model.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  execute(e, t) {
    this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(this.executeInitializerGraph()), e = this.normalizeInputs(e), t = this.normalizeOutputs(t);
    const n = this.executor.execute(e, t);
    return n.length > 1 ? n : n[0];
  }
  /**
   * Executes inference for the model for given input tensors in async
   * fashion, use this method when your model contains control flow ops.
   * @param inputs tensor, tensor array or tensor map of the inputs for the
   * model, keyed by the input node names.
   * @param outputs output node name from the TensorFlow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   *
   * @returns A Promise of single tensor if provided with a single output or
   * no outputs are provided and there is only one default output, otherwise
   * return a tensor map.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async executeAsync(e, t) {
    this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()), e = this.normalizeInputs(e), t = this.normalizeOutputs(t);
    const n = await this.executor.executeAsync(e, t);
    return n.length > 1 ? n : n[0];
  }
  /**
   * Get intermediate tensors for model debugging mode (flag
   * KEEP_INTERMEDIATE_TENSORS is true).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  getIntermediateTensors() {
    return this.executor.getIntermediateTensors();
  }
  /**
   * Dispose intermediate tensors for model debugging mode (flag
   * KEEP_INTERMEDIATE_TENSORS is true).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  disposeIntermediateTensors() {
    this.executor.disposeIntermediateTensors();
  }
  convertTensorMapToTensorsMap(e) {
    return Object.keys(e).reduce((t, n) => (t[n] = [e[n]], t), {});
  }
  /**
   * Releases the memory used by the weight tensors and resourceManager.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  dispose() {
    this.executor.dispose(), this.initializer && (this.initializer.dispose(), this.resourceIdToCapturedInput && dispose(this.resourceIdToCapturedInput)), this.resourceManager.dispose();
  }
}
async function loadGraphModel(r, e = {}, t = io) {
  if (r == null)
    throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
  e == null && (e = {}), e.fromTFHub && typeof r == "string" && (r = getTFHubUrl(r));
  const n = new GraphModel(r, e, t);
  return await n.load(), n;
}
function loadGraphModelSync(r) {
  if (r == null)
    throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");
  let e;
  if (r instanceof Array) {
    const [n, s] = r;
    if (!n)
      throw new Error("modelJSON must be the first element of the array");
    if (!s || !(s instanceof ArrayBuffer))
      throw new Error("An ArrayBuffer of weights must be the second element of the array");
    if (!("modelTopology" in n))
      throw new Error("Model JSON is missing 'modelTopology'");
    if (!("weightsManifest" in n))
      throw new Error("Model JSON is missing 'weightsManifest'");
    const a = getWeightSpecs(n.weightsManifest), o = getModelArtifactsForJSONSync(n, a, s);
    e = fromMemorySync(o);
  } else if ("load" in r)
    e = r;
  else if ("modelTopology" in r && "weightSpecs" in r && "weightData" in r)
    e = fromMemorySync(r);
  else
    throw new Error("Unknown model format");
  const t = new GraphModel(e);
  return t.load(), t;
}
function getTFHubUrl(r) {
  return r.endsWith("/") || (r = r + "/"), `${r}${DEFAULT_MODEL_NAME$1}${TFHUB_SEARCH_PARAM}`;
}
/** @license See the LICENSE file. */
const version$5 = "4.22.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function deepMap(r, e) {
  return deepMapInternal(r, e);
}
function deepMapInternal(r, e, t = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set()) {
  if (r == null)
    return null;
  if (typeof Blob == "function" && r instanceof Blob)
    return r.slice();
  if (n.has(r))
    throw new Error("Circular references are not supported.");
  if (t.has(r))
    return t.get(r);
  const s = e(r);
  if (s.recurse && s.value !== null)
    throw new Error("A deep map function may not return both a value and recurse=true.");
  if (s.recurse)
    if (isIterable(r)) {
      const a = Array.isArray(r) ? [] : {};
      n.add(r);
      for (const o in r) {
        const u = r[o], l = deepMapInternal(u, e, t, n);
        a[o] = l;
      }
      return n.delete(r), r.__proto__ && (a.__proto__ = r.__proto__), a;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${r}`);
  else return t.set(r, s.value), s.value;
}
function deepZip(r, e = zipToList) {
  return deepZipInternal(r, e);
}
function deepZipInternal(r, e, t = /* @__PURE__ */ new Set()) {
  const n = r[0];
  if (t.has(n))
    throw new Error("Circular references are not supported.");
  const s = e(r);
  if (s.recurse && s.value !== null)
    throw new Error("A deep zip function may not return both a value and recurse=true.");
  if (s.recurse)
    if (isIterable(n)) {
      const a = Array.isArray(n) ? [] : {};
      t.add(n);
      for (const o in n) {
        const u = r.map((f) => f[o]), l = deepZipInternal(u, e, t);
        a[o] = l;
      }
      return t.delete(n), a;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${n}`);
  else return s.value;
}
function zipToList(r) {
  return r === null ? null : isIterable(r[0]) ? { value: null, recurse: !0 } : { value: r, recurse: !1 };
}
async function deepMapAndAwaitAll(r, e) {
  const t = /* @__PURE__ */ new Map();
  deepMapInternal(r, e, t);
  for (const s of Array.from(t.keys())) {
    const a = t.get(s);
    if (isPromise(a)) {
      const o = await a;
      t.set(s, o);
    }
  }
  return deepMapInternal(r, e, t);
}
function isIterable(r) {
  let e = !1;
  if (env().get("IS_BROWSER"))
    e = r instanceof TextDecoder;
  else {
    const { StringDecoder: t } = require("string_decoder");
    e = r instanceof t;
  }
  return r != null && !ArrayBuffer.isView(r) && (Array.isArray(r) || typeof r == "object" && !(r instanceof Tensor) && !(r instanceof Promise) && !e);
}
function canTensorify(r) {
  return r == null || isPrimitive(r) || Array.isArray(r) || typeof r == "object" && r instanceof Tensor || isTypedArray$1(r);
}
function isPrimitive(r) {
  return r === null || typeof r != "object" && typeof r != "function";
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function deepClone(r) {
  return deepMap(r, cloneIfTensor);
}
function cloneIfTensor(r) {
  return r instanceof Tensor ? { value: r.clone(), recurse: !1 } : isIterable(r) ? { value: null, recurse: !0 } : { value: r, recurse: !1 };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class RingBuffer {
  /**
   * Constructs a `RingBuffer`.
   * @param capacity The number of items that the buffer can accomodate.
   */
  constructor(e) {
    if (this.capacity = e, this.begin = 0, this.end = 0, e == null)
      throw new RangeError("Can't create a ring buffer of unknown capacity.");
    if (e < 1)
      throw new RangeError("Can't create ring buffer of capacity < 1.");
    this.data = new Array(e), this.doubledCapacity = 2 * e;
  }
  /**
   * Map any index into the range 0 <= index < 2*capacity.
   */
  wrap(e) {
    for (; e < 0; )
      e += this.doubledCapacity;
    return e % this.doubledCapacity;
  }
  get(e) {
    if (e < 0)
      throw new RangeError("Can't get item at a negative index.");
    return this.data[e % this.capacity];
  }
  set(e, t) {
    if (e < 0)
      throw new RangeError("Can't set item at a negative index.");
    this.data[e % this.capacity] = t;
  }
  /**
   * Returns the current number of items in the buffer.
   */
  length() {
    let e = this.end - this.begin;
    return e < 0 && (e = this.doubledCapacity + e), e;
  }
  /**
   * Reports whether the buffer is full.
   * @returns true if the number of items in the buffer equals its capacity, and
   *   false otherwise.
   */
  isFull() {
    return this.length() === this.capacity;
  }
  /**
   * Reports whether the buffer is empty.
   * @returns true if the number of items in the buffer equals zero, and
   *   false otherwise.
   */
  isEmpty() {
    return this.length() === 0;
  }
  /**
   * Adds an item to the end of the buffer.
   */
  push(e) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.set(this.end, e), this.end = this.wrap(this.end + 1);
  }
  /**
   * Adds many items to the end of the buffer, in order.
   */
  pushAll(e) {
    for (const t of e)
      this.push(t);
  }
  /**
   * Removes and returns the last item in the buffer.
   */
  pop() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    this.end = this.wrap(this.end - 1);
    const e = this.get(this.end);
    return this.set(this.end, void 0), e;
  }
  /**
   * Adds an item to the beginning of the buffer.
   */
  unshift(e) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.begin = this.wrap(this.begin - 1), this.set(this.begin, e);
  }
  /**
   * Removes and returns the first item in the buffer.
   */
  shift() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    const e = this.get(this.begin);
    return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), e;
  }
  /**
   * Removes and returns a specific item in the buffer, and moves the last item
   * to the vacated slot.  This is useful for implementing a shuffling stream.
   * Note that this operation necessarily scrambles the original order.
   *
   * @param relativeIndex: the index of the item to remove, relative to the
   *   first item in the buffer (e.g., hiding the ring nature of the underlying
   *   storage).
   */
  shuffleExcise(e) {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    const t = this.wrap(this.begin + e), n = this.get(t);
    return this.set(t, this.pop()), n;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class GrowingRingBuffer extends RingBuffer {
  /**
   * Constructs a `GrowingRingBuffer`.
   */
  constructor() {
    super(GrowingRingBuffer.INITIAL_CAPACITY);
  }
  isFull() {
    return !1;
  }
  push(e) {
    super.isFull() && this.expand(), super.push(e);
  }
  unshift(e) {
    super.isFull() && this.expand(), super.unshift(e);
  }
  /**
   * Doubles the capacity of the buffer.
   */
  expand() {
    const e = this.capacity * 2, t = new Array(e), n = this.length();
    for (let s = 0; s < n; s++)
      t[s] = this.get(this.wrap(this.begin + s));
    this.data = t, this.capacity = e, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = n;
  }
}
GrowingRingBuffer.INITIAL_CAPACITY = 32;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function iteratorFromItems(r) {
  return new ArrayIterator(r);
}
function iteratorFromFunction(r) {
  return new FunctionCallIterator(r);
}
function iteratorFromConcatenated(r, e) {
  return new ChainedIterator(r, e);
}
function iteratorFromZipped(r, e = ZipMismatchMode.FAIL) {
  return new ZipIterator(r, e);
}
class LazyIterator {
  /**
   * Collect all remaining elements of a bounded stream into an array.
   * Obviously this will succeed only for small streams that fit in memory.
   * Useful for testing.
   *
   * @returns A Promise for an array of stream elements, which will resolve
   *   when the stream is exhausted.
   */
  async toArray() {
    const e = [];
    let t = await this.next();
    for (; !t.done; )
      e.push(t.value), t = await this.next();
    return e;
  }
  /**
   * Collect all elements of this dataset into an array with prefetching 100
   * elements. This is useful for testing, because the prefetch changes the
   * order in which the Promises are resolved along the processing pipeline.
   * This may help expose bugs where results are dependent on the order of
   * Promise resolution rather than on the logical order of the stream (i.e.,
   * due to hidden mutable state).
   *
   * @returns A Promise for an array of stream elements, which will resolve
   *   when the stream is exhausted.
   */
  async toArrayForTest() {
    const e = this.prefetch(100), t = [];
    let n = await e.next();
    for (; !n.done; )
      t.push(n.value), n = await e.next();
    return t;
  }
  /**
   * Draw items from the stream until it is exhausted.
   *
   * This can be useful when the stream has side effects but no output.  In
   * that case, calling this function guarantees that the stream will be
   * fully processed.
   */
  async resolveFully() {
    let e = await this.next();
    for (; !e.done; )
      e = await this.next();
  }
  /**
   * Draw items from the stream until it is exhausted, or a predicate fails.
   *
   * This can be useful when the stream has side effects but no output.  In
   * that case, calling this function guarantees that the stream will be
   * fully processed.
   */
  async resolveWhile(e) {
    let t = await this.next(), n = e(t.value);
    for (; !t.done && n; )
      t = await this.next(), n = e(t.value);
  }
  /**
   * Handles errors thrown on this stream using a provided handler function.
   *
   * @param handler A function that handles any `Error` thrown during a `next()`
   *   call and returns true if the stream should continue (dropping the failed
   *   call) or false if the stream should quietly terminate.  If the handler
   *   itself throws (or rethrows) an `Error`, that will be propagated.
   *
   * @returns A `LazyIterator` of elements passed through from upstream,
   *   possibly filtering or terminating on upstream `next()` calls that
   *   throw an `Error`.
   */
  handleErrors(e) {
    return new ErrorHandlingLazyIterator(this, e);
  }
  // TODO(soergel): Implement reduce() etc.
  /**
   * Filters this stream according to `predicate`.
   *
   * @param predicate A function mapping a stream element to a boolean or a
   * `Promise` for one.
   *
   * @returns A `LazyIterator` of elements for which the predicate was true.
   */
  filter(e) {
    return new FilterIterator(this, e);
  }
  /**
   * Maps this stream through a 1-to-1 transform.
   *
   * @param transform A function mapping a stream element to a transformed
   *   element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  map(e) {
    return new MapIterator(this, e);
  }
  /**
   * Maps this stream through an async 1-to-1 transform.
   *
   * @param transform A function mapping a stream element to a `Promise` for a
   *   transformed stream element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  mapAsync(e) {
    return new AsyncMapIterator(this, e);
  }
  /**
   * Maps this stream through a 1-to-1 transform, forcing serial execution.
   *
   * @param transform A function mapping a stream element to a transformed
   *   element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  serialMapAsync(e) {
    return new AsyncMapIterator(this, e).serial();
  }
  /**
   * Maps this stream through a 1-to-many transform.
   *
   * @param transform A function mapping a stream element to an array of
   *   transformed elements.
   *
   * @returns A `DataStream` of transformed elements.
   */
  flatmap(e) {
    return new FlatmapIterator(this, e);
  }
  /**
   * Apply a function to every element of the stream.
   *
   * @param f A function to apply to each stream element.
   */
  async forEachAsync(e) {
    return this.map(e).resolveFully();
  }
  /**
   * Apply a function to every element of the stream, forcing serial execution.
   *
   * @param f A function to apply to each stream element.  Should return 'true'
   *   to indicate that the stream should continue, or 'false' to cause it to
   *   terminate.
   */
  async serialForEach(e) {
    return this.serialMapAsync(e).resolveWhile((t) => t === !0);
  }
  /**
   * Groups elements into batches, represented as arrays of elements.
   *
   * We can think of the elements of this iterator as 'rows' (even if they are
   * nested structures).  By the same token, consecutive values for a given
   * key within the elements form a 'column'.  This matches the usual sense of
   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
   *
   * Thus, "Row-major" means that the resulting batch is simply a collection of
   * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major
   * form, which is needed for vectorized computation.
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @returns A `LazyIterator` of batches of elements, represented as arrays
   *   of the original element type.
   */
  rowMajorBatch(e, t = !0) {
    return new RowMajorBatchIterator(this, e, t);
  }
  /**
   * Groups elements into batches, represented in column-major form.
   *
   * We can think of the elements of this iterator as 'rows' (even if they are
   * nested structures).  By the same token, consecutive values for a given
   * key within the elements form a 'column'.  This matches the usual sense of
   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
   *
   * Thus, "column-major" means that the resulting batch is a (potentially
   * nested) structure representing the columns.  Each column entry, then,
   * contains a collection of the values found in that column for a range of
   * input elements.  This representation allows for vectorized computation, in
   * contrast to the row-major form.
   *
   * The inputs should all have the same nested structure (i.e., of arrays and
   * dicts).  The result is a single object with the same nested structure,
   * where the leaves are arrays collecting the values of the inputs at that
   * location (or, optionally, the result of a custom function applied to those
   * arrays).
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @param zipFn: (optional) A function that expects an array of elements at a
   *   single node of the object tree, and returns a `DeepMapResult`.  The
   *   `DeepMapResult` either provides a result value for that node (i.e.,
   *   representing the subtree), or indicates that the node should be processed
   *   recursively.  The default zipFn recurses as far as possible and places
   *   arrays at the leaves.
   * @returns A `LazyIterator` of batches of elements, represented as an object
   *   with collections at the leaves.
   */
  columnMajorBatch(e, t = !0, n = zipToList) {
    return this.rowMajorBatch(e, t).map((a) => deepZip(a, n));
  }
  /**
   * Concatenate this `LazyIterator` with another.
   *
   * @param iterator A `LazyIterator` to be concatenated onto this one.
   * @param baseErrorHandler An optional function that can intercept `Error`s
   *   raised during a `next()` call on the base stream.  This function can
   *   decide whether the error should be propagated, whether the error should
   *   be ignored, or whether the base stream should be terminated.
   * @returns A `LazyIterator`.
   */
  concatenate(e, t) {
    return new ChainedIterator(iteratorFromItems([this, e]), t);
  }
  /**
   * Limits this stream to return at most `count` items.
   *
   * @param count The maximum number of items to provide from the stream. If
   * a negative or undefined value is given, the entire stream is returned
   *   unaltered.
   */
  take(e) {
    return e < 0 || e == null ? this : new TakeIterator(this, e);
  }
  /**
   * Skips the first `count` items in this stream.
   *
   * @param count The number of items to skip.  If a negative or undefined
   * value is given, the entire stream is returned unaltered.
   */
  skip(e) {
    return e < 0 || e == null ? this : new SkipIterator(this, e);
  }
  /**
   * Prefetch the first `bufferSize` items in this stream.
   *
   * Note this prefetches Promises, but makes no guarantees about when those
   * Promises resolve.
   *
   * @param bufferSize: An integer specifying the number of elements to be
   *   prefetched.
   */
  prefetch(e) {
    return new PrefetchIterator(this, e);
  }
  // TODO(soergel): deep sharded shuffle, where supported
  /**
   * Randomly shuffles the elements of this stream.
   *
   * @param bufferSize: An integer specifying the number of elements from
   * this stream from which the new stream will sample.
   * @param seed: (Optional.) An integer specifying the random seed that
   * will be used to create the distribution.
   */
  shuffle(e, t) {
    return new ShuffleIterator(this, e, t);
  }
  /**
   * Force an iterator to execute serially: each next() call will await the
   * prior one, so that they cannot execute concurrently.
   */
  serial() {
    return new SerialIterator(this);
  }
}
class ArrayIterator extends LazyIterator {
  constructor(e) {
    super(), this.items = e, this.trav = 0;
  }
  summary() {
    return `Array of ${this.items.length} items`;
  }
  async next() {
    if (this.trav >= this.items.length)
      return { value: null, done: !0 };
    const e = this.items[this.trav];
    return this.trav++, { value: deepClone(e), done: !1 };
  }
}
class FunctionCallIterator extends LazyIterator {
  constructor(e) {
    super(), this.nextFn = e;
  }
  summary() {
    return "Function call";
  }
  async next() {
    try {
      return this.nextFn();
    } catch (e) {
      throw e.message = `Error thrown while iterating through a dataset: ${e.message}`, e;
    }
  }
}
class SerialIterator extends LazyIterator {
  constructor(e) {
    super(), this.upstream = e, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Serial`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    return this.upstream.next();
  }
}
class SkipIterator extends LazyIterator {
  constructor(e, t) {
    super(), this.upstream = e, this.maxCount = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Skip`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.count++ < this.maxCount; ) {
      const e = await this.upstream.next();
      if (e.done)
        return e;
      dispose(e.value);
    }
    return this.upstream.next();
  }
}
class TakeIterator extends LazyIterator {
  constructor(e, t) {
    super(), this.upstream = e, this.maxCount = t, this.count = 0;
  }
  summary() {
    return `${this.upstream.summary()} -> Take`;
  }
  async next() {
    return this.count++ >= this.maxCount ? { value: null, done: !0 } : this.upstream.next();
  }
}
class RowMajorBatchIterator extends LazyIterator {
  constructor(e, t, n = !0) {
    super(), this.upstream = e, this.batchSize = t, this.enableSmallLastBatch = n, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> RowMajorBatch`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    const e = [];
    for (; e.length < this.batchSize; ) {
      const t = await this.upstream.next();
      if (t.done)
        return this.enableSmallLastBatch && e.length > 0 ? { value: e, done: !1 } : { value: null, done: !0 };
      e.push(t.value);
    }
    return { value: e, done: !1 };
  }
}
class FilterIterator extends LazyIterator {
  constructor(e, t) {
    super(), this.upstream = e, this.predicate = t, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Filter`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) {
      const e = await this.upstream.next();
      if (e.done || this.predicate(e.value))
        return e;
      dispose(e.value);
    }
  }
}
class MapIterator extends LazyIterator {
  constructor(e, t) {
    super(), this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> Map`;
  }
  async next() {
    const e = await this.upstream.next();
    if (e.done)
      return { value: null, done: !0 };
    const t = getTensorsInContainer(e.value), n = this.transform(e.value), s = getTensorsInContainer(n);
    for (const a of t)
      isTensorInList(a, s) || a.dispose();
    return { value: n, done: !1 };
  }
}
class ErrorHandlingLazyIterator extends LazyIterator {
  constructor(e, t) {
    super(), this.upstream = e, this.handler = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> handleErrors`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; )
      try {
        return await this.upstream.next();
      } catch (e) {
        if (!this.handler(e))
          return { value: null, done: !0 };
      }
  }
}
class AsyncMapIterator extends LazyIterator {
  constructor(e, t) {
    super(), this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> AsyncMap`;
  }
  async next() {
    const e = await this.upstream.next();
    if (e.done)
      return { value: null, done: !0 };
    const t = getTensorsInContainer(e.value), n = await this.transform(e.value), s = getTensorsInContainer(n);
    for (const a of t)
      isTensorInList(a, s) || a.dispose();
    return { value: n, done: !1 };
  }
}
class OneToManyIterator extends LazyIterator {
  constructor() {
    super(), this.outputQueue = new GrowingRingBuffer(), this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.outputQueue.length() === 0; )
      if (!await this.pump())
        return { value: null, done: !0 };
    return { value: this.outputQueue.shift(), done: !1 };
  }
}
class FlatmapIterator extends OneToManyIterator {
  constructor(e, t) {
    super(), this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> Flatmap`;
  }
  async pump() {
    const e = await this.upstream.next();
    if (e.done)
      return !1;
    const t = getTensorsInContainer(e.value), n = this.transform(e.value), s = getTensorsInContainer(n);
    this.outputQueue.pushAll(n);
    for (const a of t)
      isTensorInList(a, s) || a.dispose();
    return !0;
  }
}
class ChainedIterator extends LazyIterator {
  constructor(e, t) {
    super(), this.baseErrorHandler = t, this.lastRead = null, this.iterator = null, this.moreIterators = e;
  }
  summary() {
    return "TODO: fill in upstream of chained summaries -> Chained";
  }
  async next() {
    return this.lastRead = this.readFromChain(this.lastRead), this.lastRead;
  }
  async readFromChain(e) {
    if (await e, this.iterator == null) {
      const n = await this.moreIterators.next();
      if (n.done)
        return { value: null, done: !0 };
      this.iterator = n.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler));
    }
    const t = await this.iterator.next();
    return t.done ? (this.iterator = null, this.readFromChain(e)) : t;
  }
}
var ZipMismatchMode;
(function(r) {
  r[r.FAIL = 0] = "FAIL", r[r.SHORTEST = 1] = "SHORTEST", r[r.LONGEST = 2] = "LONGEST";
})(ZipMismatchMode || (ZipMismatchMode = {}));
class ZipIterator extends LazyIterator {
  constructor(e, t = ZipMismatchMode.FAIL) {
    super(), this.iterators = e, this.mismatchMode = t, this.count = 0, this.currentPromise = null;
  }
  summary() {
    return "{TODO: fill in upstream of zip summaries} -> Zip";
  }
  async nextState(e) {
    await e;
    let t = 0, n = 0;
    function s(o) {
      return o instanceof LazyIterator ? {
        value: o.next().then((l) => (t++, l.done && n++, l.value)),
        recurse: !1
      } : { value: null, recurse: !0 };
    }
    const a = await deepMapAndAwaitAll(this.iterators, s);
    if (t === n)
      return { value: null, done: !0 };
    if (n > 0)
      switch (this.mismatchMode) {
        case ZipMismatchMode.FAIL:
          throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);
        case ZipMismatchMode.SHORTEST:
          return { value: null, done: !0 };
        case ZipMismatchMode.LONGEST:
      }
    return this.count++, { value: a, done: !1 };
  }
  async next() {
    return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise;
  }
}
class PrefetchIterator extends LazyIterator {
  constructor(e, t) {
    super(), this.upstream = e, this.bufferSize = t, this.buffer = new RingBuffer(t);
  }
  summary() {
    return `${this.upstream.summary()} -> Prefetch`;
  }
  /**
   * Refill the prefetch buffer.  Returns only after the buffer is full, or
   * the upstream source is exhausted.
   */
  refill() {
    for (; !this.buffer.isFull(); ) {
      const e = this.upstream.next();
      this.buffer.push(e);
    }
  }
  next() {
    return this.refill(), this.buffer.shift();
  }
}
class ShuffleIterator extends PrefetchIterator {
  constructor(e, t, n) {
    super(e, t), this.upstream = e, this.windowSize = t, this.upstreamExhausted = !1, this.random = seedrandomExports.alea(n || now().toString()), this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  randomInt(e) {
    return Math.floor(this.random() * e);
  }
  chooseIndex() {
    return this.randomInt(this.buffer.length());
  }
  async serialNext() {
    for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty(); ) {
      const e = this.chooseIndex(), t = await this.buffer.shuffleExcise(e);
      if (t.done)
        this.upstreamExhausted = !0;
      else
        return this.refill(), t;
    }
    return { value: null, done: !0 };
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class Dataset {
  constructor() {
    this.size = null;
  }
  // TODO(soergel): Make Datasets report whether repeated iterator() calls
  // produce the same result (e.g., reading from a file) or different results
  // (e.g., from the webcam).  Currently we don't make this distinction but it
  // could be important for the user to know.
  // abstract isDeterministic(): boolean;
  /**
   * Groups elements into batches.
   *
   * It is assumed that each of the incoming dataset elements has the same
   * structure -- i.e. the same set of keys at each location in an object
   * hierarchy.  For each key, the resulting `Dataset` provides a batched
   * element collecting all of the incoming values for that key.
   *
   *  * Incoming primitives are grouped into a 1-D Tensor.
   *  * Incoming Tensors are grouped into a new Tensor where the 0th axis is
   *    the batch dimension.
   *  * Incoming arrays are converted to Tensor and then batched.
   *  * A nested array is interpreted as an n-D Tensor, so the batched result
   *    has n+1 dimensions.
   *  * An array that cannot be converted to Tensor produces an error.
   *
   * If an array should not be batched as a unit, it should first be converted
   * to an object with integer keys.
   *
   * Here are a few examples:
   *
   * Batch a dataset of numbers:
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);
   * await a.forEachAsync(e => e.print());
   * ```
   *
   * Batch a dataset of arrays:
   * ```js
   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);
   * await b.forEachAsync(e => e.print());
   * ```
   *
   * Batch a dataset of objects:
   * ```js
   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},
   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},
   *   {a: 8, b: 18}]).batch(4);
   * await c.forEachAsync(e => {
   *   console.log('{');
   *   for(var key in e) {
   *     console.log(key+':');
   *     e[key].print();
   *   }
   *   console.log('}');
   * })
   * ```
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @returns A `Dataset`, from which a stream of batches can be obtained.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  batch(e, t = !0) {
    const n = this;
    assert$1(e > 0, () => `batchSize needs to be positive, but it is
      ${e}`);
    let s;
    return this.size === 1 / 0 || this.size == null ? s = this.size : t ? s = Math.ceil(this.size / e) : s = Math.floor(this.size / e), datasetFromIteratorFn(async () => (await n.iterator()).columnMajorBatch(e, t, deepBatchConcat), s);
  }
  /**
   * Concatenates this `Dataset` with another.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]);
   * const b = tf.data.array([4, 5, 6]);
   * const c = a.concatenate(b);
   * await c.forEachAsync(e => console.log(e));
   * ```
   *
   * @param dataset A `Dataset` to be concatenated onto this one.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  concatenate(e) {
    const t = this;
    let n;
    return this.size === 1 / 0 || e.size === 1 / 0 ? n = 1 / 0 : this.size != null && e.size != null ? n = this.size + e.size : n = null, datasetFromIteratorFn(async () => (await t.iterator()).concatenate(await e.iterator()), n);
  }
  /**
   * Filters this dataset according to `predicate`.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
   *   .filter(x => x%2 === 0);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param predicate A function mapping a dataset element to a boolean or a
   * `Promise` for one.
   *
   * @returns A `Dataset` of elements for which the predicate was true.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  filter(e) {
    const t = this;
    let n;
    return this.size === 1 / 0 ? n = 1 / 0 : n = null, datasetFromIteratorFn(async () => (await t.iterator()).filter((s) => tidy(() => e(s))), n);
  }
  /**
   * Apply a function to every element of the dataset.
   *
   * After the function is applied to a dataset element, any Tensors contained
   * within that element are disposed.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param f A function to apply to each dataset element.
   * @returns A `Promise` that resolves after all elements have been processed.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  async forEachAsync(e) {
    return (await this.iterator()).forEachAsync(e);
  }
  /**
   * Maps this dataset through a 1-to-1 transform.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]).map(x => x*x);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param transform A function mapping a dataset element to a transformed
   *   dataset element.
   *
   * @returns A `Dataset` of transformed elements.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  map(e) {
    const t = this;
    return datasetFromIteratorFn(async () => (await t.iterator()).map((n) => tidy(() => e(n))), this.size);
  }
  /**
   * Maps this dataset through an async 1-to-1 transform.
   *
   * ```js
   * const a =
   *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){
   *    setTimeout(() => {
   *      resolve(x * x);
   *    }, Math.random()*1000 + 500);
   *  }));
   * console.log(await a.toArray());
   * ```
   *
   * @param transform A function mapping a dataset element to a `Promise` for a
   *   transformed dataset element.  This transform is responsible for disposing
   *   any intermediate `Tensor`s, i.e. by wrapping its computation in
   *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous
   *   `map()` case).
   *
   * @returns A `Dataset` of transformed elements.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  mapAsync(e) {
    const t = this;
    return datasetFromIteratorFn(async () => (await t.iterator()).mapAsync(e), this.size);
  }
  /**
   *  Creates a `Dataset` that prefetches elements from this dataset.
   *
   * @param bufferSize: An integer specifying the number of elements to be
   *   prefetched.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  prefetch(e) {
    if (e == null)
      throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
    const t = this;
    return datasetFromIteratorFn(async () => (await t.iterator()).prefetch(e), this.size);
  }
  /**
   * Repeats this dataset `count` times.
   *
   * NOTE: If this dataset is a function of global state (e.g. a random number
   * generator), then different repetitions may produce different elements.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]).repeat(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: (Optional) An integer, representing the number of times
   *   the dataset should be repeated. The default behavior (if `count` is
   *   `undefined` or negative) is for the dataset be repeated indefinitely.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  repeat(e) {
    const t = this;
    let n;
    return this.size != null && e > 0 ? n = this.size * e : e === 0 ? n = 0 : this.size != null && (e === void 0 || e < 0) ? n = 1 / 0 : n = null, datasetFromIteratorFn(async () => {
      const s = iteratorFromFunction(async () => ({ value: await t.iterator(), done: !1 }));
      return iteratorFromConcatenated(s.take(e));
    }, n);
  }
  /**
   * Creates a `Dataset` that skips `count` initial elements from this dataset.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: The number of elements of this dataset that should be skipped
   *   to form the new dataset.  If `count` is greater than the size of this
   *   dataset, the new dataset will contain no elements.  If `count`
   *   is `undefined` or negative, skips the entire dataset.
   *
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  skip(e) {
    const t = this;
    let n;
    return this.size != null && e >= 0 && this.size >= e ? n = this.size - e : this.size != null && (this.size < e || e === void 0 || e < 0) ? n = 0 : n = null, datasetFromIteratorFn(async () => (await t.iterator()).skip(e), n);
  }
  /**
   * Pseudorandomly shuffles the elements of this dataset. This is done in a
   * streaming manner, by sampling from a given number of prefetched elements.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param bufferSize: An integer specifying the number of elements from this
   *   dataset from which the new dataset will sample.
   * @param seed: (Optional) An integer specifying the random seed that will
   *   be used to create the distribution.
   * @param reshuffleEachIteration: (Optional) A boolean, which if true
   *   indicates that the dataset should be pseudorandomly reshuffled each time
   *   it is iterated over. If false, elements will be returned in the same
   *   shuffled order on each iteration. (Defaults to `true`.)
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  shuffle(e, t, n = !0) {
    if (e == null || e < 0)
      throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);
    const s = this, a = seedrandomExports.alea(t || now().toString());
    return datasetFromIteratorFn(async () => {
      let o = a.int32();
      return n && (o += a.int32()), (await s.iterator()).shuffle(e, o.toString());
    }, this.size);
  }
  /**
   * Creates a `Dataset` with at most `count` initial elements from this
   * dataset.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: The number of elements of this dataset that should be taken
   *   to form the new dataset.  If `count` is `undefined` or negative, or if
   *   `count` is greater than the size of this dataset, the new dataset will
   *   contain all elements of this dataset.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  take(e) {
    const t = this;
    let n;
    return this.size != null && this.size > e ? n = e : this.size != null && this.size <= e ? n = this.size : n = null, datasetFromIteratorFn(async () => (await t.iterator()).take(e), n);
  }
  /**
   * Collect all elements of this dataset into an array.
   *
   * Obviously this will succeed only for small datasets that fit in memory.
   * Useful for testing and generally should be avoided if possible.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]);
   * console.log(await a.toArray());
   * ```
   *
   * @returns A Promise for an array of elements, which will resolve
   *   when a new stream has been obtained and fully consumed.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  async toArray() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArray();
  }
  /**
   * Collect all elements of this dataset into an array with prefetching 100
   * elements. This is useful for testing, because the prefetch changes the
   * order in which the Promises are resolved along the processing pipeline.
   * This may help expose bugs where results are dependent on the order of
   * Promise resolution rather than on the logical order of the stream (i.e.,
   * due to hidden mutable state).
   *
   * @returns A Promise for an array of elements, which will resolve
   *   when a new stream has been obtained and fully consumed.
   */
  async toArrayForTest() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArrayForTest();
  }
}
Dataset.MAX_BUFFER_SIZE = 1e4;
function datasetFromIteratorFn(r, e = null) {
  return new class extends Dataset {
    constructor() {
      super(...arguments), this.size = e;
    }
    /*
     * Provide a new stream of elements.  Note this will also start new streams
     * from any underlying `Dataset`s.
     */
    async iterator() {
      return r();
    }
  }();
}
function array(r) {
  return datasetFromIteratorFn(async () => iteratorFromItems(r), r.length);
}
function zip(r) {
  if (!isIterable(r))
    throw new Error("The argument to zip() must be an object or array.");
  let e;
  if (Array.isArray(r))
    for (let t = 0; t < r.length; t++)
      e = e == null ? r[t].size : Math.min(e, r[t].size);
  else if (r instanceof Object)
    for (const t in r)
      e = e == null ? r[t].size : Math.min(e, r[t].size);
  return datasetFromIteratorFn(async () => {
    const t = await deepMapAndAwaitAll(r, (n) => {
      if (n instanceof Dataset)
        return { value: n.iterator(), recurse: !1 };
      if (isIterable(n))
        return { value: null, recurse: !0 };
      throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
    });
    return iteratorFromZipped(t, ZipMismatchMode.SHORTEST);
  }, e);
}
function deepBatchConcat(r) {
  if (r === null)
    return null;
  const e = r[0];
  return canTensorify(e) ? { value: batchConcat(r), recurse: !1 } : { value: null, recurse: !0 };
}
function batchConcat(r) {
  if (r.length === 0)
    throw new Error("Can't make a batch of zero elements.");
  return r[0] instanceof Tensor ? stack(r) : tensor(r);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class TextLineDataset extends Dataset {
  /**
   * Create a `TextLineDataset`.
   *
   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.
   */
  constructor(e) {
    super(), this.input = e;
  }
  async iterator() {
    return (await this.input.iterator()).decodeUTF8().split(`
`).map((s) => (s.endsWith("\r") && (s = s.slice(0, -1)), s));
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
const CODE_QUOTE = '"', STATE_OUT = Symbol("out"), STATE_FIELD = Symbol("field"), STATE_QUOTE = Symbol("quote"), STATE_QUOTE_AFTER_QUOTE = Symbol("quoteafterquote"), STATE_WITHIN_QUOTE_IN_QUOTE = Symbol("quoteinquote");
class CSVDataset extends Dataset {
  /**
   * Returns column names of the csv dataset. If `configuredColumnsOnly` is
   * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is
   * false and `columnNames` is provided, `columnNames`. If
   * `configuredColumnsOnly` is false and `columnNames` is not provided, return
   * all column names parsed from the csv file. For example usage please go to
   * `tf.data.csv`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  async columnNames() {
    return this.columnNamesValidated || await this.setColumnNames(), this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;
  }
  /* 1) If `columnNames` is provided as string[], use this string[] as output
   * keys in corresponding order. The length must match the number of inferred
   * columns if `hasHeader` is true .
   * 2) If `columnNames` is not provided, parse header line as `columnNames` if
   * hasHeader is true. If `hasHeader` is false, throw an error.
   * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must
   * exist in parsed `columnNames`.
   */
  async setColumnNames() {
    const e = await this.maybeReadHeaderLine();
    if (!this.fullColumnNames && !e)
      throw new Error("Column names must be provided if there is no header line.");
    this.fullColumnNames && e && assert$1(e.length === this.fullColumnNames.length, () => "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + e.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = e);
    const t = this.fullColumnNames.reduce((s, a) => (s[a] = s[a] + 1 || 1, s), {}), n = Object.keys(t).filter((s) => t[s] > 1);
    if (assert$1(n.length === 0, () => "Duplicate column names found: " + n.toString()), this.columnConfigs) {
      for (const s of Object.keys(this.columnConfigs))
        if (this.fullColumnNames.indexOf(s) === -1)
          throw new Error('The key "' + s + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
    }
    this.columnNamesValidated = !0;
  }
  async maybeReadHeaderLine() {
    if (this.hasHeader) {
      const t = await (await this.base.iterator()).next();
      if (t.done)
        throw new Error("No data was found for CSV parsing.");
      const n = t.value;
      return this.parseRow(n, !1);
    } else
      return null;
  }
  /**
   * Create a `CSVDataset`.
   *
   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.
   * @param csvConfig (Optional) A CSVConfig object that contains configurations
   *     of reading and decoding from CSV file(s).
   *
   *     hasHeader: (Optional) A boolean value that indicates whether the first
   *     row of provided CSV file is a header line with column names, and should
   *     not be included in the data. Defaults to `true`.
   *
   *     columnNames: (Optional) A list of strings that corresponds to
   *     the CSV column names, in order. If provided, it ignores the column
   *     names inferred from the header row. If not provided, infers the column
   *     names from the first row of the records. If hasHeader is false and
   *     columnNames is not provided, this method throws an error.
   *
   *     columnConfigs: (Optional) A dictionary whose key is column names, value
   *     is an object stating if this column is required, column's data type,
   *     default value, and if this column is label. If provided, keys must
   *     correspond to names provided in columnNames or inferred from the file
   *     header lines. If isLabel is true any column, returns an array of two
   *     items: the first item is a dict of features key/value pairs, the second
   *     item is a dict of labels key/value pairs. If no feature is marked as
   *     label, returns a dict of features only.
   *
   *     configuredColumnsOnly (Optional) If true, only columns provided in
   *     columnConfigs will be parsed and provided during iteration.
   *
   *     delimiter (Optional) The string used to parse each line of the input
   *     file. Defaults to `,`.
   */
  constructor(e, t) {
    super(), this.input = e, this.hasHeader = !0, this.fullColumnNames = null, this.columnNamesValidated = !1, this.columnConfigs = null, this.configuredColumnsOnly = !1, this.delimiter = ",", this.delimWhitespace = !1, this.base = new TextLineDataset(e), t || (t = {}), this.hasHeader = t.hasHeader !== !1, this.fullColumnNames = t.columnNames, this.columnConfigs = t.columnConfigs, this.configuredColumnsOnly = t.configuredColumnsOnly, t.delimWhitespace ? (assert$1(t.delimiter == null, () => "Delimiter should not be provided when delimWhitespace is true."), this.delimWhitespace = !0, this.delimiter = " ") : this.delimiter = t.delimiter ? t.delimiter : ",";
  }
  async iterator() {
    this.columnNamesValidated || await this.setColumnNames();
    let e = await this.base.iterator();
    return this.hasHeader && (e = e.skip(1)), e.map((t) => this.makeDataElement(t));
  }
  makeDataElement(e) {
    const t = this.parseRow(e), n = {}, s = {};
    for (let a = 0; a < this.fullColumnNames.length; a++) {
      const o = this.fullColumnNames[a], u = this.columnConfigs ? this.columnConfigs[o] : null;
      if (!(this.configuredColumnsOnly && !u)) {
        const l = t[a];
        let f = null;
        if (l === "")
          if (u && u.default !== void 0)
            f = u.default;
          else {
            if (u && (u.required || u.isLabel))
              throw new Error(`Required column ${o} is empty in this line: ${e}`);
            f = void 0;
          }
        else {
          const c = Number(l);
          if (isNaN(c))
            u && u.dtype === "bool" ? f = this.getBoolean(l) : f = l;
          else if (!u || !u.dtype)
            f = c;
          else
            switch (u.dtype) {
              case "float32":
                f = c;
                break;
              case "int32":
                f = Math.floor(c);
                break;
              case "bool":
                f = this.getBoolean(l);
                break;
              default:
                f = c;
            }
        }
        u && u.isLabel ? s[o] = f : n[o] = f;
      }
    }
    return Object.keys(s).length === 0 ? n : { xs: n, ys: s };
  }
  getBoolean(e) {
    return e === "1" || e.toLowerCase() === "true" ? 1 : 0;
  }
  // adapted from https://beta.observablehq.com/@mbostock/streaming-csv
  parseRow(e, t = !0) {
    const n = [];
    let s = 0;
    const a = e.length;
    let o = STATE_OUT;
    for (let u = 0; u < a; u++)
      switch (o) {
        // Before enter a new field
        case STATE_OUT:
          switch (e.charAt(u)) {
            // Enter a quoted field
            case CODE_QUOTE:
              s = u + 1, o = STATE_QUOTE;
              break;
            // Read an empty field
            case this.delimiter:
              if (s = u + 1, this.delimiter === " " && this.delimWhitespace)
                break;
              n.push(""), o = STATE_OUT;
              break;
            // Enter an unquoted field
            default:
              o = STATE_FIELD, s = u;
              break;
          }
          break;
        // In an unquoted field
        case STATE_FIELD:
          switch (e.charAt(u)) {
            // Exit an unquoted field, add it to result
            case this.delimiter:
              n.push(e.substring(s, u)), o = STATE_OUT, s = u + 1;
              break;
          }
          break;
        // In a quoted field
        case STATE_QUOTE:
          switch (e.charAt(u)) {
            // Read a quote after a quote
            case CODE_QUOTE:
              o = STATE_QUOTE_AFTER_QUOTE;
              break;
          }
          break;
        // This state means it's right after a second quote in a field
        case STATE_QUOTE_AFTER_QUOTE:
          switch (e.charAt(u)) {
            // Finished a quoted field
            case this.delimiter:
              n.push(e.substring(s, u - 1)), o = STATE_OUT, s = u + 1;
              break;
            // Finished a quoted part in a quoted field
            case CODE_QUOTE:
              o = STATE_QUOTE;
              break;
            // In a quoted part in a quoted field
            default:
              o = STATE_WITHIN_QUOTE_IN_QUOTE;
              break;
          }
          break;
        case STATE_WITHIN_QUOTE_IN_QUOTE:
          switch (e.charAt(u)) {
            // Exit a quoted part in a quoted field
            case CODE_QUOTE:
              o = STATE_QUOTE;
              break;
          }
          break;
      }
    if (o === STATE_QUOTE_AFTER_QUOTE ? n.push(e.substring(s, a - 1)) : n.push(e.substring(s)), t && n.length !== this.fullColumnNames.length)
      throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);
    return n;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class MicrophoneIterator extends LazyIterator {
  constructor(e) {
    super(), this.microphoneConfig = e, this.isClosed = !1, this.fftSize = e.fftSize || 1024;
    const t = Math.log2(this.fftSize);
    if (this.fftSize < 0 || t < 4 || t > 14 || !Number.isInteger(t))
      throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);
    if (this.numFrames = e.numFramesPerSpectrogram || 43, this.sampleRateHz = e.sampleRateHz, this.columnTruncateLength = e.columnTruncateLength || this.fftSize, this.audioTrackConstraints = e.audioTrackConstraints, this.smoothingTimeConstant = e.smoothingTimeConstant || 0, this.includeSpectrogram = e.includeSpectrogram !== !1, this.includeWaveform = e.includeWaveform === !0, !this.includeSpectrogram && !this.includeWaveform)
      throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");
  }
  summary() {
    return "microphone";
  }
  // Construct a MicrophoneIterator and start the audio stream.
  static async create(e = {}) {
    if (!env().get("IS_BROWSER"))
      throw new Error("microphone API is only supported in browser environment.");
    const t = new MicrophoneIterator(e);
    return await t.start(), t;
  }
  // Start the audio stream and FFT.
  async start() {
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({
        audio: this.audioTrackConstraints == null ? !0 : this.audioTrackConstraints,
        video: !1
      });
    } catch (n) {
      throw new Error(`Error thrown while initializing video stream: ${n.message}`);
    }
    if (!this.stream)
      throw new Error("Could not obtain audio from microphone.");
    const e = (
      // tslint:disable-next-line:no-any
      window.AudioContext || window.webkitAudioContext
    );
    if (this.audioContext = new e(), !this.sampleRateHz)
      this.sampleRateHz = this.audioContext.sampleRate;
    else if (this.audioContext.sampleRate !== this.sampleRateHz)
      throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`);
    const t = this.audioContext.createMediaStreamSource(this.stream);
    this.analyser = this.audioContext.createAnalyser(), this.analyser.fftSize = this.fftSize * 2, this.analyser.smoothingTimeConstant = this.smoothingTimeConstant, t.connect(this.analyser), this.freqData = new Float32Array(this.fftSize), this.timeData = new Float32Array(this.fftSize);
  }
  async next() {
    if (this.isClosed)
      return { value: null, done: !0 };
    let e, t;
    const n = await this.getAudioData();
    if (this.includeSpectrogram) {
      const s = this.flattenQueue(n.freqDataQueue);
      e = this.getTensorFromAudioDataArray(s, [this.numFrames, this.columnTruncateLength, 1]);
    }
    if (this.includeWaveform) {
      const s = this.flattenQueue(n.timeDataQueue);
      t = this.getTensorFromAudioDataArray(s, [this.numFrames * this.fftSize, 1]);
    }
    return {
      value: { spectrogram: e, waveform: t },
      done: !1
    };
  }
  // Capture one result from the audio stream, and extract the value from
  // iterator.next() result.
  async capture() {
    return (await this.next()).value;
  }
  async getAudioData() {
    const e = [], t = [];
    let n = 0;
    return new Promise((s) => {
      const a = setInterval(() => {
        this.includeSpectrogram && (this.analyser.getFloatFrequencyData(this.freqData), this.freqData[0] === -1 / 0 && s({ freqDataQueue: e, timeDataQueue: t }), e.push(this.freqData.slice(0, this.columnTruncateLength))), this.includeWaveform && (this.analyser.getFloatTimeDomainData(this.timeData), t.push(this.timeData.slice())), ++n === this.numFrames && (clearInterval(a), s({ freqDataQueue: e, timeDataQueue: t }));
      }, this.fftSize / this.sampleRateHz * 1e3);
    });
  }
  // Stop the audio stream and pause the iterator.
  stop() {
    this.isClosed || (this.isClosed = !0, this.analyser.disconnect(), this.audioContext.close(), this.stream != null && this.stream.getTracks().length > 0 && this.stream.getTracks()[0].stop());
  }
  // Override toArray() function to prevent collecting.
  toArray() {
    throw new Error("Can not convert infinite audio stream to array.");
  }
  // Return audio sampling rate in Hz
  getSampleRate() {
    return this.sampleRateHz;
  }
  flattenQueue(e) {
    const t = e[0].length, n = new Float32Array(e.length * t);
    return e.forEach((s, a) => n.set(s, a * t)), n;
  }
  getTensorFromAudioDataArray(e, t) {
    const n = new Float32Array(sizeFromShape(t));
    return n.set(e, n.length - e.length), tensor(n, t);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class WebcamIterator extends LazyIterator {
  constructor(e, t) {
    if (super(), this.webcamVideoElement = e, this.webcamConfig = t, this.isClosed = !0, this.resize = !1, this.needToResize())
      if (this.resize = !0, this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth], this.cropBoxInd = tensor1d([0], "int32"), this.webcamConfig.centerCrop) {
        const n = this.webcamConfig.resizeWidth * 1 / this.webcamVideoElement.width, s = this.webcamConfig.resizeHeight * 1 / this.webcamVideoElement.height, a = (1 - n) / 2, o = (1 - s) / 2, u = a + n, l = s + o;
        this.cropBox = tensor2d([o, a, l, u], [1, 4]);
      } else
        this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);
  }
  summary() {
    return "webcam";
  }
  // Construct a WebcamIterator and start it's video stream.
  static async create(e, t = {}) {
    if (!env().get("IS_BROWSER"))
      throw new Error("tf.data.webcam is only supported in browser environment.");
    if (!e) {
      if (e = document.createElement("video"), !t.resizeWidth || !t.resizeHeight)
        throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");
      e.width = t.resizeWidth, e.height = t.resizeHeight;
    }
    const n = new WebcamIterator(e, t);
    return await n.start(), n;
  }
  // Async function to start video stream.
  async start() {
    this.webcamConfig.facingMode && assert$1(this.webcamConfig.facingMode === "user" || this.webcamConfig.facingMode === "environment", () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({
        video: {
          deviceId: this.webcamConfig.deviceId,
          facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user",
          width: this.webcamVideoElement.width,
          height: this.webcamVideoElement.height
        }
      });
    } catch (e) {
      throw e.message = `Error thrown while initializing video stream: ${e.message}`, e;
    }
    if (!this.stream)
      throw new Error("Could not obtain video from webcam.");
    try {
      this.webcamVideoElement.srcObject = this.stream;
    } catch (e) {
      console.log(e), this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);
    }
    return this.webcamVideoElement.play(), this.isClosed = !1, new Promise((e) => {
      this.webcamVideoElement.onloadedmetadata = () => {
        e();
      };
    });
  }
  async next() {
    if (this.isClosed)
      return { value: null, done: !0 };
    let e;
    try {
      e = fromPixels$1(this.webcamVideoElement);
    } catch (t) {
      throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`);
    }
    if (this.resize)
      try {
        return { value: this.cropAndResizeFrame(e), done: !1 };
      } catch (t) {
        throw new Error(`Error thrown cropping the video: ${t.message}`);
      } finally {
        e.dispose();
      }
    else
      return { value: e, done: !1 };
  }
  needToResize() {
    return !!(this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight));
  }
  // Cropping and resizing each frame based on config
  cropAndResizeFrame(e) {
    return tidy(() => {
      const t = expandDims$3(cast$3(e, "float32"), 0);
      let n;
      n = image$1.cropAndResize(t, this.cropBox, this.cropBoxInd, this.cropSize, "bilinear");
      const s = n.shape;
      return reshape$3(n, s.slice(1));
    });
  }
  // Capture one frame from the video stream, and extract the value from
  // iterator.next() result.
  async capture() {
    return (await this.next()).value;
  }
  // Stop the video stream and pause webcam iterator.
  stop() {
    this.stream.getTracks().forEach((t) => t.stop());
    try {
      this.webcamVideoElement.srcObject = null;
    } catch (t) {
      console.log(t), this.webcamVideoElement.src = null;
    }
    this.isClosed = !0;
  }
  // Override toArray() function to prevent collecting.
  toArray() {
    throw new Error("Can not convert infinite video stream to array.");
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class DataSource {
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class StringIterator extends LazyIterator {
  /**
   * Splits a string stream on a given separator.
   *
   * It is assumed that the incoming chunk boundaries have no semantic meaning,
   * so conceptually the incoming stream is treated simply as the concatenation
   * of its elements.
   *
   * The outgoing stream provides chunks corresponding to the results of the
   * standard string split() operation (even if such a chunk spanned incoming
   * chunks).  The separators are not included.
   *
   * A typical usage is to split a text file (represented as a stream with
   * arbitrary chunk boundaries) into lines.
   *
   * @param upstream A readable stream of strings that can be treated as
   *   concatenated.
   * @param separator A character to split on.
   */
  split(e) {
    return new SplitIterator(this, e);
  }
}
class SplitIterator extends StringIterator {
  constructor(e, t) {
    super(), this.upstream = e, this.impl = new SplitIteratorImpl(e, t);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
}
class SplitIteratorImpl extends OneToManyIterator {
  constructor(e, t) {
    super(), this.upstream = e, this.separator = t, this.carryover = "";
  }
  summary() {
    return `${this.upstream.summary()} -> Split('${this.separator}')`;
  }
  async pump() {
    const e = await this.upstream.next();
    if (e.done)
      return this.carryover === "" ? !1 : (this.outputQueue.push(this.carryover), this.carryover = "", !0);
    const t = e.value.split(this.separator);
    t[0] = this.carryover + t[0];
    for (const n of t.slice(0, -1))
      this.outputQueue.push(n);
    return this.carryover = t[t.length - 1], !0;
  }
}
class ByteChunkIterator extends LazyIterator {
  /**
   * Decode a stream of UTF8-encoded byte arrays to a stream of strings.
   *
   * The byte arrays producetd from the ByteChunkIterator on which this is
   * called will be interpreted as concatenated.  No assumptions are made about
   * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a
   * character may span the boundary between chunks.  This naturally happens,
   * for instance, when reading fixed-size byte arrays from a file.
   */
  decodeUTF8() {
    return new Utf8Iterator(this);
  }
}
class Utf8Iterator extends StringIterator {
  constructor(e) {
    super(), this.upstream = e, this.impl = new Utf8IteratorImpl(e);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
}
class Utf8IteratorImpl extends OneToManyIterator {
  constructor(e) {
    if (super(), this.upstream = e, env().get("IS_BROWSER"))
      this.decoder = new TextDecoder("utf-8");
    else {
      const { StringDecoder: t } = require("string_decoder");
      this.decoder = new t("utf8");
    }
  }
  summary() {
    return `${this.upstream.summary()} -> Utf8`;
  }
  async pump() {
    const e = await this.upstream.next();
    let t;
    if (e.done)
      return !1;
    t = e.value;
    let n;
    return env().get("IS_BROWSER") ? n = this.decoder.decode(t, { stream: !0 }) : n = this.decoder.write(Buffer.from(t.buffer)), this.outputQueue.push(n), !0;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class FileChunkIterator extends ByteChunkIterator {
  constructor(e, t = {}) {
    super(), this.file = e, this.options = t, assert$1(e instanceof Uint8Array || (env().get("IS_BROWSER") ? e instanceof File || e instanceof Blob : !1), () => "FileChunkIterator only supports File, Blob and Uint8Array right now."), this.offset = t.offset || 0, this.chunkSize = t.chunkSize || 1024 * 1024;
  }
  summary() {
    return `FileChunks ${this.file}`;
  }
  async next() {
    return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? { value: null, done: !0 } : { value: await new Promise((t, n) => {
      const s = this.offset + this.chunkSize;
      if (this.file instanceof Uint8Array)
        t(new Uint8Array(this.file.slice(this.offset, s)));
      else {
        const a = new FileReader();
        a.onload = (u) => {
          let l = a.result;
          if (l instanceof ArrayBuffer && (l = new Uint8Array(l)), !(l instanceof Uint8Array))
            return n(new TypeError("FileReader returned unknown type."));
          t(l);
        }, a.onabort = (u) => n(new Error("Aborted")), a.onerror = (u) => n(new Error(u.type));
        const o = this.file.slice(this.offset, s);
        a.readAsArrayBuffer(o);
      }
      this.offset = s;
    }), done: !1 };
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
async function urlChunkIterator(r, e = {}, t) {
  let n, s;
  typeof r == "string" ? n = r : (n = r.url, s = getRequestInitFromRequest(r));
  const a = await fetch$1(n, s);
  if (a.ok) {
    const o = new Uint8Array(await a.arrayBuffer());
    return new FileChunkIterator(o, e);
  } else
    throw new Error(a.statusText);
}
const getRequestInitFromRequest = (r) => ({
  method: r.method,
  headers: r.headers,
  body: r.body,
  mode: r.mode,
  credentials: r.credentials,
  cache: r.cache,
  redirect: r.redirect,
  referrer: r.referrer,
  integrity: r.integrity
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function isLocalPath(r) {
  return typeof r == "string" && r.slice(0, 7) === "file://";
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class FileDataSource extends DataSource {
  /**
   * Create a `FileDataSource`.
   *
   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to
   *     read. Local file only works in node environment.
   * @param options Options passed to the underlying `FileChunkIterator`s,
   *   such as {chunksize: 1024}.
   */
  constructor(e, t = {}) {
    super(), this.input = e, this.options = t;
  }
  async iterator() {
    if (isLocalPath(this.input) && env().get("IS_NODE")) {
      const e = require("fs");
      this.input = e.readFileSync(this.input.slice(7));
    }
    return new FileChunkIterator(this.input, this.options);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class URLDataSource extends DataSource {
  /**
   * Create a `URLDataSource`.
   *
   * @param url A source URL string, or a `Request` object.
   * @param options Options passed to the underlying `FileChunkIterator`s,
   *   such as {chunksize: 1024}.
   */
  constructor(e, t = {}) {
    super(), this.url = e, this.fileOptions = t;
  }
  // TODO(soergel): provide appropriate caching options.  Currently this
  // will download the URL anew for each call to iterator().  Since we have
  // to treat the downloaded file as a blob/buffer anyway, we may as well retain
  // it-- but that raises GC issues.  Also we may want a persistent disk cache.
  async iterator() {
    return isLocalPath(this.url) ? new FileDataSource(this.url, this.fileOptions).iterator() : urlChunkIterator(this.url, this.fileOptions);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function csv(r, e = {}) {
  return new CSVDataset(new URLDataSource(r), e);
}
function func(r) {
  const e = iteratorFromFunction(r);
  return datasetFromIteratorFn(async () => e);
}
function generator(r) {
  return datasetFromIteratorFn(async () => {
    const e = await r();
    return iteratorFromFunction(() => e.next());
  });
}
async function webcam(r, e) {
  return WebcamIterator.create(r, e);
}
async function microphone(r) {
  return MicrophoneIterator.create(r);
}
/** @license See the LICENSE file. */
const version$4 = "4.22.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const index = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CSVDataset,
  Dataset,
  FileDataSource,
  TextLineDataset,
  URLDataSource,
  array,
  csv,
  func,
  generator,
  microphone,
  version_data: version$4,
  webcam,
  zip
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function assertNotComplex$1(r, e) {
  Array.isArray(r) || (r = [r]), r.forEach((t) => {
    t != null && assert$1(t.dtype !== "complex64", () => `${e} does not support complex64 tensors in the CPU backend.`);
  });
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const whereImpl$1 = whereImpl$2;
class MathBackendCPU extends KernelBackend {
  nextDataId() {
    return MathBackendCPU.nextDataId++;
  }
  constructor() {
    super(), this.blockSize = 48, this.firstUse = !0, this.data = new DataStorage(this, engine());
  }
  write(e, t, n) {
    this.firstUse && (this.firstUse = !1, env().get("IS_NODE") && warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
    const s = { id: this.nextDataId() };
    return this.data.set(s, { values: e, dtype: n, refCount: 1 }), s;
  }
  /**
   * Create a data bucket in cpu backend.
   * @param shape Shape of the `TensorInfo`.
   * @param dtype DType of the `TensorInfo`.
   * @param values The value of the `TensorInfo` stored as a flattened array.
   */
  makeTensorInfo(e, t, n) {
    let s;
    if (t === "string" && n != null && n.length > 0 && isString(n[0])) {
      const a = n.map((o) => encodeString(o));
      s = this.write(a, e, t);
    } else
      s = this.write(n, e, t);
    return { dataId: s, shape: e, dtype: t };
  }
  /** Return refCount of a `TensorData`. */
  refCount(e) {
    return this.data.has(e) ? this.data.get(e).refCount : 0;
  }
  /** Increase refCount of a `TensorData`. */
  incRef(e) {
    const t = this.data.get(e);
    t.refCount++;
  }
  /** Decrease refCount of a `TensorData`. */
  decRef(e) {
    if (this.data.has(e)) {
      const t = this.data.get(e);
      t.refCount--;
    }
  }
  move(e, t, n, s, a) {
    this.data.set(e, { values: t, dtype: s, refCount: a });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(e) {
    return this.readSync(e);
  }
  readSync(e) {
    const { dtype: t, complexTensorInfos: n } = this.data.get(e);
    if (t === "complex64") {
      const s = this.readSync(n.real.dataId), a = this.readSync(n.imag.dataId);
      return mergeRealAndImagArrays(s, a);
    }
    return convertBackendValuesAndArrayBuffer(this.data.get(e).values, t);
  }
  bufferSync(e) {
    const t = this.readSync(e.dataId);
    if (e.dtype === "string")
      try {
        const n = t.map((s) => decodeString(s));
        return buffer$1(e.shape, e.dtype, n);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return buffer$1(e.shape, e.dtype, t);
  }
  makeOutput(e, t, n) {
    return engine().makeTensorFromTensorInfo(this.makeTensorInfo(t, n, e), this);
  }
  /**
   * Dispose the memory if the dataId has 0 refCount. Return true if the memory
   * is released or memory is not managed in this backend, false if memory is
   * not cleared.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */
  disposeData(e, t = !1) {
    if (this.data.has(e)) {
      if (this.data.get(e).refCount--, !t && this.data.get(e).refCount > 0)
        return !1;
      const { complexTensorInfos: n } = this.data.get(e);
      n != null && (this.disposeData(n.real.dataId, !0), this.disposeData(n.imag.dataId, !0)), this.data.delete(e);
    }
    return !0;
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  async time(e) {
    const t = now();
    return e(), { kernelMs: now() - t };
  }
  memory() {
    return {
      // Unreliable due to automatic gc. The numbers above are cumulative.
      unreliable: !0,
      reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]
    };
  }
  where(e) {
    assertNotComplex$1([e], "where");
    const t = this.readSync(e.dataId);
    return whereImpl$1(e.shape, t);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return super.epsilon();
  }
}
MathBackendCPU.nextDataId = 0;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function simpleAbsImpl(r) {
  const e = new Float32Array(r.length);
  for (let t = 0; t < r.length; ++t)
    e[t] = Math.abs(r[t]);
  return e;
}
const abs$1 = (r) => {
  const { x: e } = r.inputs, t = r.backend;
  assertNotComplex$1(e, "abs");
  let n = new Float32Array(sizeFromShape(e.shape));
  const s = t.data.get(e.dataId).values;
  return n = simpleAbsImpl(s), t.makeOutput(n, e.shape, e.dtype);
}, absConfig$1 = {
  kernelName: Abs,
  backendName: "cpu",
  kernelFunc: abs$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function createSimpleBinaryKernelImpl(r) {
  return (e, t, n, s, a) => {
    const o = assertAndGetBroadcastShape(e, t), u = o.length, l = computeStrides(o), f = sizeFromShape(o), c = getTypedArrayFromDType(a, f), h = e.length, d = t.length, m = computeStrides(e), g = computeStrides(t), y = getBroadcastDims$1(e, o), b = getBroadcastDims$1(t, o);
    if (y.length + b.length === 0)
      for (let v = 0; v < c.length; ++v)
        c[v] = r(n[v % n.length], s[v % s.length]);
    else
      for (let v = 0; v < c.length; ++v) {
        const w = indexToLoc(v, u, l), I = w.slice(-h);
        y.forEach((O) => I[O] = 0);
        const T = locToIndex(I, h, m), _ = w.slice(-d);
        b.forEach((O) => _[O] = 0);
        const F = locToIndex(_, d, g);
        c[v] = r(n[T], s[F]);
      }
    return [c, o];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function complex$1(r) {
  const { inputs: e, backend: t } = r, { real: n, imag: s } = e, a = t.data.get(n.dataId).values, o = t.data.get(s.dataId).values, u = t.makeTensorInfo(n.shape, "complex64"), l = t.data.get(u.dataId);
  return l.complexTensorInfos = {
    real: t.makeTensorInfo(n.shape, "float32", a),
    imag: t.makeTensorInfo(s.shape, "float32", o)
  }, u;
}
const complexConfig$1 = {
  kernelName: Complex,
  backendName: "cpu",
  kernelFunc: complex$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zeros(r, e, t = "float32") {
  if (t === "complex64") {
    const s = zeros(r, e, "float32"), a = zeros(r, e, "float32");
    return complex$1({ inputs: { real: s, imag: a }, backend: r });
  }
  const n = makeZerosTypedArray(sizeFromShape(e), t);
  return r.makeTensorInfo(e, t, n);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function identity$1(r) {
  const { inputs: e, backend: t } = r, { x: n } = e;
  return t.incRef(n.dataId), { dataId: n.dataId, shape: n.shape, dtype: n.dtype };
}
const identityConfig$1 = {
  kernelName: Identity$1,
  backendName: "cpu",
  kernelFunc: identity$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function real$1(r) {
  const { inputs: e, backend: t } = r, { input: n } = e, s = t.data.get(n.dataId).complexTensorInfos.real, a = t.data.get(s.dataId).values;
  return t.makeTensorInfo(s.shape, s.dtype, a);
}
const realConfig$1 = {
  kernelName: Real,
  backendName: "cpu",
  kernelFunc: real$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function castImpl(r, e, t, n) {
  if (n === "int32") {
    const s = Int32Array.from(r);
    return [e, "int32", s];
  }
  if (n === "bool") {
    const s = toTypedArray([0], t), [a, o] = createSimpleBinaryKernelImpl((u, l) => u !== l ? 1 : 0)(e, [], r, s, "bool");
    return [o, "bool", a];
  }
  throw new Error(`Error in Cast: failed to cast ${t} to ${n}`);
}
function cast$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { dtype: a } = n;
  if (a === "complex64") {
    if (s.dtype === "complex64")
      return identity$1({ inputs: { x: s }, backend: t });
    const c = zeros(t, s.shape, s.dtype), h = cast$1({ inputs: { x: s }, backend: t, attrs: { dtype: "float32" } }), d = complex$1({ inputs: { real: h, imag: c }, backend: t });
    return t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(h), d;
  }
  if (s.dtype === "complex64") {
    const c = real$1({ inputs: { input: s }, backend: t }), h = cast$1({ inputs: { x: c }, backend: t, attrs: { dtype: a } });
    return t.disposeIntermediateTensorInfo(c), h;
  }
  if (!hasEncodingLoss(s.dtype, a)) {
    const c = identity$1({ inputs: { x: s }, backend: t });
    return { dataId: c.dataId, shape: c.shape, dtype: a };
  }
  const o = t.data.get(s.dataId).values, [u, l, f] = castImpl(o, s.shape, s.dtype, a);
  return t.makeTensorInfo(u, l, f);
}
const castConfig$1 = {
  kernelName: Cast,
  backendName: "cpu",
  kernelFunc: cast$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function binaryKernelFunc$1(r, e, t, n) {
  return t == null ? ({ inputs: s, backend: a }) => {
    const { a: o, b: u } = s, l = a;
    assertNotComplex$1([o, u], r);
    const f = l.data.get(o.dataId).values, c = l.data.get(u.dataId).values, h = o.dtype === "string" ? (
      // tslint:disable-next-line: no-any
      fromUint8ToStringArray(f)
    ) : f, d = o.dtype === "string" ? (
      // tslint:disable-next-line: no-any
      fromUint8ToStringArray(c)
    ) : c, m = n || o.dtype, [g, y] = e(o.shape, u.shape, h, d, m);
    return l.makeTensorInfo(y, m, g);
  } : ({ inputs: s, backend: a }) => {
    const { a: o, b: u } = s, l = a;
    if (o.dtype === "complex64" || u.dtype === "complex64") {
      const f = cast$1({ inputs: { x: o }, backend: l, attrs: { dtype: "complex64" } }), c = l.data.get(f.dataId), h = c.complexTensorInfos.real, d = c.complexTensorInfos.imag, m = l.data.get(h.dataId).values, g = l.data.get(d.dataId).values, y = cast$1({ inputs: { x: u }, backend: l, attrs: { dtype: "complex64" } }), b = l.data.get(y.dataId), v = b.complexTensorInfos.real, w = b.complexTensorInfos.imag, I = l.data.get(v.dataId).values, T = l.data.get(w.dataId).values, [_, F, O] = t(o.shape, u.shape, m, g, I, T), q = l.makeTensorInfo(O, "float32", _), V = l.makeTensorInfo(O, "float32", F), H = complex$1({ inputs: { real: q, imag: V }, backend: l });
      return l.disposeIntermediateTensorInfo(f), l.disposeIntermediateTensorInfo(y), l.disposeIntermediateTensorInfo(q), l.disposeIntermediateTensorInfo(V), H;
    } else {
      const f = l.data.get(o.dataId).values, c = l.data.get(u.dataId).values, h = n || o.dtype, [d, m] = e(o.shape, u.shape, f, c, h);
      return l.makeTensorInfo(m, h, d);
    }
  };
}
function createComplexBinaryKernelImpl(r) {
  return (e, t, n, s, a, o) => {
    const u = assertAndGetBroadcastShape(e, t), l = sizeFromShape(u), f = u.length, c = computeStrides(u), h = getTypedArrayFromDType("float32", l), d = getTypedArrayFromDType("float32", l), m = getBroadcastDims$1(e, u), g = getBroadcastDims$1(t, u), y = mergeRealAndImagArrays(n, s), b = mergeRealAndImagArrays(a, o), v = e.length, w = computeStrides(e), I = t.length, T = computeStrides(t);
    if (m.length + g.length === 0)
      for (let _ = 0; _ < h.length; _++) {
        const F = _ % y.length, O = _ % b.length, q = r(y[F * 2], y[F * 2 + 1], b[O * 2], b[O * 2 + 1]);
        h[_] = q.real, d[_] = q.imag;
      }
    else
      for (let _ = 0; _ < h.length; _++) {
        const F = indexToLoc(_, f, c), O = F.slice(-v);
        m.forEach(($) => O[$] = 0);
        const q = locToIndex(O, v, w), V = F.slice(-I);
        g.forEach(($) => V[$] = 0);
        const H = locToIndex(V, I, T), R = r(y[q * 2], y[q * 2 + 1], b[H * 2], b[H * 2 + 1]);
        h[_] = R.real, d[_] = R.imag;
      }
    return [h, d, u];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const addImpl = createSimpleBinaryKernelImpl((r, e) => r + e), addComplexImpl = createComplexBinaryKernelImpl((r, e, t, n) => ({ real: r + t, imag: e + n })), add = binaryKernelFunc$1(Add$1, addImpl, addComplexImpl), addConfig$1 = {
  kernelName: Add$1,
  backendName: "cpu",
  kernelFunc: add
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bincountImpl(r, e, t, n, s) {
  const a = sizeFromShape(n), o = makeZerosTypedArray(s, t);
  for (let u = 0; u < r.length; u++) {
    const l = r[u];
    if (l < 0)
      throw new Error("Input x must be non-negative!");
    l >= s || (a > 0 ? o[l] += e[u] : o[l] += 1);
  }
  return o;
}
function bincountReduceImpl(r, e, t, n = !1) {
  const s = r.shape[0], a = r.shape[1], o = buffer$1([s, t], e.dtype);
  for (let u = 0; u < s; u++)
    for (let l = 0; l < a; l++) {
      const f = r.get(u, l);
      if (f < 0)
        throw new Error("Input x must be non-negative!");
      f >= t || (n ? o.set(1, u, f) : e.size > 0 ? o.set(o.get(u, f) + e.get(u, l), u, f) : o.set(o.get(u, f) + 1, u, f));
    }
  return o;
}
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bitwiseAndImpl = createSimpleBinaryKernelImpl((r, e) => r & e), bitwiseAnd$1 = binaryKernelFunc$1(BitwiseAnd, bitwiseAndImpl), bitwiseAndConfig$1 = {
  kernelName: BitwiseAnd,
  backendName: "cpu",
  kernelFunc: bitwiseAnd$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function createSimpleUnaryImpl(r) {
  return (e, t, n) => {
    const s = getArrayFromDType(t, e.length);
    for (let a = 0; a < e.length; ++a)
      s[a] = r(e[a], n);
    return s;
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unaryKernelFunc$1(r, e, t) {
  const n = createSimpleUnaryImpl(e);
  return unaryKernelFuncFromImpl(r, n, t);
}
function unaryKernelFuncFromImpl(r, e, t) {
  return ({ inputs: n, attrs: s, backend: a }) => {
    const { x: o } = n;
    assertNotComplex$1(o, r);
    const u = a, l = u.data.get(o.dataId).values;
    let f;
    if (o.dtype === "string") {
      if (!Array.isArray(l))
        throw new Error("String tensor's value was not an instance of Array");
      f = fromUint8ToStringArray(l);
    } else
      f = l;
    const c = t || o.dtype, h = e(f, c, s);
    return u.makeTensorInfo(o.shape, c, h);
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ceilImpl = createSimpleUnaryImpl((r) => Math.ceil(r)), ceil$1 = unaryKernelFuncFromImpl(Ceil, ceilImpl), ceilConfig$1 = {
  kernelName: Ceil,
  backendName: "cpu",
  kernelFunc: ceil$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function concatImpl$1(r, e, t, n) {
  const s = getArrayFromDType(t, sizeFromShape(e));
  if (n && t !== "string") {
    let a = 0;
    r.forEach((o) => {
      const u = sizeFromShape(o.shape);
      s.set(o.vals, a), a += u;
    });
  } else {
    let a = 0;
    r.forEach((o) => {
      const u = t === "string" ? fromUint8ToStringArray(o.vals) : o.vals;
      let l = 0;
      for (let f = 0; f < o.shape[0]; ++f) {
        const c = f * e[1] + a;
        for (let h = 0; h < o.shape[1]; ++h)
          s[c + h] = u[l++];
      }
      a += o.shape[1];
    });
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const equalImpl = createSimpleBinaryKernelImpl((r, e) => r === e ? 1 : 0), equal$1 = binaryKernelFunc$1(Equal, equalImpl, null, "bool"), equalConfig$1 = {
  kernelName: Equal,
  backendName: "cpu",
  kernelFunc: equal$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const expImpl = createSimpleUnaryImpl((r) => Math.exp(r)), exp$1 = unaryKernelFuncFromImpl(Exp, expImpl, "float32"), expConfig$1 = {
  kernelName: Exp,
  backendName: "cpu",
  kernelFunc: exp$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const expm1Impl = createSimpleUnaryImpl((r) => Math.expm1(r)), expm1$1 = unaryKernelFuncFromImpl(Expm1, expm1Impl), expm1Config$1 = {
  kernelName: Expm1,
  backendName: "cpu",
  kernelFunc: expm1$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const floorImpl = createSimpleUnaryImpl((r) => Math.floor(r)), floor$1 = unaryKernelFuncFromImpl(Floor, floorImpl), floorConfig$1 = {
  kernelName: Floor,
  backendName: "cpu",
  kernelFunc: floor$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const floorDivImpl = createSimpleBinaryKernelImpl((r, e) => Math.floor(r / e)), floorDiv$1 = binaryKernelFunc$1(FloorDiv, floorDivImpl, null, "int32"), floorDivConfig$1 = {
  kernelName: FloorDiv,
  backendName: "cpu",
  kernelFunc: floorDiv$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherNdImpl(r, e, t, n, s, a, o, u, l) {
  const f = buffer$1([n, a], t);
  for (let c = 0; c < n; c++) {
    const h = [];
    let d = 0;
    for (let m = 0; m < s; m++) {
      const g = r[c * s + m];
      d += g * o[m], h.push(g);
    }
    if (d < 0 || d >= l / a)
      throw new Error(`Invalid indices: ${h} does not index into ${u}`);
    for (let m = 0; m < a; m++)
      f.values[c * a + m] = e.get(...e.indexToLoc(d * a + m));
  }
  return f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherV2Impl(r, e, t) {
  const n = buffer$1(t, r.dtype);
  for (let s = 0; s < n.size; ++s) {
    const o = n.indexToLoc(s).slice(), u = o[0], l = o[2], f = e.locToIndex([u, l]);
    o[2] = e.values[f];
    const c = r.locToIndex(o);
    0 <= c && c < r.values.length && (n.values[s] = r.values[c]);
  }
  return n;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const greaterImpl = createSimpleBinaryKernelImpl((r, e) => r > e ? 1 : 0), greater$1 = binaryKernelFunc$1(Greater, greaterImpl, null, "bool"), greaterConfig$1 = {
  kernelName: Greater,
  backendName: "cpu",
  kernelFunc: greater$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const greaterEqualImpl = createSimpleBinaryKernelImpl((r, e) => r >= e ? 1 : 0), greaterEqual$1 = binaryKernelFunc$1(GreaterEqual, greaterEqualImpl, null, "bool"), greaterEqualConfig$1 = {
  kernelName: GreaterEqual,
  backendName: "cpu",
  kernelFunc: greaterEqual$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lessImpl = createSimpleBinaryKernelImpl((r, e) => r < e ? 1 : 0), less$1 = binaryKernelFunc$1(Less, lessImpl, null, "bool"), lessConfig$1 = {
  kernelName: Less,
  backendName: "cpu",
  kernelFunc: less$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lessEqualImpl = createSimpleBinaryKernelImpl((r, e) => r <= e ? 1 : 0), lessEqual$1 = binaryKernelFunc$1(LessEqual, lessEqualImpl, null, "bool"), lessEqualConfig$1 = {
  kernelName: LessEqual,
  backendName: "cpu",
  kernelFunc: lessEqual$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function linSpaceImpl(r, e, t) {
  const n = (e - r) / (t - 1), s = makeZerosTypedArray(t, "float32");
  s[0] = r;
  for (let a = 1; a < s.length; a++)
    s[a] = s[a - 1] + n;
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const logImpl = createSimpleUnaryImpl((r) => Math.log(r)), log$1 = unaryKernelFuncFromImpl(Log, logImpl), logConfig$1 = {
  kernelName: Log,
  backendName: "cpu",
  kernelFunc: log$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxImpl$1(r, e, t, n) {
  const s = getTypedArrayFromDType(n, sizeFromShape(t));
  for (let a = 0; a < s.length; ++a) {
    const o = a * e;
    let u = r[o];
    for (let l = 0; l < e; ++l) {
      const f = r[o + l];
      (Number.isNaN(f) || f > u) && (u = f);
    }
    s[a] = u;
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maximumImpl = createSimpleBinaryKernelImpl((r, e) => Math.max(r, e)), maximum$1 = binaryKernelFunc$1(Maximum$1, maximumImpl), maximumConfig$1 = {
  kernelName: Maximum$1,
  backendName: "cpu",
  kernelFunc: maximum$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const minimumImpl = createSimpleBinaryKernelImpl((r, e) => Math.min(r, e)), minimum$1 = binaryKernelFunc$1(Minimum$1, minimumImpl), minimumConfig$1 = {
  kernelName: Minimum$1,
  backendName: "cpu",
  kernelFunc: minimum$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const multiplyImpl = createSimpleBinaryKernelImpl((r, e) => r * e), multiplyComplexImpl = createComplexBinaryKernelImpl((r, e, t, n) => ({
  real: r * t - e * n,
  imag: r * n + e * t
})), multiply$1 = binaryKernelFunc$1(Multiply$1, multiplyImpl, multiplyComplexImpl), multiplyConfig$1 = {
  kernelName: Multiply$1,
  backendName: "cpu",
  kernelFunc: multiply$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function negImpl(r, e, t) {
  const n = createScalarValue(-1, t);
  return multiplyImpl([], e, n, r, t);
}
function neg$1(r) {
  const { inputs: e, backend: t } = r, { x: n } = e;
  assertNotComplex$1(n, "neg");
  const s = t.data.get(n.dataId).values, [a, o] = negImpl(s, n.shape, n.dtype);
  return t.makeTensorInfo(o, n.dtype, a);
}
const negConfig$1 = {
  kernelName: Neg,
  backendName: "cpu",
  kernelFunc: neg$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const notEqualImpl = createSimpleBinaryKernelImpl((r, e) => r !== e ? 1 : 0), notEqual$1 = binaryKernelFunc$1(NotEqual, notEqualImpl, null, "bool"), notEqualConfig$1 = {
  kernelName: NotEqual,
  backendName: "cpu",
  kernelFunc: notEqual$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transposeImpl$1(r, e, t, n, s) {
  const a = e.length, o = sizeFromShape(e), u = computeStrides(e), l = computeStrides(s), f = getTypedArrayFromDType(t, sizeFromShape(s));
  for (let c = 0; c < o; ++c) {
    const h = indexToLoc(c, a, u), d = new Array(h.length);
    for (let g = 0; g < d.length; g++)
      d[g] = h[n[g]];
    const m = locToIndex(d, a, l);
    f[m] = r[c];
  }
  return f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transpose$1(r) {
  const { inputs: e, attrs: t, backend: n } = r, { x: s } = e, { perm: a } = t;
  assertNotComplex$1(s, "transpose");
  const o = s.shape.length, u = new Array(o);
  for (let h = 0; h < u.length; h++)
    u[h] = s.shape[a[h]];
  const l = n.data.get(s.dataId).values, f = transposeImpl$1(l, s.shape, s.dtype, a, u);
  return { dataId: n.write(f, u, s.dtype), shape: u, dtype: s.dtype };
}
const transposeConfig$1 = {
  kernelName: Transpose,
  backendName: "cpu",
  kernelFunc: transpose$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function prodImpl(r, e, t, n) {
  const [s, a] = computeOutAndReduceShapes(r, n), o = upcastType(e, "int32"), u = makeZerosTypedArray(sizeFromShape(s), o), l = sizeFromShape(a);
  for (let f = 0; f < u.length; ++f) {
    const c = f * l;
    let h = 1;
    for (let d = 0; d < l; ++d)
      h *= t[c + d];
    u[f] = h;
  }
  return { outVals: u, outShape: s, outDtype: o };
}
function prod$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n;
  assertNotComplex$1(s, "prod");
  const u = s.shape.length, l = parseAxisParam(a, s.shape), f = getAxesPermutation(l, u);
  let c = l, h = s;
  const d = [];
  f != null && (h = transpose$1({ inputs: { x: s }, backend: t, attrs: { perm: f } }), d.push(h), c = getInnerMostAxes(c.length, u));
  const m = t.data.get(h.dataId).values, { outVals: g, outShape: y, outDtype: b } = prodImpl(h.shape, h.dtype, m, c);
  let v = y;
  return o && (v = expandShapeToKeepDim(y, l)), d.forEach((w) => t.disposeIntermediateTensorInfo(w)), t.makeTensorInfo(v, b, g);
}
const prodConfig$1 = {
  kernelName: Prod,
  backendName: "cpu",
  kernelFunc: prod$1
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function validateIndices(r, e, t) {
  r.forEach((n, s) => {
    if (n < 0 || n >= t) {
      const a = indexToLoc(s, e.length, computeStrides(e)).join(",");
      throw new Error(`indices[${a}] = ${n} is not in [0, ${t})`);
    }
  });
}
function validateSplits(r, e) {
  for (let t = 0; t < r.length; ++t) {
    const n = r[t], s = t === r.length - 1 ? e : r[t + 1].length;
    if (n.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (n[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (n[n.length - 1] > s)
      throw new Error("Ragged splits must not point past values");
    for (let a = 1; a < n.length; ++a)
      if (n[a - 1] > n[a])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function makeSplits(r, e, t, n) {
  const s = [];
  let a = 0;
  const o = e.length - 1 + t.length, u = new Array(o).fill(null).map(() => [0]);
  validateSplits(t, n);
  let l = 1;
  for (let f = 0; f < e.length - 1; ++f) {
    l *= e[f];
    const c = e[f + 1];
    for (let h = 1; h < l + 1; ++h)
      u[f].push(h * c);
  }
  for (let f = 0; f < r.length; ++f) {
    let c = r[f], h = r[f] + 1;
    for (let d = 0; d < t.length; ++d) {
      const m = t[d], g = d + e.length - 1;
      if (g >= 0) {
        const y = u[g], b = y[y.length - 1] - m[c];
        for (let v = c; v < h; ++v)
          u[g].push(m[v + 1] + b);
      }
      c = m[c], h = m[h];
    }
    h !== c && (s.push([c, h]), a += h - c);
  }
  return { outSplits: u, valueSlices: s, numValues: a };
}
function getSplits(r) {
  const e = [];
  for (let t = 0; t < r.length; ++t) {
    const n = r[t].length, s = getArrayFromDType("int32", n);
    e.push(s), r[t].forEach((a, o) => s[o] = a);
  }
  return e;
}
function computeFlatOuterDims(r, e) {
  const t = r.slice(0, e);
  for (; t.length < e; )
    t.push(1);
  for (let n = e; n < r.length; n++)
    t[e - 1] *= r[n];
  return t;
}
function writeValueSlices(r, e, t, n, s, a) {
  const o = computeFlatOuterDims(e, 2)[1], u = computeFlatOuterDims(a, 2)[1];
  let l = 0;
  for (const f of t)
    for (let c = f[0]; c < f[1]; ++c) {
      for (let h = 0; h < n; ++h)
        s[l * u + h] = r[c * o + h];
      ++l;
    }
}
function getValues(r, e, t, n, s) {
  const a = e.slice();
  a[0] = s;
  const o = getArrayFromDType(t, sizeFromShape(a)), u = r.length, l = u === 0 ? 0 : u / e[0];
  return writeValueSlices(r, e, n, l, o, a), [o, a];
}
function raggedGatherImpl(r, e, t, n, s, a, o, u) {
  if (r.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (e[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  const l = e[0][0] - 1;
  if (validateIndices(a, o, l), n.length === 0)
    throw new Error("params.rank must be nonzero");
  const f = n[0], { outSplits: c, valueSlices: h, numValues: d } = makeSplits(a, o, r, f), m = getSplits(c), g = getValues(t, n, s, h, d);
  return [m, g[0], g[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const INT32_MAX = 2147483647;
function raggedRangeImpl(r, e, t, n, s, a, o) {
  if (e.length > 1)
    throw new Error("starts must be a scalar or vector");
  if (s.length > 1)
    throw new Error("limits must be a scalar or vector");
  if (o.length > 1)
    throw new Error("deltas must be a scalar or vector");
  const u = e.length === 0, l = s.length === 0, f = o.length === 0, c = [];
  u || c.push(e[0]), l || c.push(s[0]), f || c.push(o[0]);
  for (let b = 1; b < c.length; ++b)
    if (c[b] !== c[b - 1])
      throw new Error("starts, limits, and deltas must have the same shape");
  const h = c.length === 0 ? 1 : c[0], d = getArrayFromDType("int32", h + 1);
  d[0] = 0;
  for (let b = 0; b < h; ++b) {
    const v = u ? r[0] : r[b], w = l ? n[0] : n[b], I = f ? a[0] : a[b];
    if (I === 0)
      throw new Error("Requires delta != 0");
    let T;
    if (I > 0 && w < v || I < 0 && w > v)
      T = 0;
    else if (T = Math.ceil(Math.abs((w - v) / I)), T > INT32_MAX)
      throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);
    d[b + 1] = d[b] + T;
  }
  const m = d[h], g = getArrayFromDType(t, m);
  let y = 0;
  for (let b = 0; b < h; ++b) {
    const v = d[b + 1] - d[b];
    let w = u ? r[0] : r[b];
    const I = f ? a[0] : a[b];
    for (let T = 0; T < v; ++T)
      g[y++] = w, w += I;
  }
  return [d, g];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var RowPartitionType = RowPartitionType$1;
class RaggedTensorToTensorOp {
  constructor(e, t, n, s, a, o, u, l, f, c) {
    this.shape = e, this.shapeShape = t, this.values = n, this.valuesShape = s, this.valuesDType = a, this.defaultValue = o, this.defaultValueShape = u, this.rowPartitionValues = l, this.rowPartitionValuesShapes = f, this.rowPartitionTypes = getRowPartitionTypesHelper(c), this.raggedRank = getRaggedRank(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(e) {
    return this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE ? this.rowPartitionTypes[e + 1] : this.rowPartitionTypes[e];
  }
  // Returns the relationship between dimension and dimension + 1.
  getRowPartitionTensor(e) {
    return this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE ? this.rowPartitionValues[e + 1] : this.rowPartitionValues[e];
  }
  getMaxWidth(e) {
    const t = this.getRowPartitionTensor(e - 1);
    switch (this.getRowPartitionTypeByDimension(e - 1)) {
      case RowPartitionType.VALUE_ROWIDS:
        return RaggedTensorToTensorOp.getMaxWidthValueRowID(t);
      case RowPartitionType.ROW_SPLITS:
        return RaggedTensorToTensorOp.getMaxWidthRowSplit(t);
      default:
        throw new Error(`Cannot handle partition type ${RowPartitionType[this.getRowPartitionTypeByDimension(e - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(e) {
    const t = e.length;
    if (t === 0 || t === 1)
      return 0;
    let n = 0;
    for (let s = 0; s < t - 1; ++s) {
      const a = e[s + 1] - e[s];
      a > n && (n = a);
    }
    return n;
  }
  static getMaxWidthValueRowID(e) {
    const t = e.length;
    if (t === 0)
      return 0;
    let n = 0, s = e[0], a = 0;
    for (let o = 1; o < t; ++o) {
      const u = e[o];
      u !== s && (s = u, a = Math.max(o - n, a), n = o);
    }
    return Math.max(t - n, a);
  }
  tensorShapeFromTensor(e, t, n = !0) {
    if (t.length === 0) {
      if (e[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return makeShape(e, n);
  }
  calculateOutputSize(e) {
    const t = this.valuesShape, n = this.defaultValueShape;
    validateDefaultValueShape(n, t);
    const s = this.tensorShapeFromTensor(this.shape, this.shapeShape), o = combineRaggedTensorToTensorShapes(this.raggedRank, s, t);
    o[0] < 0 && (o[0] = e);
    for (let u = 1; u <= this.raggedRank; ++u)
      o[u] < 0 && (o[u] = this.getMaxWidth(u));
    return o;
  }
  /**
   * The outputIndex represents the index in the output tensor
   * where the first element of a particular dimension would be written.
   * If it is -1, it indicates that the index is out of scope.
   * Example, given firstDimension = 10, firstDimensionOutput = 6,
   * and outputIndexMultiplier = 100:
   * result = [0 100 200 300 400 500 -1 -1 -1 -1]
   * If firstDimensionOutput = 11 instead, then:
   * result = [0 100 200 300 400 500 600 700 800 900]
   */
  calculateFirstParentOutputIndex(e, t, n) {
    const s = Math.min(e, n), a = [];
    let o = 0;
    for (let u = 0; u < s; ++u, o += t)
      a.push(o);
    for (let u = s; u < e; ++u)
      a.push(-1);
    return assert$1(a.length === e, () => "Final length of result must be equal to firstDimension."), a;
  }
  calculateOutputIndexRowSplit(e, t, n, s) {
    const a = e.length, o = [];
    for (let u = 0; u < a - 1; ++u) {
      const l = e[u + 1] - e[u];
      let f = Math.min(s, l), c = t[u];
      c === -1 && (f = 0);
      for (let h = 0; h < f; ++h)
        o.push(c), c += n;
      for (let h = 0; h < l - f; ++h)
        o.push(-1);
    }
    if (a > 0 && o.length !== e[a - 1])
      throw new Error("Invalid row split size.");
    return o;
  }
  // Calculate the output index of the first element of a list.
  // The parentOutputIndex is the same computation for the previous list.
  // -1 indicates an element or list that is out of range.
  // The outputIndexMultiplier is the number of output indices one moves
  // forward for each column.
  // E.g., given:
  // valueRowIds:[0 1 2 2 2 3 5 5 6]
  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]
  // outputIndexMultiplier: 10
  // outputSize: 2
  // You get:
  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]
  // result[0] = parentOutputIndex[valueRowIds[0]]
  // result[1] = parentOutputIndex[valueRowIds[1]]
  // result[2] = parentOutputIndex[valueRowIds[2]]
  // result[3] = parentOutputIndex[valueRowIds[2] + 10]
  // result[4] = -1 because it is the third element the size is 2.
  // result[5] = parentOutputIndex[valueRowIds[3]]
  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[8] = parentOutputIndex[valueRowIds[7]]
  calculateOutputIndexValueRowID(e, t, n, s) {
    const a = e.length, o = [];
    if (a === 0)
      return [];
    let u = 0, l = e[0];
    if (l >= t.length)
      throw new Error(`Got currentValueRowId=${l}, which is not less than ${t.length}`);
    let f = t[l];
    o.push(f);
    for (let c = 1; c < a; ++c) {
      const h = e[c];
      if (h === l)
        f >= 0 && (++u, u < s ? f += n : f = -1);
      else {
        if (u = 0, l = h, h >= t.length)
          throw new Error(`Got nextValueRowId=${h} which is not less than ${t.length}`);
        f = t[h];
      }
      o.push(f);
    }
    if (o.length !== e.length)
      throw new Error("Invalid row ids.");
    return o;
  }
  calculateOutputIndex(e, t, n, s) {
    const a = this.getRowPartitionTensor(e), o = this.getRowPartitionTypeByDimension(e);
    switch (o) {
      case RowPartitionType.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(a, t, n, s);
      case RowPartitionType.ROW_SPLITS:
        if (a.length - 1 > t.length)
          throw new Error(`Row partition size is greater than output size: ${a.length - 1} > ${t.length}`);
        return this.calculateOutputIndexRowSplit(a, t, n, s);
      default:
        throw new Error(`Unsupported partition type: ${RowPartitionType[o]}`);
    }
  }
  getFirstDimensionSize() {
    const e = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    const t = this.rowPartitionTypes[0];
    switch (t) {
      case RowPartitionType.FIRST_DIM_SIZE:
        return e[0];
      case RowPartitionType.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case RowPartitionType.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${RowPartitionType[t]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const t = this.getFirstDimensionSize(), n = this.calculateOutputSize(t), s = new Array(this.raggedRank + 1);
    s[s.length - 1] = 1;
    for (let l = s.length - 2; l >= 0; --l)
      s[l] = s[l + 1] * n[l + 1];
    const a = makeShape(n, !1), o = getArrayFromDType(this.valuesDType, sizeFromShape(a));
    if (s[0] * n[0] > 0) {
      let l = this.calculateFirstParentOutputIndex(t, s[0], n[0]);
      for (let f = 1; f <= this.raggedRank; ++f)
        l = this.calculateOutputIndex(f - 1, l, s[f], n[f]);
      this.setOutput(this.raggedRank, l, o, a);
    }
    return [a, o];
  }
  setOutput(e, t, n, s) {
    if (n.length === 0)
      return;
    const a = this.values, o = n;
    let u = s.slice();
    u = u.slice(e + 1);
    const l = sizeFromShape(u), f = t.length;
    let c = this.defaultValue;
    if (c.length !== l && c.length !== 1) {
      const g = this.defaultValueShape;
      tidy(() => {
        const y = reshape$3(c, g);
        c = broadcastTo(y, u).dataSync();
      });
    }
    let h = 0, d = 0, m = 0;
    for (let g = 0; g <= f; ++g) {
      let y = g < f ? t[g] : -1;
      if (y === m) {
        ++m;
        continue;
      }
      if (d < m) {
        const b = a.subarray(h * l), v = o.subarray(d * l), w = (m - d) * l;
        copyArray(v, b, w);
      }
      if (g >= f) {
        const b = n.length;
        y = Math.floor(b / l);
      }
      if (y > m)
        if (this.defaultValue.length === 1)
          o.subarray(m * l, y * l).fill(this.defaultValue[0]), m = y;
        else
          for (; y > m; ) {
            const b = o.slice(m * l);
            copyArray(b, c, l), ++m;
          }
      y < 0 ? (h = g + 1, d = m) : (h = g, d = m, m = d + 1);
    }
  }
}
function copyArray(r, e, t) {
  for (let n = 0; n < t; n++)
    r[n] = e[n];
}
function makeShape(r, e) {
  const t = [];
  for (let n of r) {
    if (n < 0) {
      if (!e)
        throw new Error(`Dimension ${n} must be >= 0`);
      if (n < -1)
        throw new Error(`Dimension ${n} must be >= -1`);
      n = -1;
    }
    t.push(n);
  }
  return t;
}
function raggedTensorToTensorImpl(r, e, t, n, s, a, o, u, l, f) {
  return new RaggedTensorToTensorOp(r, e, t, n, s, a, o, u, l, f).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rangeImpl(r, e, t, n) {
  const s = r === e, a = r < e && t < 0, o = e < r && t > 1;
  if (s || a || o)
    return makeZerosTypedArray(0, n);
  const u = Math.abs(Math.ceil((e - r) / t)), l = makeZerosTypedArray(u, n);
  e < r && t === 1 && (t = -1), l[0] = r;
  for (let f = 1; f < l.length; f++)
    l[f] = l[f - 1] + t;
  return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rsqrtImpl = createSimpleUnaryImpl((r) => 1 / Math.sqrt(r)), rsqrt$1 = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl), rsqrtConfig$1 = {
  kernelName: Rsqrt,
  backendName: "cpu",
  kernelFunc: rsqrt$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function scatterImpl(r, e, t, n, s, a, o, u, l, f) {
  const c = [n / s, s], h = r.values, d = e.values;
  if (n === 0)
    return buffer$1(t, e.dtype);
  const m = l instanceof TensorBuffer ? l : buffer$1(c, e.dtype);
  typeof l == "string" || typeof l == "number" ? m.values.fill(l) : typeof l == "boolean" && m.values.fill(+l);
  for (let g = 0; g < a; g++) {
    const y = [];
    let b = 0;
    for (let v = 0; v < o; v++) {
      const w = h[g * o + v];
      y.push(w), b += w * u[v];
    }
    if (b < 0 || b >= n / s)
      throw new Error(`Invalid indices: ${y} does not index into ${t}`);
    for (let v = 0; v < s; v++)
      f ? m.values[b * s + v] += d[g * s + v] : m.values[b * s + v] = e.rank === 0 ? d[0] : d[g * s + v];
  }
  return m;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sigmoidImpl = createSimpleUnaryImpl((r) => 1 / (1 + Math.exp(-r))), sigmoid$1 = unaryKernelFunc$1(Sigmoid$1, (r) => 1 / (1 + Math.exp(-r))), sigmoidConfig$1 = {
  kernelName: Sigmoid$1,
  backendName: "cpu",
  kernelFunc: sigmoid$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sliceImpl(r, e, t, n, s) {
  const a = isSliceContinous(n, e, t), o = sizeFromShape(t), u = computeStrides(n);
  if (a) {
    const h = computeFlatOffset(e, u);
    return s === "string" ? r.slice(h, h + o) : r.subarray(h, h + o);
  }
  const l = s === "string" ? fromUint8ToStringArray(r) : r, f = buffer$1(n, s, l), c = buffer$1(t, s);
  for (let h = 0; h < c.size; ++h) {
    const d = c.indexToLoc(h), m = d.map((g, y) => g + e[y]);
    c.set(f.get(...m), ...d);
  }
  return s === "string" ? fromStringArrayToUint8(c.values) : c.values;
}
function slice$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { begin: a, size: o } = n;
  assertNotComplex$1(s, "slice");
  const [u, l] = parseSliceParams(s, a, o);
  assertParamsValid(s, u, l);
  const f = t.data.get(s.dataId).values, c = sliceImpl(f, u, l, s.shape, s.dtype);
  return t.makeTensorInfo(l, s.dtype, c);
}
const sliceConfig$1 = {
  kernelName: Slice,
  backendName: "cpu",
  kernelFunc: slice$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseFillEmptyRowsImpl(r, e, t, n, s, a, o) {
  const u = e[0], l = a[0], f = new Array(l), c = new Array(u), h = e[1];
  if (l === 0) {
    if (u !== 0)
      throw new Error(getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));
    const b = getArrayFromDType(t, 0), v = getArrayFromDType(s, 0);
    return [
      b,
      [0, h],
      v,
      f,
      c
    ];
  }
  let d = !0, m = 0;
  const g = new Array(l).fill(0);
  for (let b = 0; b < u; ++b) {
    const v = r[b * h];
    if (v < 0)
      throw new Error(getSparseFillEmptyRowsNegativeIndexErrorMessage(b, v));
    if (v >= l)
      throw new Error(getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(b, v, l));
    ++g[v], d = d && v >= m, m = v;
  }
  let y = !0;
  for (let b = 0; b < l; ++b) {
    const v = g[b] === 0;
    f[b] = v, y = y && !v, g[b] = Math.max(g[b], 1), b > 0 && (g[b] += g[b - 1]);
  }
  if (y && d) {
    const b = r, v = n;
    for (let w = 0; w < u; ++w)
      c[w] = w;
    return [
      b,
      [u, h],
      v,
      f,
      c
    ];
  } else {
    const b = g[l - 1], v = getArrayFromDType(t, b * h), w = getArrayFromDType(s, b), I = new Array(l).fill(0);
    for (let T = 0; T < u; ++T) {
      const _ = r[T * h], F = I[_], O = (_ === 0 ? 0 : g[_ - 1]) + F;
      I[_]++;
      for (let q = 0; q < h; ++q)
        v[O * h + q] = r[T * h + q];
      w[O] = n[T], c[T] = O;
    }
    for (let T = 0; T < l; ++T)
      if (I[T] === 0) {
        const F = T === 0 ? 0 : g[T - 1];
        v[F * h + 0] = T;
        for (let O = 1; O < h; ++O)
          v[F * h + O] = 0;
        w[F] = o;
      }
    return [
      v,
      [b, h],
      w,
      f,
      c
    ];
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseReshapeImpl(r, e, t, n, s) {
  const a = sizeFromShape(n), o = e[0], u = s.length, l = [];
  let f = 1, c = -1;
  for (let b = 0; b < u; ++b) {
    const v = s[b];
    if (v === -1) {
      if (c !== -1)
        throw new Error(getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c, b));
      c = b, l.push(1);
    } else {
      if (v < 0)
        throw new Error(getSparseReshapeNegativeOutputDimErrorMessage(b, v));
      f *= v, l.push(v);
    }
  }
  if (c !== -1) {
    if (f <= 0)
      throw new Error(getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());
    const b = Math.trunc(a / f);
    if (f * b !== a)
      throw new Error(getSparseReshapeInputOutputMultipleErrorMessage(n, l));
    l[c] = b;
  }
  if (sizeFromShape(l) !== a)
    throw new Error(getSparseReshapeInputOutputMismatchErrorMessage(n, l));
  const d = n.length, m = [];
  if (d > 0) {
    m[d - 1] = 1;
    for (let b = d - 2; b >= 0; --b)
      m[b] = m[b + 1] * n[b + 1];
  }
  const g = [];
  if (u > 0) {
    g[u - 1] = 1;
    for (let b = u - 2; b >= 0; --b)
      g[b] = g[b + 1] * l[b + 1];
  }
  const y = getArrayFromDType(t, o * u);
  for (let b = 0; b < o; ++b) {
    let v = 0;
    for (let w = 0; w < d; ++w)
      v += r[b * d + w] * m[w];
    for (let w = 0; w < u; ++w)
      y[b * u + w] = Math.trunc(v / g[w]), v %= g[w];
  }
  return [y, [o, u], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseSegmentReductionImpl(r, e, t, n, s, a = !1, o = 0) {
  const u = n.length, l = [e[0], r.length / e[0]], f = l[1], h = u > 0 ? s[u - 1] + 1 : 0;
  if (h < 0)
    throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  const d = e.slice();
  d[0] = h;
  const m = d.reduce((I, T) => I * T, 1), g = getArrayFromDType(t, m);
  if (u === 0)
    return h > 0 && g.fill(o), [g, d];
  if (h <= 0)
    throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let y = 0, b = 1, v = 0, w = s[y];
  for (; ; ) {
    let I = 0;
    if (b < u) {
      if (I = s[b], w === I) {
        ++b;
        continue;
      }
      if (w >= I)
        throw new Error(getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());
    }
    if (w < 0 || w >= h)
      throw new Error(getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(w, h));
    w > v && g.fill(o, v * f, w * f);
    for (let T = y; T < b; ++T) {
      const _ = n[T];
      if (_ < 0 || _ >= l[0])
        throw new Error(getSparseSegmentReductionIndicesOutOfRangeErrorMessage(T, n[T], l[0]));
      for (let F = 0; F < f; F++)
        g[w * f + F] += r[_ * f + F];
    }
    if (a)
      for (let T = 0; T < f; T++)
        g[w * f + T] /= b - y;
    if (y = b, ++b, v = w + 1, w = I, b > u)
      break;
  }
  return v < h && g.fill(o, v * f, h * f), [g, d];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sqrtImpl = createSimpleUnaryImpl((r) => Math.sqrt(r)), sqrt$1 = unaryKernelFunc$1(Sqrt, (r) => Math.sqrt(r)), sqrtConfig$1 = {
  kernelName: Sqrt,
  backendName: "cpu",
  kernelFunc: sqrt$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const squaredDifferenceImpl = createSimpleBinaryKernelImpl((r, e) => {
  const t = r - e;
  return t * t;
}), squaredDifference$1 = binaryKernelFunc$1(SquaredDifference, squaredDifferenceImpl), squaredDifferenceConfig$1 = {
  kernelName: SquaredDifference,
  backendName: "cpu",
  kernelFunc: squaredDifference$1
};
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const staticRegexReplaceImpl = createSimpleUnaryImpl((r, e) => {
  const { pattern: t, replaceGlobal: n, rewrite: s } = e;
  return r.replace(new RegExp(t, n ? "g" : ""), s);
}), staticRegexReplace$1 = unaryKernelFuncFromImpl(StaticRegexReplace, staticRegexReplaceImpl), staticRegexReplaceConfig$1 = {
  kernelName: StaticRegexReplace,
  backendName: "cpu",
  kernelFunc: staticRegexReplace$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stridedSliceImpl(r, e, t, n) {
  const s = buffer$1(r, e.dtype);
  for (let a = 0; a < s.size; a++) {
    const o = s.indexToLoc(a), u = new Array(o.length);
    for (let l = 0; l < u.length; l++)
      u[l] = o[l] * t[l] + n[l];
    s.set(e.get(...u), ...o);
  }
  return s;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class StringNGramsOp {
  constructor(e, t, n, s, a, o) {
    this.separator = encodeString(e), this.nGramWidths = t, this.leftPad = encodeString(n), this.rightPad = encodeString(s), this.padWidth = a, this.preserveShort = o;
  }
  getPadWidth(e) {
    return Math.min(this.padWidth < 0 ? e - 1 : this.padWidth, e - 1);
  }
  getNumNGrams(e, t) {
    const n = this.getPadWidth(t);
    return Math.max(0, e + 2 * n - t + 1);
  }
  createNGrams(e, t, n, s, a, o) {
    for (let u = 0; u < a; ++u) {
      const l = this.getPadWidth(o), f = Math.max(0, l - u), c = Math.max(0, l - (a - (u + 1))), h = o - (f + c), d = t + (f > 0 ? 0 : u - l);
      let m = 0;
      m += f * this.leftPad.length;
      for (let w = 0; w < h; ++w)
        m += e[d + w].length;
      m += c * this.rightPad.length;
      const g = f + c + h - 1;
      m += g * this.separator.length, n[s + u] = new Uint8Array(m);
      const y = n[s + u];
      let b = 0;
      const v = (w) => w.forEach((I) => y[b++] = I);
      for (let w = 0; w < f; ++w)
        v(this.leftPad), v(this.separator);
      for (let w = 0; w < h - 1; ++w)
        v(e[d + w]), v(this.separator);
      if (h > 0) {
        v(e[d + h - 1]);
        for (let w = 0; w < c; ++w)
          v(this.separator), v(this.rightPad);
      } else {
        for (let w = 0; w < c - 1; ++w)
          v(this.rightPad), v(this.separator);
        v(this.rightPad);
      }
    }
  }
  // Data and splits together form the definition of the ragged tensor,
  // where data is 1 dimensional and contains the values of the tensor
  // and splits denotes the indices at which each row starts.
  compute(e, t) {
    const n = e.length, s = t.length;
    if (s > 0) {
      let l = t[0];
      if (l !== 0)
        throw new Error(`First split value must be 0, got ${l}`);
      for (let f = 1; f < s; ++f) {
        let c = t[f] >= l;
        if (c = c && t[f] <= n, !c)
          throw new Error(`Invalid split value ${t[f]}, must be in [${l}, ${n}]`);
        l = t[f];
      }
      if (l !== n)
        throw new Error(`Last split value must be data size. Expected ${n}, got ${l}`);
    }
    const a = s - 1, o = getArrayFromDType("int32", s);
    if (n === 0 || s === 0) {
      const l = new Array(n);
      for (let f = 0; f <= a; ++f)
        o[f] = 0;
      return [l, o];
    }
    o[0] = 0;
    for (let l = 1; l <= a; ++l) {
      const f = t[l] - t[l - 1];
      let c = 0;
      this.nGramWidths.forEach((h) => {
        c += this.getNumNGrams(f, h);
      }), this.preserveShort && f > 0 && c === 0 && (c = 1), o[l] = o[l - 1] + c;
    }
    const u = new Array(o[a]);
    for (let l = 0; l < a; ++l) {
      const f = t[l];
      let c = o[l];
      if (this.nGramWidths.forEach((h) => {
        const d = t[l + 1] - t[l], m = this.getNumNGrams(d, h);
        this.createNGrams(e, f, u, c, m, h), c += m;
      }), this.preserveShort && c === o[l]) {
        const h = t[l + 1] - t[l];
        if (h === 0)
          continue;
        const d = h + 2 * this.padWidth;
        this.createNGrams(e, f, u, c, 1, d);
      }
    }
    return [u, o];
  }
}
function stringNGramsImpl(r, e, t, n, s, a, o, u) {
  return new StringNGramsOp(t, n, s, a, o, u).compute(r, e);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function split(r, e, t, n) {
  if (!r.length)
    return;
  if (e.length === 0) {
    for (let a = 0; a < r.length; ++a)
      n.push(r.subarray(a, a + 1));
    return;
  }
  if (e.length === 1) {
    const a = e[0];
    let o = r.indexOf(a);
    for (; o !== -1; ) {
      const u = r.subarray(0, o);
      (!t || u.length !== 0) && n.push(u), r = r.subarray(o + 1), o = r.indexOf(a);
    }
    (!t || r.length !== 0) && n.push(r);
    return;
  }
  let s = 0;
  for (let a = 0; a < r.length + 1; a++)
    if (a === r.length || e.indexOf(r[a]) !== -1) {
      const o = r.subarray(s, a);
      (!t || o.length !== 0) && n.push(o), s = a + 1;
    }
}
function stringSplitImpl(r, e, t) {
  const n = r.length, s = [];
  let a = 0, o = 0;
  const u = new Array(n);
  for (let d = 0; d < n; ++d) {
    const m = s.length;
    split(r[d], e, t, s);
    const g = s.length - m;
    u[d] = g, a += g, o = Math.max(o, g);
  }
  const l = getArrayFromDType("int32", a * 2), f = new Array(a), c = [n, o];
  let h = 0;
  for (let d = 0; d < n; ++d)
    for (let m = 0; m < u[d]; ++m)
      l[h * 2] = d, l[h * 2 + 1] = m, f[h] = s[h], ++h;
  return [l, f, c];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringToHashBucketFastImpl(r, e) {
  const t = getArrayFromDType("int32", r.length);
  for (let n = 0; n < r.length; ++n)
    t[n] = fingerPrint64(r[n]).modulo(e).getLowBitsUnsigned();
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const subImpl = createSimpleBinaryKernelImpl((r, e) => r - e), subComplexImpl = createComplexBinaryKernelImpl((r, e, t, n) => ({ real: r - t, imag: e - n })), sub$1 = binaryKernelFunc$1(Sub, subImpl, subComplexImpl), subConfig$1 = {
  kernelName: Sub,
  backendName: "cpu",
  kernelFunc: sub$1
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tileImpl(r, e) {
  const t = new Array(r.rank);
  for (let s = 0; s < t.length; s++)
    t[s] = r.shape[s] * e[s];
  const n = buffer$1(t, r.dtype);
  for (let s = 0; s < n.values.length; ++s) {
    const a = n.indexToLoc(s), o = new Array(r.rank);
    for (let l = 0; l < o.length; l++)
      o[l] = a[l] % r.shape[l];
    const u = r.locToIndex(o);
    n.values[s] = r.values[u];
  }
  return n;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const comparePair = (r, e) => {
  const t = e.value - r.value;
  return t === 0 ? r.index - e.index : t;
};
function select$2(r, e, t = 0, n = r.length - 1) {
  for (; n > t; ) {
    if (n - t > 600) {
      const u = n - t + 1, l = e - t + 1, f = Math.log(u), c = 0.5 * Math.exp(2 * f / 3), h = 0.5 * Math.sqrt(f * c * (u - c) / u) * Math.sign(l - u / 2), d = Math.max(t, Math.floor(e - l * c / u + h)), m = Math.min(n, Math.floor(e + (u - l) * c / u + h));
      select$2(r, e, d, m);
    }
    const s = r[e];
    let a = t, o = n;
    for (swap(r, t, e), comparePair(r[n], s) > 0 && swap(r, t, n); a < o; ) {
      for (swap(r, a, o), a++, o--; comparePair(r[a], s) < 0; )
        a = a + 1;
      for (; comparePair(r[o], s) > 0; )
        o = o - 1;
    }
    comparePair(r[t], s) === 0 ? swap(r, t, o) : (o = o + 1, swap(r, o, n)), o <= e && (t = o + 1), e <= o && (n = o - 1);
  }
}
function topKImpl(r, e, t, n, s) {
  const a = e[e.length - 1], [o, u] = [r.length / a, a], l = getTypedArrayFromDType(t, o * n), f = getTypedArrayFromDType("int32", o * n);
  for (let h = 0; h < o; h++) {
    const d = h * u, m = r.subarray(d, d + u);
    let g = new Array(m.length);
    m.forEach((w, I) => g[I] = { value: w, index: I }), n < g.length && (select$2(g, n), g = g.slice(0, n)), s && g.sort(comparePair);
    const y = h * n, b = l.subarray(y, y + n), v = f.subarray(y, y + n);
    for (let w = 0; w < n; w++)
      b[w] = g[w].value, v[w] = g[w].index;
  }
  const c = e.slice();
  return c[c.length - 1] = n, [
    buffer$1(c, t, l),
    buffer$1(c, "int32", f)
  ];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uniqueImpl(r, e, t, n) {
  const s = parseAxisParam(e, t)[0], a = [1, t[0], 1];
  for (let g = 0; g < s; g++)
    a[0] *= t[g];
  a[1] = t[s];
  for (let g = s + 1; g < t.length; g++)
    a[2] *= t[g];
  const o = /* @__PURE__ */ new Map(), u = new Int32Array(t[s]), l = new TensorBuffer(a, n, r), f = [], c = a[0] === 1 && a[2] === 1;
  for (let g = 0; g < t[s]; g++) {
    let y;
    if (c)
      y = r[g].toString();
    else {
      const v = [];
      for (let w = 0; w < a[0]; w++)
        for (let I = 0; I < a[2]; I++)
          v.push(l.get(w, g, I));
      y = v.join(",");
    }
    const b = o.get(y);
    if (b != null)
      u[g] = b;
    else {
      const v = o.size;
      o.set(y, v), u[g] = v, f.push(g);
    }
  }
  const h = a.slice();
  h[1] = o.size;
  const d = new TensorBuffer(h, n);
  f.forEach((g, y) => {
    for (let b = 0; b < a[0]; b++)
      for (let v = 0; v < a[2]; v++)
        d.set(l.get(b, g, v), b, y, v);
  });
  const m = t.slice();
  return m[s] = h[1], {
    outputValues: d.values,
    outputShape: m,
    indices: u
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const shared = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  addImpl,
  bincountImpl,
  bincountReduceImpl,
  bitwiseAndImpl,
  castImpl,
  ceilImpl,
  concatImpl: concatImpl$1,
  equalImpl,
  expImpl,
  expm1Impl,
  floorDivImpl,
  floorImpl,
  gatherNdImpl,
  gatherV2Impl,
  greaterEqualImpl,
  greaterImpl,
  lessEqualImpl,
  lessImpl,
  linSpaceImpl,
  logImpl,
  maxImpl: maxImpl$1,
  maximumImpl,
  minimumImpl,
  multiplyImpl,
  negImpl,
  notEqualImpl,
  prodImpl,
  raggedGatherImpl,
  raggedRangeImpl,
  raggedTensorToTensorImpl,
  rangeImpl,
  rsqrtImpl,
  scatterImpl,
  sigmoidImpl,
  simpleAbsImpl,
  sliceImpl,
  sparseFillEmptyRowsImpl,
  sparseReshapeImpl,
  sparseSegmentReductionImpl,
  sqrtImpl,
  squaredDifferenceImpl,
  staticRegexReplaceImpl,
  stridedSliceImpl,
  stringNGramsImpl,
  stringSplitImpl,
  stringToHashBucketFastImpl,
  subImpl,
  tileImpl,
  topKImpl,
  transposeImpl: transposeImpl$1,
  uniqueImpl
}, Symbol.toStringTag, { value: "Module" }));
/** @license See the LICENSE file. */
const version$3 = "4.22.0";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
registerBackend(
  "cpu",
  () => new MathBackendCPU(),
  1
  /* priority */
);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const elu$1 = unaryKernelFunc$1(Elu$1, (r) => r >= 0 ? r : Math.exp(r) - 1), eluConfig$1 = {
  kernelName: Elu$1,
  backendName: "cpu",
  kernelFunc: elu$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function leakyRelu$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { alpha: a } = n;
  assertNotComplex$1([s], "leakyRelu");
  const o = sizeFromShape(s.shape), u = t.data.get(s.dataId).values, l = getTypedArrayFromDType("float32", o);
  for (let f = 0; f < u.length; f++)
    l[f] = u[f] < 0 ? a * u[f] : u[f];
  return t.makeTensorInfo(s.shape, "float32", l);
}
const leakyReluConfig$1 = {
  kernelName: LeakyRelu,
  backendName: "cpu",
  kernelFunc: leakyRelu$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const preluImpl = createSimpleBinaryKernelImpl((r, e) => r < 0 ? e * r : r);
function prelu$1(r) {
  const { inputs: e, backend: t } = r, { x: n, alpha: s } = e;
  assertNotComplex$1([n, s], "prelu");
  const a = t.data.get(n.dataId).values, o = t.data.get(s.dataId).values, [u, l] = preluImpl(n.shape, s.shape, a, o, "float32");
  return t.makeTensorInfo(l, "float32", u);
}
const preluConfig$1 = {
  kernelName: Prelu,
  backendName: "cpu",
  kernelFunc: prelu$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const relu$1 = unaryKernelFunc$1(Relu$1, (r) => Math.max(0, r)), reluConfig$1 = {
  kernelName: Relu$1,
  backendName: "cpu",
  kernelFunc: relu$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const relu6$1 = unaryKernelFunc$1(Relu6$1, (r) => Math.min(Math.max(0, r), 6)), relu6Config$1 = {
  kernelName: Relu6$1,
  backendName: "cpu",
  kernelFunc: relu6$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function applyActivation(r, e, t, n, s) {
  if (t === "linear")
    return identity$1({ inputs: { x: e }, backend: r });
  if (t === "relu")
    return relu$1({ inputs: { x: e }, backend: r });
  if (t === "elu")
    return elu$1({ inputs: { x: e }, backend: r });
  if (t === "relu6")
    return relu6$1({ inputs: { x: e }, backend: r });
  if (t === "prelu")
    return prelu$1({ inputs: { x: e, alpha: n }, backend: r });
  if (t === "leakyrelu")
    return leakyRelu$1({ inputs: { x: e }, backend: r, attrs: { alpha: s } });
  if (t === "sigmoid")
    return sigmoid$1({ inputs: { x: e }, backend: r });
  throw new Error(`Activation ${t} has not been implemented for the CPU backend.`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reshape$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { shape: a } = n, o = sizeFromShape(s.shape), u = inferFromImplicitShape(a, o), l = sizeFromShape(u);
  assert$1(o === l, () => `The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`), t.incRef(s.dataId);
  const f = t.data.get(s.dataId);
  if (f.complexTensorInfos != null) {
    const c = f.complexTensorInfos.real, h = f.complexTensorInfos.imag;
    c.shape = u, h.shape = u;
  }
  return { dataId: s.dataId, shape: u, dtype: s.dtype };
}
const reshapeConfig$1 = {
  kernelName: Reshape$1,
  backendName: "cpu",
  kernelFunc: reshape$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function batchMatMul$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { a: s, b: a } = e, { transposeA: o, transposeB: u } = n;
  assertNotComplex$1([s, a], "matMul");
  const l = s.shape.length, f = a.shape.length, c = o ? s.shape[l - 2] : s.shape[l - 1], h = u ? a.shape[f - 1] : a.shape[f - 2], d = o ? s.shape[l - 1] : s.shape[l - 2], m = u ? a.shape[f - 2] : a.shape[f - 1], g = s.shape.slice(0, -2), y = a.shape.slice(0, -2), b = sizeFromShape(g), v = sizeFromShape(y), I = assertAndGetBroadcastShape(s.shape.slice(0, -2), a.shape.slice(0, -2)).concat([d, m]);
  assert$1(c === h, () => `Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${o} and transposeB=${u} must match.`);
  const T = o ? [b, c, d] : [b, d, c], _ = u ? [v, m, h] : [v, h, m], F = reshape$1({ inputs: { x: s }, backend: t, attrs: { shape: T } }), O = reshape$1({ inputs: { x: a }, backend: t, attrs: { shape: _ } }), q = o ? F.shape[1] : F.shape[2], V = o ? F.shape[2] : F.shape[1], H = u ? O.shape[1] : O.shape[2], R = Math.max(b, v), $ = t.data.get(F.dataId).values, S = t.data.get(O.dataId).values, x = computeStrides(F.shape), C = computeStrides(O.shape), [A, N, k] = o ? [x[0], 1, x[1]] : [x[0], x[1], 1], [D, E, M] = u ? [1, C[1], C[0]] : [C[1], 1, C[0]], P = V * H, z = buffer$1([R, V, H], F.dtype), J = z.values, re = t.blockSize;
  for (let Q = 0; Q < R; Q++) {
    const W = Q % b, j = Q % v;
    for (let te = 0; te < V; te += re) {
      const se = Math.min(te + re, V);
      for (let X = 0; X < H; X += re) {
        const K = Math.min(X + re, H);
        for (let ae = 0; ae < q; ae += re) {
          const de = Math.min(ae + re, q);
          for (let me = te; me < se; me++)
            for (let pe = X; pe < K; pe++) {
              let ge = 0;
              for (let ye = ae; ye < de; ye++) {
                const ce = (
                  // tslint:disable-next-line: max-line-length
                  $[W * A + me * N + ye * k]
                ), $e = (
                  // tslint:disable-next-line: max-line-length
                  S[ye * D + pe * E + j * M]
                );
                ge += ce * $e;
              }
              J[Q * P + (me * H + pe)] += ge;
            }
        }
      }
    }
  }
  return t.disposeIntermediateTensorInfo(F), t.disposeIntermediateTensorInfo(O), t.makeTensorInfo(I, z.dtype, z.values);
}
const batchMatMulConfig$1 = {
  kernelName: BatchMatMul,
  backendName: "cpu",
  kernelFunc: batchMatMul$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _fusedMatMul$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { a: s, b: a, bias: o, preluActivationWeights: u } = e, { transposeA: l, transposeB: f, activation: c, leakyreluAlpha: h } = n;
  let d, m, g;
  const y = [];
  d = batchMatMul$1({ inputs: { a: s, b: a }, attrs: { transposeA: l, transposeB: f }, backend: t }), o && (m = add({ inputs: { a: d, b: o }, backend: t }), y.push(d), d = m), c && (g = applyActivation(t, d, c, u, h), y.push(d), d = g);
  for (const v of y)
    t.disposeIntermediateTensorInfo(v);
  return d;
}
const _fusedMatMulConfig$1 = {
  kernelName: _FusedMatMul,
  backendName: "cpu",
  kernelFunc: _fusedMatMul$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const acos$1 = unaryKernelFunc$1(Acos, (r) => Math.acos(r)), acosConfig$1 = {
  kernelName: Acos,
  backendName: "cpu",
  kernelFunc: acos$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const acosh$1 = unaryKernelFunc$1(Acosh, (r) => Math.acosh(r)), acoshConfig$1 = {
  kernelName: Acosh,
  backendName: "cpu",
  kernelFunc: acosh$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function addN$1(r) {
  const { inputs: e, backend: t } = r, n = e;
  assertNotComplex$1(e, "addN");
  const s = n.map((u) => t.data.get(u.dataId).values), a = buffer$1(n[0].shape, n[0].dtype), o = a.values;
  for (let u = 0; u < n.length; u++) {
    const l = s[u];
    for (let f = 0; f < o.length; f++)
      o[f] += l[f];
  }
  return t.makeTensorInfo(a.shape, a.dtype, a.values);
}
const addNConfig$1 = {
  kernelName: AddN,
  backendName: "cpu",
  kernelFunc: addN$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function all$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n;
  assertNotComplex$1(s, "all");
  const u = parseAxisParam(a, s.shape);
  let l = u;
  const f = getAxesPermutation(l, s.shape.length);
  let c = s;
  f != null && (c = transpose$1({ inputs: { x: s }, backend: t, attrs: { perm: f } }), l = getInnerMostAxes(l.length, s.shape.length)), assertAxesAreInnerMostDims("all", l, c.shape.length);
  const [h, d] = computeOutAndReduceShapes(c.shape, l), m = sizeFromShape(d), g = makeZerosTypedArray(sizeFromShape(h), c.dtype), y = t.data.get(c.dataId).values;
  for (let v = 0; v < g.length; ++v) {
    const w = v * m;
    let I = y[w];
    for (let T = 0; T < m; ++T) {
      const _ = y[w + T];
      I = I && _;
    }
    g[v] = I;
  }
  f != null && t.disposeIntermediateTensorInfo(c);
  const b = t.makeTensorInfo(h, c.dtype, g);
  if (o) {
    const v = expandShapeToKeepDim(h, u), w = reshape$1({ inputs: { x: b }, backend: t, attrs: { shape: v } });
    return t.disposeIntermediateTensorInfo(b), w;
  }
  return b;
}
const allConfig$1 = {
  kernelName: All,
  backendName: "cpu",
  kernelFunc: all$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function any$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n;
  assertNotComplex$1(s, "any");
  const u = parseAxisParam(a, s.shape);
  let l = u;
  const f = getAxesPermutation(l, s.shape.length);
  let c = s;
  f != null && (c = transpose$1({ inputs: { x: s }, backend: t, attrs: { perm: f } }), l = getInnerMostAxes(l.length, s.shape.length)), assertAxesAreInnerMostDims("any", l, c.shape.length);
  const [h, d] = computeOutAndReduceShapes(c.shape, l), m = sizeFromShape(d), g = makeZerosTypedArray(sizeFromShape(h), c.dtype), y = t.data.get(c.dataId).values;
  for (let v = 0; v < g.length; ++v) {
    const w = v * m;
    let I = y[w];
    for (let T = 0; T < m; ++T) {
      const _ = y[w + T];
      I = I || _;
    }
    g[v] = I;
  }
  f != null && t.disposeIntermediateTensorInfo(c);
  const b = t.makeTensorInfo(h, c.dtype, g);
  if (o) {
    const v = expandShapeToKeepDim(h, u), w = reshape$1({ inputs: { x: b }, backend: t, attrs: { shape: v } });
    return t.disposeIntermediateTensorInfo(b), w;
  }
  return b;
}
const anyConfig$1 = {
  kernelName: Any,
  backendName: "cpu",
  kernelFunc: any$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function argMax$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a } = n;
  assertNotComplex$1(s, "argMax");
  let o = parseAxisParam(a, s.shape);
  const u = getAxesPermutation(o, s.shape.length);
  let l = s;
  const f = [];
  u != null && (l = transpose$1({ inputs: { x: s }, backend: t, attrs: { perm: u } }), f.push(l), o = getInnerMostAxes(o.length, l.shape.length)), o = [o[0]], assertAxesAreInnerMostDims("argMax", o, l.shape.length);
  const [c, h] = computeOutAndReduceShapes(l.shape, o), d = sizeFromShape(c), m = makeZerosTypedArray(d, "int32"), g = sizeFromShape(h), y = t.data.get(l.dataId).values;
  for (let b = 0; b < m.length; ++b) {
    const v = b * g;
    let w = y[v], I = 0;
    for (let T = 0; T < g; ++T) {
      const _ = y[v + T];
      _ > w && (w = _, I = T);
    }
    m[b] = I;
  }
  return f.forEach((b) => t.disposeIntermediateTensorInfo(b)), t.makeTensorInfo(c, "int32", m);
}
const argMaxConfig$1 = {
  kernelName: ArgMax,
  backendName: "cpu",
  kernelFunc: argMax$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function argMin$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a } = n;
  assertNotComplex$1(s, "argMin");
  let o = parseAxisParam(a, s.shape);
  const u = getAxesPermutation(o, s.shape.length);
  let l = s;
  const f = [];
  u != null && (l = transpose$1({ inputs: { x: s }, backend: t, attrs: { perm: u } }), f.push(l), o = getInnerMostAxes(o.length, l.shape.length)), o = [o[0]], assertAxesAreInnerMostDims("argMin", o, l.shape.length);
  const [c, h] = computeOutAndReduceShapes(l.shape, o), d = sizeFromShape(c), m = makeZerosTypedArray(d, "int32"), g = sizeFromShape(h), y = t.data.get(l.dataId).values;
  for (let b = 0; b < m.length; ++b) {
    const v = b * g;
    let w = y[v], I = 0;
    for (let T = 0; T < g; ++T) {
      const _ = y[v + T];
      _ < w && (w = _, I = T);
    }
    m[b] = I;
  }
  return f.forEach((b) => t.disposeIntermediateTensorInfo(b)), t.makeTensorInfo(c, "int32", m);
}
const argMinConfig$1 = {
  kernelName: ArgMin,
  backendName: "cpu",
  kernelFunc: argMin$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const asin$1 = unaryKernelFunc$1(Asin, (r) => Math.asin(r)), asinConfig$1 = {
  kernelName: Asin,
  backendName: "cpu",
  kernelFunc: asin$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const asinh$1 = unaryKernelFunc$1(Asinh, (r) => Math.asinh(r)), asinhConfig$1 = {
  kernelName: Asinh,
  backendName: "cpu",
  kernelFunc: asinh$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const atan$1 = unaryKernelFunc$1(Atan, (r) => Math.atan(r)), atanConfig$1 = {
  kernelName: Atan,
  backendName: "cpu",
  kernelFunc: atan$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const atan2Impl = createSimpleBinaryKernelImpl((r, e) => Math.atan2(r, e)), atan2$1 = binaryKernelFunc$1(Atan2, atan2Impl), atan2Config$1 = {
  kernelName: Atan2,
  backendName: "cpu",
  kernelFunc: atan2$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const atanh$1 = unaryKernelFunc$1(Atanh, (r) => Math.atanh(r)), atanhConfig$1 = {
  kernelName: Atanh,
  backendName: "cpu",
  kernelFunc: atanh$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pool(r, e, t, n, s, a) {
  const o = s.strideHeight, u = s.strideWidth, l = s.dilationHeight, f = s.dilationWidth, c = s.effectiveFilterHeight, h = s.effectiveFilterWidth, d = s.padInfo.top, m = s.padInfo.left, g = a === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, y = buffer$1(s.outShape, t), b = y.values, v = s.outShape[1] * s.outShape[2] * s.outShape[3], w = s.outShape[2] * s.outShape[3], I = s.outShape[3];
  for (let T = 0; T < s.batchSize; ++T) {
    const _ = T * v, F = T * n[0];
    for (let O = 0; O < s.inChannels; ++O)
      for (let q = 0; q < s.outHeight; ++q) {
        const V = q * o - d, H = Math.max(0, V), R = Math.min(s.inHeight, c + V), $ = _ + q * w;
        for (let S = 0; S < s.outWidth; ++S) {
          const x = S * u - m, C = Math.max(0, x), A = Math.min(s.inWidth, h + x);
          let N = g, k = 0, D = 0;
          for (let M = H; M < R; M += l) {
            const P = F + M * n[1];
            for (let z = C; z < A; z += f) {
              const J = P + z * n[2], re = r[J + O];
              a === "max" && re > N ? N = re : a === "avg" && (k += re, D++);
            }
            if (isNaN(N))
              break;
          }
          const E = $ + S * I + O;
          b[E] = a === "avg" ? k / D : N;
        }
      }
  }
  return y;
}
function maxPoolPositions(r, e, t, n, s = !1, a = !1) {
  const o = buffer$1(n.outShape, "int32"), u = n.strideHeight, l = n.strideWidth, f = n.dilationHeight, c = n.dilationWidth, h = n.effectiveFilterHeight, d = n.effectiveFilterWidth, m = n.padInfo.top, g = n.padInfo.left, y = buffer$1(e, t, r);
  for (let b = 0; b < n.batchSize; ++b)
    for (let v = 0; v < n.inChannels; ++v)
      for (let w = 0; w < n.outHeight; ++w) {
        const I = w * u - m;
        let T = I;
        for (; T < 0; )
          T += f;
        const _ = Math.min(n.inHeight, h + I);
        for (let F = 0; F < n.outWidth; ++F) {
          const O = F * l - g;
          let q = O;
          for (; q < 0; )
            q += c;
          const V = Math.min(n.inWidth, d + O);
          let H = Number.NEGATIVE_INFINITY, R = -1;
          for (let $ = T; $ < _; $ += f) {
            const S = $ - I;
            for (let x = q; x < V; x += c) {
              const C = x - O, A = y.get(b, $, x, v);
              A > H && (H = A, s ? R = a ? ((b * n.inHeight + $) * n.inWidth + x) * n.inChannels + v : ($ * n.inWidth + x) * n.inChannels + v : R = S * d + C);
            }
          }
          o.set(R, b, w, F, v);
        }
      }
  return o;
}
function pool3d(r, e, t, n, s, a) {
  const o = s.strideDepth, u = s.strideHeight, l = s.strideWidth, f = s.dilationDepth, c = s.dilationHeight, h = s.dilationWidth, d = s.effectiveFilterDepth, m = s.effectiveFilterHeight, g = s.effectiveFilterWidth, y = s.padInfo.front, b = s.padInfo.top, v = s.padInfo.left, w = a === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, I = buffer$1(s.outShape, t), T = I.values, _ = s.outShape[1] * s.outShape[2] * s.outShape[3] * s.outShape[4], F = s.outShape[2] * s.outShape[3] * s.outShape[4], O = s.outShape[3] * s.outShape[4], q = s.outShape[4];
  for (let V = 0; V < s.batchSize; ++V) {
    const H = V * _, R = V * n[0];
    for (let $ = 0; $ < s.inChannels; ++$)
      for (let S = 0; S < s.outDepth; ++S) {
        const x = S * o - y;
        let C = x;
        for (; C < 0; )
          C += f;
        const A = Math.min(s.inDepth, d + x), N = H + S * F;
        for (let k = 0; k < s.outHeight; ++k) {
          const D = k * u - b;
          let E = D;
          for (; E < 0; )
            E += c;
          const M = Math.min(s.inHeight, m + D), P = N + k * O;
          for (let z = 0; z < s.outWidth; ++z) {
            const J = z * l - v;
            let re = J;
            for (; re < 0; )
              re += h;
            const Q = Math.min(s.inWidth, g + J), W = P + z * q;
            let j = w, te = 0, se = 0;
            for (let K = C; K < A; K += f) {
              const ae = R + K * n[1];
              for (let de = E; de < M; de += c) {
                const me = ae + de * n[2];
                for (let pe = re; pe < Q; pe += h) {
                  const ge = me + pe * n[3], ye = r[ge + $];
                  if (a === "max" && ye > j ? j = ye : a === "avg" && (te += ye, se++), isNaN(j))
                    break;
                }
                if (isNaN(j))
                  break;
              }
              if (isNaN(j))
                break;
            }
            const X = W + $;
            T[X] = a === "avg" ? te / Math.max(se, 1) : j;
          }
        }
      }
  }
  return I;
}
function maxPool3dPositions(r, e) {
  const t = buffer$1(e.outShape, "int32"), n = e.strideDepth, s = e.strideHeight, a = e.strideWidth, o = e.dilationDepth, u = e.dilationHeight, l = e.dilationWidth, f = e.effectiveFilterDepth, c = e.effectiveFilterHeight, h = e.effectiveFilterWidth, d = e.padInfo.front, m = e.padInfo.top, g = e.padInfo.left;
  for (let y = 0; y < e.batchSize; ++y)
    for (let b = 0; b < e.inChannels; ++b)
      for (let v = 0; v < e.outDepth; ++v) {
        const w = v * n - d;
        let I = w;
        for (; I < 0; )
          I += o;
        const T = Math.min(e.inDepth, f + w);
        for (let _ = 0; _ < e.outHeight; ++_) {
          const F = _ * s - m;
          let O = F;
          for (; O < 0; )
            O += u;
          const q = Math.min(e.inHeight, c + F);
          for (let V = 0; V < e.outWidth; ++V) {
            const H = V * a - g;
            let R = H;
            for (; R < 0; )
              R += l;
            const $ = Math.min(e.inWidth, h + H);
            let S = Number.NEGATIVE_INFINITY, x = -1;
            for (let C = I; C < T; C += o) {
              const A = C - w;
              for (let N = O; N < q; N += u) {
                const k = N - F;
                for (let D = R; D < $; D += l) {
                  const E = D - H, M = r.get(y, C, N, D, b);
                  M >= S && (S = M, x = A * c * h + k * c + E);
                }
              }
            }
            t.set(x, y, v, _, V, b);
          }
        }
      }
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e;
  assertNotComplex$1(s, "avgPool");
  const { filterSize: a, strides: o, pad: u, dimRoundingMode: l } = n, f = 1;
  assert$1(eitherStridesOrDilationsAreOne(o, f), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${f}'`);
  const c = computePool2DInfo(s.shape, a, o, f, u, l);
  let h;
  if (c.filterWidth === 1 && c.filterHeight === 1 && arraysEqual(c.inShape, c.outShape))
    h = identity$1({ inputs: { x: s }, backend: t });
  else {
    const d = t.data.get(s.dataId).values, m = computeStrides(s.shape), g = pool(d, s.shape, s.dtype, m, c, "avg");
    h = t.makeTensorInfo(c.outShape, s.dtype, g.values);
  }
  return h;
}
const avgPoolConfig$1 = {
  kernelName: AvgPool,
  backendName: "cpu",
  kernelFunc: avgPool$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool3D$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { filterSize: a, strides: o, pad: u, dimRoundingMode: l, dataFormat: f } = n;
  assertNotComplex$1(s, "avgPool3d");
  const c = computePool3DInfo(s.shape, a, o, 1, u, l, f), h = t.data.get(s.dataId).values, d = pool3d(h, s.shape, s.dtype, computeStrides(s.shape), c, "avg");
  return t.makeTensorInfo(d.shape, "float32", d.values);
}
const avgPool3DConfig$1 = {
  kernelName: AvgPool3D,
  backendName: "cpu",
  kernelFunc: avgPool3D$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool3DGrad$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, input: a } = e, { filterSize: o, strides: u, pad: l, dimRoundingMode: f } = n;
  assertNotComplex$1([s, a], "avgPool3DGrad");
  const c = computePool3DInfo(a.shape, o, u, 1, l, f), h = c.strideDepth, d = c.strideHeight, m = c.strideWidth, g = c.filterDepth, y = c.filterHeight, b = c.filterWidth, v = c.dilationDepth, w = c.dilationHeight, I = c.dilationWidth, T = c.effectiveFilterDepth, _ = c.effectiveFilterHeight, F = c.effectiveFilterWidth, O = T - 1 - c.padInfo.front, q = F - 1 - c.padInfo.left, V = _ - 1 - c.padInfo.top, H = buffer$1(a.shape, "float32"), R = 1 / (g * y * b), $ = t.bufferSync(s);
  for (let S = 0; S < c.batchSize; ++S)
    for (let x = 0; x < c.inChannels; ++x)
      for (let C = 0; C < c.inDepth; ++C)
        for (let A = 0; A < c.inHeight; ++A)
          for (let N = 0; N < c.inWidth; ++N) {
            const k = C - O, D = A - V, E = N - q;
            let M = 0;
            for (let P = 0; P < T; P += v) {
              const z = (k + P) / h;
              if (!(z < 0 || z >= c.outDepth || Math.floor(z) !== z))
                for (let J = 0; J < _; J += w) {
                  const re = (D + J) / d;
                  if (!(re < 0 || re >= c.outHeight || Math.floor(re) !== re))
                    for (let Q = 0; Q < F; Q += I) {
                      const W = (E + Q) / m;
                      if (W < 0 || W >= c.outWidth || Math.floor(W) !== W)
                        continue;
                      const j = $.get(S, z, re, W, x);
                      M += j;
                    }
                }
            }
            H.set(M * R, S, C, A, N, x);
          }
  return t.makeTensorInfo(H.shape, H.dtype, H.values);
}
const avgPool3DGradConfig$1 = {
  kernelName: AvgPool3DGrad,
  backendName: "cpu",
  kernelFunc: avgPool3DGrad$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPoolGrad$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, input: a } = e, o = a;
  assertNotComplex$1([s, a], "avgPoolGrad");
  const { filterSize: u, strides: l, pad: f } = n, c = computePool2DInfo(o.shape, u, l, 1, f), h = c.strideHeight, d = c.strideWidth, m = c.filterHeight, g = c.filterWidth, y = c.dilationHeight, b = c.dilationWidth, v = c.effectiveFilterHeight, w = c.effectiveFilterWidth, I = w - 1 - c.padInfo.left, T = v - 1 - c.padInfo.top, _ = buffer$1(o.shape, "float32"), F = 1 / (m * g), O = t.data.get(s.dataId).values, q = buffer$1(s.shape, "float32", O);
  for (let V = 0; V < c.batchSize; ++V)
    for (let H = 0; H < c.inChannels; ++H)
      for (let R = 0; R < c.inHeight; ++R)
        for (let $ = 0; $ < c.inWidth; ++$) {
          const S = R - T, x = $ - I;
          let C = 0;
          for (let A = 0; A < v; A += y) {
            const N = (S + A) / h;
            if (!(N < 0 || N >= c.outHeight || Math.floor(N) !== N))
              for (let k = 0; k < w; k += b) {
                const D = (x + k) / d;
                if (D < 0 || D >= c.outWidth || Math.floor(D) !== D)
                  continue;
                const E = q.get(V, N, D, H);
                C += E;
              }
          }
          _.set(C * F, V, R, $, H);
        }
  return t.makeTensorInfo(_.shape, _.dtype, _.values);
}
const avgPoolGradConfig$1 = {
  kernelName: AvgPoolGrad,
  backendName: "cpu",
  kernelFunc: avgPoolGrad$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function batchNorm$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, scale: a, offset: o, mean: u, variance: l } = e;
  assert$1(u.shape.length === l.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), assert$1(o == null || u.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), assert$1(a == null || u.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), assertNotComplex$1([s, u, l, a, o], "batchNorm");
  let { varianceEpsilon: f } = n;
  f == null && (f = 1e-3);
  const c = t.data.get(s.dataId).values, h = t.data.get(u.dataId).values, d = t.data.get(l.dataId).values, m = a ? t.data.get(a.dataId).values : new Float32Array([1]), g = o ? t.data.get(o.dataId).values : new Float32Array([0]), y = new Float32Array(c.length), b = g.length, v = m.length, w = d.length, I = h.length;
  let T = 0, _ = 0, F = 0, O = 0;
  for (let q = 0; q < c.length; ++q)
    y[q] = g[T++] + (c[q] - h[_++]) * m[F++] / Math.sqrt(d[O++] + f), T >= b && (T = 0), _ >= I && (_ = 0), F >= v && (F = 0), O >= w && (O = 0);
  return t.makeTensorInfo(s.shape, s.dtype, y);
}
const batchNormConfig$1 = {
  kernelName: FusedBatchNorm,
  backendName: "cpu",
  kernelFunc: batchNorm$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function batchToSpaceND$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { blockShape: a, crops: o } = n;
  assertNotComplex$1([s], "batchToSpaceND");
  const u = a.reduce((v, w) => v * w), l = getReshaped(s.shape, a, u), f = getPermuted(l.length, a.length), c = getReshapedPermuted(s.shape, a, u), h = getSliceBeginCoords(o, a.length), d = getSliceSize(c, o, a.length), m = reshape$1({ inputs: { x: s }, backend: t, attrs: { shape: l } }), g = transpose$1({ inputs: { x: m }, backend: t, attrs: { perm: f } }), y = reshape$1({ inputs: { x: g }, backend: t, attrs: { shape: c } }), b = slice$1({
    inputs: { x: y },
    backend: t,
    attrs: { begin: h, size: d }
  });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), t.disposeIntermediateTensorInfo(y), b;
}
const batchToSpaceNDConfig$1 = {
  kernelName: BatchToSpaceND,
  backendName: "cpu",
  kernelFunc: batchToSpaceND$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bincount$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, weights: a } = e, { size: o } = n, u = t.data.get(s.dataId).values, l = t.data.get(a.dataId).values, f = bincountImpl(u, l, a.dtype, a.shape, o);
  return t.makeTensorInfo([o], a.dtype, f);
}
const bincountConfig$1 = {
  kernelName: Bincount,
  backendName: "cpu",
  kernelFunc: bincount$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function broadcastArgs$1(r) {
  const { inputs: e, backend: t } = r, { s0: n, s1: s } = e, a = t.data.get(n.dataId).values, o = t.data.get(s.dataId).values, u = assertAndGetBroadcastShape(Array.from(a), Array.from(o));
  return t.makeTensorInfo([u.length], "int32", Int32Array.from(u));
}
const broadcastArgsConfig$1 = {
  kernelName: BroadcastArgs,
  backendName: "cpu",
  kernelFunc: broadcastArgs$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const clipByValue$1 = unaryKernelFunc$1(ClipByValue, (r, e) => {
  const t = e;
  return r > t.clipValueMax ? t.clipValueMax : r < t.clipValueMin ? t.clipValueMin : r;
}), clipByValueConfig$1 = {
  kernelName: ClipByValue,
  backendName: "cpu",
  kernelFunc: clipByValue$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const complexAbs$1 = (r) => {
  const { x: e } = r.inputs, t = r.backend, n = new Float32Array(sizeFromShape(e.shape)), s = t.data.get(e.dataId), a = s.complexTensorInfos.real, o = s.complexTensorInfos.imag, u = t.data.get(a.dataId).values, l = t.data.get(o.dataId).values;
  for (let f = 0; f < u.length; f++) {
    const c = u[f], h = l[f];
    n[f] = Math.hypot(c, h);
  }
  return t.makeOutput(n, e.shape, "float32");
}, complexAbsConfig$1 = {
  kernelName: ComplexAbs,
  backendName: "cpu",
  kernelFunc: complexAbs$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function imag$1(r) {
  const { inputs: e, backend: t } = r, { input: n } = e, s = t.data.get(n.dataId).complexTensorInfos.imag, a = t.data.get(s.dataId).values;
  return t.makeTensorInfo(s.shape, s.dtype, a);
}
const imagConfig$1 = {
  kernelName: Imag,
  backendName: "cpu",
  kernelFunc: imag$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function concat$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { axis: s } = n, a = parseAxisParam(s, e[0].shape)[0], o = e.map((y) => y.shape);
  assertParamsConsistent(o, a);
  let u = computeOutShape$1(e.map((y) => y.shape), a);
  if (sizeFromShape(u) === 0)
    return t.makeTensorInfo(u, e[0].dtype, []);
  const l = e.filter((y) => sizeFromShape(y.shape) > 0);
  if (l.length === 1)
    return identity$1({ inputs: { x: l[0] }, backend: t });
  if (l[0].dtype === "complex64") {
    const y = l.map((T) => real$1({ inputs: { input: T }, backend: t })), b = l.map((T) => imag$1({ inputs: { input: T }, backend: t })), v = concat$1({ inputs: y, backend: t, attrs: { axis: a } }), w = concat$1({ inputs: b, backend: t, attrs: { axis: a } }), I = complex$1({ inputs: { real: v, imag: w }, backend: t });
    return y.forEach((T) => t.disposeIntermediateTensorInfo(T)), b.forEach((T) => t.disposeIntermediateTensorInfo(T)), t.disposeIntermediateTensorInfo(v), t.disposeIntermediateTensorInfo(w), I;
  }
  const f = l.map((y) => {
    const v = [-1, sizeFromShape(y.shape.slice(a))];
    return reshape$1({ inputs: { x: y }, backend: t, attrs: { shape: v } });
  }), c = f.map((y) => ({ vals: t.data.get(y.dataId).values, shape: y.shape }));
  u = computeOutShape$1(
    f.map((y) => y.shape),
    1
    /* axis */
  );
  const h = f[0].shape[0] === 1, d = concatImpl$1(c, u, e[0].dtype, h), m = computeOutShape$1(l.map((y) => y.shape), a), g = t.makeTensorInfo(m, e[0].dtype, d);
  return f.forEach((y) => t.disposeIntermediateTensorInfo(y)), g;
}
const concatConfig$1 = {
  kernelName: Concat,
  backendName: "cpu",
  kernelFunc: concat$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2D(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a } = e, { strides: o, pad: u, dataFormat: l, dilations: f, dimRoundingMode: c } = n;
  assertNotComplex$1([s, a], "conv2d");
  const h = convertConv2DDataFormat(l), d = computeConv2DInfo(s.shape, a.shape, o, f, u, c, !1, h), m = d.filterHeight, g = d.filterWidth, y = d.dilationHeight, b = d.dilationWidth, v = d.padInfo.left, w = d.padInfo.top, I = d.dataFormat === "channelsLast", T = new TensorBuffer(d.outShape, s.dtype), _ = computeStrides(s.shape), F = computeStrides(a.shape), O = _[0], q = I ? _[1] : _[2], V = I ? _[2] : 1, H = I ? 1 : _[1], R = T.strides[0], $ = I ? T.strides[1] : T.strides[2], S = I ? T.strides[2] : 1, x = I ? 1 : T.strides[1], C = t.data.get(s.dataId).values, A = t.data.get(a.dataId).values, N = T.values;
  for (let k = 0; k < d.batchSize; ++k) {
    const D = k * O, E = k * R;
    for (let M = 0; M < d.outHeight; ++M) {
      const P = E + M * $, z = M * d.strideHeight - w;
      for (let J = 0; J < m; ++J) {
        const re = z + J * y;
        if (re < 0 || re >= d.inHeight)
          continue;
        const Q = J * F[0], W = D + re * q;
        for (let j = 0; j < d.outWidth; ++j) {
          const te = P + j * S, se = j * d.strideWidth - v;
          for (let X = 0; X < g; ++X) {
            const K = se + X * b;
            if (K < 0 || K >= d.inWidth)
              continue;
            const ae = Q + X * F[1], de = W + K * V;
            let me = ae;
            for (let pe = 0; pe < d.inChannels; ++pe) {
              const ge = C[de + pe * H];
              for (let ye = 0; ye < d.outChannels; ++ye)
                N[te + ye * x] += ge * A[me + ye];
              me += d.outChannels;
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(T.shape, T.dtype, N);
}
const conv2DConfig$1 = {
  kernelName: Conv2D$1,
  backendName: "cpu",
  kernelFunc: conv2D
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2DBackpropFilter$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, dy: a } = e, { strides: o, pad: u, dataFormat: l, dimRoundingMode: f, filterShape: c } = n;
  assertNotComplex$1([s, a], "conv2dBackpropFilter");
  const h = convertConv2DDataFormat(l), d = computeConv2DInfo(s.shape, c, o, 1, u, f, !1, h), { strideHeight: m, strideWidth: g, filterHeight: y, filterWidth: b } = d, v = d.dataFormat === "channelsLast", w = new TensorBuffer(d.filterShape, "float32"), I = d.padInfo.left, T = d.padInfo.top, _ = t.data.get(s.dataId).values, F = t.data.get(a.dataId).values, O = new TensorBuffer(s.shape, s.dtype, _), q = new TensorBuffer(a.shape, a.dtype, F);
  for (let V = 0; V < y; ++V) {
    const H = Math.max(0, Math.ceil((T - V) / m)), R = Math.min(d.outHeight, (d.inHeight + T - V) / m);
    for (let $ = 0; $ < b; ++$) {
      const S = Math.max(0, Math.ceil((I - $) / g)), x = Math.min(d.outWidth, (d.inWidth + I - $) / g);
      for (let C = 0; C < d.inChannels; ++C)
        for (let A = 0; A < d.outChannels; ++A) {
          let N = 0;
          for (let k = 0; k < d.batchSize; ++k)
            for (let D = H; D < R; ++D) {
              const E = V + D * m - T;
              for (let M = S; M < x; ++M) {
                const P = $ + M * g - I;
                v ? N += O.get(k, E, P, C) * q.get(k, D, M, A) : N += O.get(k, C, E, P) * q.get(k, A, D, M);
              }
            }
          w.set(N, V, $, C, A);
        }
    }
  }
  return t.makeTensorInfo(w.shape, w.dtype, w.values);
}
const conv2DBackpropFilterConfig$1 = {
  kernelName: Conv2DBackpropFilter,
  backendName: "cpu",
  kernelFunc: conv2DBackpropFilter$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2DBackpropInput$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, filter: a } = e, { inputShape: o, strides: u, pad: l, dataFormat: f, dimRoundingMode: c } = n;
  assertNotComplex$1([s, a], "conv2dBackpropInput");
  const h = computeStrides(a.shape), d = computeStrides(s.shape);
  let m = convertConv2DDataFormat(f);
  const g = computeConv2DInfo(o, a.shape, u, 1, l, c, !1, m), y = new TensorBuffer(g.inShape, "float32"), b = y.values, v = t.data.get(s.dataId).values, w = t.data.get(a.dataId).values, [I, T, _] = h, { batchSize: F, filterHeight: O, filterWidth: q, inChannels: V, inHeight: H, inWidth: R, outChannels: $, outHeight: S, outWidth: x, strideHeight: C, strideWidth: A } = g;
  m = g.dataFormat;
  const N = O - 1 - g.padInfo.top, k = q - 1 - g.padInfo.left, D = m === "channelsLast", E = y.strides[0], M = D ? y.strides[1] : y.strides[2], P = D ? y.strides[2] : 1, z = D ? 1 : y.strides[1], J = d[0], re = D ? d[1] : d[2], Q = D ? d[2] : 1, W = D ? 1 : d[1];
  for (let j = 0; j < F; ++j)
    for (let te = 0; te < V; ++te)
      for (let se = 0; se < H; ++se) {
        const X = se - N, K = Math.max(0, Math.ceil(X / C)), ae = Math.min(S, (O + X) / C);
        for (let de = 0; de < R; ++de) {
          const me = de - k, pe = Math.max(0, Math.ceil(me / A)), ge = Math.min(x, (q + me) / A);
          let ye = 0;
          for (let $e = K; $e < ae; ++$e) {
            const be = $e * C - X;
            for (let xe = pe; xe < ge; ++xe) {
              const we = xe * A - me, ve = J * j + re * $e + Q * xe, Ee = I * (O - 1 - be) + T * (q - 1 - we) + _ * te;
              for (let De = 0; De < $; ++De) {
                const Ce = v[ve + W * De], _e = w[Ee + De];
                ye += Ce * _e;
              }
            }
          }
          const ce = E * j + M * se + P * de + z * te;
          b[ce] = ye;
        }
      }
  return t.makeTensorInfo(y.shape, y.dtype, y.values);
}
const conv2DBackpropInputConfig$1 = {
  kernelName: Conv2DBackpropInput,
  backendName: "cpu",
  kernelFunc: conv2DBackpropInput$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3D$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a } = e, { strides: o, pad: u, dilations: l } = n;
  assertNotComplex$1([s, a], "conv3d");
  const f = computeConv3DInfo(s.shape, a.shape, o, l, u), { filterDepth: c, filterHeight: h, filterWidth: d, dilationDepth: m, dilationHeight: g, dilationWidth: y, padInfo: b } = f, v = b.front, w = b.left, I = b.top, T = new TensorBuffer(f.outShape, s.dtype), _ = t.data.get(s.dataId).values, F = t.data.get(a.dataId).values, O = T.values, q = computeStrides(s.shape), V = computeStrides(a.shape);
  for (let H = 0; H < f.batchSize; ++H) {
    const R = H * q[0], $ = H * T.strides[0];
    for (let S = 0; S < f.outDepth; ++S) {
      const x = $ + S * T.strides[1], C = S * f.strideDepth - v;
      for (let A = 0; A < c; ++A) {
        const N = C + A * m;
        if (N < 0 || N >= f.inDepth)
          continue;
        const k = A * V[0], D = R + N * q[1];
        for (let E = 0; E < f.outHeight; ++E) {
          const M = x + E * T.strides[2], P = E * f.strideHeight - I;
          for (let z = 0; z < h; ++z) {
            const J = P + z * g;
            if (J < 0 || J >= f.inHeight)
              continue;
            const re = k + z * V[1], Q = D + J * q[2];
            for (let W = 0; W < f.outWidth; ++W) {
              const j = M + W * f.outChannels, te = W * f.strideWidth - w;
              for (let se = 0; se < d; ++se) {
                const X = te + se * y;
                if (X < 0 || X >= f.inWidth)
                  continue;
                const K = re + se * V[2], ae = Q + X * f.inChannels;
                let de = K;
                for (let me = 0; me < f.inChannels; ++me) {
                  const pe = _[ae + me];
                  for (let ge = 0; ge < f.outChannels; ++ge)
                    O[j + ge] += pe * F[de + ge];
                  de += f.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(T.shape, T.dtype, T.values);
}
const conv3DConfig$1 = {
  kernelName: Conv3D$1,
  backendName: "cpu",
  kernelFunc: conv3D$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3DBackpropFilterV2$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, dy: a } = e, { strides: o, pad: u, filterShape: l } = n;
  assertNotComplex$1([s, a], "conv3dBackpropFilterV2");
  const f = computeStrides(s.shape), c = computeStrides(a.shape), h = computeConv3DInfo(s.shape, l, o, 1, u), d = h.strideDepth, m = h.strideHeight, g = h.strideWidth, y = h.filterDepth, b = h.filterHeight, v = h.filterWidth, w = new TensorBuffer(h.filterShape, "float32"), I = w.values, [T, _, F, O] = w.strides, q = t.data.get(a.dataId).values, [V, H, R, $] = c, S = t.data.get(s.dataId).values, [x, C, A, N] = f, k = h.padInfo.front, D = h.padInfo.left, E = h.padInfo.top;
  for (let M = 0; M < y; ++M) {
    const P = Math.max(0, Math.ceil((k - M) / d)), z = Math.min(h.outDepth, (h.inDepth + k - M) / d), J = M * T;
    for (let re = 0; re < b; ++re) {
      const Q = Math.max(0, Math.ceil((E - re) / m)), W = Math.min(h.outHeight, (h.inHeight + E - re) / m), j = re * _ + J;
      for (let te = 0; te < v; ++te) {
        const se = Math.max(0, Math.ceil((D - te) / g)), X = Math.min(h.outWidth, (h.inWidth + D - te) / g), K = te * F + j;
        for (let ae = 0; ae < h.inChannels; ++ae) {
          const de = ae * O + K;
          for (let me = 0; me < h.outChannels; ++me) {
            let pe = 0;
            for (let ge = 0; ge < h.batchSize; ++ge) {
              const ye = ge * x, ce = ge * V;
              for (let $e = P; $e < z; ++$e) {
                const xe = (M + $e * d - k) * C + ye, we = $e * H + ce;
                for (let ve = Q; ve < W; ++ve) {
                  const De = (re + ve * m - E) * A + xe, Ce = ve * R + we;
                  for (let _e = se; _e < X; ++_e) {
                    const Y = (te + _e * g - D) * N + De, B = _e * $ + Ce;
                    pe += S[Y + ae] * q[B + me];
                  }
                }
              }
            }
            I[de + me] = pe;
          }
        }
      }
    }
  }
  return t.makeTensorInfo(w.shape, w.dtype, w.values);
}
const conv3DBackpropFilterV2Config$1 = {
  kernelName: Conv3DBackpropFilterV2,
  backendName: "cpu",
  kernelFunc: conv3DBackpropFilterV2$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3DBackpropInputV2(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, filter: a } = e, { pad: o, strides: u, inputShape: l } = n;
  assertNotComplex$1([s], "conv3dBackpropInputV2");
  const f = computeStrides(s.shape), c = computeStrides(a.shape), h = computeConv3DInfo(l, a.shape, u, 1, o), d = new TensorBuffer(h.inShape, "float32"), m = d.values, [g, y, b, v] = d.strides, w = t.data.get(s.dataId).values, [I, T, _, F] = f, O = t.data.get(a.dataId).values, [q, V, H, R] = c, { batchSize: $, filterDepth: S, filterHeight: x, filterWidth: C, inChannels: A, inDepth: N, inHeight: k, inWidth: D, outChannels: E, outDepth: M, outHeight: P, outWidth: z, strideDepth: J, strideHeight: re, strideWidth: Q } = h, W = S - 1 - h.padInfo.front, j = x - 1 - h.padInfo.top, te = C - 1 - h.padInfo.left;
  for (let se = 0; se < $; ++se)
    for (let X = 0; X < A; ++X)
      for (let K = 0; K < N; ++K) {
        const ae = K - W, de = Math.max(0, Math.ceil(ae / J)), me = Math.min(M, (S + ae) / J);
        for (let pe = 0; pe < k; ++pe) {
          const ge = pe - j, ye = Math.max(0, Math.ceil(ge / re)), ce = Math.min(P, (x + ge) / re);
          for (let $e = 0; $e < D; ++$e) {
            const be = $e - te, xe = Math.max(0, Math.ceil(be / Q)), we = Math.min(z, (C + be) / Q);
            let ve = 0;
            for (let Ee = de; Ee < me; ++Ee) {
              const De = Ee * J - ae;
              for (let Ce = ye; Ce < ce; ++Ce) {
                const _e = Ce * re - ge;
                for (let ze = xe; ze < we; ++ze) {
                  const Y = ze * Q - be, B = I * se + T * Ee + _ * Ce + F * ze, U = q * (S - 1 - De) + V * (x - 1 - _e) + H * (C - 1 - Y) + R * X;
                  for (let ee = 0; ee < E; ++ee) {
                    const ie = w[B + ee], ue = O[U + ee];
                    ve += ie * ue;
                  }
                }
              }
            }
            m[g * se + y * K + b * pe + v * $e + X] = ve;
          }
        }
      }
  return t.makeTensorInfo(d.shape, d.dtype, d.values);
}
const conv3DBackpropInputV2Config = {
  kernelName: Conv3DBackpropInputV2,
  backendName: "cpu",
  kernelFunc: conv3DBackpropInputV2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cos$1 = unaryKernelFunc$1(Cos, (r) => Math.cos(r)), cosConfig$1 = {
  kernelName: Cos,
  backendName: "cpu",
  kernelFunc: cos$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cosh$1 = unaryKernelFunc$1(Cosh, (r) => Math.cosh(r)), coshConfig$1 = {
  kernelName: Cosh,
  backendName: "cpu",
  kernelFunc: cosh$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cropAndResize$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { image: s, boxes: a, boxInd: o } = e, { cropSize: u, method: l, extrapolationValue: f } = n, [c, h, d, m] = s.shape, g = a.shape[0], [y, b] = u, v = buffer$1([g, y, b, m], "float32"), w = t.data.get(a.dataId).values, I = t.data.get(o.dataId).values, T = t.data.get(s.dataId).values, _ = computeStrides(s.shape), F = computeStrides(v.shape);
  for (let O = 0; O < g; O++) {
    const q = O * 4, V = w[q], H = w[q + 1], R = w[q + 2], $ = w[q + 3], S = I[O];
    if (S >= c)
      continue;
    const x = y > 1 ? (R - V) * (h - 1) / (y - 1) : 0, C = b > 1 ? ($ - H) * (d - 1) / (b - 1) : 0;
    for (let A = 0; A < y; A++) {
      const N = y > 1 ? V * (h - 1) + A * x : 0.5 * (V + R) * (h - 1);
      if (N < 0 || N > h - 1) {
        for (let k = 0; k < b; k++)
          for (let D = 0; D < m; D++) {
            const E = D + k * F[2] + A * F[1] + O * F[0];
            v.values[E] = f;
          }
        continue;
      }
      if (l === "bilinear") {
        const k = Math.floor(N), D = Math.ceil(N), E = N - k;
        for (let M = 0; M < b; M++) {
          const P = b > 1 ? H * (d - 1) + M * C : 0.5 * (H + $) * (d - 1);
          if (P < 0 || P > d - 1) {
            for (let Q = 0; Q < m; Q++) {
              const W = Q + M * F[2] + A * F[1] + O * F[0];
              v.values[W] = f;
            }
            continue;
          }
          const z = Math.floor(P), J = Math.ceil(P), re = P - z;
          for (let Q = 0; Q < m; Q++) {
            let W = Q + z * _[2] + k * _[1] + S * _[0];
            const j = T[W];
            W = Q + J * _[2] + k * _[1] + S * _[0];
            const te = T[W];
            W = Q + z * _[2] + D * _[1] + S * _[0];
            const se = T[W];
            W = Q + J * _[2] + D * _[1] + S * _[0];
            const X = T[W], K = j + (te - j) * re, ae = se + (X - se) * re;
            W = Q + M * F[2] + A * F[1] + O * F[0], v.values[W] = K + (ae - K) * E;
          }
        }
      } else
        for (let k = 0; k < b; ++k) {
          const D = b > 1 ? H * (d - 1) + k * C : 0.5 * (H + $) * (d - 1);
          if (D < 0 || D > d - 1) {
            for (let P = 0; P < m; P++) {
              const z = P + k * F[2] + A * F[1] + O * F[0];
              v.values[z] = f;
            }
            continue;
          }
          const E = Math.round(D), M = Math.round(N);
          for (let P = 0; P < m; P++) {
            const z = P + E * _[2] + M * _[1] + S * _[0], J = P + k * F[2] + A * F[1] + O * F[0];
            v.values[J] = T[z];
          }
        }
    }
  }
  return t.makeTensorInfo(v.shape, v.dtype, v.values);
}
const cropAndResizeConfig$1 = {
  kernelName: CropAndResize,
  backendName: "cpu",
  kernelFunc: cropAndResize$1
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cumprod$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, exclusive: o, reverse: u } = n;
  assertNotComplex$1(s, "cumprod");
  const l = getAxesPermutation([a], s.shape.length);
  let f = s;
  l != null && (f = transpose$1({ inputs: { x: s }, backend: t, attrs: { perm: l } }));
  const c = getInnerMostAxes(1, s.shape.length)[0];
  if (c !== f.shape.length - 1)
    throw new Error(`backend.cumprod in CPU expects an inner-most axis=${f.shape.length - 1} but got axis=${c}`);
  const h = upcastType(f.dtype, "int32"), d = makeOnesTypedArray(sizeFromShape(f.shape), h), m = t.data.get(f.dataId).values, g = f.shape[f.shape.length - 1], y = u ? (v, w) => v + g - w - 1 : (v, w) => v + w;
  for (let v = 0; v < m.length; v += g)
    for (let w = 0; w < g; w++) {
      const I = y(v, w);
      if (w === 0)
        d[I] = o ? 1 : m[I];
      else {
        const T = y(v, w - 1);
        d[I] = o ? m[T] * d[T] : m[I] * d[T];
      }
    }
  const b = t.makeTensorInfo(f.shape, h, d);
  if (l != null) {
    const v = getUndoAxesPermutation(l), w = transpose$1({ inputs: { x: b }, backend: t, attrs: { perm: v } });
    return t.disposeIntermediateTensorInfo(b), t.disposeIntermediateTensorInfo(f), w;
  }
  return b;
}
const cumprodConfig$1 = {
  kernelName: Cumprod,
  backendName: "cpu",
  kernelFunc: cumprod$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cumsum$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, exclusive: o, reverse: u } = n;
  assertNotComplex$1(s, "cumsum");
  const l = getAxesPermutation([a], s.shape.length);
  let f = s;
  l != null && (f = transpose$1({ inputs: { x: s }, backend: t, attrs: { perm: l } }));
  const c = getInnerMostAxes(1, s.shape.length)[0];
  if (c !== f.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${f.shape.length - 1} but got axis=${c}`);
  const h = upcastType(f.dtype, "int32"), d = makeZerosTypedArray(sizeFromShape(f.shape), h), m = t.data.get(f.dataId).values, g = f.shape[f.shape.length - 1], y = u ? (v, w) => v + g - w - 1 : (v, w) => v + w;
  for (let v = 0; v < m.length; v += g)
    for (let w = 0; w < g; w++) {
      const I = y(v, w);
      if (w === 0)
        d[I] = o ? 0 : m[I];
      else {
        const T = y(v, w - 1);
        d[I] = o ? m[T] + d[T] : m[I] + d[T];
      }
    }
  const b = t.makeTensorInfo(f.shape, h, d);
  if (l != null) {
    const v = getUndoAxesPermutation(l), w = transpose$1({ inputs: { x: b }, backend: t, attrs: { perm: v } });
    return t.disposeIntermediateTensorInfo(b), t.disposeIntermediateTensorInfo(f), w;
  }
  return b;
}
const cumsumConfig$1 = {
  kernelName: Cumsum,
  backendName: "cpu",
  kernelFunc: cumsum$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function denseBincount$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, weights: a } = e, { size: o, binaryOutput: u } = n;
  if (s.shape.length === 1) {
    const l = t.data.get(s.dataId).values, f = t.data.get(a.dataId).values, c = bincountImpl(l, f, a.dtype, a.shape, o);
    return t.makeTensorInfo([o], a.dtype, c);
  } else if (s.shape.length === 2) {
    const l = t.bufferSync(s), f = t.bufferSync(a), c = bincountReduceImpl(l, f, o, u);
    return t.makeTensorInfo(c.shape, a.dtype, c.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`);
}
const denseBincountConfig$1 = {
  kernelName: DenseBincount,
  backendName: "cpu",
  kernelFunc: denseBincount$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthToSpace$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { blockSize: a, dataFormat: o } = n;
  assert$1(o === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`);
  const u = s.shape[0], l = s.shape[1], f = s.shape[2], c = s.shape[3], h = l * a, d = f * a, m = c / (a * a), g = t.data.get(s.dataId).values, y = new Float32Array(u * h * d * m);
  let b = 0;
  for (let v = 0; v < u; ++v)
    for (let w = 0; w < h; ++w) {
      const I = Math.floor(w / a), T = w % a;
      for (let _ = 0; _ < d; ++_) {
        const F = Math.floor(_ / a), O = _ % a, q = (T * a + O) * m;
        for (let V = 0; V < m; ++V) {
          const R = V + q + c * (F + f * (I + l * v));
          y[b++] = g[R];
        }
      }
    }
  return t.makeTensorInfo([u, h, d, m], s.dtype, y);
}
const depthToSpaceConfig$1 = {
  kernelName: DepthToSpace,
  backendName: "cpu",
  kernelFunc: depthToSpace$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNative$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a } = e, { strides: o, pad: u, dilations: l, dimRoundingMode: f } = n;
  assertNotComplex$1([s, a], "depthwiseConv2DNative");
  const c = computeStrides(s.shape), h = computeStrides(a.shape);
  let d = l;
  d == null && (d = [1, 1]), assert$1(eitherStridesOrDilationsAreOne(o, d), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`);
  const m = computeConv2DInfo(
    s.shape,
    a.shape,
    o,
    d,
    u,
    f,
    !0
    /* depthwise */
  ), { filterHeight: g, filterWidth: y, dilationHeight: b, dilationWidth: v, padInfo: w } = m, I = w.left, T = w.top, _ = m.outChannels / m.inChannels, F = new TensorBuffer(m.outShape, s.dtype), O = t.data.get(s.dataId).values, q = t.data.get(a.dataId).values, V = F.values;
  for (let H = 0; H < m.batchSize; ++H) {
    const R = H * c[0], $ = H * F.strides[0];
    for (let S = 0; S < m.outHeight; ++S) {
      const x = $ + S * F.strides[1], C = S * m.strideHeight - T;
      for (let A = 0; A < g; ++A) {
        const N = C + A * b;
        if (N < 0 || N >= m.inHeight)
          continue;
        const k = A * h[0], D = R + N * c[1];
        for (let E = 0; E < m.outWidth; ++E) {
          const M = x + E * F.strides[2], P = E * m.strideWidth - I;
          for (let z = 0; z < y; ++z) {
            const J = P + z * v;
            if (J < 0 || J >= m.inWidth)
              continue;
            const re = k + z * h[1], Q = D + J * m.inChannels;
            let W = M, j = re;
            for (let te = 0; te < m.inChannels; ++te) {
              const se = O[Q + te];
              for (let X = 0; X < _; ++X)
                V[W + X] += se * q[j + X];
              W += _, j += _;
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(F.shape, F.dtype, F.values);
}
const depthwiseConv2dNativeConfig$1 = {
  kernelName: DepthwiseConv2dNative,
  backendName: "cpu",
  kernelFunc: depthwiseConv2dNative$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropFilter$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, dy: a } = e, { strides: o, dilations: u, pad: l, dimRoundingMode: f, filterShape: c } = n;
  assertNotComplex$1([s, a], "depthwiseConv2dNativeBackpropFilter");
  const h = computeConv2DInfo(
    s.shape,
    c,
    o,
    u,
    l,
    f,
    !0
    /* depthwise */
  ), { strideHeight: d, strideWidth: m, filterHeight: g, filterWidth: y } = h, b = new TensorBuffer(h.filterShape, "float32"), v = h.padInfo.left, w = h.padInfo.top, I = h.outChannels / h.inChannels, T = t.data.get(s.dataId).values, _ = new TensorBuffer(s.shape, s.dtype, T), F = t.data.get(a.dataId).values, O = new TensorBuffer(a.shape, a.dtype, F);
  for (let q = 0; q < g; ++q) {
    const V = Math.max(0, Math.ceil((w - q) / d)), H = Math.min(h.outHeight, (h.inHeight + w - q) / d);
    for (let R = 0; R < y; ++R) {
      const $ = Math.max(0, Math.ceil((v - R) / m)), S = Math.min(h.outWidth, (h.inWidth + v - R) / m);
      for (let x = 0; x < h.outChannels; ++x) {
        const C = Math.trunc(x / I), A = x % I;
        let N = 0;
        for (let k = 0; k < h.batchSize; ++k)
          for (let D = V; D < H; ++D) {
            const E = q + D * d - w;
            for (let M = $; M < S; ++M) {
              const P = R + M * m - v;
              N += _.get(k, E, P, C) * O.get(k, D, M, x);
            }
          }
        b.set(N, q, R, C, A);
      }
    }
  }
  return t.makeTensorInfo(b.shape, b.dtype, b.values);
}
const depthwiseConv2dNativeBackpropFilterConfig$1 = {
  kernelName: DepthwiseConv2dNativeBackpropFilter,
  backendName: "cpu",
  kernelFunc: depthwiseConv2dNativeBackpropFilter$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropInput$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, filter: a } = e, { strides: o, dilations: u, pad: l, dimRoundingMode: f, inputShape: c } = n;
  assertNotComplex$1([s, a], "depthwiseConv2DNativeBackpropInput");
  const h = computeStrides(s.shape), d = computeStrides(a.shape), m = computeConv2DInfo(
    c,
    a.shape,
    o,
    u,
    l,
    f,
    !0
    /* depthwise */
  ), g = new TensorBuffer(m.inShape, "float32"), y = g.values, [b, v, w] = g.strides, I = t.data.get(s.dataId).values, [T, _, F] = h, O = t.data.get(a.dataId).values, [q, V, H] = d, { batchSize: R, filterHeight: $, filterWidth: S, inChannels: x, inHeight: C, inWidth: A, outChannels: N, outHeight: k, outWidth: D, strideHeight: E, strideWidth: M } = m, P = $ - 1 - m.padInfo.top, z = S - 1 - m.padInfo.left, J = N / x;
  for (let re = 0; re < R; ++re)
    for (let Q = 0; Q < x; ++Q)
      for (let W = 0; W < C; ++W) {
        const j = W - P, te = Math.max(0, Math.ceil(j / E)), se = Math.min(k, ($ + j) / E);
        for (let X = 0; X < A; ++X) {
          const K = X - z, ae = Math.max(0, Math.ceil(K / M)), de = Math.min(D, (S + K) / M);
          let me = 0;
          for (let pe = te; pe < se; ++pe) {
            const ge = pe * E - j;
            for (let ye = ae; ye < de; ++ye) {
              const ce = ye * M - K, $e = T * re + _ * pe + F * ye, be = q * ($ - 1 - ge) + V * (S - 1 - ce) + H * Q;
              for (let xe = 0; xe < J; ++xe) {
                const we = Q * J + xe, ve = I[$e + we], Ee = O[be + xe];
                me += ve * Ee;
              }
            }
          }
          y[b * re + v * W + w * X + Q] = me;
        }
      }
  return t.makeTensorInfo(g.shape, g.dtype, g.values);
}
const depthwiseConv2dNativeBackpropInputConfig$1 = {
  kernelName: DepthwiseConv2dNativeBackpropInput,
  backendName: "cpu",
  kernelFunc: depthwiseConv2dNativeBackpropInput$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function diag$1(r) {
  const { inputs: e, backend: t } = r, { x: n } = e, s = sizeFromShape(n.shape), a = t.data.get(n.dataId).values, o = buffer$1([s, s], n.dtype), u = o.values;
  for (let f = 0; f < a.length; f++)
    u[f * s + f] = a[f];
  const l = [...n.shape, ...n.shape];
  return t.makeTensorInfo(l, o.dtype, o.values);
}
const diagConfig$1 = {
  kernelName: Diag,
  backendName: "cpu",
  kernelFunc: diag$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dilation2DConfig$1 = {
  kernelName: Dilation2D,
  backendName: "cpu",
  kernelFunc: ({ inputs: r, backend: e, attrs: t }) => {
    const { x: n, filter: s } = r, { strides: a, pad: o, dilations: u } = t, l = e, f = l.data.get(n.dataId).values, c = n.shape.length, h = l.data.get(s.dataId).values, d = s.shape.length, { batchSize: m, inHeight: g, inWidth: y, inChannels: b, outHeight: v, outWidth: w, padInfo: I, strideHeight: T, strideWidth: _, filterHeight: F, filterWidth: O, dilationHeight: q, dilationWidth: V, outShape: H } = computeDilation2DInfo(n.shape, s.shape, a, o, "NHWC", u), R = sizeFromShape(H), $ = H.length, S = getArrayFromDType(n.dtype, R);
    for (let C = 0; C < m; ++C)
      for (let A = 0; A < v; ++A) {
        const N = A * T - I.top;
        for (let k = 0; k < w; ++k) {
          const D = k * _ - I.left;
          for (let E = 0; E < b; ++E) {
            let M = Number.MIN_SAFE_INTEGER;
            for (let z = 0; z < F; ++z) {
              const J = N + z * q;
              if (J >= 0 && J < g)
                for (let re = 0; re < O; ++re) {
                  const Q = D + re * V;
                  if (Q >= 0 && Q < y) {
                    const W = locToIndex([C, J, Q, E], c, computeStrides(n.shape)), j = locToIndex([z, re, E], d, computeStrides(s.shape)), te = f[W] + h[j];
                    te > M && (M = te);
                  }
                }
            }
            const P = locToIndex([C, A, k, E], $, computeStrides(H));
            S[P] = M;
          }
        }
      }
    return { dataId: l.write(toTypedArray(S, n.dtype), H, n.dtype), shape: H, dtype: n.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dilation2DBackpropFilterConfig = {
  kernelName: Dilation2DBackpropFilter,
  backendName: "cpu",
  kernelFunc: ({ inputs: r, backend: e, attrs: t }) => {
    const { x: n, filter: s, dy: a } = r, { strides: o, pad: u, dilations: l } = t, f = e, c = toNestedArray(n.shape, f.data.get(n.dataId).values), h = toNestedArray(s.shape, f.data.get(s.dataId).values), { batchSize: d, inHeight: m, inWidth: g, inChannels: y, outHeight: b, outWidth: v, padInfo: w, strideHeight: I, strideWidth: T, filterHeight: _, filterWidth: F, dilationHeight: O, dilationWidth: q, outShape: V } = computeDilation2DInfo(n.shape, s.shape, o, u, "NHWC", l);
    assert$1(a.rank === V.length, () => `Error in ${Dilation2DBackpropFilter}, dy must have the same rank as output ${V.length}, but got ${a.rank}`);
    const H = toNestedArray(V, f.data.get(a.dataId).values), R = makeZerosNestedTypedArray(s.shape, s.dtype);
    for (let S = 0; S < d; ++S)
      for (let x = 0; x < b; ++x) {
        const C = x * I - w.top;
        for (let A = 0; A < v; ++A) {
          const N = A * T - w.left;
          for (let k = 0; k < y; ++k) {
            let D = Number.MIN_SAFE_INTEGER, E = 0, M = 0;
            for (let P = 0; P < _; ++P) {
              const z = C + P * O;
              if (z >= 0 && z < m)
                for (let J = 0; J < F; ++J) {
                  const re = N + J * q;
                  if (re >= 0 && re < g) {
                    const Q = c[S][z][re][k] + h[P][J][k];
                    Q > D && (D = Q, E = P, M = J);
                  }
                }
            }
            R[E][M][k] += H[S][x][A][k];
          }
        }
      }
    return { dataId: f.write(toTypedArray(R, n.dtype), s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dilation2DBackpropInputConfig = {
  kernelName: Dilation2DBackpropInput,
  backendName: "cpu",
  kernelFunc: ({ inputs: r, backend: e, attrs: t }) => {
    const { x: n, filter: s, dy: a } = r, { strides: o, pad: u, dilations: l } = t, f = e, c = toNestedArray(n.shape, f.data.get(n.dataId).values), h = toNestedArray(s.shape, f.data.get(s.dataId).values), { batchSize: d, inHeight: m, inWidth: g, inChannels: y, outHeight: b, outWidth: v, padInfo: w, strideHeight: I, strideWidth: T, filterHeight: _, filterWidth: F, dilationHeight: O, dilationWidth: q, outShape: V } = computeDilation2DInfo(n.shape, s.shape, o, u, "NHWC", l);
    assert$1(a.rank === V.length, () => `Error in ${Dilation2DBackpropInput}, dy must have the same rank as output ${V.length}, but got ${a.rank}`);
    const H = toNestedArray(V, f.data.get(a.dataId).values), R = makeZerosNestedTypedArray(n.shape, n.dtype);
    for (let S = 0; S < d; ++S)
      for (let x = 0; x < b; ++x) {
        const C = x * I - w.top;
        for (let A = 0; A < v; ++A) {
          const N = A * T - w.left;
          for (let k = 0; k < y; ++k) {
            let D = Number.MIN_SAFE_INTEGER, E = C < 0 ? 0 : C, M = N < 0 ? 0 : N;
            for (let P = 0; P < _; ++P) {
              const z = C + P * O;
              if (z >= 0 && z < m)
                for (let J = 0; J < F; ++J) {
                  const re = N + J * q;
                  if (re >= 0 && re < g) {
                    const Q = c[S][z][re][k] + h[P][J][k];
                    Q > D && (D = Q, E = z, M = re);
                  }
                }
            }
            R[S][E][M][k] += H[S][x][A][k];
          }
        }
      }
    return { dataId: f.write(toTypedArray(R, n.dtype), n.shape, n.dtype), shape: n.shape, dtype: n.dtype };
  }
};
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function draw(r) {
  const { inputs: e, backend: t, attrs: n } = r, { image: s } = e, { canvas: a, options: o } = n, { contextOptions: u, imageOptions: l } = o || {}, f = (l == null ? void 0 : l.alpha) || 1, c = (u == null ? void 0 : u.contextType) || "2d";
  if (c !== "2d")
    throw new Error(`Context type ${u.contextType} is not supported by the CPU backend.`);
  const h = a.getContext(c, (u == null ? void 0 : u.contextAttributes) || {});
  if (h == null)
    throw new Error(`Could not get the context with ${c} type.`);
  const [d, m] = s.shape.slice(0, 2), g = s.shape.length === 2 ? 1 : s.shape[2], y = t.data.get(s.dataId).values, b = s.dtype === "float32" ? 255 : 1, v = new Uint8ClampedArray(m * d * 4);
  for (let I = 0; I < d * m; ++I) {
    const T = [0, 0, 0, 255 * f];
    for (let F = 0; F < g; F++) {
      const O = y[I * g + F];
      if (s.dtype === "float32") {
        if (O < 0 || O > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${O}.`);
      } else if (s.dtype === "int32" && (O < 0 || O > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${O}.`);
      g === 1 ? (T[0] = O * b, T[1] = O * b, T[2] = O * b) : T[F] = O * b;
    }
    const _ = I * 4;
    v[_ + 0] = Math.round(T[0]), v[_ + 1] = Math.round(T[1]), v[_ + 2] = Math.round(T[2]), v[_ + 3] = Math.round(T[3]);
  }
  a.width = m, a.height = d;
  const w = new ImageData(v, m, d);
  return h.putImageData(w, 0, 0), s;
}
const drawConfig = {
  kernelName: Draw,
  backendName: "cpu",
  kernelFunc: draw
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sum$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n;
  assertNotComplex$1(s, "sum");
  let u;
  s.dtype === "bool" ? u = cast$1({ inputs: { x: s }, backend: t, attrs: { dtype: "int32" } }) : u = identity$1({ inputs: { x: s }, backend: t });
  const l = u.shape.length, f = parseAxisParam(a, u.shape), c = getAxesPermutation(f, l);
  let h = f, d = u;
  c != null && (d = transpose$1({ inputs: { x: u }, backend: t, attrs: { perm: c } }), h = getInnerMostAxes(h.length, l)), assertAxesAreInnerMostDims("sum", h, d.shape.length);
  const [m, g] = computeOutAndReduceShapes(d.shape, h), y = upcastType(d.dtype, "int32");
  let b = zeros(t, m, y);
  const v = sizeFromShape(g), w = t.data.get(b.dataId).values, I = t.data.get(d.dataId).values;
  for (let T = 0; T < w.length; ++T) {
    const _ = T * v;
    let F = 0;
    for (let O = 0; O < v; ++O)
      F += I[_ + O];
    w[T] = F;
  }
  if (o) {
    const T = expandShapeToKeepDim(b.shape, f), _ = b;
    b = reshape$1({ inputs: { x: b }, backend: t, attrs: { shape: T } }), t.disposeIntermediateTensorInfo(_);
  }
  return t.disposeIntermediateTensorInfo(u), c != null && t.disposeIntermediateTensorInfo(d), b;
}
const sumConfig$1 = {
  kernelName: Sum,
  backendName: "cpu",
  kernelFunc: sum$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function einsum$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { equation: s } = n, a = e, { allDims: o, summedDims: u, idDims: l } = decodeEinsumEquation(s, a.length);
  checkEinsumDimSizes(o.length, l, a);
  const { path: f, steps: c } = getEinsumComputePath(u, l), h = c.length;
  let d = null, m = o.length;
  const g = [];
  for (let y = 0; y < h; ++y) {
    for (const b of c[y]) {
      const { permutationIndices: v, expandDims: w } = getEinsumPermutation(m, l[b]);
      let I;
      isIdentityPermutation(v) ? I = a[b] : (I = transpose$1({ inputs: { x: a[b] }, backend: t, attrs: { perm: v } }), g.push(I));
      const T = I.shape.slice();
      for (let _ = 0; _ < w.length; ++_)
        T.splice(w[_], 0, 1);
      arraysEqual(I.shape, T) || (I = reshape$1({ inputs: { x: I }, backend: t, attrs: { shape: T } }), g.push(I)), d === null ? d = I : (d = multiply$1({ inputs: { a: I, b: d }, backend: t }), g.push(d));
    }
    y < h - 1 && (f[y] >= 0 && (d = sum$1({
      inputs: { x: d },
      backend: t,
      attrs: {
        axis: f[y] - (o.length - m),
        keepDims: !1
      }
    }), g.push(d)), m--);
  }
  for (const y of g)
    y !== d && t.disposeIntermediateTensorInfo(y);
  return d;
}
const einsumConfig$1 = {
  kernelName: Einsum,
  backendName: "cpu",
  kernelFunc: einsum$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eluGrad$1(r) {
  const { inputs: e, backend: t } = r, { dy: n, y: s } = e;
  assertNotComplex$1([n, s], "eluGrad");
  const a = new Float32Array(sizeFromShape(s.shape)), o = t.data.get(s.dataId).values, u = t.data.get(n.dataId).values;
  for (let l = 0; l < o.length; ++l) {
    const f = o[l];
    f >= 0 ? a[l] = u[l] : a[l] = u[l] * (f + 1);
  }
  return t.makeTensorInfo(s.shape, "float32", a);
}
const eluGradConfig$1 = {
  kernelName: EluGrad,
  backendName: "cpu",
  kernelFunc: eluGrad$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const p = ERF_P, a1 = ERF_A1, a2 = ERF_A2, a3 = ERF_A3, a4 = ERF_A4, a5 = ERF_A5, erf$1 = unaryKernelFunc$1(Erf, (r) => {
  const e = Math.sign(r), t = Math.abs(r), n = 1 / (1 + p * t);
  return e * (1 - ((((a5 * n + a4) * n + a3) * n + a2) * n + a1) * n * Math.exp(-t * t));
}), erfConfig$1 = {
  kernelName: Erf,
  backendName: "cpu",
  kernelFunc: erf$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function expandDims$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { input: s } = e, { dim: a } = n, o = s.shape.length, u = s.shape.slice();
  let l = a;
  return a < 0 && (assert$1(-(o + 1) <= a, () => `Axis must be in the interval [${-(o + 1)}, ${o}]`), l = o + a + 1), u.splice(l, 0, 1), reshape$1({ inputs: { x: s }, backend: t, attrs: { shape: u } });
}
const expandDimsConfig$1 = {
  kernelName: ExpandDims,
  backendName: "cpu",
  kernelFunc: expandDims$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const realDivImpl = createSimpleBinaryKernelImpl((r, e) => r / e), div = binaryKernelFunc$1(RealDiv, realDivImpl), realDivConfig$1 = {
  kernelName: RealDiv,
  backendName: "cpu",
  kernelFunc: div
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fftBatch(r, e, t) {
  const n = r.shape, s = n[0], a = n[1], o = t.data.get(r.dataId), u = o.complexTensorInfos.real, l = o.complexTensorInfos.imag, f = [s, a], c = sizeFromShape(f), h = getTypedArrayFromDType("float32", c), d = getTypedArrayFromDType("float32", c);
  for (let b = 0; b < s; b++) {
    const v = slice$1({
      inputs: { x: u },
      backend: t,
      attrs: { begin: [b, 0], size: [1, a] }
    }), w = slice$1({
      inputs: { x: l },
      backend: t,
      attrs: { begin: [b, 0], size: [1, a] }
    }), I = complex$1({ inputs: { real: v, imag: w }, backend: t }), { real: T, imag: _ } = fftImpl$1(I, e, t), F = mergeRealAndImagArrays(T, _);
    for (let O = 0; O < a; O++) {
      const q = getComplexWithIndex(F, O);
      h[b * a + O] = q.real, d[b * a + O] = q.imag;
    }
    t.disposeIntermediateTensorInfo(v), t.disposeIntermediateTensorInfo(w), t.disposeIntermediateTensorInfo(I);
  }
  const m = t.makeTensorInfo(f, "float32", h), g = t.makeTensorInfo(f, "float32", d), y = complex$1({ inputs: { real: m, imag: g }, backend: t });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), y;
}
function fftImpl$1(r, e, t) {
  const n = sizeFromShape(r.shape), s = t.data.get(r.dataId), a = t.data.get(s.complexTensorInfos.real.dataId).values, o = t.data.get(s.complexTensorInfos.imag.dataId).values;
  if (isExponentOf2(n)) {
    const u = fftRadix2(a, o, n, e, t), l = [r.shape[0], r.shape[1]];
    if (e) {
      const f = t.makeTensorInfo(l, "float32", u.real), c = t.makeTensorInfo(l, "float32", u.imag), h = t.makeTensorInfo([], "float32", createScalarValue(n, "float32")), d = identity$1({ inputs: { x: h }, backend: t }), m = realDivConfig$1.kernelFunc({ inputs: { a: f, b: h }, backend: t }), g = realDivConfig$1.kernelFunc({ inputs: { a: c, b: d }, backend: t }), y = t.data.get(m.dataId).values, b = t.data.get(g.dataId).values;
      return t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), { real: y, imag: b };
    }
    return u;
  } else {
    const u = mergeRealAndImagArrays(a, o), l = fourierTransformByMatmul(u, n, e);
    return splitRealAndImagArrays(l);
  }
}
function isExponentOf2(r) {
  return (r & r - 1) === 0;
}
function fftRadix2(r, e, t, n, s) {
  if (t === 1)
    return { real: r, imag: e };
  const a = mergeRealAndImagArrays(r, e), o = t / 2, u = complexWithEvenIndex(a), l = u.real, f = u.imag, c = [l.length], h = s.makeTensorInfo(c, "float32", l), d = s.makeTensorInfo(c, "float32", f), m = complex$1({ inputs: { real: h, imag: d }, backend: s }), g = complexWithOddIndex(a), y = g.real, b = g.imag, v = [y.length], w = s.makeTensorInfo(v, "float32", y), I = s.makeTensorInfo(v, "float32", b), T = complex$1({ inputs: { real: w, imag: I }, backend: s }), _ = fftRadix2(l, f, o, n, s), F = _.real, O = _.imag, q = [F.length], V = s.makeTensorInfo(q, "float32", F), H = s.makeTensorInfo(q, "float32", O), R = complex$1({
    inputs: { real: V, imag: H },
    backend: s
  }), $ = fftRadix2(y, b, o, n, s), S = $.real, x = $.imag, C = [S.length], A = s.makeTensorInfo(C, "float32", S), N = s.makeTensorInfo(C, "float32", x), k = complex$1({ inputs: { real: A, imag: N }, backend: s }), D = exponents(t, n), E = [D.real.length], M = s.makeTensorInfo(E, "float32", D.real), P = s.makeTensorInfo(E, "float32", D.imag), z = complex$1({ inputs: { real: M, imag: P }, backend: s }), J = multiply$1({ inputs: { a: z, b: k }, backend: s }), re = add({
    inputs: { a: R, b: J },
    backend: s
  }), Q = sub$1({
    inputs: { a: R, b: J },
    backend: s
  }), W = real$1({ inputs: { input: re }, backend: s }), j = real$1({ inputs: { input: Q }, backend: s }), te = imag$1({ inputs: { input: re }, backend: s }), se = imag$1({ inputs: { input: Q }, backend: s }), X = concat$1({
    inputs: [W, j],
    backend: s,
    attrs: { axis: 0 }
  }), K = concat$1({
    inputs: [te, se],
    backend: s,
    attrs: { axis: 0 }
  }), ae = s.data.get(X.dataId).values, de = s.data.get(K.dataId).values;
  return s.disposeIntermediateTensorInfo(h), s.disposeIntermediateTensorInfo(d), s.disposeIntermediateTensorInfo(m), s.disposeIntermediateTensorInfo(w), s.disposeIntermediateTensorInfo(I), s.disposeIntermediateTensorInfo(T), s.disposeIntermediateTensorInfo(V), s.disposeIntermediateTensorInfo(H), s.disposeIntermediateTensorInfo(R), s.disposeIntermediateTensorInfo(A), s.disposeIntermediateTensorInfo(N), s.disposeIntermediateTensorInfo(k), s.disposeIntermediateTensorInfo(M), s.disposeIntermediateTensorInfo(P), s.disposeIntermediateTensorInfo(z), s.disposeIntermediateTensorInfo(J), s.disposeIntermediateTensorInfo(re), s.disposeIntermediateTensorInfo(Q), s.disposeIntermediateTensorInfo(W), s.disposeIntermediateTensorInfo(te), s.disposeIntermediateTensorInfo(j), s.disposeIntermediateTensorInfo(se), s.disposeIntermediateTensorInfo(X), s.disposeIntermediateTensorInfo(K), { real: ae, imag: de };
}
function fourierTransformByMatmul(r, e, t) {
  const n = new Float32Array(e * 2);
  for (let s = 0; s < e; s++) {
    let a = 0, o = 0;
    for (let u = 0; u < e; u++) {
      const l = exponent(s * u, e, t), f = getComplexWithIndex(r, u);
      a += f.real * l.real - f.imag * l.imag, o += f.real * l.imag + f.imag * l.real;
    }
    t && (a /= e, o /= e), assignToTypedArray(n, a, o, s);
  }
  return n;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fft$1(r) {
  const { inputs: e, backend: t } = r, { input: n } = e, s = sizeFromShape(n.shape), a = n.shape[n.shape.length - 1], o = s / a, u = reshape$1({
    inputs: { x: n },
    backend: t,
    attrs: { shape: [o, a] }
  }), l = fftBatch(u, !1, t), f = reshape$1({ inputs: { x: l }, backend: t, attrs: { shape: n.shape } });
  return t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(l), f;
}
const fftConfig$1 = {
  kernelName: FFT,
  backendName: "cpu",
  kernelFunc: fft$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fill$1(r) {
  const { backend: e, attrs: t } = r, { shape: n, value: s, dtype: a } = t, o = a || inferDtype(s), u = getArrayFromDType(o, sizeFromShape(n));
  return fillValues(u, s, o), e.makeTensorInfo(n, o, u);
}
const fillConfig$1 = {
  kernelName: Fill,
  backendName: "cpu",
  kernelFunc: fill$1
};
function fillValues(r, e, t) {
  r.fill(e);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const flipLeftRightConfig$1 = {
  kernelName: FlipLeftRight,
  backendName: "cpu",
  kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
    const { image: n } = r, s = t, a = getTypedArrayFromDType(n.dtype, sizeFromShape(n.shape)), [o, u, l, f] = n.shape, c = s.data.get(n.dataId).values;
    for (let d = 0; d < o; d++) {
      const m = d * l * u * f;
      for (let g = 0; g < u; g++) {
        const y = g * (l * f);
        for (let b = 0; b < l; b++) {
          const v = b * f;
          for (let w = 0; w < f; w++) {
            const I = Math.round(l - b - 1), T = m + y + v + w;
            let _ = c[T];
            if (I >= 0 && I < l) {
              const F = I * f, O = m + y + F + w;
              _ = c[O];
            }
            a[T] = _;
          }
        }
      }
    }
    return { dataId: s.write(a, n.shape, n.dtype), shape: n.shape, dtype: n.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fusedConv2D(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a, bias: o, preluActivationWeights: u } = e, { strides: l, pad: f, dataFormat: c, dilations: h, dimRoundingMode: d, activation: m, leakyreluAlpha: g } = n;
  let y = conv2D({
    inputs: { x: s, filter: a },
    backend: t,
    attrs: { strides: l, pad: f, dataFormat: c, dilations: h, dimRoundingMode: d }
  });
  if (o) {
    const b = y;
    if (c === "NCHW" && o.shape.length === 1 && o.shape[0] !== 1) {
      const v = reshape$1({ inputs: { x: o }, backend: t, attrs: { shape: [o.shape[0], 1, 1] } });
      y = add({ inputs: { a: y, b: v }, backend: t }), t.disposeIntermediateTensorInfo(v);
    } else
      y = add({ inputs: { a: y, b: o }, backend: t });
    t.disposeIntermediateTensorInfo(b);
  }
  if (m) {
    const b = y;
    if (c === "NCHW" && m === "prelu" && u.shape.length === 1 && u.shape[0] !== 1) {
      const v = reshape$1({
        inputs: { x: u },
        backend: t,
        attrs: { shape: [u.shape[0], 1, 1] }
      });
      y = applyActivation(t, y, m, v, g), t.disposeIntermediateTensorInfo(v);
    } else
      y = applyActivation(t, y, m, u, g);
    t.disposeIntermediateTensorInfo(b);
  }
  return y;
}
const fusedConv2DConfig$1 = {
  kernelName: FusedConv2D,
  backendName: "cpu",
  kernelFunc: fusedConv2D
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fusedDepthwiseConv2D$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a, bias: o, preluActivationWeights: u } = e, { strides: l, pad: f, dataFormat: c, dilations: h, dimRoundingMode: d, activation: m, leakyreluAlpha: g } = n;
  let y = depthwiseConv2dNative$1({
    inputs: { x: s, filter: a },
    backend: t,
    attrs: { strides: l, pad: f, dataFormat: c, dilations: h, dimRoundingMode: d }
  });
  if (o) {
    const b = y;
    y = add({ inputs: { a: y, b: o }, backend: t }), t.disposeIntermediateTensorInfo(b);
  }
  if (m) {
    const b = y;
    y = applyActivation(t, y, m, u, g), t.disposeIntermediateTensorInfo(b);
  }
  return y;
}
const fusedDepthwiseConv2DConfig$1 = {
  kernelName: FusedDepthwiseConv2D,
  backendName: "cpu",
  kernelFunc: fusedDepthwiseConv2D$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherNd$1(r) {
  const { inputs: e, backend: t } = r, { params: n, indices: s } = e, a = sizeFromShape(n.shape), o = s.shape, u = o[o.length - 1], [l, f, c, h] = prepareAndValidate(n, s);
  if (f === 0)
    return t.makeTensorInfo(l, n.dtype, []);
  const d = t.data.get(s.dataId).values, m = t.bufferSync(n), g = gatherNdImpl(d, m, n.dtype, f, u, c, h, n.shape, a);
  return t.makeTensorInfo(l, n.dtype, g.values);
}
const gatherNdConfig$1 = {
  kernelName: GatherNd,
  backendName: "cpu",
  kernelFunc: gatherNd$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherV2$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, indices: a } = e, { axis: o, batchDims: u } = n;
  assertNotComplex$1([s, a], "gatherV2");
  const l = parseAxisParam(o, s.shape)[0], f = t.data.get(a.dataId).values, c = s.shape[l];
  for (let T = 0; T < f.length; ++T) {
    const _ = f[T];
    assert$1(_ <= c - 1 && _ >= 0, () => `GatherV2: the index value ${_} is not in [0, ${c - 1}]`);
  }
  let h = u;
  u == null && (h = 0);
  const d = sizeFromShape(a.shape), m = collectGatherOpShapeInfo(s, a, l, h), g = reshape$1({
    inputs: { x: s },
    backend: t,
    attrs: {
      shape: [
        m.batchSize,
        m.outerSize,
        m.dimSize,
        m.sliceSize
      ]
    }
  }), y = reshape$1({
    inputs: { x: a },
    backend: t,
    attrs: { shape: [m.batchSize, d / m.batchSize] }
  }), b = [
    m.batchSize,
    m.outerSize,
    d / m.batchSize,
    m.sliceSize
  ], v = t.bufferSync(y), w = t.bufferSync(g), I = gatherV2Impl(w, v, b);
  return t.disposeIntermediateTensorInfo(g), t.disposeIntermediateTensorInfo(y), t.makeTensorInfo(m.outputShape, I.dtype, I.values);
}
const gatherV2Config$1 = {
  kernelName: GatherV2,
  backendName: "cpu",
  kernelFunc: gatherV2$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ifft$1(r) {
  const { inputs: e, backend: t } = r, { input: n } = e, s = sizeFromShape(n.shape), a = n.shape[n.shape.length - 1], o = s / a, u = reshape$1({
    inputs: { x: n },
    backend: t,
    attrs: { shape: [o, a] }
  }), l = fftBatch(u, !0, t), f = reshape$1({ inputs: { x: l }, backend: t, attrs: { shape: n.shape } });
  return t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(l), f;
}
const ifftConfig$1 = {
  kernelName: IFFT,
  backendName: "cpu",
  kernelFunc: ifft$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const isFinite$2 = unaryKernelFunc$1(IsFinite, (r) => Number.isFinite(r) ? 1 : 0, "bool"), isFiniteConfig$1 = {
  kernelName: IsFinite,
  backendName: "cpu",
  kernelFunc: isFinite$2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const isInf$1 = unaryKernelFunc$1(IsInf, (r) => Math.abs(r) === 1 / 0 ? 1 : 0, "bool"), isInfConfig$1 = {
  kernelName: IsInf,
  backendName: "cpu",
  kernelFunc: isInf$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const isNaN$2 = unaryKernelFunc$1(IsNan, (r) => Number.isNaN(r) ? 1 : 0, "bool"), isNaNConfig$1 = {
  kernelName: IsNan,
  backendName: "cpu",
  kernelFunc: isNaN$2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function linSpace$1(r) {
  const { backend: e, attrs: t } = r, { start: n, stop: s, num: a } = t, o = linSpaceImpl(n, s, a);
  return e.makeTensorInfo([o.length], "float32", o);
}
const linSpaceConfig$1 = {
  kernelName: LinSpace,
  backendName: "cpu",
  kernelFunc: linSpace$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const log1p$1 = unaryKernelFunc$1(Log1p, (r) => Math.log1p(r)), log1pConfig$1 = {
  kernelName: Log1p,
  backendName: "cpu",
  kernelFunc: log1p$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const logicalAndImpl = createSimpleBinaryKernelImpl((r, e) => r && e), logicalAnd$1 = binaryKernelFunc$1(LogicalAnd, logicalAndImpl, null, "bool"), logicalAndConfig$1 = {
  kernelName: LogicalAnd,
  backendName: "cpu",
  kernelFunc: logicalAnd$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const logicalNot$1 = unaryKernelFunc$1(LogicalNot, (r) => r ? 0 : 1, "bool"), logicalNotConfig$1 = {
  kernelName: LogicalNot,
  backendName: "cpu",
  kernelFunc: logicalNot$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const logicalOrImpl = createSimpleBinaryKernelImpl((r, e) => r || e), logicalOr$1 = binaryKernelFunc$1(LogicalOr, logicalOrImpl, null, "bool"), logicalOrConfig$1 = {
  kernelName: LogicalOr,
  backendName: "cpu",
  kernelFunc: logicalOr$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lRN(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { depthRadius: a, bias: o, alpha: u, beta: l } = n;
  assertNotComplex$1(s, "LRN");
  const f = s.shape[3], c = f - 1, h = t.data.get(s.dataId).values, d = sizeFromShape(s.shape), m = new Float32Array(d);
  function g(y) {
    const b = y % f;
    let v = y - b + Math.max(0, b - a);
    const w = y - b + Math.min(b + a, c);
    let I = 0;
    for (; v <= w; v++) {
      const T = h[v];
      I += T * T;
    }
    return I;
  }
  for (let y = 0; y < d; y++) {
    const b = g(y), v = h[y] * Math.pow(o + u * b, -l);
    m[y] = v;
  }
  return t.makeTensorInfo(s.shape, s.dtype, m);
}
const LRNConfig$1 = {
  kernelName: LRN,
  backendName: "cpu",
  kernelFunc: lRN
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lRNGrad(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, y: a, dy: o } = e, { depthRadius: u, bias: l, alpha: f, beta: c } = n;
  assertNotComplex$1(o, "LRNGrad");
  const h = sizeFromShape(o.shape), d = o.shape[3], m = t.data.get(o.dataId).values, g = t.data.get(s.dataId).values, y = t.data.get(a.dataId).values, b = new Float32Array(h), v = h;
  for (let w = 0; w < v; w++) {
    const I = w % d, T = w - I + Math.max(0, I - u), _ = w - I + Math.min(d, I + u + 1);
    let F = 0;
    for (let O = T; O < _; O++)
      F += Math.pow(g[O], 2);
    F = f * F + l;
    for (let O = T; O < _; O++) {
      let q = -2 * f * c * g[O] * y[w] / F;
      w === O && (q += Math.pow(F, -c)), q *= m[w], b[O] += q;
    }
  }
  return t.makeTensorInfo(o.shape, s.dtype, b);
}
const LRNGradConfig$1 = {
  kernelName: LRNGrad,
  backendName: "cpu",
  kernelFunc: lRNGrad
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function max$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { reductionIndices: a, keepDims: o } = n, u = t;
  let l = s.shape;
  const f = l.length, c = parseAxisParam(a, l);
  let h = c;
  const d = getAxesPermutation(h, f);
  let m = u.data.get(s.dataId).values;
  if (d != null) {
    const T = new Array(f);
    for (let _ = 0; _ < T.length; _++)
      T[_] = l[d[_]];
    m = transposeImpl$1(m, l, s.dtype, d, T), h = getInnerMostAxes(h.length, f), l = T;
  }
  assertNotComplex$1(s, "max"), assertAxesAreInnerMostDims("max", h, f);
  const [g, y] = computeOutAndReduceShapes(l, h), b = sizeFromShape(y), v = maxImpl$1(m, b, g, s.dtype), w = u.write(v, g, s.dtype);
  let I = g;
  return o && (I = expandShapeToKeepDim(g, c)), { dataId: w, shape: I, dtype: s.dtype };
}
const maxConfig$1 = {
  kernelName: Max,
  backendName: "cpu",
  kernelFunc: max$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e;
  assertNotComplex$1(s, "maxPool");
  const { filterSize: a, strides: o, pad: u, dimRoundingMode: l } = n, f = 1;
  assert$1(eitherStridesOrDilationsAreOne(o, f), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${f}'`);
  const c = computePool2DInfo(s.shape, a, o, f, u, l);
  let h;
  if (c.filterWidth === 1 && c.filterHeight === 1 && arraysEqual(c.inShape, c.outShape))
    h = identity$1({ inputs: { x: s }, backend: t });
  else {
    const d = t.data.get(s.dataId).values, m = computeStrides(s.shape), g = pool(d, s.shape, s.dtype, m, c, "max");
    h = t.makeTensorInfo(c.outShape, s.dtype, g.values);
  }
  return h;
}
const maxPoolConfig$1 = {
  kernelName: MaxPool,
  backendName: "cpu",
  kernelFunc: maxPool$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool3D(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { filterSize: a, strides: o, pad: u, dimRoundingMode: l, dataFormat: f } = n;
  assertNotComplex$1(s, "maxPool3d");
  const c = computePool3DInfo(s.shape, a, o, 1, u, l, f), h = t.data.get(s.dataId).values, d = pool3d(h, s.shape, s.dtype, computeStrides(s.shape), c, "max");
  return t.makeTensorInfo(d.shape, "float32", d.values);
}
const maxPool3DConfig$1 = {
  kernelName: MaxPool3D,
  backendName: "cpu",
  kernelFunc: maxPool3D
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool3DGrad$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, input: a } = e, { filterSize: o, strides: u, pad: l, dimRoundingMode: f } = n;
  assertNotComplex$1([s, a], "maxPool3DGrad");
  const c = computePool3DInfo(a.shape, o, u, 1, l, f), h = t.bufferSync(a), d = maxPool3dPositions(h, c), m = c.strideDepth, g = c.strideHeight, y = c.strideWidth, b = c.dilationDepth, v = c.dilationHeight, w = c.dilationWidth, I = c.effectiveFilterDepth, T = c.effectiveFilterHeight, _ = c.effectiveFilterWidth, F = I - 1 - c.padInfo.front, O = _ - 1 - c.padInfo.left, q = T - 1 - c.padInfo.top, V = buffer$1(a.shape, "float32"), H = t.bufferSync(s);
  for (let R = 0; R < c.batchSize; ++R)
    for (let $ = 0; $ < c.inChannels; ++$)
      for (let S = 0; S < c.inDepth; ++S)
        for (let x = 0; x < c.inHeight; ++x)
          for (let C = 0; C < c.inWidth; ++C) {
            const A = S - F, N = x - q, k = C - O;
            let D = 0;
            for (let E = 0; E < I; E += b) {
              const M = (A + E) / m;
              if (!(M < 0 || M >= c.outDepth || Math.floor(M) !== M))
                for (let P = 0; P < T; P += v) {
                  const z = (N + P) / g;
                  if (!(z < 0 || z >= c.outHeight || Math.floor(z) !== z))
                    for (let J = 0; J < _; J += w) {
                      const re = (k + J) / y;
                      if (re < 0 || re >= c.outWidth || Math.floor(re) !== re)
                        continue;
                      const Q = I * T * _ - 1 - d.get(R, M, z, re, $), W = E * T * _ + P * _ + J, j = Q === W ? 1 : 0;
                      if (j === 0)
                        continue;
                      const te = H.get(R, M, z, re, $);
                      D += te * j;
                    }
                }
            }
            V.set(D, R, S, x, C, $);
          }
  return t.makeTensorInfo(V.shape, V.dtype, V.values);
}
const maxPool3DGradConfig$1 = {
  kernelName: MaxPool3DGrad,
  backendName: "cpu",
  kernelFunc: maxPool3DGrad$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPoolGrad$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, input: a, output: o } = e, u = a;
  assertNotComplex$1([a, o], "maxPoolGrad");
  const { filterSize: l, strides: f, pad: c, dimRoundingMode: h } = n, d = computePool2DInfo(u.shape, l, f, 1, c, h), m = t.data.get(u.dataId).values, g = buffer$1(d.outShape, u.dtype, maxPoolPositions(m, u.shape, u.dtype, d).values), y = d.strideHeight, b = d.strideWidth, v = d.dilationHeight, w = d.dilationWidth, I = d.effectiveFilterHeight, T = d.effectiveFilterWidth, _ = T - 1 - d.padInfo.left, F = I - 1 - d.padInfo.top, O = buffer$1(u.shape, "float32"), q = t.data.get(s.dataId).values, V = buffer$1(s.shape, "float32", q);
  for (let H = 0; H < d.batchSize; ++H)
    for (let R = 0; R < d.inChannels; ++R)
      for (let $ = 0; $ < d.inHeight; ++$)
        for (let S = 0; S < d.inWidth; ++S) {
          const x = $ - F, C = S - _;
          let A = 0;
          for (let N = 0; N < I; N += v) {
            const k = (x + N) / y;
            if (!(k < 0 || k >= d.outHeight || Math.floor(k) !== k))
              for (let D = 0; D < T; D += w) {
                const E = (C + D) / b;
                if (E < 0 || E >= d.outWidth || Math.floor(E) !== E)
                  continue;
                const M = I * T - 1 - g.get(H, k, E, R), P = N * T + D, z = M === P ? 1 : 0;
                if (z === 0)
                  continue;
                const J = V.get(H, k, E, R);
                A += J * z;
              }
          }
          O.set(A, H, $, S, R);
        }
  return t.makeTensorInfo(O.shape, O.dtype, O.values);
}
const maxPoolGradConfig$1 = {
  kernelName: MaxPoolGrad,
  backendName: "cpu",
  kernelFunc: maxPoolGrad$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPoolWithArgmaxImpl$1(r, e, t, n, s) {
  const a = computeStrides(e), o = pool(r, e, t, a, s, "max"), u = maxPoolPositions(r, e, t, s, !0, n);
  return [o.values, u.values];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxPoolWithArgmaxConfig$1 = {
  kernelName: MaxPoolWithArgmax,
  backendName: "cpu",
  kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
    const { x: n } = r, { filterSize: s, strides: a, pad: o, includeBatchInIndex: u } = e, l = t;
    assertNotComplex$1(n, "MaxPoolWithArgmax");
    const f = l.data.get(n.dataId).values, c = computePool2DInfo(n.shape, s, a, [1, 1], o), [h, d] = maxPoolWithArgmaxImpl$1(f, n.shape, n.dtype, u, c), m = l.write(h, c.outShape, n.dtype), g = l.write(d, c.outShape, n.dtype);
    return [
      { dataId: m, shape: c.outShape, dtype: n.dtype },
      { dataId: g, shape: c.outShape, dtype: "int32" }
    ];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mean(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n, u = parseAxisParam(a, s.shape), f = computeOutAndReduceShapes(s.shape, u)[1], c = sizeFromShape(f), h = [], d = t.makeTensorInfo([], "float32", new Float32Array([c]));
  h.push(d);
  const m = cast$1({ inputs: { x: s }, backend: t, attrs: { dtype: "float32" } });
  h.push(m);
  const g = div({ inputs: { a: m, b: d }, backend: t });
  h.push(g);
  const y = sum$1({ inputs: { x: g }, backend: t, attrs: { axis: a, keepDims: o } });
  return h.forEach((b) => t.disposeIntermediateTensorInfo(b)), y;
}
const meanConfig$1 = {
  kernelName: Mean,
  backendName: "cpu",
  kernelFunc: mean
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function min$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n;
  assertNotComplex$1(s, "min");
  const u = parseAxisParam(a, s.shape);
  let l = u;
  const f = getAxesPermutation(l, s.shape.length);
  let c = s;
  f != null && (c = transpose$1({ inputs: { x: s }, backend: t, attrs: { perm: f } }), l = getInnerMostAxes(l.length, s.shape.length)), assertAxesAreInnerMostDims("min", l, c.shape.length);
  const [h, d] = computeOutAndReduceShapes(c.shape, l), m = sizeFromShape(d), g = makeZerosTypedArray(sizeFromShape(h), c.dtype), y = t.data.get(c.dataId).values;
  for (let v = 0; v < g.length; ++v) {
    const w = v * m;
    let I = y[w];
    for (let T = 0; T < m; ++T) {
      const _ = y[w + T];
      (Number.isNaN(_) || _ < I) && (I = _);
    }
    g[v] = I;
  }
  f != null && t.disposeIntermediateTensorInfo(c);
  const b = t.makeTensorInfo(h, c.dtype, g);
  if (o) {
    const v = expandShapeToKeepDim(h, u), w = reshape$1({ inputs: { x: b }, backend: t, attrs: { shape: v } });
    return t.disposeIntermediateTensorInfo(b), w;
  }
  return b;
}
const minConfig$1 = {
  kernelName: Min,
  backendName: "cpu",
  kernelFunc: min$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mirrorPad(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { paddings: a, mode: o } = n;
  assertNotComplex$1(s, "mirrorPad");
  const u = a.map(
    (I, T) => I[0] + s.shape[T] + I[1]
    /* afterPad */
  ), l = a.map((I) => I[0]), f = a.map((I, T) => I[0] + s.shape[T]), c = o === "reflect" ? 0 : 1, h = t.data.get(s.dataId).values, d = s.shape.length, m = computeStrides(s.shape), g = sizeFromShape(u), y = u.length, b = computeStrides(u), v = getTypedArrayFromDType(s.dtype, g);
  for (let I = 0; I < g; I++) {
    let T = indexToLoc(I, y, b);
    for (let F = 0; F < y; F++)
      T[F] < l[F] ? T[F] = l[F] * 2 - T[F] - c : T[F] >= f[F] && (T[F] = (f[F] - 1) * 2 - T[F] + c);
    T = T.map((F, O) => F - l[O]);
    const _ = locToIndex(T, d, m);
    v[I] = h[_];
  }
  return { dataId: t.write(v, u, s.dtype), shape: u, dtype: s.dtype };
}
const mirrorPadConfig$1 = {
  kernelName: MirrorPad,
  backendName: "cpu",
  kernelFunc: mirrorPad
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const modImpl = createSimpleBinaryKernelImpl((r, e) => {
  const t = r % e;
  return r < 0 && e < 0 || r >= 0 && e >= 0 ? t : (t + e) % e;
}), mod$1 = binaryKernelFunc$1(Mod, modImpl), modConfig$1 = {
  kernelName: Mod,
  backendName: "cpu",
  kernelFunc: mod$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function softmax$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { logits: s } = e, { dim: a } = n, o = s.shape.length;
  let u = a;
  if (u === -1 && (u = o - 1), u !== o - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${u}`);
  const l = parseAxisParam([u], s.shape), f = max$1({
    inputs: { x: s },
    backend: t,
    attrs: { reductionIndices: l, keepDims: !1 }
  }), c = expandShapeToKeepDim(f.shape, l), h = reshape$1({ inputs: { x: f }, backend: t, attrs: { shape: c } }), d = sub$1({ inputs: { a: s, b: h }, backend: t }), m = exp$1({ inputs: { x: d }, backend: t }), g = sum$1({ inputs: { x: m }, backend: t, attrs: { axis: l, keepDims: !1 } }), y = reshape$1({ inputs: { x: g }, backend: t, attrs: { shape: c } }), b = div({ inputs: { a: m, b: y }, backend: t });
  return t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), t.disposeIntermediateTensorInfo(y), b;
}
const softmaxConfig$1 = {
  kernelName: Softmax$2,
  backendName: "cpu",
  kernelFunc: softmax$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function multinomial$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { logits: s } = e, { numSamples: a, seed: o, normalized: u } = n;
  assertNotComplex$1(s, "multinomial");
  const l = u ? s : softmax$1({ inputs: { logits: s }, backend: t, attrs: { dim: -1 } }), f = l.shape[0], c = l.shape[1], h = t.data.get(l.dataId).values, d = [f, a], m = makeZerosTypedArray(sizeFromShape(d), "int32");
  for (let g = 0; g < f; ++g) {
    const y = g * c, b = new Float32Array(c - 1);
    b[0] = h[y];
    for (let I = 1; I < b.length; ++I)
      b[I] = b[I - 1] + h[y + I];
    const v = seedrandomExports.alea(o.toString()), w = g * a;
    for (let I = 0; I < a; ++I) {
      const T = v();
      m[w + I] = b.length;
      for (let _ = 0; _ < b.length; _++)
        if (T < b[_]) {
          m[w + I] = _;
          break;
        }
    }
  }
  return u || t.disposeIntermediateTensorInfo(l), t.makeTensorInfo(d, "int32", m);
}
const multinomialConfig$1 = {
  kernelName: Multinomial,
  backendName: "cpu",
  kernelFunc: multinomial$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV3Impl$1 = nonMaxSuppressionV3Impl$2;
function nonMaxSuppressionV3$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { boxes: s, scores: a } = e, { maxOutputSize: o, iouThreshold: u, scoreThreshold: l } = n;
  assertNotComplex$1(s, "NonMaxSuppression");
  const f = t.data.get(s.dataId).values, c = t.data.get(a.dataId).values, { selectedIndices: h } = nonMaxSuppressionV3Impl$1(f, c, o, u, l);
  return t.makeTensorInfo([h.length], "int32", new Int32Array(h));
}
const nonMaxSuppressionV3Config$1 = {
  kernelName: NonMaxSuppressionV3,
  backendName: "cpu",
  kernelFunc: nonMaxSuppressionV3$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV4Impl$1 = nonMaxSuppressionV4Impl$2;
function nonMaxSuppressionV4$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { boxes: s, scores: a } = e, { maxOutputSize: o, iouThreshold: u, scoreThreshold: l, padToMaxOutputSize: f } = n;
  assertNotComplex$1(s, "NonMaxSuppressionPadded");
  const c = t.data.get(s.dataId).values, h = t.data.get(a.dataId).values, { selectedIndices: d, validOutputs: m } = nonMaxSuppressionV4Impl$1(c, h, o, u, l, f);
  return [
    t.makeTensorInfo([d.length], "int32", new Int32Array(d)),
    t.makeTensorInfo([], "int32", new Int32Array([m]))
  ];
}
const nonMaxSuppressionV4Config$1 = {
  kernelName: NonMaxSuppressionV4,
  backendName: "cpu",
  kernelFunc: nonMaxSuppressionV4$1
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV5Impl$1 = nonMaxSuppressionV5Impl$2;
function nonMaxSuppressionV5$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { boxes: s, scores: a } = e, { maxOutputSize: o, iouThreshold: u, scoreThreshold: l, softNmsSigma: f } = n;
  assertNotComplex$1(s, "NonMaxSuppressionWithScore");
  const c = t.data.get(s.dataId).values, h = t.data.get(a.dataId).values, d = o, m = u, g = l, y = f, { selectedIndices: b, selectedScores: v } = nonMaxSuppressionV5Impl$1(c, h, d, m, g, y);
  return [
    t.makeTensorInfo([b.length], "int32", new Int32Array(b)),
    t.makeTensorInfo([v.length], "float32", new Float32Array(v))
  ];
}
const nonMaxSuppressionV5Config$1 = {
  kernelName: NonMaxSuppressionV5,
  backendName: "cpu",
  kernelFunc: nonMaxSuppressionV5$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oneHot$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { indices: s } = e, { dtype: a, depth: o, onValue: u, offValue: l } = n;
  assertNotComplex$1(s, "oneHot");
  const f = sizeFromShape(s.shape), c = new Float32Array(f * o);
  c.fill(l);
  const h = t.data.get(s.dataId).values;
  for (let d = 0; d < f; ++d)
    h[d] >= 0 && h[d] < o && (c[d * o + h[d]] = u);
  return t.makeTensorInfo([...s.shape, o], a, c);
}
const oneHotConfig$1 = {
  kernelName: OneHot,
  backendName: "cpu",
  kernelFunc: oneHot$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zerosLike$1(r) {
  const { inputs: e, backend: t } = r, { x: n } = e;
  if (n.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (n.dtype === "complex64") {
    const s = real$1({ inputs: { input: n }, backend: t }), a = zerosLike$1({ inputs: { x: s }, backend: t }), o = imag$1({ inputs: { input: n }, backend: t }), u = zerosLike$1({ inputs: { x: o }, backend: t }), l = complex$1({ inputs: { real: a, imag: u }, backend: t });
    return t.disposeIntermediateTensorInfo(s), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(u), l;
  } else
    return fill$1({ backend: t, attrs: { shape: n.shape, value: 0, dtype: n.dtype } });
}
const zerosLikeConfig$1 = {
  kernelName: ZerosLike,
  backendName: "cpu",
  kernelFunc: zerosLike$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function onesLike$1(r) {
  const { inputs: e, backend: t } = r, { x: n } = e;
  if (n.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (n.dtype === "complex64") {
    const s = real$1({ inputs: { input: n }, backend: t }), a = onesLike$1({ inputs: { x: s }, backend: t }), o = imag$1({ inputs: { input: n }, backend: t }), u = zerosLike$1({ inputs: { x: o }, backend: t }), l = complex$1({ inputs: { real: a, imag: u }, backend: t });
    return t.disposeIntermediateTensorInfo(s), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(u), l;
  } else
    return fill$1({ backend: t, attrs: { shape: n.shape, value: 1, dtype: n.dtype } });
}
const onesLikeConfig$1 = {
  kernelName: OnesLike,
  backendName: "cpu",
  kernelFunc: onesLike$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pack$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { axis: s } = n;
  if (e.length === 1)
    return expandDims$1({ inputs: { input: e[0] }, backend: t, attrs: { dim: s } });
  const a = e[0].shape, o = e[0].dtype;
  e.forEach((c) => {
    assertShapesMatch(a, c.shape, "All tensors passed to stack must have matching shapes"), assert$1(o === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const u = [], l = e.map((c) => {
    const h = expandDims$1({ inputs: { input: c }, backend: t, attrs: { dim: s } });
    return u.push(h), h;
  }), f = concat$1({ inputs: l, backend: t, attrs: { axis: s } });
  return u.forEach((c) => t.disposeIntermediateTensorInfo(c)), f;
}
const packConfig$1 = {
  kernelName: Pack,
  backendName: "cpu",
  kernelFunc: pack$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function padV2$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { paddings: a, constantValue: o } = n;
  assertNotComplex$1(s, "pad");
  const u = a.map(
    (w, I) => w[0] + s.shape[I] + w[1]
    /* afterPad */
  ), l = a.map((w) => w[0]), f = t.data.get(s.dataId).values, c = sizeFromShape(s.shape), h = s.shape.length, d = computeStrides(s.shape), m = sizeFromShape(u), g = u.length, y = computeStrides(u), b = getTypedArrayFromDType(s.dtype, m);
  o !== 0 && b.fill(o);
  for (let w = 0; w < c; w++) {
    const T = indexToLoc(w, h, d).map((F, O) => F + l[O]), _ = locToIndex(T, g, y);
    b[_] = f[w];
  }
  return { dataId: t.write(b, u, s.dtype), shape: u, dtype: s.dtype };
}
const padV2Config$1 = {
  kernelName: PadV2,
  backendName: "cpu",
  kernelFunc: padV2$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const powImpl = createSimpleBinaryKernelImpl((r, e) => Math.pow(r, e)), pow$1 = binaryKernelFunc$1(Pow, powImpl), powConfig$1 = {
  kernelName: Pow,
  backendName: "cpu",
  kernelFunc: pow$1
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function raggedGather$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { paramsNestedSplits: s, paramsDenseValues: a, indices: o } = e, { outputRaggedRank: u } = n, l = s.map((v) => t.data.get(v.dataId).values), f = s.map((v) => v.shape), c = t.data.get(a.dataId).values, h = t.data.get(o.dataId).values, [d, m, g] = raggedGatherImpl(l, f, c, a.shape, a.dtype, h, o.shape), y = d.map((v) => t.makeTensorInfo([v.length], "int32", v)), b = t.makeTensorInfo(g, a.dtype, m);
  return y.concat([b]);
}
const raggedGatherConfig$1 = {
  kernelName: RaggedGather,
  backendName: "cpu",
  kernelFunc: raggedGather$1
};
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function raggedRange$1(r) {
  const { inputs: e, backend: t } = r, { starts: n, limits: s, deltas: a } = e, o = t.data.get(n.dataId).values, u = t.data.get(s.dataId).values, l = t.data.get(a.dataId).values, [f, c] = raggedRangeImpl(o, n.shape, n.dtype, u, s.shape, l, a.shape), h = t.makeTensorInfo([f.length], "int32", f), d = t.makeTensorInfo([c.length], n.dtype, c);
  return [h, d];
}
const raggedRangeConfig$1 = {
  kernelName: RaggedRange,
  backendName: "cpu",
  kernelFunc: raggedRange$1
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function raggedTensorToTensor$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { shape: s, values: a, defaultValue: o, rowPartitionTensors: u } = e, { rowPartitionTypes: l } = n, f = t.data.get(s.dataId).values, c = t.data.get(a.dataId).values, h = t.data.get(o.dataId).values, d = u.map((b) => t.data.get(b.dataId).values), m = u.map((b) => b.shape), [g, y] = raggedTensorToTensorImpl(f, s.shape, c, a.shape, a.dtype, h, o.shape, d, m, l);
  return t.makeTensorInfo(g, a.dtype, y);
}
const raggedTensorToTensorConfig$1 = {
  kernelName: RaggedTensorToTensor,
  backendName: "cpu",
  kernelFunc: raggedTensorToTensor$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function range$1(r) {
  const { backend: e, attrs: t } = r, { start: n, stop: s, dtype: a, step: o } = t, u = rangeImpl(n, s, o, a);
  return e.makeTensorInfo([u.length], a, u);
}
const rangeConfig$1 = {
  kernelName: Range,
  backendName: "cpu",
  kernelFunc: range$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const reciprocal$1 = unaryKernelFunc$1(Reciprocal, (r) => 1 / r), reciprocalConfig$1 = {
  kernelName: Reciprocal,
  backendName: "cpu",
  kernelFunc: reciprocal$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeBilinear$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { images: s } = e, { alignCorners: a, halfPixelCenters: o, size: u } = n;
  assertNotComplex$1(s, "resizeBilinear");
  const l = computeStrides(s.shape), [f, c] = u, [h, d, m, g] = s.shape, y = t.data.get(s.dataId).values, b = new Float32Array(sizeFromShape([h, f, c, g])), v = [
    a && f > 1 ? d - 1 : d,
    a && c > 1 ? m - 1 : m
  ], w = [
    a && f > 1 ? f - 1 : f,
    a && c > 1 ? c - 1 : c
  ];
  let I = 0;
  const T = v[0] / w[0], _ = v[1] / w[1];
  for (let F = 0; F < h; F++)
    for (let O = 0; O < f; O++) {
      let q;
      o ? q = T * (O + 0.5) - 0.5 : q = T * O;
      const V = Math.max(0, Math.floor(q)), H = q - V, R = Math.min(d - 1, Math.ceil(q)), $ = F * l[0] + V * l[1], S = F * l[0] + R * l[1];
      for (let x = 0; x < c; x++) {
        let C;
        o ? C = _ * (x + 0.5) - 0.5 : C = _ * x;
        const A = Math.max(0, Math.floor(C)), N = C - A, k = Math.min(m - 1, Math.ceil(C)), D = $ + A * l[2], E = S + A * l[2], M = $ + k * l[2], P = S + k * l[2];
        for (let z = 0; z < g; z++) {
          const J = y[D + z], re = y[E + z], Q = y[M + z], W = y[P + z], j = J + (Q - J) * N, te = re + (W - re) * N, se = j + (te - j) * H;
          b[I++] = se;
        }
      }
    }
  return t.makeTensorInfo([h, f, c, g], "float32", b);
}
const resizeBilinearConfig$1 = {
  kernelName: ResizeBilinear,
  backendName: "cpu",
  kernelFunc: resizeBilinear$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeBilinearGrad$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { images: s, dy: a } = e, { alignCorners: o } = n;
  assertNotComplex$1([a, s], "resizeBilinearGrad");
  const u = computeStrides(s.shape), [l, f, c, h] = s.shape, [, d, m] = a.shape, g = new Float32Array(l * f * c * h), y = [
    o && d > 1 ? f - 1 : f,
    o && m > 1 ? c - 1 : c
  ], b = [
    o && d > 1 ? d - 1 : d,
    o && m > 1 ? m - 1 : m
  ], v = y[0] / b[0], w = y[1] / b[1], I = t.data.get(a.dataId).values;
  let T = 0;
  for (let _ = 0; _ < l; _++) {
    const F = _ * u[0];
    for (let O = 0; O < d; O++) {
      const q = O * v, V = Math.floor(q), H = Math.min(Math.ceil(q), f - 1), R = F + V * u[1], $ = F + H * u[1], S = q - V, x = 1 - S;
      for (let C = 0; C < m; C++) {
        const A = C * w, N = Math.floor(A), k = Math.min(Math.ceil(A), c - 1), D = A - N, E = 1 - D, M = R + N * u[2], P = R + k * u[2], z = $ + N * u[2], J = $ + k * u[2], re = x * E, Q = x * D, W = S * E, j = S * D;
        for (let te = 0; te < h; te++) {
          const se = I[T++];
          g[M + te] += se * re, g[P + te] += se * Q, g[z + te] += se * W, g[J + te] += se * j;
        }
      }
    }
  }
  return t.makeTensorInfo([l, c, f, h], "float32", g);
}
const resizeBilinearGradConfig$1 = {
  kernelName: ResizeBilinearGrad,
  backendName: "cpu",
  kernelFunc: resizeBilinearGrad$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeNearestNeighbor$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { images: s } = e, { alignCorners: a, halfPixelCenters: o, size: u } = n;
  assertNotComplex$1(s, "resizeNearestNeighbor");
  const l = computeStrides(s.shape), [f, c] = u, [h, d, m, g] = s.shape, y = t.data.get(s.dataId).values, b = new Float32Array(h * f * c * g), v = [
    a && f > 1 ? d - 1 : d,
    a && c > 1 ? m - 1 : m
  ], w = [
    a && f > 1 ? f - 1 : f,
    a && c > 1 ? c - 1 : c
  ], I = v[0] / w[0], T = v[1] / w[1];
  let _ = 0;
  for (let F = 0; F < h; F++) {
    const O = F * l[0];
    for (let q = 0; q < f; q++) {
      const V = o ? I * (q + 0.5) : I * q;
      let H = Math.min(d - 1, a ? Math.round(V) : Math.floor(V));
      o && (H = Math.max(0, H));
      const R = O + H * l[1];
      for (let $ = 0; $ < c; $++) {
        const S = o ? T * ($ + 0.5) : T * $;
        let x = Math.min(m - 1, a ? Math.round(S) : Math.floor(S));
        o && (x = Math.max(0, x));
        const C = R + x * l[2];
        for (let A = 0; A < g; A++) {
          const N = y[C + A];
          b[_++] = N;
        }
      }
    }
  }
  return t.makeTensorInfo([h, f, c, g], s.dtype, b);
}
const resizeNearestNeighborConfig$1 = {
  kernelName: ResizeNearestNeighbor,
  backendName: "cpu",
  kernelFunc: resizeNearestNeighbor$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeNearestNeighborGrad$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { images: s, dy: a } = e, { alignCorners: o } = n;
  assertNotComplex$1([a, s], "resizeNearestNeighborGrad");
  const u = computeStrides(s.shape), l = computeStrides(a.shape), [f, c, h, d] = s.shape, [, m, g] = a.shape, y = new Float32Array(f * c * h * d), b = t.data.get(a.dataId).values, v = [
    o && m > 1 ? c - 1 : c,
    o && g > 1 ? h - 1 : h
  ], w = [
    o && m > 1 ? m - 1 : m,
    o && g > 1 ? g - 1 : g
  ], I = v[0] / w[0], T = v[1] / w[1], _ = 1 / I, F = 1 / T, O = Math.ceil(_) * 2 + 2, q = Math.ceil(F) * 2 + 2;
  for (let V = 0; V < f; V++) {
    const H = V * u[0];
    for (let R = 0; R < c; R++) {
      const $ = H + R * u[1], S = Math.floor(R * _), x = Math.floor(S - O / 2);
      for (let C = 0; C < h; C++) {
        const A = $ + C * u[2], N = Math.floor(C * F), k = Math.floor(N - q / 2);
        for (let D = 0; D < d; D++) {
          let E = 0;
          for (let M = 0; M < O; M++) {
            const P = M + x;
            if (P < 0 || P >= m)
              continue;
            const z = H + P * l[1], J = P * I, re = Math.min(c - 1, o ? Math.round(J) : Math.floor(J));
            if (R === re)
              for (let Q = 0; Q < q; Q++) {
                const W = Q + k;
                if (W < 0 || W >= g)
                  continue;
                const j = z + W * l[2], te = W * T, se = Math.min(h - 1, o ? Math.round(te) : Math.floor(te));
                C === se && (E += b[j + D]);
              }
          }
          y[A + D] = E;
        }
      }
    }
  }
  return t.makeTensorInfo(s.shape, s.dtype, y);
}
const resizeNearestNeighborGradConfig$1 = {
  kernelName: ResizeNearestNeighborGrad,
  backendName: "cpu",
  kernelFunc: resizeNearestNeighborGrad$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reverse$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { dims: a } = n;
  assertNotComplex$1(s, "reverse");
  const o = s.shape.length, u = parseAxisParam(a, s.shape);
  if (o === 0)
    return identity$1({ inputs: { x: s }, backend: t });
  const l = new TensorBuffer(s.shape, s.dtype), f = t.bufferSync(s);
  for (let c = 0; c < l.size; c++) {
    const h = l.indexToLoc(c), d = h.slice();
    u.forEach((m) => d[m] = s.shape[m] - 1 - d[m]), l.set(f.get(...d), ...h);
  }
  return t.makeTensorInfo(l.shape, l.dtype, l.values);
}
const reverseConfig$1 = {
  kernelName: Reverse,
  backendName: "cpu",
  kernelFunc: reverse$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rotateWithOffsetConfig$1 = {
  kernelName: RotateWithOffset,
  backendName: "cpu",
  kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
    const { image: n } = r, { radians: s, fillValue: a, center: o } = e, u = t, l = getTypedArrayFromDType(n.dtype, sizeFromShape(n.shape)), [f, c, h, d] = n.shape, [m, g] = getImageCenter(o, c, h), y = 255, b = Math.sin(s), v = Math.cos(s), w = u.data.get(n.dataId).values;
    for (let T = 0; T < f; T++) {
      const _ = T * h * c * d;
      for (let F = 0; F < c; F++) {
        const O = F * (h * d);
        for (let q = 0; q < h; q++) {
          const V = q * d;
          for (let H = 0; H < d; H++) {
            const R = [f, F, q, H], $ = R[2], S = R[1];
            let x = ($ - m) * v - (S - g) * b, C = ($ - m) * b + (S - g) * v;
            x = Math.round(x + m), C = Math.round(C + g);
            let A = a;
            if (typeof a != "number" && (H === 3 ? A = y : A = a[H]), x >= 0 && x < h && C >= 0 && C < c) {
              const k = C * (h * d), D = x * d, E = _ + k + D + H;
              A = w[E];
            }
            const N = _ + O + V + H;
            l[N] = A;
          }
        }
      }
    }
    return { dataId: u.write(l, n.shape, n.dtype), shape: n.shape, dtype: n.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const round$1 = unaryKernelFunc$1(Round, (r) => {
  const e = Math.floor(r);
  return r - e < 0.5 ? Math.floor(r) : r - e > 0.5 ? Math.ceil(r) : e % 2 === 0 ? e : e + 1;
}), roundConfig$1 = {
  kernelName: Round,
  backendName: "cpu",
  kernelFunc: round$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function scatterNd$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { indices: s, updates: a } = e, { shape: o } = n, { sliceRank: u, numUpdates: l, sliceSize: f, strides: c, outputSize: h } = calculateShapes(a, s, o), d = !0, m = t.bufferSync(s), g = t.bufferSync(a), y = scatterImpl(m, g, o, h, f, l, u, c, 0, d);
  return t.makeTensorInfo(o, y.dtype, y.values);
}
const scatterNdConfig$1 = {
  kernelName: ScatterNd,
  backendName: "cpu",
  kernelFunc: scatterNd$1
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lowerBound(r, e) {
  let t = 0, n = r.length, s = 0;
  for (; t < n; )
    s = Math.floor((t + n) / 2), r[s] < e ? t = s + 1 : n = s;
  return n;
}
function upperBound(r, e) {
  let t = 0, n = r.length, s = 0;
  for (; t < n; )
    s = Math.floor((t + n) / 2), r[s] <= e ? t = s + 1 : n = s;
  return n;
}
function searchSortedImpl(r, e, t, n, s, a) {
  const o = getArrayFromDType("int32", t * s);
  for (let u = 0; u < t; ++u) {
    const l = r.slice(u * n, (u + 1) * n), f = u * s;
    for (let c = 0; c < s; ++c)
      o[f + c] = a === "left" ? lowerBound(l, e[c + f]) : upperBound(l, e[c + f]);
  }
  return o;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function searchSorted$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { sortedSequence: s, values: a } = e, { side: o } = n, u = t.data.get(s.dataId).values, l = t.data.get(a.dataId).values, f = searchSortedImpl(u, l, s.shape[0], s.shape[1], a.shape[1], o);
  return t.makeTensorInfo(a.shape, "int32", f);
}
const searchSortedConfig$1 = {
  kernelName: SearchSorted,
  backendName: "cpu",
  kernelFunc: searchSorted$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function select$1(r) {
  const { inputs: e, backend: t } = r, { condition: n, t: s, e: a } = e;
  assertNotComplex$1([n, s, a], "select");
  const o = n.shape.length, u = t.data.get(n.dataId).values, l = t.data.get(s.dataId).values, f = t.data.get(a.dataId).values, c = upcastType(s.dtype, a.dtype), h = makeZerosTypedArray(sizeFromShape(s.shape), c);
  let d = 0;
  const m = o === 0 || o > 1 || s.shape.length === 1 ? 1 : sizeFromShape(s.shape.slice(1));
  for (let g = 0; g < u.length; g++)
    for (let y = 0; y < m; y++)
      u[g] === 1 ? h[d++] = l[g] : h[d++] = f[g];
  return t.makeTensorInfo(s.shape, c, h);
}
const selectConfig$1 = {
  kernelName: Select,
  backendName: "cpu",
  kernelFunc: select$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const scaleAlpha = SELU_SCALEALPHA, scale = SELU_SCALE, selu$1 = unaryKernelFunc$1(Selu$1, (r) => r >= 0 ? scale * r : scaleAlpha * (Math.exp(r) - 1)), seluConfig$1 = {
  kernelName: Selu$1,
  backendName: "cpu",
  kernelFunc: selu$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sign$1 = unaryKernelFunc$1(Sign, (r) => r < 0 ? -1 : r > 0 ? 1 : 0), signConfig$1 = {
  kernelName: Sign,
  backendName: "cpu",
  kernelFunc: sign$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sin$1 = unaryKernelFunc$1(Sin, (r) => Math.sin(r)), sinConfig$1 = {
  kernelName: Sin,
  backendName: "cpu",
  kernelFunc: sin$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sinh$1 = unaryKernelFunc$1(Sinh, (r) => Math.sinh(r)), sinhConfig$1 = {
  kernelName: Sinh,
  backendName: "cpu",
  kernelFunc: sinh$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const epsilon = 11920928955078125e-23, threshold = Math.log(epsilon) + 2, softplus$1 = unaryKernelFunc$1(Softplus$1, (r) => {
  const e = r > -threshold, t = r < threshold, n = Math.exp(r);
  let s;
  return t ? s = n : e ? s = r : s = Math.log(1 + n), s;
}), softplusConfig$1 = {
  kernelName: Softplus$1,
  backendName: "cpu",
  kernelFunc: softplus$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function spaceToBatchND$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { blockShape: a, paddings: o } = n;
  assertNotComplex$1([s], "spaceToBatchND");
  const u = sizeFromShape(a), l = [[0, 0]];
  l.push(...o);
  for (let F = 1 + a.length; F < s.shape.length; ++F)
    l.push([0, 0]);
  const f = padV2Config$1.kernelFunc({
    inputs: { x: s },
    backend: t,
    attrs: { paddings: l, constantValue: 0 }
  }), c = getReshaped(f.shape, a, u, !1), h = getPermuted(c.length, a.length, !1), d = getReshapedPermuted(f.shape, a, u, !1), y = reshape$1({ inputs: { x: f }, backend: t, attrs: { shape: c } }), w = transpose$1({ inputs: { x: y }, backend: t, attrs: { perm: h } }), _ = reshape$1({ inputs: { x: w }, backend: t, attrs: { shape: d } });
  return t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(w), _;
}
const spaceToBatchNDConfig$1 = {
  kernelName: SpaceToBatchND,
  backendName: "cpu",
  kernelFunc: spaceToBatchND$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseFillEmptyRows$1(r) {
  const { inputs: e, backend: t } = r, { indices: n, values: s, denseShape: a, defaultValue: o } = e;
  if (a.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${a.shape}`);
  if (n.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${s.shape}`);
  if (o.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${o.shape}`);
  const u = t.data.get(n.dataId).values, l = t.data.get(s.dataId).values, f = t.data.get(a.dataId).values, c = t.data.get(o.dataId).values[0], [h, d, m, g, y] = sparseFillEmptyRowsImpl(u, n.shape, n.dtype, l, s.dtype, f, c);
  return [
    t.makeTensorInfo(d, n.dtype, h),
    t.makeTensorInfo([d[0]], s.dtype, m),
    t.makeTensorInfo([g.length], "bool", new Uint8Array(g.map((b) => Number(b)))),
    t.makeTensorInfo([y.length], n.dtype, new Int32Array(y))
  ];
}
const sparseFillEmptyRowsConfig$1 = {
  kernelName: SparseFillEmptyRows,
  backendName: "cpu",
  kernelFunc: sparseFillEmptyRows$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseReshape$1(r) {
  const { inputs: e, backend: t } = r, { inputIndices: n, inputShape: s, newShape: a } = e;
  if (n.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${s.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${a.shape}`);
  const o = Array.from(t.data.get(s.dataId).values), u = t.data.get(n.dataId).values, l = Array.from(t.data.get(a.dataId).values), [f, c, h] = sparseReshapeImpl(u, n.shape, n.dtype, o, l);
  return [
    t.makeTensorInfo(c, n.dtype, f),
    t.makeTensorInfo([h.length], a.dtype, new Int32Array(h))
  ];
}
const sparseReshapeConfig$1 = {
  kernelName: SparseReshape,
  backendName: "cpu",
  kernelFunc: sparseReshape$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseSegmentMean$1(r) {
  const { inputs: e, backend: t } = r, { data: n, indices: s, segmentIds: a } = e;
  if (n.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (s.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${s.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${a.shape}`);
  if (s.shape[0] !== a.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const o = t.data.get(n.dataId).values, u = t.data.get(s.dataId).values, l = t.data.get(a.dataId).values, [f, c] = sparseSegmentReductionImpl(o, n.shape, n.dtype, u, l, !0);
  return t.makeTensorInfo(c, n.dtype, f);
}
const sparseSegmentMeanConfig$1 = {
  kernelName: SparseSegmentMean,
  backendName: "cpu",
  kernelFunc: sparseSegmentMean$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseSegmentSum$1(r) {
  const { inputs: e, backend: t } = r, { data: n, indices: s, segmentIds: a } = e;
  if (n.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (s.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${s.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${a.shape}`);
  if (s.shape[0] !== a.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const o = t.data.get(n.dataId).values, u = t.data.get(s.dataId).values, l = t.data.get(a.dataId).values, [f, c] = sparseSegmentReductionImpl(o, n.shape, n.dtype, u, l);
  return t.makeTensorInfo(c, n.dtype, f);
}
const sparseSegmentSumConfig$1 = {
  kernelName: SparseSegmentSum,
  backendName: "cpu",
  kernelFunc: sparseSegmentSum$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseToDense$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { sparseIndices: s, sparseValues: a, defaultValue: o } = e, { outputShape: u } = n, { sliceRank: l, numUpdates: f, sliceSize: c, strides: h, outputSize: d } = calculateShapes(a, s, u), m = !1, g = t.bufferSync(s);
  let y;
  switch (a.dtype) {
    case "bool": {
      const b = t.bufferSync(a), v = !!t.data.get(o.dataId).values[0];
      y = scatterImpl(g, b, u, d, c, f, l, h, v, m);
      break;
    }
    case "float32": {
      const b = t.bufferSync(a), v = t.data.get(o.dataId).values[0];
      y = scatterImpl(g, b, u, d, c, f, l, h, v, m);
      break;
    }
    case "int32": {
      const b = t.bufferSync(a), v = t.data.get(o.dataId).values[0];
      y = scatterImpl(g, b, u, d, c, f, l, h, v, m);
      break;
    }
    case "string": {
      const b = t.bufferSync(a), v = decodeString(t.data.get(o.dataId).values[0]);
      y = scatterImpl(g, b, u, d, c, f, l, h, v, m);
      break;
    }
    default:
      throw new Error(`Unsupported type ${a.dtype}`);
  }
  return t.makeTensorInfo(u, y.dtype, y.values);
}
const sparseToDenseConfig$1 = {
  kernelName: SparseToDense,
  backendName: "cpu",
  kernelFunc: sparseToDense$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function splitV$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { numOrSizeSplits: a, axis: o } = n, u = parseAxisParam(o, s.shape)[0], l = prepareSplitSize(s, a, u), f = new Array(s.shape.length).fill(0), c = s.shape.slice();
  return l.map((h) => {
    const d = [...c];
    d[u] = h;
    const m = slice$1({ inputs: { x: s }, backend: t, attrs: { begin: f, size: d } });
    return f[u] += h, m;
  });
}
const splitVConfig$1 = {
  kernelName: SplitV,
  backendName: "cpu",
  kernelFunc: splitV$1
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const squareConfig$1 = {
  kernelName: Square,
  backendName: "cpu",
  kernelFunc: ({ inputs: r, backend: e }) => {
    const { x: t } = r, n = e;
    assertNotComplex$1(t, "square");
    const s = n.data.get(t.dataId).values, a = new Float32Array(s.length);
    for (let u = 0; u < s.length; ++u) {
      const l = s[u];
      a[u] = l * l;
    }
    return { dataId: n.write(a, t.shape, t.dtype), shape: t.shape, dtype: t.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const step$1 = unaryKernelFunc$1(Step, (r, e) => {
  const t = e;
  return isNaN(r) ? NaN : r > 0 ? 1 : t.alpha;
}), stepConfig$1 = {
  kernelName: Step,
  backendName: "cpu",
  kernelFunc: step$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stridedSlice$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { begin: a, end: o, strides: u, beginMask: l, endMask: f, ellipsisMask: c, newAxisMask: h, shrinkAxisMask: d } = n;
  assertNotComplex$1(s, "stridedSlice");
  const { finalShapeSparse: m, finalShape: g, isIdentity: y, sliceDim0: b, isSimpleSlice: v, begin: w, end: I, strides: T } = sliceInfo(s.shape, a, o, u, l, f, c, h, d);
  let _;
  if (y)
    _ = reshape$1({ inputs: { x: s }, backend: t, attrs: { shape: g } });
  else if (b || v) {
    assert$1(s.shape.length >= 1, () => `Input must have rank at least 1, got: ${s.shape.length}`);
    const F = computeOutShape$2(w, I, T), O = slice$1({ inputs: { x: s }, backend: t, attrs: { begin: w, size: F } });
    _ = reshape$1({ inputs: { x: O }, backend: t, attrs: { shape: g } }), t.disposeIntermediateTensorInfo(O);
  } else {
    const F = t.bufferSync(s), O = stridedSliceImpl(m, F, T, w);
    _ = t.makeTensorInfo(g, O.dtype, O.values);
  }
  return _;
}
const stridedSliceConfig$1 = {
  kernelName: StridedSlice,
  backendName: "cpu",
  kernelFunc: stridedSlice$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringNGrams$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { separator: s, nGramWidths: a, leftPad: o, rightPad: u, padWidth: l, preserveShortSequences: f } = n, { data: c, dataSplits: h } = e, d = t.data.get(c.dataId).values, m = t.data.get(h.dataId).values, [g, y] = stringNGramsImpl(d, m, s, a, o, u, l, f);
  return [
    t.makeTensorInfo([g.length], "string", g),
    t.makeTensorInfo(h.shape, "int32", y)
  ];
}
const stringNGramsConfig$1 = {
  kernelName: StringNGrams,
  backendName: "cpu",
  kernelFunc: stringNGrams$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringSplit$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { skipEmpty: s } = n, { input: a, delimiter: o } = e;
  if (a.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (a.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${a.shape}`);
  if (o.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);
  const u = t.data.get(a.dataId).values, l = t.data.get(o.dataId).values[0], [f, c, h] = stringSplitImpl(u, l, s), d = c.length;
  return [
    t.makeTensorInfo([d, 2], "int32", f),
    t.makeTensorInfo([d], "string", c),
    t.makeTensorInfo([2], "int32", new Int32Array(h))
  ];
}
const stringSplitConfig$1 = {
  kernelName: StringSplit,
  backendName: "cpu",
  kernelFunc: stringSplit$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringToHashBucketFast$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { numBuckets: s } = n, { input: a } = e;
  if (a.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (s <= 0)
    throw new Error("Number of buckets must be at least 1");
  const o = t.data.get(a.dataId).values, u = stringToHashBucketFastImpl(o, s);
  return t.makeTensorInfo(a.shape, "int32", u);
}
const stringToHashBucketFastConfig$1 = {
  kernelName: StringToHashBucketFast,
  backendName: "cpu",
  kernelFunc: stringToHashBucketFast$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tan$1 = unaryKernelFunc$1(Tan, (r) => Math.tan(r)), tanConfig$1 = {
  kernelName: Tan,
  backendName: "cpu",
  kernelFunc: tan$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tanh$1 = unaryKernelFunc$1(Tanh$1, (r) => Math.tanh(r)), tanhConfig$1 = {
  kernelName: Tanh$1,
  backendName: "cpu",
  kernelFunc: tanh$1
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tensorScatterUpdate$1(r) {
  const { inputs: e, backend: t } = r, { tensor: n, indices: s, updates: a } = e, { sliceRank: o, numUpdates: u, sliceSize: l, strides: f, outputSize: c } = calculateShapes(a, s, n.shape), h = !1, d = t.bufferSync(s), m = t.bufferSync(a), g = t.bufferSync(n), y = scatterImpl(d, m, n.shape, c, l, u, o, f, g, h);
  return t.makeTensorInfo(n.shape, y.dtype, y.values);
}
const tensorScatterUpdateConfig$1 = {
  kernelName: TensorScatterUpdate,
  backendName: "cpu",
  kernelFunc: tensorScatterUpdate$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tile$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { reps: a } = n;
  assertNotComplex$1(s, "tile");
  const o = tileImpl(t.bufferSync(s), a);
  return t.makeTensorInfo(o.shape, o.dtype, o.values);
}
const tileConfig$1 = {
  kernelName: Tile,
  backendName: "cpu",
  kernelFunc: tile$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function topK$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { k: a, sorted: o } = n;
  assertNotComplex$1(s, "topk");
  const u = t.data.get(s.dataId).values, [l, f] = topKImpl(u, s.shape, s.dtype, a, o);
  return [
    t.makeTensorInfo(l.shape, l.dtype, l.values),
    t.makeTensorInfo(f.shape, f.dtype, f.values)
  ];
}
const topKConfig$1 = {
  kernelName: TopK,
  backendName: "cpu",
  kernelFunc: topK$1
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transform$1(r) {
  const { inputs: e, attrs: t, backend: n } = r, { image: s, transforms: a } = e, { interpolation: o, fillMode: u, fillValue: l, outputShape: f } = t, [c, h, d, m] = s.shape, [g, y] = f ?? [h, d], b = [c, g, y, m], v = computeStrides(s.shape), w = v[0], I = v[1], T = v[2], _ = computeStrides(b), F = _[0], O = _[1], q = _[2], V = getTypedArrayFromDType(s.dtype, sizeFromShape(b));
  V.fill(l);
  const H = n.data.get(s.dataId).values, R = n.data.get(a.dataId).values;
  for (let S = 0; S < c; ++S) {
    const x = a.shape[0] === 1 ? R : R.subarray(S * 8, S * 8 + 8);
    for (let C = 0; C < g; ++C)
      for (let A = 0; A < y; ++A)
        for (let N = 0; N < m; ++N) {
          let k;
          const D = x[6] * A + x[7] * C + 1;
          if (D === 0)
            continue;
          const E = (x[0] * A + x[1] * C + x[2]) / D, M = (x[3] * A + x[4] * C + x[5]) / D, P = mapCoord(E, d, u), z = mapCoord(M, h, u);
          switch (o) {
            case "nearest":
              k = nearestInterpolation(H, h, d, w, I, T, S, z, P, N, l);
              break;
            case "bilinear":
              k = bilinearInterpolation(H, h, d, w, I, T, S, z, P, N, l);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`);
          }
          const J = S * F + C * O + A * q + N;
          V[J] = k;
        }
    return n.makeTensorInfo(b, s.dtype, V);
  }
  return { dataId: n.write(V, b, s.dtype), shape: s.shape, dtype: s.dtype };
}
const transformConfig$1 = {
  kernelName: Transform,
  backendName: "cpu",
  kernelFunc: transform$1
};
function mapCoord(r, e, t) {
  switch (t) {
    case "reflect":
      return mapCoordReflect(r, e);
    case "wrap":
      return mapCoordWrap(r, e);
    case "nearest":
      return mapCoordNearest(r, e);
    case "constant":
    default:
      return mapCoordConstant(r);
  }
}
function mapCoordReflect(r, e) {
  let t = r;
  if (t < 0)
    if (e <= 1)
      t = 0;
    else {
      const n = 2 * e;
      t < n && (t = n * Math.trunc(-t / n) + t), t = t < -e ? t + n : -t - 1;
    }
  else if (t > e - 1)
    if (e <= 1)
      t = 0;
    else {
      const n = 2 * e;
      t -= n * Math.trunc(t / n), t >= e && (t = n - t - 1);
    }
  return clamp(0, t, e - 1);
}
function mapCoordWrap(r, e) {
  let t = r;
  if (t < 0)
    if (e <= 1)
      t = 0;
    else {
      const n = e - 1;
      t += e * (Math.trunc(-t / n) + 1);
    }
  else if (t > e - 1)
    if (e <= 1)
      t = 0;
    else {
      const n = e - 1;
      t -= e * Math.trunc(t / n);
    }
  return clamp(0, t, e - 1);
}
function mapCoordConstant(r, e) {
  return r;
}
function mapCoordNearest(r, e) {
  return clamp(0, r, e - 1);
}
function readWithFillValue(r, e, t, n, s, a, o, u, l, f, c) {
  const h = o * n + u * s + l * a + f;
  return 0 <= u && u < e && 0 <= l && l < t ? r[h] : c;
}
function nearestInterpolation(r, e, t, n, s, a, o, u, l, f, c) {
  const h = Math.round(u), d = Math.round(l);
  return readWithFillValue(r, e, t, n, s, a, o, h, d, f, c);
}
function bilinearInterpolation(r, e, t, n, s, a, o, u, l, f, c) {
  const h = Math.floor(u), d = Math.floor(l), m = h + 1, g = d + 1, y = (g - l) * readWithFillValue(r, e, t, n, s, a, o, h, d, f, c) + (l - d) * readWithFillValue(r, e, t, n, s, a, o, h, g, f, c), b = (g - l) * readWithFillValue(r, e, t, n, s, a, o, m, d, f, c) + (l - d) * readWithFillValue(r, e, t, n, s, a, o, m, g, f, c);
  return (m - u) * y + (u - h) * b;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unique$1(r) {
  const { inputs: e, attrs: t, backend: n } = r, { axis: s } = t, { x: a } = e;
  assertNotComplex$1(a, "unique");
  const o = n.data.get(a.dataId).values, { outputValues: u, outputShape: l, indices: f } = uniqueImpl(o, s, a.shape, a.dtype);
  return [
    n.makeTensorInfo(l, a.dtype, u),
    n.makeTensorInfo([f.length], "int32", f)
  ];
}
const uniqueConfig$1 = {
  kernelName: Unique,
  backendName: "cpu",
  kernelFunc: unique$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unpack$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { value: s } = e;
  let { axis: a } = n;
  a < 0 && (a += s.shape.length);
  const o = s.shape.length, u = s.shape[a], l = new Array(o - 1);
  let f = 0;
  for (let m = 0; m < o; m++)
    m !== a && (l[f++] = s.shape[m]);
  const c = new Array(o).fill(0), h = s.shape.slice();
  h[a] = 1;
  const d = new Array(u);
  for (let m = 0; m < d.length; m++) {
    c[a] = m;
    const g = slice$1({ inputs: { x: s }, backend: t, attrs: { begin: c, size: h } });
    d[m] = reshape$1({ inputs: { x: g }, backend: t, attrs: { shape: l } }), t.disposeIntermediateTensorInfo(g);
  }
  return d;
}
const unpackConfig$1 = {
  kernelName: Unpack,
  backendName: "cpu",
  kernelFunc: unpack$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unsortedSegmentSum$1(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, segmentIds: a } = e, { numSegments: o } = n;
  assertNotComplex$1(s, "unsortedSegmentSum");
  const u = s.shape.length, l = a.shape.length, f = [], c = [], h = u - l;
  let d = a;
  for (let g = 0; g < h; ++g) {
    const y = expandDims$1({ inputs: { input: d }, backend: t, attrs: { dim: g + 1 } });
    d = y, c.push(y);
  }
  for (let g = 0; g < o; ++g) {
    const y = createScalarValue(g, "int32"), b = t.makeTensorInfo([], "int32", y), v = equal$1({ inputs: { a: b, b: d }, backend: t }), w = cast$1({ inputs: { x: v }, backend: t, attrs: { dtype: "float32" } }), I = multiply$1({ inputs: { a: w, b: s }, backend: t }), T = sum$1({ inputs: { x: I }, backend: t, attrs: { axis: 0, keepDims: !1 } });
    f.push(T), c.push(b), c.push(v), c.push(w), c.push(I), c.push(T);
  }
  const m = pack$1({ inputs: f, backend: t, attrs: { axis: 0 } });
  return c.forEach((g) => t.disposeIntermediateTensorInfo(g)), m;
}
const unsortedSegmentSumConfig$1 = {
  kernelName: UnsortedSegmentSum,
  backendName: "cpu",
  kernelFunc: unsortedSegmentSum$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kernelConfigs$1 = [
  _fusedMatMulConfig$1,
  absConfig$1,
  acosConfig$1,
  acoshConfig$1,
  addConfig$1,
  addNConfig$1,
  allConfig$1,
  anyConfig$1,
  argMaxConfig$1,
  argMinConfig$1,
  asinConfig$1,
  asinhConfig$1,
  atanConfig$1,
  atan2Config$1,
  atanhConfig$1,
  avgPoolConfig$1,
  avgPool3DConfig$1,
  avgPool3DGradConfig$1,
  avgPoolGradConfig$1,
  batchMatMulConfig$1,
  batchNormConfig$1,
  batchToSpaceNDConfig$1,
  bincountConfig$1,
  bitwiseAndConfig$1,
  broadcastArgsConfig$1,
  castConfig$1,
  ceilConfig$1,
  clipByValueConfig$1,
  complexConfig$1,
  complexAbsConfig$1,
  concatConfig$1,
  conv2DConfig$1,
  conv2DBackpropFilterConfig$1,
  conv2DBackpropInputConfig$1,
  conv3DConfig$1,
  conv3DBackpropFilterV2Config$1,
  conv3DBackpropInputV2Config,
  cosConfig$1,
  coshConfig$1,
  cropAndResizeConfig$1,
  cumprodConfig$1,
  cumsumConfig$1,
  denseBincountConfig$1,
  depthToSpaceConfig$1,
  depthwiseConv2dNativeConfig$1,
  depthwiseConv2dNativeBackpropFilterConfig$1,
  depthwiseConv2dNativeBackpropInputConfig$1,
  diagConfig$1,
  dilation2DConfig$1,
  dilation2DBackpropFilterConfig,
  dilation2DBackpropInputConfig,
  drawConfig,
  einsumConfig$1,
  eluConfig$1,
  eluGradConfig$1,
  equalConfig$1,
  erfConfig$1,
  expConfig$1,
  expandDimsConfig$1,
  expm1Config$1,
  fftConfig$1,
  fillConfig$1,
  flipLeftRightConfig$1,
  floorConfig$1,
  floorDivConfig$1,
  fusedConv2DConfig$1,
  fusedDepthwiseConv2DConfig$1,
  gatherNdConfig$1,
  gatherV2Config$1,
  greaterConfig$1,
  greaterEqualConfig$1,
  identityConfig$1,
  ifftConfig$1,
  imagConfig$1,
  isFiniteConfig$1,
  isInfConfig$1,
  isNaNConfig$1,
  leakyReluConfig$1,
  lessConfig$1,
  lessEqualConfig$1,
  linSpaceConfig$1,
  logConfig$1,
  log1pConfig$1,
  logicalAndConfig$1,
  logicalNotConfig$1,
  logicalOrConfig$1,
  LRNConfig$1,
  LRNGradConfig$1,
  maxConfig$1,
  maximumConfig$1,
  maxPoolConfig$1,
  maxPool3DConfig$1,
  maxPool3DGradConfig$1,
  maxPoolGradConfig$1,
  maxPoolWithArgmaxConfig$1,
  meanConfig$1,
  minConfig$1,
  minimumConfig$1,
  mirrorPadConfig$1,
  modConfig$1,
  multinomialConfig$1,
  multiplyConfig$1,
  negConfig$1,
  nonMaxSuppressionV3Config$1,
  nonMaxSuppressionV4Config$1,
  nonMaxSuppressionV5Config$1,
  notEqualConfig$1,
  oneHotConfig$1,
  onesLikeConfig$1,
  packConfig$1,
  padV2Config$1,
  powConfig$1,
  preluConfig$1,
  prodConfig$1,
  raggedGatherConfig$1,
  raggedRangeConfig$1,
  raggedTensorToTensorConfig$1,
  rangeConfig$1,
  realConfig$1,
  realDivConfig$1,
  reciprocalConfig$1,
  reluConfig$1,
  relu6Config$1,
  reshapeConfig$1,
  resizeBilinearConfig$1,
  resizeBilinearGradConfig$1,
  resizeNearestNeighborConfig$1,
  resizeNearestNeighborGradConfig$1,
  reverseConfig$1,
  rotateWithOffsetConfig$1,
  roundConfig$1,
  rsqrtConfig$1,
  scatterNdConfig$1,
  searchSortedConfig$1,
  selectConfig$1,
  seluConfig$1,
  sigmoidConfig$1,
  signConfig$1,
  sinConfig$1,
  sinhConfig$1,
  sliceConfig$1,
  softmaxConfig$1,
  softplusConfig$1,
  spaceToBatchNDConfig$1,
  sparseFillEmptyRowsConfig$1,
  sparseReshapeConfig$1,
  sparseSegmentMeanConfig$1,
  sparseSegmentSumConfig$1,
  sparseToDenseConfig$1,
  splitVConfig$1,
  sqrtConfig$1,
  squareConfig$1,
  squaredDifferenceConfig$1,
  staticRegexReplaceConfig$1,
  stepConfig$1,
  stridedSliceConfig$1,
  stringNGramsConfig$1,
  stringSplitConfig$1,
  stringToHashBucketFastConfig$1,
  subConfig$1,
  sumConfig$1,
  tanConfig$1,
  tanhConfig$1,
  tensorScatterUpdateConfig$1,
  tileConfig$1,
  topKConfig$1,
  transformConfig$1,
  transposeConfig$1,
  uniqueConfig$1,
  unpackConfig$1,
  unsortedSegmentSumConfig$1,
  zerosLikeConfig$1
];
for (const r of kernelConfigs$1)
  registerKernel(r);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const contexts = {}, WEBGL_ATTRIBUTES = {
  alpha: !1,
  antialias: !1,
  premultipliedAlpha: !1,
  preserveDrawingBuffer: !1,
  depth: !1,
  stencil: !1,
  failIfMajorPerformanceCaveat: !0
};
function setWebGLContext(r, e) {
  contexts[r] = e;
}
function getWebGLContext(r, e) {
  if (!(r in contexts) || e != null) {
    const n = getWebGLRenderingContext(r, e);
    if (n !== null)
      contexts[r] = n;
    else
      return console.log("Could not get context for WebGL version", r), null;
  }
  const t = contexts[r];
  return t == null || t.isContextLost() ? (delete contexts[r], getWebGLContext(r)) : (t.disable(t.DEPTH_TEST), t.disable(t.STENCIL_TEST), t.disable(t.BLEND), t.disable(t.DITHER), t.disable(t.POLYGON_OFFSET_FILL), t.disable(t.SAMPLE_COVERAGE), t.enable(t.SCISSOR_TEST), t.enable(t.CULL_FACE), t.cullFace(t.BACK), contexts[r]);
}
function createCanvas(r) {
  if (!env().getBool("IS_SAFARI") && typeof OffscreenCanvas < "u" && r === 2)
    return new OffscreenCanvas(300, 150);
  if (typeof document < "u")
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function getWebGLRenderingContext(r, e) {
  if (r !== 1 && r !== 2)
    throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  const t = e ?? createCanvas(r);
  return t.addEventListener("webglcontextlost", (n) => {
    n.preventDefault(), delete contexts[r];
  }, !1), env().getBool("SOFTWARE_WEBGL_ENABLED") && (WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = !1), r === 1 ? (
    // tslint:disable-next-line
    t.getContext("webgl", WEBGL_ATTRIBUTES) || t.getContext("experimental-webgl", WEBGL_ATTRIBUTES)
  ) : t.getContext("webgl2", WEBGL_ATTRIBUTES);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var PackingScheme;
(function(r) {
  r[r.DENSE = 0] = "DENSE", r[r.SHARED_BATCH = 1] = "SHARED_BATCH";
})(PackingScheme || (PackingScheme = {}));
var TextureUsage;
(function(r) {
  r[r.RENDER = 0] = "RENDER", r[r.UPLOAD = 1] = "UPLOAD", r[r.PIXELS = 2] = "PIXELS", r[r.DOWNLOAD = 3] = "DOWNLOAD";
})(TextureUsage || (TextureUsage = {}));
var PhysicalTextureType;
(function(r) {
  r[r.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", r[r.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", r[r.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", r[r.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", r[r.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(PhysicalTextureType || (PhysicalTextureType = {}));
function getUnpackedMatrixTextureShapeWidthHeight(r, e) {
  return [e, r];
}
function getUnpackedArraySizeFromMatrixSize(r, e) {
  return r * e;
}
function getDenseTexShape(r) {
  const e = sizeFromShape(r), t = Math.ceil(e / 4);
  return sizeToSquarishShape(t);
}
function getPackedMatrixTextureShapeWidthHeight(r, e) {
  return [
    Math.max(1, Math.ceil(e / 2)),
    Math.max(1, Math.ceil(r / 2))
  ];
}
function getPackedRGBAArraySizeFromMatrixShape(r, e) {
  const [t, n] = getPackedMatrixTextureShapeWidthHeight(r, e);
  return t * n * 4;
}
function getTextureConfig(r, e) {
  const t = r;
  let n, s, a, o, u, l, f, c, h, d;
  return env().getNumber("WEBGL_VERSION") === 2 ? (n = t.R32F, s = t.R16F, a = t.RGBA16F, o = t.RGBA32F, u = t.RED, f = 4, c = 1, h = t.HALF_FLOAT, d = t.FLOAT, l = t.RGBA8) : (n = r.RGBA, s = r.RGBA, a = r.RGBA, o = t.RGBA, u = r.RGBA, f = 4, c = 4, h = e != null ? e.HALF_FLOAT_OES : null, d = r.FLOAT, l = r.RGBA), {
    internalFormatFloat: n,
    internalFormatHalfFloat: s,
    internalFormatPackedHalfFloat: a,
    internalFormatPackedFloat: o,
    textureFormatFloat: u,
    downloadTextureFormat: l,
    downloadUnpackNumChannels: f,
    defaultNumChannels: c,
    textureTypeHalfFloat: h,
    textureTypeFloat: d
  };
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function callAndCheck(r, e) {
  const t = e();
  return env().getBool("DEBUG") && checkWebGLError(r), t;
}
function checkWebGLError(r) {
  const e = r.getError();
  if (e !== r.NO_ERROR)
    throw new Error("WebGL Error: " + getWebGLErrorMessage(r, e));
}
const MIN_FLOAT16 = 596e-10, MAX_FLOAT16 = 65504;
function canBeRepresented(r) {
  return !!(env().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || r === 0 || MIN_FLOAT16 < Math.abs(r) && Math.abs(r) < MAX_FLOAT16);
}
function getWebGLErrorMessage(r, e) {
  switch (e) {
    case r.NO_ERROR:
      return "NO_ERROR";
    case r.INVALID_ENUM:
      return "INVALID_ENUM";
    case r.INVALID_VALUE:
      return "INVALID_VALUE";
    case r.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case r.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case r.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case r.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${e}`;
  }
}
function getExtensionOrThrow(r, e) {
  return throwIfNull(r, () => r.getExtension(e), 'Extension "' + e + '" not supported on this browser.');
}
function createVertexShader$1(r, e) {
  const t = throwIfNull(r, () => r.createShader(r.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (callAndCheck(r, () => r.shaderSource(t, e)), callAndCheck(r, () => r.compileShader(t)), r.getShaderParameter(t, r.COMPILE_STATUS) === !1)
    throw console.log(r.getShaderInfoLog(t)), new Error("Failed to compile vertex shader.");
  return t;
}
function createFragmentShader(r, e) {
  const t = throwIfNull(r, () => r.createShader(r.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (callAndCheck(r, () => r.shaderSource(t, e)), callAndCheck(r, () => r.compileShader(t)), env().get("ENGINE_COMPILE_ONLY"))
    return t;
  if (r.getShaderParameter(t, r.COMPILE_STATUS) === !1)
    throw logShaderSourceAndInfoLog(e, r.getShaderInfoLog(t)), new Error("Failed to compile fragment shader.");
  return t;
}
const lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;
function logShaderSourceAndInfoLog(r, e) {
  const t = lineNumberRegex.exec(e);
  if (t == null) {
    console.log(`Couldn't parse line number in error: ${e}`), console.log(r);
    return;
  }
  const n = +t[1], s = r.split(`
`), a = s.length.toString().length + 2, o = s.map((h, d) => rightPad((d + 1).toString(), a) + h);
  let u = 0;
  for (let h = 0; h < o.length; h++)
    u = Math.max(o[h].length, u);
  const l = o.slice(0, n - 1), f = o.slice(n - 1, n), c = o.slice(n);
  console.log(l.join(`
`)), console.log(e.split(`
`)[0]), console.log(`%c ${rightPad(f[0], u)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(c.join(`
`));
}
function createProgram(r) {
  return throwIfNull(r, () => r.createProgram(), "Unable to create WebGLProgram.");
}
function linkProgram(r, e) {
  if (callAndCheck(r, () => r.linkProgram(e)), !env().get("ENGINE_COMPILE_ONLY") && r.getProgramParameter(e, r.LINK_STATUS) === !1)
    throw console.log(r.getProgramInfoLog(e)), new Error("Failed to link vertex and fragment shaders.");
}
function validateProgram(r, e) {
  if (callAndCheck(r, () => r.validateProgram(e)), r.getProgramParameter(e, r.VALIDATE_STATUS) === !1)
    throw console.log(r.getProgramInfoLog(e)), new Error("Shader program validation failed.");
}
function createStaticVertexBuffer(r, e) {
  const t = throwIfNull(r, () => r.createBuffer(), "Unable to create WebGLBuffer");
  return callAndCheck(r, () => r.bindBuffer(r.ARRAY_BUFFER, t)), callAndCheck(r, () => r.bufferData(r.ARRAY_BUFFER, e, r.STATIC_DRAW)), t;
}
function createStaticIndexBuffer(r, e) {
  const t = throwIfNull(r, () => r.createBuffer(), "Unable to create WebGLBuffer");
  return callAndCheck(r, () => r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, t)), callAndCheck(r, () => r.bufferData(r.ELEMENT_ARRAY_BUFFER, e, r.STATIC_DRAW)), t;
}
function getNumChannels() {
  return env().getNumber("WEBGL_VERSION") === 2 ? 1 : 4;
}
function createTexture(r) {
  return throwIfNull(r, () => r.createTexture(), "Unable to create WebGLTexture.");
}
function validateTextureSize(r, e) {
  const t = env().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (r <= 0 || e <= 0) {
    const n = `[${r}x${e}]`;
    throw new Error("Requested texture size " + n + " is invalid.");
  }
  if (r > t || e > t) {
    const n = `[${r}x${e}]`, s = `[${t}x${t}]`;
    throw new Error("Requested texture size " + n + " greater than WebGL maximum on this browser / GPU " + s + ".");
  }
}
function createFramebuffer(r) {
  return throwIfNull(r, () => r.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function bindVertexBufferToProgramAttribute(r, e, t, n, s, a, o) {
  const u = r.getAttribLocation(e, t);
  return u === -1 ? !1 : (callAndCheck(r, () => r.bindBuffer(r.ARRAY_BUFFER, n)), callAndCheck(r, () => r.vertexAttribPointer(u, s, r.FLOAT, !1, a, o)), callAndCheck(r, () => r.enableVertexAttribArray(u)), !0);
}
function bindTextureUnit(r, e, t) {
  validateTextureUnit(r, t), callAndCheck(r, () => r.activeTexture(r.TEXTURE0 + t)), callAndCheck(r, () => r.bindTexture(r.TEXTURE_2D, e));
}
function unbindTextureUnit(r, e) {
  validateTextureUnit(r, e), callAndCheck(r, () => r.activeTexture(r.TEXTURE0 + e)), callAndCheck(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function getProgramUniformLocationOrThrow(r, e, t) {
  return throwIfNull(r, () => r.getUniformLocation(e, t), 'uniform "' + t + '" not present in program.');
}
function getProgramUniformLocation(r, e, t) {
  return r.getUniformLocation(e, t);
}
function bindTextureToProgramUniformSampler(r, e, t, n) {
  callAndCheck(r, () => bindTextureUnit(r, e, n)), callAndCheck(r, () => r.uniform1i(t, n));
}
function bindCanvasToFramebuffer(r) {
  callAndCheck(r, () => r.bindFramebuffer(r.FRAMEBUFFER, null)), callAndCheck(r, () => r.viewport(0, 0, r.canvas.width, r.canvas.height)), callAndCheck(r, () => r.scissor(0, 0, r.canvas.width, r.canvas.height));
}
function bindColorTextureToFramebuffer(r, e, t) {
  callAndCheck(r, () => r.bindFramebuffer(r.FRAMEBUFFER, t)), callAndCheck(r, () => r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, e, 0));
}
function unbindColorTextureFromFramebuffer(r, e) {
  callAndCheck(r, () => r.bindFramebuffer(r.FRAMEBUFFER, e)), callAndCheck(r, () => r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, null, 0));
}
function validateFramebuffer(r) {
  const e = r.checkFramebufferStatus(r.FRAMEBUFFER);
  if (e !== r.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + getFramebufferErrorMessage(r, e));
}
function getFramebufferErrorMessage(r, e) {
  switch (e) {
    case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case r.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${e}`;
  }
}
function throwIfNull(r, e, t) {
  const n = callAndCheck(r, () => e());
  if (n == null)
    throw new Error(t);
  return n;
}
function validateTextureUnit(r, e) {
  const t = r.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, n = e + r.TEXTURE0;
  if (n < r.TEXTURE0 || n > t) {
    const s = `[gl.TEXTURE0, gl.TEXTURE${t}]`;
    throw new Error(`textureUnit must be in ${s}.`);
  }
}
function getBatchDim(r, e = 2) {
  return sizeFromShape(r.slice(0, r.length - e));
}
function getRowsCols(r) {
  if (r.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [
    r.length > 1 ? r[r.length - 2] : 1,
    r[r.length - 1]
  ];
}
function getShapeAs3D(r) {
  let e = [1, 1, 1];
  return r.length === 0 || r.length === 1 && r[0] === 1 || (e = [getBatchDim(r), ...getRowsCols(r)]), e;
}
function getTextureShapeFromLogicalShape(r, e = !1) {
  let t = env().getNumber("WEBGL_MAX_TEXTURE_SIZE"), n = env().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
  n === 1 / 0 && env().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (n = t / 2), e && (t = t * 2, n = n * 2, r = r.map((u, l) => l >= r.length - 2 ? nearestLargerEven(r[l]) : r[l]), r.length === 1 && (r = [2, r[0]])), r.length !== 2 && (r = squeezeShape(r).newShape);
  let s = sizeFromShape(r), a = null;
  r.length <= 1 && s <= t ? a = [1, s] : r.length === 2 && r[0] <= t && r[1] <= t ? a = r : r.length === 3 && r[0] * r[1] <= t && r[2] <= t ? a = [r[0] * r[1], r[2]] : r.length === 3 && r[0] <= t && r[1] * r[2] <= t ? a = [r[0], r[1] * r[2]] : r.length === 4 && r[0] * r[1] * r[2] <= t && r[3] <= t ? a = [r[0] * r[1] * r[2], r[3]] : r.length === 4 && r[0] <= t && r[1] * r[2] * r[3] <= t && (a = [r[0], r[1] * r[2] * r[3]]);
  const o = a != null && Math.max(...a) > n && Math.min(...a) <= (e ? 2 : 1) && Math.min(...a) > 0;
  if (a == null || o)
    if (e) {
      const u = getBatchDim(r);
      let l = 2, f = 2;
      r.length && ([l, f] = getRowsCols(r)), s = u * (l / 2) * (f / 2), a = sizeToSquarishShape(s).map((c) => c * 2);
    } else
      a = sizeToSquarishShape(s);
  return a;
}
function isEven(r) {
  return r % 2 === 0;
}
function isReshapeFree(r, e) {
  if (r = r.slice(-2), e = e.slice(-2), arraysEqual(r, e) || !r.length || !e.length || r[0] === 0 || r[1] === 0 || e[0] === 0 || e[1] === 0)
    return !0;
  if (r.length !== e.length) {
    const t = r[r.length - 1], n = e[e.length - 1];
    if (t === n || isEven(t) && isEven(n) && (r[0] === 1 || e[0] === 1))
      return !0;
  }
  return r[1] === e[1] && isEven(r[0]) && isEven(e[0]);
}
let MAX_TEXTURE_SIZE, MAX_TEXTURES_IN_SHADER;
function getWebGLMaxTextureSize(r) {
  if (MAX_TEXTURE_SIZE == null) {
    const e = getWebGLContext(r);
    MAX_TEXTURE_SIZE = e.getParameter(e.MAX_TEXTURE_SIZE);
  }
  return MAX_TEXTURE_SIZE;
}
function resetMaxTextureSize() {
  MAX_TEXTURE_SIZE = null;
}
function resetMaxTexturesInShader() {
  MAX_TEXTURES_IN_SHADER = null;
}
function getMaxTexturesInShader(r) {
  if (MAX_TEXTURES_IN_SHADER == null) {
    const e = getWebGLContext(r);
    MAX_TEXTURES_IN_SHADER = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, MAX_TEXTURES_IN_SHADER);
}
function getWebGLDisjointQueryTimerVersion(r) {
  if (r === 0)
    return 0;
  let e;
  const t = getWebGLContext(r);
  return hasExtension(t, "EXT_disjoint_timer_query_webgl2") && r === 2 ? e = 2 : hasExtension(t, "EXT_disjoint_timer_query") ? e = 1 : e = 0, e;
}
function hasExtension(r, e) {
  return r.getExtension(e) != null;
}
function isWebGLVersionEnabled(r) {
  try {
    if (getWebGLContext(r) != null)
      return !0;
  } catch (e) {
    return console.log("Error when getting WebGL context: ", e), !1;
  }
  return !1;
}
function isCapableOfRenderingToFloatTexture(r) {
  if (r === 0)
    return !1;
  const e = getWebGLContext(r);
  if (r === 1) {
    if (!hasExtension(e, "OES_texture_float"))
      return !1;
  } else if (!hasExtension(e, "EXT_color_buffer_float"))
    return !1;
  return createFloatTextureAndBindToFramebuffer(e);
}
function isDownloadFloatTextureEnabled(r) {
  if (r === 0)
    return !1;
  const e = getWebGLContext(r);
  if (r === 1) {
    if (!hasExtension(e, "OES_texture_float") || !hasExtension(e, "WEBGL_color_buffer_float"))
      return !1;
  } else {
    if (hasExtension(e, "EXT_color_buffer_float"))
      return createFloatTextureAndBindToFramebuffer(e);
    const n = "EXT_color_buffer_half_float";
    if (hasExtension(e, n)) {
      const s = e.getExtension(n);
      return createHalfFloatTextureAndBindToFramebuffer(e, s);
    }
    return !1;
  }
  return createFloatTextureAndBindToFramebuffer(e);
}
function createFloatTextureAndBindToFramebuffer(r) {
  const e = getTextureConfig(r), t = r.createTexture();
  r.bindTexture(r.TEXTURE_2D, t), r.texImage2D(r.TEXTURE_2D, 0, e.internalFormatFloat, 1, 1, 0, e.textureFormatFloat, e.textureTypeFloat, null);
  const a = r.createFramebuffer();
  r.bindFramebuffer(r.FRAMEBUFFER, a), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, t, 0);
  const o = r.checkFramebufferStatus(r.FRAMEBUFFER) === r.FRAMEBUFFER_COMPLETE;
  return r.bindTexture(r.TEXTURE_2D, null), r.bindFramebuffer(r.FRAMEBUFFER, null), r.deleteTexture(t), r.deleteFramebuffer(a), o;
}
function createHalfFloatTextureAndBindToFramebuffer(r, e) {
  const t = getTextureConfig(r, e), n = r.createTexture();
  r.bindTexture(r.TEXTURE_2D, n), r.texImage2D(r.TEXTURE_2D, 0, t.internalFormatHalfFloat, 1, 1, 0, t.textureFormatFloat, t.textureTypeHalfFloat, null);
  const o = r.createFramebuffer();
  r.bindFramebuffer(r.FRAMEBUFFER, o), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, n, 0);
  const u = r.checkFramebufferStatus(r.FRAMEBUFFER) === r.FRAMEBUFFER_COMPLETE;
  return r.bindTexture(r.TEXTURE_2D, null), r.bindFramebuffer(r.FRAMEBUFFER, null), r.deleteTexture(n), r.deleteFramebuffer(o), u;
}
function isWebGLFenceEnabled(r) {
  return r !== 2 ? !1 : getWebGLContext(r).fenceSync != null;
}
function assertNotComplex(r, e) {
  Array.isArray(r) || (r = [r]), r.forEach((t) => {
    t != null && assert$1(t.dtype !== "complex64", () => `${e} does not support complex64 tensors in the WebGL backend.`);
  });
}
const webgl_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertNotComplex,
  bindCanvasToFramebuffer,
  bindColorTextureToFramebuffer,
  bindTextureToProgramUniformSampler,
  bindTextureUnit,
  bindVertexBufferToProgramAttribute,
  callAndCheck,
  canBeRepresented,
  createFragmentShader,
  createFramebuffer,
  createProgram,
  createStaticIndexBuffer,
  createStaticVertexBuffer,
  createTexture,
  createVertexShader: createVertexShader$1,
  getBatchDim,
  getExtensionOrThrow,
  getFramebufferErrorMessage,
  getMaxTexturesInShader,
  getNumChannels,
  getProgramUniformLocation,
  getProgramUniformLocationOrThrow,
  getRowsCols,
  getShapeAs3D,
  getTextureShapeFromLogicalShape,
  getWebGLDisjointQueryTimerVersion,
  getWebGLErrorMessage,
  getWebGLMaxTextureSize,
  hasExtension,
  isCapableOfRenderingToFloatTexture,
  isDownloadFloatTextureEnabled,
  isReshapeFree,
  isWebGLFenceEnabled,
  isWebGLVersionEnabled,
  linkProgram,
  logShaderSourceAndInfoLog,
  resetMaxTextureSize,
  resetMaxTexturesInShader,
  unbindColorTextureFromFramebuffer,
  unbindTextureUnit,
  validateFramebuffer,
  validateProgram,
  validateTextureSize
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ENV = env();
ENV.registerFlag("HAS_WEBGL", () => ENV.getNumber("WEBGL_VERSION") > 0);
ENV.registerFlag("WEBGL_VERSION", () => isWebGLVersionEnabled(2) ? 2 : isWebGLVersionEnabled(1) ? 1 : 0);
ENV.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => !1);
ENV.registerFlag("WEBGL_BUFFER_SUPPORTED", () => ENV.get("WEBGL_VERSION") === 2);
ENV.registerFlag("WEBGL_CPU_FORWARD", () => !0);
ENV.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => !1);
ENV.registerFlag("WEBGL_PACK", () => ENV.getBool("HAS_WEBGL"));
ENV.registerFlag("WEBGL_PACK_NORMALIZATION", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_PACK_CLIP", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_PACK_REDUCE", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_LAZILY_UNPACK", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_CONV_IM2COL", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE", () => ENV.getBool("WEBGL_PACK"));
ENV.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => getWebGLMaxTextureSize(ENV.getNumber("WEBGL_VERSION")));
ENV.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => getMaxTexturesInShader(ENV.getNumber("WEBGL_VERSION")));
ENV.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  const r = ENV.getNumber("WEBGL_VERSION");
  return r === 0 ? 0 : getWebGLDisjointQueryTimerVersion(r);
});
ENV.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => ENV.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !isMobile());
ENV.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => isCapableOfRenderingToFloatTexture(ENV.getNumber("WEBGL_VERSION")));
ENV.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => ENV.getBool("WEBGL_FORCE_F16_TEXTURES") ? !1 : ENV.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
ENV.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => isDownloadFloatTextureEnabled(ENV.getNumber("WEBGL_VERSION")));
ENV.registerFlag("WEBGL_FENCE_API_ENABLED", () => isWebGLFenceEnabled(ENV.getNumber("WEBGL_VERSION")));
ENV.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => ENV.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
ENV.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (r) => {
  if (typeof r != "number")
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${r}.`);
  if (r < 0 && r !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`);
});
ENV.registerFlag("WEBGL_FLUSH_THRESHOLD", () => isMobile() ? 1 : -1, (r) => {
  if (typeof r != "number")
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${r}.`);
  if (r < 0 && r !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`);
});
ENV.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
ENV.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => !1);
ENV.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
ENV.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
ENV.registerFlag("WEBGL_EXP_CONV", () => !1);
ENV.registerFlag("SOFTWARE_WEBGL_ENABLED", () => ENV.getBool("IS_TEST"));
ENV.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
ENV.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => !1);
ENV.registerFlag("WEBGL2_ISNAN_CUSTOM", () => !1);
ENV.registerFlag("ENGINE_COMPILE_ONLY", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getGlslDifferences() {
  let r, e, t, n, s, a, o, u, l, f;
  return env().getNumber("WEBGL_VERSION") === 2 ? (r = "#version 300 es", e = "in", t = "out", n = "in", s = "texture", a = "outputColor", o = "out vec4 outputColor;", u = env().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", l = "", f = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (r = "", e = "attribute", t = "varying", n = "varying", s = "texture2D", a = "gl_FragColor", o = "", u = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, f = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), {
    version: r,
    attribute: e,
    varyingVs: t,
    varyingFs: n,
    texture2D: s,
    output: a,
    defineOutput: o,
    defineSpecialNaN: u,
    defineSpecialInf: l,
    defineRound: f
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getLogicalCoordinatesFromFlatIndex(r, e, t = "index") {
  const n = computeStrides(e);
  return n.map((s, a) => {
    const o = `int ${r[a]} = ${t} / ${s}`, u = a === n.length - 1 ? `int ${r[a + 1]} = ${t} - ${r[a]} * ${s}` : `index -= ${r[a]} * ${s}`;
    return `${o}; ${u};`;
  }).join("");
}
function getOutputLogicalCoordinatesFromFlatIndexByUniform(r, e, t = "index") {
  const n = computeStrides(e);
  return n.map((s, a) => {
    const o = `int ${r[a]} = ${t} / outShapeStrides[${a}]`, u = a === n.length - 1 ? `int ${r[a + 1]} = ${t} - ${r[a]} * outShapeStrides[${a}]` : `index -= ${r[a]} * outShapeStrides[${a}]`;
    return `${o}; ${u};`;
  }).join("");
}
function symbolicallyComputeStrides(r, e) {
  const t = r.length, n = r.map((a) => `${e}[${a}]`), s = new Array(t - 1);
  s[t - 2] = n[t - 1];
  for (let a = t - 3; a >= 0; --a)
    s[a] = `(${s[a + 1]} * ${n[a + 1]})`;
  return s;
}
function getLogicalCoordinatesFromFlatIndexByUniform(r, e, t = "index") {
  const n = r.map((a, o) => o), s = symbolicallyComputeStrides(n, e);
  return s.map((a, o) => {
    const u = `int ${r[o]} = ${t} / ${s[o]}`, l = o === s.length - 1 ? `int ${r[o + 1]} = ${t} - ${r[o]} * ${s[o]}` : `index -= ${r[o]} * ${s[o]}`;
    return `${u}; ${l};`;
  }).join("");
}
function getFlatIndexFrom3D(r) {
  const e = computeStrides(r).map((t) => t.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`;
}
function getFlatIndexFrom3DOutput() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
const ENCODE_FLOAT_SNIPPET = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { getBroadcastDims } = backend_util;
function makeShader(r, e, t) {
  const n = [];
  if (r.forEach((m) => {
    const g = sizeFromShape(m.shapeInfo.logicalShape);
    if (m.shapeInfo.isUniform ? n.push(`uniform float ${m.name}${g > 1 ? `[${g}]` : ""};`) : (n.push(`uniform sampler2D ${m.name};`), n.push(`uniform int offset${m.name};`)), t.enableShapeUniforms) {
      const { uniformShape: y } = getUniformInfoFromShape(t.packedInputs, m.shapeInfo.logicalShape, m.shapeInfo.texShape);
      switch (y.length) {
        case 1:
          n.push(`uniform int ${m.name}Shape;`);
          break;
        case 2:
          n.push(`uniform ivec2 ${m.name}Shape;`);
          break;
        case 3:
          n.push(`uniform ivec3 ${m.name}Shape;`);
          break;
        case 4:
          n.push(`uniform ivec4 ${m.name}Shape;`);
          break;
      }
      n.push(`uniform ivec2 ${m.name}TexShape;`);
    }
  }), t.enableShapeUniforms) {
    switch (e.logicalShape.length) {
      case 1:
        n.push("uniform int outShape;");
        break;
      case 2:
        n.push("uniform ivec2 outShape;"), n.push("uniform int outShapeStrides;");
        break;
      case 3:
        n.push("uniform ivec3 outShape;"), n.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        n.push("uniform ivec4 outShape;"), n.push("uniform ivec3 outShapeStrides;");
        break;
    }
    n.push("uniform ivec2 outTexShape;");
  }
  t.customUniforms && t.customUniforms.forEach((m) => {
    n.push(`uniform ${m.type} ${m.name}${m.arrayIndex ? `[${m.arrayIndex}]` : ""};`);
  });
  const s = n.join(`
`), a = r.map((m) => getInputSamplingSnippet(m, e, t.packedInputs, t.enableShapeUniforms)).join(`
`), o = e.texShape, u = getGlslDifferences(), l = getFloatTextureSampleSnippet(u);
  let f, c, h = getShaderPrefix(u);
  return e.isPacked ? (f = getPackedOutputSamplingSnippet(e.logicalShape, o, t.enableShapeUniforms), c = getFloatTextureSetRGBASnippet(u)) : (f = getOutputSamplingSnippet(e.logicalShape, o, t.enableShapeUniforms), c = getFloatTextureSetRSnippet(u)), t.packedInputs && (h += SHADER_PACKED_PREFIX), [
    h,
    l,
    c,
    s,
    f,
    a,
    t.userCode
  ].join(`
`);
}
function getSamplerFromInInfo(r, e = !1) {
  const t = r.shapeInfo.logicalShape;
  switch (t.length) {
    case 0:
      return getSamplerScalar(r, e);
    case 1:
      return getSampler1D(r, e);
    case 2:
      return getSampler2D(r, e);
    case 3:
      return getSampler3D(r, e);
    case 4:
      return getSampler4D(r, e);
    case 5:
      return getSampler5D(r);
    case 6:
      return getSampler6D(r);
    default:
      throw new Error(`${t.length}-D input sampling is not yet supported`);
  }
}
function getPackedSamplerFromInInfo(r, e) {
  switch (r.shapeInfo.logicalShape.length) {
    case 0:
      return getPackedSamplerScalar(r);
    case 1:
      return getPackedSampler1D(r, e);
    case 2:
      return getPackedSampler2D(r, e);
    case 3:
      return getPackedSampler3D(r, e);
    default:
      return getPackedSamplerND(r, e);
  }
}
function getInputSamplingSnippet(r, e, t = !1, n) {
  let s = "";
  t ? s += getPackedSamplerFromInInfo(r, n) : s += getSamplerFromInInfo(r, n);
  const a = r.shapeInfo.logicalShape, o = e.logicalShape;
  return a.length <= o.length && (t ? s += getPackedSamplerAtOutputCoords(r, e) : s += getSamplerAtOutputCoords(r, e)), s;
}
function getPackedOutputSamplingSnippet(r, e, t) {
  switch (r.length) {
    case 0:
      return getOutputScalarCoords();
    case 1:
      return getOutputPacked1DCoords(r, e, t);
    case 2:
      return getOutputPacked2DCoords(r, e, t);
    case 3:
      return getOutputPacked3DCoords(r, e, t);
    default:
      return getOutputPackedNDCoords(r, e, t);
  }
}
function getOutputSamplingSnippet(r, e, t) {
  switch (r.length) {
    case 0:
      return getOutputScalarCoords();
    case 1:
      return getOutput1DCoords(r, e, t);
    case 2:
      return getOutput2DCoords(r, e, t);
    case 3:
      return getOutput3DCoords(r, e, t);
    case 4:
      return getOutput4DCoords(r, e, t);
    case 5:
      return getOutput5DCoords(r, e);
    case 6:
      return getOutput6DCoords(r, e);
    default:
      throw new Error(`${r.length}-D output sampling is not yet supported`);
  }
}
function getFloatTextureSampleSnippet(r) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `;
}
function getFloatTextureSetRSnippet(r) {
  return `
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function getFloatTextureSetRGBASnippet(r) {
  return `
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `;
}
function getShaderPrefix(r) {
  return `${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${SAMPLE_1D_SNIPPET}
    ${SAMPLE_2D_SNIPPET}
    ${SAMPLE_3D_SNIPPET}
  `;
}
const SAMPLE_1D_SNIPPET = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, SAMPLE_2D_SNIPPET = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, SAMPLE_3D_SNIPPET = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, SHADER_PACKED_PREFIX = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function getOutputScalarCoords() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function getOutputPacked1DCoords(r, e, t) {
  const n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
  return n[0] === 1 ? t ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${n[1]}.0);
      }
    ` : n[1] === 1 ? t ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${n[0]}.0);
      }
    ` : t ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));
      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);
    }
  `;
}
function getOutput1DCoords(r, e, t) {
  return e[0] === 1 ? t ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    ` : e[1] === 1 ? t ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    ` : t ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `;
}
function getOutputPacked3DCoords(r, e, t) {
  if (t)
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  const n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], s = Math.ceil(r[2] / 2), a = s * Math.ceil(r[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));
      int index = resTexRC.x * ${n[1]} + resTexRC.y;

      int b = index / ${a};
      index -= b * ${a};

      int r = 2 * (index / ${s});
      int c = imod(index, ${s}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function getOutput3DCoords(r, e, t) {
  if (t)
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${getOutputLogicalCoordinatesFromFlatIndexByUniform(["r", "c", "d"], r)}
    return ivec3(r, c, d);
  }
`;
  const n = getLogicalCoordinatesFromFlatIndex(["r", "c", "d"], r);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${n}
      return ivec3(r, c, d);
    }
  `;
}
function getOutputPackedNDCoords(r, e, t) {
  if (t)
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  const n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], s = Math.ceil(r[r.length - 1] / 2), a = s * Math.ceil(r[r.length - 2] / 2);
  let o = a, u = "", l = "b, r, c";
  for (let f = 2; f < r.length - 1; f++)
    o *= r[r.length - f - 1], u = `
      int b${f} = index / ${o};
      index -= b${f} * ${o};
    ` + u, l = `b${f}, ` + l;
  return `
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));
      int index = resTexRC.x * ${n[1]} + resTexRC.y;

      ${u}

      int b = index / ${a};
      index -= b * ${a};

      int r = 2 * (index / ${s});
      int c = imod(index, ${s}) * 2;

      return ivec${r.length}(${l});
    }
  `;
}
function getOutput4DCoords(r, e, t) {
  if (t)
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${getOutputLogicalCoordinatesFromFlatIndexByUniform(["r", "c", "d", "d2"], r)}
      return ivec4(r, c, d, d2);
    }
  `;
  const n = getLogicalCoordinatesFromFlatIndex(["r", "c", "d", "d2"], r);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${n}
      return ivec4(r, c, d, d2);
    }
  `;
}
function getOutput5DCoords(r, e) {
  const t = getLogicalCoordinatesFromFlatIndex(["r", "c", "d", "d2", "d3"], r);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function getOutput6DCoords(r, e) {
  const t = getLogicalCoordinatesFromFlatIndex(["r", "c", "d", "d2", "d3", "d4"], r);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function getOutputPacked2DCoords(r, e, t) {
  const n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
  if (arraysEqual(r, e))
    return t ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));
      }
    `;
  const s = Math.ceil(r[1] / 2);
  return t ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));

      int index = resTexRC.x * ${n[1]} + resTexRC.y;
      int r = 2 * (index / ${s});
      int c = imod(index, ${s}) * 2;

      return ivec2(r, c);
    }
  `;
}
function getOutput2DCoords(r, e, t) {
  return arraysEqual(r, e) ? t ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    ` : r[1] === 1 ? t ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : r[0] === 1 ? t ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : t ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `;
}
function getFlatOffsetUniformName(r) {
  return `offset${r}`;
}
function getPackedSamplerScalar(r) {
  const e = r.name, t = "get" + e.charAt(0).toUpperCase() + e.slice(1), n = getGlslDifferences();
  return `
    vec4 ${t}() {
      return ${n.texture2D}(${e}, halfCR);
    }
  `;
}
function getSamplerScalar(r, e) {
  const t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1);
  if (r.shapeInfo.isUniform)
    return `float ${n}() {return ${t};}`;
  const [s, a] = r.shapeInfo.texShape;
  if (s === 1 && a === 1)
    return `
      float ${n}() {
        return sampleTexture(${t}, halfCR);
      }
    `;
  const o = getFlatOffsetUniformName(t);
  if (e)
    return `
    float ${n}() {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], ${o});
      return sampleTexture(${t}, uv);
    }
  `;
  const [u, l] = r.shapeInfo.texShape;
  return `
    float ${n}() {
      vec2 uv = uvFromFlat(${u}, ${l}, ${o});
      return sampleTexture(${t}, uv);
    }
  `;
}
function getPackedSampler1D(r, e) {
  const t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), s = r.shapeInfo.texShape, a = getGlslDifferences();
  if (e)
    return `
    vec4 ${n}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${a.texture2D}(${t}, uv);
    }
  `;
  const o = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)];
  return `
    vec4 ${n}(int index) {
      vec2 uv = packedUVfrom1D(
        ${o[0]}, ${o[1]}, index);
      return ${a.texture2D}(${t}, uv);
    }
  `;
}
function getSampler1D(r, e) {
  const t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1);
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int index) {
        ${getUniformSampler(r)}
      }
    `;
  const s = r.shapeInfo.texShape, a = s[0], o = s[1];
  if (o === 1 && a === 1)
    return `
      float ${n}(int index) {
        return sampleTexture(${t}, halfCR);
      }
    `;
  const u = getFlatOffsetUniformName(t);
  return o === 1 ? e ? `
      float ${n}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${u}) + 0.5) / float(${t}TexShape[0]));
        return sampleTexture(${t}, uv);
      }
    ` : `
      float ${n}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${u}) + 0.5) / ${a}.0);
        return sampleTexture(${t}, uv);
      }
    ` : a === 1 ? e ? `
      float ${n}(int index) {
        vec2 uv = vec2((float(index + ${u}) + 0.5) / float(${t}TexShape[1]), 0.5);
        return sampleTexture(${t}, uv);
      }
    ` : `
      float ${n}(int index) {
        vec2 uv = vec2((float(index + ${u}) + 0.5) / ${o}.0, 0.5);
        return sampleTexture(${t}, uv);
      }
    ` : e ? `
    float ${n}(int index) {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], index + ${u});
      return sampleTexture(${t}, uv);
    }
  ` : `
    float ${n}(int index) {
      vec2 uv = uvFromFlat(${a}, ${o}, index + ${u});
      return sampleTexture(${t}, uv);
    }
  `;
}
function getPackedSampler2D(r, e) {
  const t = r.shapeInfo.logicalShape, n = r.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), a = r.shapeInfo.texShape, o = a[0], u = a[1], l = getGlslDifferences();
  if (a != null && arraysEqual(t, a))
    return e ? `
      vec4 ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${n}TexShape[1], ${n}TexShape[0]);

        return ${l.texture2D}(${n}, uv);
      }
    ` : `
      vec4 ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${u}.0, ${o}.0);

        return ${l.texture2D}(${n}, uv);
      }
    `;
  if (e)
    return `
    vec4 ${s}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${n}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${n}, uv);
    }
  `;
  const f = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)], c = Math.ceil(t[1] / 2);
  return `
    vec4 ${s}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${f[0]}, ${f[1]}, row, col);
      return ${l.texture2D}(${n}, uv);
    }
  `;
}
function getSampler2D(r, e) {
  const t = r.shapeInfo.logicalShape, n = r.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), a = r.shapeInfo.texShape;
  if (a != null && arraysEqual(t, a)) {
    if (e)
      return `
      float ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${n}TexShape[1], ${n}TexShape[0]);
        return sampleTexture(${n}, uv);
      }
    `;
    const d = a[0], m = a[1];
    return `
    float ${s}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${m}.0, ${d}.0);
      return sampleTexture(${n}, uv);
    }
  `;
  }
  const { newShape: o, keptDims: u } = squeezeShape(t), l = o;
  if (l.length < t.length) {
    const d = squeezeInputInfo(r, l), m = ["row", "col"];
    return `
      ${getSamplerFromInInfo(d, e)}
      float ${s}(int row, int col) {
        return ${s}(${getSqueezedParams(m, u)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));
        ${getUniformSampler(r)}
      }
    `;
  const f = a[0], c = a[1], h = getFlatOffsetUniformName(n);
  return c === 1 ? e ? `
      float ${s}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${n}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${n}TexShape[0]));
        return sampleTexture(${n}, uv);
      }
    ` : `
    float ${s}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${f}.0);
      return sampleTexture(${n}, uv);
    }
  ` : f === 1 ? e ? `
      float ${s}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${n}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${n}TexShape[1]), 0.5);
        return sampleTexture(${n}, uv);
      }
    ` : `
    float ${s}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${n}, uv);
    }
  ` : e ? `
      float ${s}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${n}Shape[1] + col + ${h};
        vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index);
        return sampleTexture(${n}, uv);
      }
    ` : `
  float ${s}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${t[1]} + col + ${h};
    vec2 uv = uvFromFlat(${f}, ${c}, index);
    return sampleTexture(${n}, uv);
  }
`;
}
function getPackedSampler3D(r, e) {
  const t = r.shapeInfo.logicalShape, n = r.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), a = r.shapeInfo.texShape, o = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)];
  if (t[0] === 1) {
    const d = t.slice(1), m = [1, 2], g = squeezeInputInfo(r, d), y = ["b", "row", "col"];
    return `
        ${getPackedSamplerFromInInfo(g, e)}
        vec4 ${s}(int b, int row, int col) {
          return ${s}(${getSqueezedParams(y, m)});
        }
      `;
  }
  const u = getGlslDifferences();
  if (e)
    return `
    vec4 ${s}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${n}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${u.texture2D}(${n}, uv);
    }
  `;
  const l = o[0], f = o[1], c = Math.ceil(t[2] / 2), h = c * Math.ceil(t[1] / 2);
  return `
    vec4 ${s}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${f}, ${h}, ${c}, b, row, col);
      return ${u.texture2D}(${n}, uv);
    }
  `;
}
function getSampler3D(r, e) {
  const t = r.shapeInfo.logicalShape, n = r.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), a = t[1] * t[2], o = t[2], { newShape: u, keptDims: l } = squeezeShape(t), f = u;
  if (f.length < t.length) {
    const y = squeezeInputInfo(r, f), b = ["row", "col", "depth"];
    return `
        ${getSamplerFromInInfo(y, e)}
        float ${s}(int row, int col, int depth) {
          return ${s}(${getSqueezedParams(b, l)});
        }
      `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${a}, ${o}, 1)));
        ${getUniformSampler(r)}
      }
    `;
  const c = r.shapeInfo.texShape, h = c[0], d = c[1], m = r.shapeInfo.flatOffset;
  if (d === a && m == null)
    return e ? `
      float ${s}(int row, int col, int depth) {
        int stride1 = ${n}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${n}TexShape[1], ${n}TexShape[0]);
        return sampleTexture(${n}, uv);
      }
    ` : `
        float ${s}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${o}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${h}.0);
          return sampleTexture(${n}, uv);
        }
      `;
  if (d === o && m == null)
    return e ? `
      float ${s}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${n}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}TexShape[1], ${n}TexShape[0]);
        return sampleTexture(${n}, uv);
      }
    ` : `
    float ${s}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);
      return sampleTexture(${n}, uv);
    }
  `;
  const g = getFlatOffsetUniformName(n);
  return e ? `
    float ${s}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${n}Shape[1] * ${n}Shape[2];
      int stride1 = ${n}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${g};
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index);
      return sampleTexture(${n}, uv);
    }
    ` : `
      float ${s}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a} + col * ${o} + depth + ${g};
        vec2 uv = uvFromFlat(${h}, ${d}, index);
        return sampleTexture(${n}, uv);
      }
  `;
}
function getPackedSamplerND(r, e) {
  const t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), s = getGlslDifferences();
  if (e)
    return `
    vec4 ${n}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${t}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${t}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${t}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${t}, uv);
    }
  `;
  const a = r.shapeInfo.logicalShape, o = a.length, u = r.shapeInfo.texShape, l = [Math.ceil(u[0] / 2), Math.ceil(u[1] / 2)], f = l[0], c = l[1], h = Math.ceil(a[o - 1] / 2);
  let d = h * Math.ceil(a[o - 2] / 2), m = "int b, int row, int col", g = `b * ${d} + (row / 2) * ${h} + (col / 2)`;
  for (let y = 2; y < o - 1; y++)
    m = `int b${y}, ` + m, d *= a[o - y - 1], g = `b${y} * ${d} + ` + g;
  return `
    vec4 ${n}(${m}) {
      int index = ${g};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${f});
      return ${s.texture2D}(${t}, uv);
    }
  `;
}
function getSampler4D(r, e) {
  const t = r.shapeInfo.logicalShape, n = r.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), a = t[3], o = t[2] * a, u = t[1] * o, { newShape: l, keptDims: f } = squeezeShape(t);
  if (l.length < t.length) {
    const w = squeezeInputInfo(r, l), I = ["row", "col", "depth", "depth2"];
    return `
      ${getSamplerFromInInfo(w, e)}
      float ${s}(int row, int col, int depth, int depth2) {
        return ${s}(${getSqueezedParams(I, f)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${u}, ${o}, ${a}, 1)));
        ${getUniformSampler(r)}
      }
    `;
  const c = r.shapeInfo.flatOffset, h = r.shapeInfo.texShape, d = h[0], m = h[1], g = `int stride2 = ${n}Shape[3];`, y = `int stride1 = ${n}Shape[2] * stride2;`, b = `int stride0 = ${n}Shape[1] * stride1;`;
  if (m === u && c == null)
    return e ? `
      float ${s}(int row, int col, int depth, int depth2) {
        ${g}
        ${y}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${n}TexShape[1], ${n}TexShape[0]);
        return sampleTexture(${n}, uv);
      }
    ` : `
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${o}, ${a}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${m}.0, ${d}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  if (m === a && c == null)
    return e ? `
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${n}Shape[1] * ${n}Shape[2], ${n}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${n}TexShape[1], ${n}TexShape[0]);
        return sampleTexture(${n}, uv);
      }
    ` : `
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${t[1] * t[2]}, ${t[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${m}.0, ${d}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  const v = getFlatOffsetUniformName(n);
  return e ? `
    float ${s}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${g}
      ${y}
      ${b}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${v});
      return sampleTexture(${n}, uv);
    }
  ` : `
    float ${s}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${o} +
          depth * ${a} + depth2;
      vec2 uv = uvFromFlat(${d}, ${m}, index + ${v});
      return sampleTexture(${n}, uv);
    }
  `;
}
function getSampler5D(r) {
  const e = r.shapeInfo.logicalShape, t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), s = e[4], a = e[3] * s, o = e[2] * a, u = e[1] * o, { newShape: l, keptDims: f } = squeezeShape(e);
  if (l.length < e.length) {
    const y = squeezeInputInfo(r, l), b = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${getSamplerFromInInfo(y)}
      float ${n}(int row, int col, int depth, int depth2, int depth3) {
        return ${n}(${getSqueezedParams(b, f)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${o}, ${a}, ${s})) +
          depth3;
        ${getUniformSampler(r)}
      }
    `;
  const c = r.shapeInfo.flatOffset, h = r.shapeInfo.texShape, d = h[0], m = h[1];
  if (m === u && c == null)
    return `
      float ${n}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${o}, ${a}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${m}.0, ${d}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  if (m === s && c == null)
    return `
      float ${n}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3]},
               ${e[2] * e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${m}.0, ${d}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  const g = getFlatOffsetUniformName(t);
  return `
    float ${n}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${o} + depth * ${a} +
          depth2 * ${s} + depth3 + ${g};
      vec2 uv = uvFromFlat(${d}, ${m}, index);
      return sampleTexture(${t}, uv);
    }
  `;
}
function getSampler6D(r) {
  const e = r.shapeInfo.logicalShape, t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), { newShape: s, keptDims: a } = squeezeShape(e);
  if (s.length < e.length) {
    const b = squeezeInputInfo(r, s), v = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${getSamplerFromInInfo(b)}
      float ${n}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${n}(${getSqueezedParams(v, a)});
      }
    `;
  }
  const o = e[5], u = e[4] * o, l = e[3] * u, f = e[2] * l, c = e[1] * f;
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${f}, ${l}, ${u})) +
          dot(
            vec2(depth3, depth4),
            vec2(${o}, 1)));
        ${getUniformSampler(r)}
      }
    `;
  const h = r.shapeInfo.flatOffset, d = r.shapeInfo.texShape, m = d[0], g = d[1];
  if (g === c && h == null)
    return `
      float ${n}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${f}, ${l}, ${u}, ${o})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${g}.0, ${m}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  if (g === o && h == null)
    return `
      float ${n}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3] * e[4]},
               ${e[2] * e[3] * e[4]},
               ${e[3] * e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${g}.0, ${m}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  const y = getFlatOffsetUniformName(t);
  return `
    float ${n}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${f} + depth * ${l} +
          depth2 * ${u} + depth3 * ${o} + depth4 + ${y};
      vec2 uv = uvFromFlat(${m}, ${g}, index);
      return sampleTexture(${t}, uv);
    }
  `;
}
function getUniformSampler(r) {
  const e = r.name, t = sizeFromShape(r.shapeInfo.logicalShape);
  return t < 2 ? `return ${e};` : `
    for (int i = 0; i < ${t}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `;
}
function getPackedSamplerAtOutputCoords(r, e) {
  const t = r.name, n = t.charAt(0).toUpperCase() + t.slice(1), s = "get" + n + "AtOutCoords", a = r.shapeInfo.logicalShape.length, o = e.logicalShape.length, u = getBroadcastDims(r.shapeInfo.logicalShape, e.logicalShape), l = getCoordsDataType(o), f = o - a;
  let c;
  const h = ["x", "y", "z", "w", "u", "v"];
  a === 0 ? c = "" : o < 2 && u.length >= 1 ? c = "coords = 0;" : c = u.map((w) => `coords.${h[w + f]} = 0;`).join(`
`);
  let d = "";
  o < 2 && a > 0 ? d = "coords" : d = r.shapeInfo.logicalShape.map((w, I) => `coords.${h[I + f]}`).join(", ");
  let m = "return outputValue;";
  const y = sizeFromShape(r.shapeInfo.logicalShape) === 1, v = sizeFromShape(e.logicalShape) === 1;
  if (a === 1 && !y && !v)
    m = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (y && !v)
    o === 1 ? m = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : m = `
        return vec4(outputValue.x);
      `;
  else if (u.length) {
    const w = a - 2, I = a - 1;
    u.indexOf(w) > -1 && u.indexOf(I) > -1 ? m = "return vec4(outputValue.x);" : u.indexOf(w) > -1 ? m = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : u.indexOf(I) > -1 && (m = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${s}() {
      ${l} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${n}(${d});
      ${m}
    }
  `;
}
function getSamplerAtOutputCoords(r, e) {
  const t = r.name, n = t.charAt(0).toUpperCase() + t.slice(1), s = "get" + n + "AtOutCoords", a = e.texShape, o = r.shapeInfo.texShape, u = r.shapeInfo.logicalShape.length, l = e.logicalShape.length;
  if (!r.shapeInfo.isUniform && u === l && r.shapeInfo.flatOffset == null && arraysEqual(o, a))
    return `
      float ${s}() {
        return sampleTexture(${t}, resultUV);
      }
    `;
  const f = getCoordsDataType(l), c = getBroadcastDims(r.shapeInfo.logicalShape, e.logicalShape), h = l - u;
  let d;
  const m = ["x", "y", "z", "w", "u", "v"];
  u === 0 ? d = "" : l < 2 && c.length >= 1 ? d = "coords = 0;" : d = c.map((y) => `coords.${m[y + h]} = 0;`).join(`
`);
  let g = "";
  return l < 2 && u > 0 ? g = "coords" : g = r.shapeInfo.logicalShape.map((y, b) => `coords.${m[b + h]}`).join(", "), `
    float ${s}() {
      ${f} coords = getOutputCoords();
      ${d}
      return get${n}(${g});
    }
  `;
}
function getCoordsDataType(r) {
  if (r <= 1)
    return "int";
  if (r === 2)
    return "ivec2";
  if (r === 3)
    return "ivec3";
  if (r === 4)
    return "ivec4";
  if (r === 5)
    return "ivec5";
  if (r === 6)
    return "ivec6";
  throw Error(`GPU for rank ${r} is not yet supported`);
}
function getUniformInfoFromShape(r, e, t) {
  const { newShape: n, keptDims: s } = squeezeShape(e), a = e.length, o = r && a === 3 && e[0] === 1, u = o ? e.slice(1) : n, l = !r && a > 1 && !arraysEqual(e, t) && n.length < a || o;
  return { useSqueezeShape: l, uniformShape: l ? u : e, keptDims: s };
}
function squeezeInputInfo(r, e) {
  const t = JSON.parse(JSON.stringify(r));
  return t.shapeInfo.logicalShape = e, t;
}
function getSqueezedParams(r, e) {
  return e.map((t) => r[t]).join(", ");
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function compileProgram(r, e, t, n) {
  const s = t.map((c, h) => {
    const d = {
      logicalShape: c.shape,
      texShape: c.isUniform ? null : c.texData.texShape,
      isUniform: c.isUniform,
      isPacked: c.isUniform ? !1 : c.texData.isPacked,
      flatOffset: null
    };
    return c.texData != null && c.texData.slice != null && c.texData.slice.flatOffset > 0 && (d.flatOffset = c.texData.slice.flatOffset), { name: e.variableNames[h], shapeInfo: d };
  }), a = s.map((c) => c.shapeInfo), o = {
    logicalShape: n.shape,
    texShape: n.texData.texShape,
    isUniform: !1,
    isPacked: n.texData.isPacked,
    flatOffset: null
  }, u = makeShader(s, o, e), l = createFragmentShader(r.gl, u), f = r.createProgram(l);
  return env().get("ENGINE_COMPILE_ONLY") ? {
    program: e,
    fragmentShader: l,
    source: u,
    webGLProgram: f,
    inShapeInfos: a,
    outShapeInfo: o,
    variablesLocations: null,
    customUniformLocations: null,
    infLoc: null,
    nanLoc: null,
    outShapeLocation: null,
    outShapeStridesLocation: null,
    outTexShapeLocation: null
  } : (r.buildVao(f), Object.assign({
    program: e,
    fragmentShader: l,
    source: u,
    webGLProgram: f,
    inShapeInfos: a,
    outShapeInfo: o
  }, getUniformLocations(r, e, f)));
}
function getUniformLocations(r, e, t) {
  const n = [], s = [];
  let a, o, u, l = null, f = null;
  f = r.getUniformLocation(t, "NAN", !1), env().getNumber("WEBGL_VERSION") === 1 && (l = r.getUniformLocation(t, "INFINITY", !1));
  const c = !1;
  for (const h of e.variableNames) {
    const d = {
      name: h,
      uniform: r.getUniformLocation(t, h, c),
      offset: r.getUniformLocation(t, `offset${h}`, c)
    };
    e.enableShapeUniforms && (d.shape = r.getUniformLocation(t, `${h}Shape`, c), d.texShape = r.getUniformLocation(t, `${h}TexShape`, c)), n.push(d);
  }
  if (e.enableShapeUniforms && (a = r.getUniformLocation(t, "outShape", c), u = r.getUniformLocation(t, "outShapeStrides", c), o = r.getUniformLocation(t, "outTexShape", c)), e.customUniforms)
    for (const h of e.customUniforms)
      s.push(r.getUniformLocation(t, h.name, c));
  return {
    variablesLocations: n,
    customUniformLocations: s,
    infLoc: l,
    nanLoc: f,
    outShapeLocation: a,
    outShapeStridesLocation: u,
    outTexShapeLocation: o
  };
}
function validateBinaryAndProgram(r, e) {
  if (r.length !== e.length)
    throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${e.length} inputs`);
  r.forEach((t, n) => {
    const s = t.logicalShape, a = e[n], o = a.shape;
    if (!arraysEqual(s, o))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${o} must match`);
    if (t.isUniform && a.isUniform)
      return;
    const u = t.texShape, l = a.isUniform ? null : a.texData.texShape;
    if (!arraysEqual(u, l))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${u} and ${l} must match`);
  });
}
function runProgram(r, e, t, n, s) {
  e.program.enableShapeUniforms || (validateBinaryAndProgram(e.inShapeInfos, t), validateBinaryAndProgram([e.outShapeInfo], [n]));
  const a = n.texData.texture, o = n.texData.texShape;
  n.texData.isPacked ? r.setOutputPackedMatrixTexture(a.texture, o[0], o[1]) : r.setOutputMatrixTexture(a.texture, o[0], o[1]), r.setProgram(e.webGLProgram), r.bindVertexArray(e.webGLProgram.vao), env().getNumber("WEBGL_VERSION") === 1 && e.infLoc !== null && r.gl.uniform1f(e.infLoc, 1 / 0), e.nanLoc !== null && r.gl.uniform1f(e.nanLoc, NaN);
  for (let l = 0; l < t.length; ++l) {
    const f = t[l], { uniform: c, offset: h, shape: d, texShape: m } = e.variablesLocations[l];
    if (d) {
      const { uniformShape: g } = getUniformInfoFromShape(e.program.packedInputs, f.shape, f.texData.texShape);
      switch (g.length) {
        case 1:
          r.gl.uniform1iv(d, new Int32Array(g));
          break;
        case 2:
          r.gl.uniform2iv(d, new Int32Array(g));
          break;
        case 3:
          r.gl.uniform3iv(d, new Int32Array(g));
          break;
        case 4:
          r.gl.uniform4iv(d, new Int32Array(g));
          break;
      }
    }
    if (m && r.gl.uniform2i(m, f.texData.texShape[0], f.texData.texShape[1]), c != null) {
      if (f.isUniform) {
        if (sizeFromShape(f.shape) < 2)
          r.gl.uniform1f(c, f.uniformValues[0]);
        else {
          let g = f.uniformValues;
          g instanceof Float32Array || (g = new Float32Array(g)), r.gl.uniform1fv(c, g);
        }
        continue;
      }
      f.texData.slice != null && h != null && r.gl.uniform1i(h, f.texData.slice.flatOffset), r.setInputMatrixTexture(f.texData.texture.texture, c, l);
    }
  }
  const u = e.outShapeLocation;
  if (u)
    switch (n.shape.length) {
      case 1:
        r.gl.uniform1iv(u, new Int32Array(n.shape));
        break;
      case 2:
        r.gl.uniform2iv(u, new Int32Array(n.shape));
        break;
      case 3:
        r.gl.uniform3iv(u, new Int32Array(n.shape));
        break;
      case 4:
        r.gl.uniform4iv(u, new Int32Array(n.shape));
        break;
    }
  if (e.outShapeStridesLocation) {
    const l = computeStrides(n.shape);
    switch (n.shape.length) {
      case 2:
        r.gl.uniform1iv(e.outShapeStridesLocation, new Int32Array(l));
        break;
      case 3:
        r.gl.uniform2iv(e.outShapeStridesLocation, new Int32Array(l));
        break;
      case 4:
        r.gl.uniform3iv(e.outShapeStridesLocation, new Int32Array(l));
        break;
    }
  }
  if (e.outTexShapeLocation && r.gl.uniform2i(e.outTexShapeLocation, n.texData.texShape[0], n.texData.texShape[1]), e.program.customUniforms && s)
    for (let l = 0; l < e.program.customUniforms.length; ++l) {
      const f = e.program.customUniforms[l], c = e.customUniformLocations[l], h = s[l];
      if (f.type === "float")
        r.gl.uniform1fv(c, h);
      else if (f.type === "vec2")
        r.gl.uniform2fv(c, h);
      else if (f.type === "vec3")
        r.gl.uniform3fv(c, h);
      else if (f.type === "vec4")
        r.gl.uniform4fv(c, h);
      else if (f.type === "int")
        r.gl.uniform1iv(c, h);
      else if (f.type === "ivec2")
        r.gl.uniform2iv(c, h);
      else if (f.type === "ivec3")
        r.gl.uniform3iv(c, h);
      else if (f.type === "ivec4")
        r.gl.uniform4iv(c, h);
      else
        throw Error(`uniform type ${f.type} is not supported yet.`);
    }
  r.executeProgram();
}
function makeShaderKey(r, e, t) {
  let n = "";
  e.concat(t).forEach((o) => {
    const u = o.texData != null && o.texData.slice != null && o.texData.slice.flatOffset > 0;
    if (r.enableShapeUniforms && !o.isUniform) {
      const l = o.texData.texShape, { useSqueezeShape: f, uniformShape: c, keptDims: h } = getUniformInfoFromShape(r.packedInputs, o.shape, l);
      let d = "", m = "", g = "";
      if (c.length === 1 && r.packedInputs) {
        const _ = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)];
        d = `${_[0] > 1}_${_[1] > 1}`;
      } else if (c.length === 2 && !r.packedInputs)
        m = `${c[0] > 1}_${c[1] > 1}`;
      else if (c.length > 2 && !r.packedInputs) {
        const _ = computeStrides(c);
        g = `${_[0] === l[1]}_${_[_.length - 1] === l[1]}`;
      }
      const y = o.shape.length, b = c.length === 2 && arraysEqual(o.shape, l), v = sizeFromShape(o.shape) === 1, w = getBroadcastDims$1(o.shape, t.shape), I = !r.packedInputs && y === t.shape.length && arraysEqual(l, t.texData.texShape), T = r.packedInputs || c.length > 2 ? "" : `${l[0] > 1}_${l[1] > 1}`;
      n += `${y}_${I}_${f ? h : ""}_${c.length}_${v}_${w}_${b}_${d}_${m}_${g}_${T}_${u}`;
    } else {
      const l = o.isUniform ? "uniform" : o.texData.texShape;
      n += `${o.shape}_${l}_${u}`;
    }
  });
  const s = r.userCode;
  let a = r.constructor.name;
  return a += "_" + n + "_" + s + `${env().getNumber("WEBGL_VERSION")}`, a;
}
function useShapeUniforms(r) {
  return env().getBool("WEBGL_USE_SHAPES_UNIFORMS") && r <= 4;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DecodeMatrixProgram {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = PackingScheme.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const t = getGlslDifferences();
    this.outputShape = e, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? getOutputLogicalCoordinatesFromFlatIndexByUniform(["r", "c", "d"], e) : getLogicalCoordinatesFromFlatIndex(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DecodeMatrixPackedProgram {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = PackingScheme.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const t = getGlslDifferences();
    this.outputShape = e, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? getOutputLogicalCoordinatesFromFlatIndexByUniform(["r", "c", "d"], e) : getLogicalCoordinatesFromFlatIndex(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EncodeFloatProgram {
  constructor(e) {
    this.variableNames = ["A"], this.outTexUsage = TextureUsage.DOWNLOAD;
    const t = getGlslDifferences();
    this.outputShape = e, this.userCode = `
      ${ENCODE_FLOAT_SNIPPET}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EncodeFloatPackedProgram {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = TextureUsage.DOWNLOAD;
    const t = getGlslDifferences();
    this.outputShape = e, this.userCode = `
      ${ENCODE_FLOAT_SNIPPET}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CHANNEL_CHAR_TO_INDEX_MAP = {
  R: 0,
  G: 1,
  B: 2,
  A: 3
};
class EncodeMatrixProgram {
  constructor(e, t = !1, n = "RGBA") {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = getGlslDifferences();
    this.outputShape = e, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
    let a = "result";
    t && (a = "floor(result * 255. + 0.5)");
    let o = "";
    for (let u = 0; u < n.length; u++) {
      const l = n[u];
      o += `
          if(offset == ${u}) {
            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[l]}];
          }`;
    }
    this.userCode = `
      ${this.enableShapeUniforms ? getFlatIndexFrom3DOutput() : getFlatIndexFrom3D(e)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${n.length});

        flatIndex = idiv(flatIndex, ${n.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${s.texture2D}(A, uv);
          ${o}
        }
        ${s.output} = vec4(${a}, 0., 0., 0.);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EncodeMatrixPackedProgram {
  constructor(e, t = !1) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const n = getGlslDifferences();
    this.outputShape = e, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
    let s = "", a = "result";
    t && (a = "floor(result * 255. + 0.5)");
    for (let o = 0; o <= 1; o++)
      for (let u = 0; u <= 1; u++) {
        const l = o * 2 + u;
        s += `
          localCoords = coords;
          if(localCoords[2] + ${u} < ${this.enableShapeUniforms ? "outShape[2]" : `${e[2]}`}) {
          localCoords[2] += ${u};
          if (localCoords[1] + ${o} < ${this.enableShapeUniforms ? "outShape[1]" : `${e[1]}`}) {
            localCoords[1] += ${o};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${n.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? getFlatIndexFrom3DOutput() : getFlatIndexFrom3D(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${s}

          ${n.output} = ${a};
        }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function createVertexShader(r) {
  const e = getGlslDifferences(), t = `${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return createVertexShader$1(r, t);
}
function createVertexBuffer(r) {
  const e = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return createStaticVertexBuffer(r, e);
}
function createIndexBuffer(r) {
  const e = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return createStaticIndexBuffer(r, e);
}
function createAndConfigureTexture(r, e, t, n, s, a) {
  validateTextureSize(e, t);
  const o = createTexture(r), u = r.TEXTURE_2D;
  return callAndCheck(r, () => r.bindTexture(u, o)), callAndCheck(r, () => r.texParameteri(u, r.TEXTURE_WRAP_S, r.CLAMP_TO_EDGE)), callAndCheck(r, () => r.texParameteri(u, r.TEXTURE_WRAP_T, r.CLAMP_TO_EDGE)), callAndCheck(r, () => r.texParameteri(u, r.TEXTURE_MIN_FILTER, r.NEAREST)), callAndCheck(r, () => r.texParameteri(u, r.TEXTURE_MAG_FILTER, r.NEAREST)), env().getNumber("WEBGL_VERSION") === 1 ? callAndCheck(r, () => r.texImage2D(u, 0, n, e, t, 0, s, a, null)) : callAndCheck(r, () => r.texStorage2D(u, 1, n, e, t)), callAndCheck(r, () => r.bindTexture(r.TEXTURE_2D, null)), { texture: o, texShape: [t, e] };
}
function getInternalFormatForFloat32MatrixTexture(r) {
  return r.internalFormatFloat;
}
function createFloat32MatrixTexture(r, e, t, n) {
  const [s, a] = getUnpackedMatrixTextureShapeWidthHeight(e, t);
  return createAndConfigureTexture(r, s, a, getInternalFormatForFloat32MatrixTexture(n), n.textureFormatFloat, r.FLOAT);
}
function getInternalFormatForFloat16MatrixTexture(r) {
  return r.internalFormatHalfFloat;
}
function createFloat16MatrixTexture(r, e, t, n) {
  const [s, a] = getUnpackedMatrixTextureShapeWidthHeight(e, t);
  return createAndConfigureTexture(r, s, a, getInternalFormatForFloat16MatrixTexture(n), n.textureFormatFloat, n.textureTypeHalfFloat);
}
function getInternalFormatForUnsignedBytesMatrixTexture(r) {
  return r.downloadTextureFormat;
}
function createUnsignedBytesMatrixTexture(r, e, t, n) {
  const [s, a] = getUnpackedMatrixTextureShapeWidthHeight(e, t);
  return createAndConfigureTexture(r, s, a, getInternalFormatForUnsignedBytesMatrixTexture(n), r.RGBA, r.UNSIGNED_BYTE);
}
function getInternalFormatForPackedMatrixTexture(r) {
  return r.internalFormatPackedFloat;
}
function createPackedMatrixTexture(r, e, t, n) {
  const [s, a] = getPackedMatrixTextureShapeWidthHeight(e, t);
  return createAndConfigureTexture(r, s, a, getInternalFormatForPackedMatrixTexture(n), r.RGBA, r.FLOAT);
}
function getInternalFormatForFloat16PackedMatrixTexture(r) {
  return r.internalFormatPackedHalfFloat;
}
function createFloat16PackedMatrixTexture(r, e, t, n) {
  const [s, a] = getPackedMatrixTextureShapeWidthHeight(e, t);
  return createAndConfigureTexture(r, s, a, getInternalFormatForFloat16PackedMatrixTexture(n), r.RGBA, n.textureTypeHalfFloat);
}
function bindVertexProgramAttributeStreams(r, e, t) {
  return callAndCheck(r, () => r.bindBuffer(r.ARRAY_BUFFER, t)), bindVertexBufferToProgramAttribute(r, e, "clipSpacePos", t, 3, 20, 0) && bindVertexBufferToProgramAttribute(r, e, "uv", t, 2, 20, 12);
}
function uploadDenseMatrixToTexture(r, e, t, n, s, a) {
  callAndCheck(r, () => r.bindTexture(r.TEXTURE_2D, e));
  let o, u, l;
  s instanceof Uint8Array ? (o = new Uint8Array(t * n * 4), u = r.UNSIGNED_BYTE, l = r.RGBA) : (o = new Float32Array(t * n * 4), u = r.FLOAT, l = a.internalFormatPackedFloat), o.set(s), env().getNumber("WEBGL_VERSION") === 2 ? callAndCheck(r, () => r.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, t, n, r.RGBA, u, o)) : callAndCheck(r, () => r.texImage2D(r.TEXTURE_2D, 0, l, t, n, 0, r.RGBA, u, o)), callAndCheck(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function uploadPixelDataToTexture(r, e, t) {
  callAndCheck(r, () => r.bindTexture(r.TEXTURE_2D, e)), t.data instanceof Uint8Array ? env().getNumber("WEBGL_VERSION") === 2 ? callAndCheck(r, () => r.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, t.width, t.height, r.RGBA, r.UNSIGNED_BYTE, t.data)) : callAndCheck(r, () => r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, t.width, t.height, 0, r.RGBA, r.UNSIGNED_BYTE, t.data)) : env().getNumber("WEBGL_VERSION") === 2 ? callAndCheck(r, () => r.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, r.RGBA, r.UNSIGNED_BYTE, t)) : callAndCheck(r, () => r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, r.RGBA, r.UNSIGNED_BYTE, t)), callAndCheck(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function createBufferFromOutputTexture(r, e, t, n) {
  const s = r.createBuffer();
  callAndCheck(r, () => r.bindBuffer(r.PIXEL_PACK_BUFFER, s));
  const u = 4 * 4 * e * t;
  return callAndCheck(r, () => r.bufferData(r.PIXEL_PACK_BUFFER, u, r.STREAM_READ)), callAndCheck(r, () => r.readPixels(0, 0, t, e, r.RGBA, r.FLOAT, 0)), callAndCheck(r, () => r.bindBuffer(r.PIXEL_PACK_BUFFER, null)), s;
}
function downloadFloat32MatrixFromBuffer(r, e, t) {
  const n = r, s = new Float32Array(t);
  return n.bindBuffer(n.PIXEL_PACK_BUFFER, e), n.getBufferSubData(n.PIXEL_PACK_BUFFER, 0, s), n.bindBuffer(n.PIXEL_PACK_BUFFER, null), s;
}
function downloadByteEncodedFloatMatrixFromOutputTexture(r, e, t, n) {
  const [s, a] = getUnpackedMatrixTextureShapeWidthHeight(e, t), o = 4, u = new Uint8Array(getUnpackedArraySizeFromMatrixSize(e * t, o));
  return callAndCheck(r, () => r.readPixels(0, 0, s, a, n.downloadTextureFormat, r.UNSIGNED_BYTE, u)), new Float32Array(u.buffer);
}
function downloadPackedMatrixFromBuffer(r, e, t, n, s, a, o, u) {
  const l = r, f = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(a, o));
  return l.bindBuffer(l.PIXEL_PACK_BUFFER, e), l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, f), l.bindBuffer(l.PIXEL_PACK_BUFFER, null), f;
}
function downloadMatrixFromPackedOutputTexture(r, e, t) {
  const n = new Float32Array(e * t * 4);
  return callAndCheck(r, () => r.readPixels(0, 0, t, e, r.RGBA, r.FLOAT, n)), n;
}
const gpgpu_util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bindVertexProgramAttributeStreams,
  createBufferFromOutputTexture,
  createFloat16MatrixTexture,
  createFloat16PackedMatrixTexture,
  createFloat32MatrixTexture,
  createIndexBuffer,
  createPackedMatrixTexture,
  createUnsignedBytesMatrixTexture,
  createVertexBuffer,
  createVertexShader,
  downloadByteEncodedFloatMatrixFromOutputTexture,
  downloadFloat32MatrixFromBuffer,
  downloadMatrixFromPackedOutputTexture,
  downloadPackedMatrixFromBuffer,
  getInternalFormatForFloat16MatrixTexture,
  getInternalFormatForFloat16PackedMatrixTexture,
  getInternalFormatForFloat32MatrixTexture,
  getInternalFormatForPackedMatrixTexture,
  getInternalFormatForUnsignedBytesMatrixTexture,
  uploadDenseMatrixToTexture,
  uploadPixelDataToTexture
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GPGPUContext {
  constructor(e) {
    this.outputTexture = null, this.program = null, this.disposed = !1, this.itemsToPoll = [];
    const t = env().getNumber("WEBGL_VERSION");
    if (e != null ? (this.gl = e, setWebGLContext(t, e)) : this.gl = getWebGLContext(t), e = this.gl, env().getNumber("WEBGL_VERSION") === 2) {
      const a = e;
      this.createVertexArray = () => callAndCheck(a, () => a.createVertexArray()), this.bindVertexArray = (o) => callAndCheck(a, () => a.bindVertexArray(o)), this.deleteVertexArray = (o) => callAndCheck(a, () => a.deleteVertexArray(o)), this.getVertexArray = () => callAndCheck(a, () => a.getParameter(a.VERTEX_ARRAY_BINDING));
    } else if (e != null) {
      const a = e.getExtension("OES_vertex_array_object");
      if (a == null)
        throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");
      this.createVertexArray = () => callAndCheck(e, () => a.createVertexArrayOES()), this.bindVertexArray = (o) => callAndCheck(e, () => a.bindVertexArrayOES(o)), this.deleteVertexArray = (o) => callAndCheck(e, () => a.deleteVertexArrayOES(o)), this.getVertexArray = () => callAndCheck(e, () => e.getParameter(a.VERTEX_ARRAY_BINDING_OES));
    }
    let n = "WEBGL_color_buffer_float";
    const s = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), env().getNumber("WEBGL_VERSION") === 1) {
      const a = "OES_texture_float", o = "OES_texture_half_float";
      if (this.textureFloatExtension = getExtensionOrThrow(this.gl, a), hasExtension(this.gl, o))
        this.textureHalfFloatExtension = getExtensionOrThrow(this.gl, o);
      else if (env().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(n), hasExtension(this.gl, s))
        this.colorBufferHalfFloatExtension = getExtensionOrThrow(this.gl, s);
      else if (env().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (n = "EXT_color_buffer_float", hasExtension(this.gl, n))
      this.colorBufferFloatExtension = this.gl.getExtension(n);
    else if (hasExtension(this.gl, s))
      this.colorBufferHalfFloatExtension = this.gl.getExtension(s);
    else
      throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = createVertexBuffer(this.gl), this.indexBuffer = createIndexBuffer(this.gl), this.framebuffer = createFramebuffer(this.gl), this.textureConfig = getTextureConfig(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return env().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    const e = this.gl;
    callAndCheck(e, () => e.finish()), callAndCheck(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)), callAndCheck(e, () => e.deleteFramebuffer(this.framebuffer)), callAndCheck(e, () => e.bindBuffer(e.ARRAY_BUFFER, null)), callAndCheck(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null)), callAndCheck(e, () => e.deleteBuffer(this.indexBuffer)), this.disposed = !0;
  }
  createFloat32MatrixTexture(e, t) {
    return this.throwIfDisposed(), createFloat32MatrixTexture(this.gl, e, t, this.textureConfig);
  }
  createFloat16MatrixTexture(e, t) {
    return this.throwIfDisposed(), createFloat16MatrixTexture(this.gl, e, t, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(e, t) {
    return this.throwIfDisposed(), createUnsignedBytesMatrixTexture(this.gl, e, t, this.textureConfig);
  }
  uploadPixelDataToTexture(e, t) {
    this.throwIfDisposed(), uploadPixelDataToTexture(this.gl, e, t);
  }
  uploadDenseMatrixToTexture(e, t, n, s) {
    this.throwIfDisposed(), uploadDenseMatrixToTexture(this.gl, e, t, n, s, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(e, t) {
    return this.throwIfDisposed(), createFloat16PackedMatrixTexture(this.gl, e, t, this.textureConfig);
  }
  createPackedMatrixTexture(e, t) {
    return this.throwIfDisposed(), createPackedMatrixTexture(this.gl, e, t, this.textureConfig);
  }
  deleteMatrixTexture(e) {
    this.throwIfDisposed(), this.outputTexture === e && (unbindColorTextureFromFramebuffer(this.gl, this.framebuffer), this.outputTexture = null), callAndCheck(this.gl, () => this.gl.deleteTexture(e));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(e, t, n) {
    return this.downloadMatrixDriver(e, () => downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, t, n, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(e, t, n, s, a, o) {
    return downloadPackedMatrixFromBuffer(this.gl, e, t, n, s, a, o, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(e, t) {
    return downloadFloat32MatrixFromBuffer(this.gl, e, t);
  }
  createBufferFromTexture(e, t, n) {
    this.bindTextureToFrameBuffer(e);
    const s = createBufferFromOutputTexture(this.gl, t, n, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), s;
  }
  createAndWaitForFence() {
    const e = this.createFence(this.gl);
    return this.pollFence(e);
  }
  createFence(e) {
    let t, n;
    if (env().getBool("WEBGL_FENCE_API_ENABLED")) {
      const s = e, a = s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE, 0);
      e.flush(), n = () => {
        const o = s.clientWaitSync(a, 0, 0);
        return o === s.ALREADY_SIGNALED || o === s.CONDITION_SATISFIED;
      }, t = a;
    } else env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (t = this.beginQuery(), this.endQuery(), n = () => this.isQueryAvailable(t, env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : n = () => !0;
    return { query: t, isFencePassed: n };
  }
  downloadMatrixFromPackedTexture(e, t, n) {
    return this.downloadMatrixDriver(e, () => downloadMatrixFromPackedOutputTexture(this.gl, t, n));
  }
  createProgram(e) {
    this.throwIfDisposed();
    const t = this.gl;
    this.vertexShader == null && (this.vertexShader = createVertexShader(t));
    const n = createProgram(t);
    callAndCheck(t, () => t.attachShader(n, this.vertexShader)), callAndCheck(t, () => t.attachShader(n, e)), linkProgram(t, n);
    const s = Object.assign(n, { vao: this.createVertexArray() });
    return this.debug && validateProgram(t, s), s;
  }
  buildVao(e) {
    this.setProgram(e), this.bindVertexArray(e.vao);
    const t = this.gl;
    callAndCheck(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, this.indexBuffer)), bindVertexProgramAttributeStreams(t, e, this.vertexBuffer);
  }
  deleteProgram(e) {
    this.throwIfDisposed(), e === this.program && (this.program = null), e != null && (callAndCheck(this.gl, () => this.gl.deleteProgram(e)), this.deleteVertexArray(e.vao));
  }
  setProgram(e) {
    this.throwIfDisposed(), this.program = e, this.program != null && this.debug && validateProgram(this.gl, this.program), callAndCheck(this.gl, () => this.gl.useProgram(e));
  }
  getUniformLocation(e, t, n = !0) {
    return this.throwIfDisposed(), n ? getProgramUniformLocationOrThrow(this.gl, e, t) : getProgramUniformLocation(this.gl, e, t);
  }
  getAttributeLocation(e, t) {
    return this.throwIfDisposed(), callAndCheck(this.gl, () => this.gl.getAttribLocation(e, t));
  }
  getUniformLocationNoThrow(e, t) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(e, t);
  }
  setInputMatrixTexture(e, t, n) {
    this.throwIfDisposed(), this.throwIfNoProgram(), bindTextureToProgramUniformSampler(this.gl, e, t, n);
  }
  setOutputMatrixTexture(e, t, n) {
    this.setOutputMatrixTextureDriver(e, n, t);
  }
  setOutputPackedMatrixTexture(e, t, n) {
    this.throwIfDisposed();
    const [s, a] = getPackedMatrixTextureShapeWidthHeight(t, n);
    this.setOutputMatrixTextureDriver(e, s, a);
  }
  setOutputMatrixWriteRegion(e, t, n, s) {
    this.setOutputMatrixWriteRegionDriver(n, e, s, t);
  }
  setOutputPackedMatrixWriteRegion(e, t, n, s) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && validateProgram(this.gl, this.program), validateFramebuffer(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    const e = this.gl;
    if (this.debug) {
      const t = this.getVertexArray();
      console.assert(t === this.program.vao, "VAO changed between setProgram and executeProgram!"), this.debugValidate();
    }
    callAndCheck(e, () => e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), callAndCheck(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = getExtensionOrThrow(this.gl, env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const n = this.gl, s = this.getQueryTimerExtensionWebGL2(), a = n.createQuery();
      return n.beginQuery(s.TIME_ELAPSED_EXT, a), a;
    }
    const e = this.getQueryTimerExtensionWebGL1(), t = e.createQueryEXT();
    return e.beginQueryEXT(e.TIME_ELAPSED_EXT, t), t;
  }
  endQuery() {
    if (env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const t = this.gl, n = this.getQueryTimerExtensionWebGL2();
      t.endQuery(n.TIME_ELAPSED_EXT);
      return;
    }
    const e = this.getQueryTimerExtensionWebGL1();
    e.endQueryEXT(e.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(e) {
    return await repeatedTry(() => this.disposed || // while testing contexts are created / disposed
    // in rapid succession, so without this check we
    // may poll for the query timer indefinitely
    this.isQueryAvailable(e, env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(e, env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(e, t) {
    if (t === 0)
      return null;
    if (t === 2) {
      const n = this.gl;
      return n.getQueryParameter(e, n.QUERY_RESULT) / 1e6;
    } else {
      const n = this.getQueryTimerExtensionWebGL1();
      return n.getQueryObjectEXT(e, n.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(e, t) {
    if (t === 0)
      return !0;
    if (t === 2) {
      const n = this.gl, s = this.getQueryTimerExtensionWebGL2(), a = n.getQueryParameter(e, n.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)), a && !this.disjoint;
    } else {
      const n = this.getQueryTimerExtensionWebGL1(), s = n.getQueryObjectEXT(e, n.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)), s && !this.disjoint;
    }
  }
  pollFence(e) {
    return new Promise((t) => {
      this.addItemToPoll(() => e.isFencePassed(), () => t());
    });
  }
  pollItems() {
    const e = linearSearchLastTrue(this.itemsToPoll.map((t) => t.isDoneFn));
    for (let t = 0; t <= e; ++t) {
      const { resolveFn: n } = this.itemsToPoll[t];
      n();
    }
    this.itemsToPoll = this.itemsToPoll.slice(e + 1);
  }
  addItemToPoll(e, t) {
    if (this.itemsToPoll.push({ isDoneFn: e, resolveFn: t }), this.itemsToPoll.length > 1)
      return;
    let n;
    "setTimeoutCustom" in env().platform && (n = env().platform.setTimeoutCustom.bind(env().platform)), repeatedTry(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, n);
  }
  bindTextureToFrameBuffer(e) {
    this.throwIfDisposed(), bindColorTextureToFramebuffer(this.gl, e, this.framebuffer), this.debug && validateFramebuffer(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer), this.debug && validateFramebuffer(this.gl)) : unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(e, t) {
    this.bindTextureToFrameBuffer(e);
    const n = t();
    return this.unbindTextureToFrameBuffer(), n;
  }
  setOutputMatrixTextureDriver(e, t, n) {
    this.throwIfDisposed();
    const s = this.gl;
    bindColorTextureToFramebuffer(s, e, this.framebuffer), this.debug && validateFramebuffer(s), this.outputTexture = e, callAndCheck(s, () => s.viewport(0, 0, t, n)), callAndCheck(s, () => s.scissor(0, 0, t, n));
  }
  setOutputMatrixWriteRegionDriver(e, t, n, s) {
    this.throwIfDisposed(), callAndCheck(this.gl, () => this.gl.scissor(e, t, n, s));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
}
function linearSearchLastTrue(r) {
  let e = 0;
  for (; e < r.length && r[e](); ++e)
    ;
  return e - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { addImpl: addImplCPU, bincountImpl: bincountImplCPU, bincountReduceImpl: bincountReduceImplCPU, bitwiseAndImpl: bitwiseAndImplCPU, castImpl: castImplCPU, ceilImpl: ceilImplCPU, concatImpl: concatImplCPU, equalImpl: equalImplCPU, expImpl: expImplCPU, expm1Impl: expm1ImplCPU, floorImpl: floorImplCPU, gatherNdImpl: gatherNdImplCPU, gatherV2Impl: gatherV2ImplCPU, greaterImpl: greaterImplCPU, greaterEqualImpl: greaterEqualImplCPU, lessImpl: lessImplCPU, lessEqualImpl: lessEqualImplCPU, linSpaceImpl: linSpaceImplCPU, logImpl: logImplCPU, maxImpl: maxImplCPU, maximumImpl: maximumImplCPU, minimumImpl: minimumImplCPU, multiplyImpl: multiplyImplCPU, negImpl: negImplCPU, notEqualImpl: notEqualImplCPU, prodImpl: prodImplCPU, raggedGatherImpl: raggedGatherImplCPU, raggedRangeImpl: raggedRangeImplCPU, raggedTensorToTensorImpl: raggedTensorToTensorImplCPU, rangeImpl: rangeImplCPU, rsqrtImpl: rsqrtImplCPU, scatterImpl: scatterImplCPU, sigmoidImpl: sigmoidImplCPU, simpleAbsImpl: simpleAbsImplCPU, sliceImpl: sliceImplCPU, sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU, sparseReshapeImpl: sparseReshapeImplCPU, sparseSegmentReductionImpl: sparseSegmentReductionImplCPU, sqrtImpl: sqrtImplCPU, staticRegexReplaceImpl: staticRegexReplaceImplCPU, stridedSliceImpl: stridedSliceImplCPU, stringNGramsImpl: stringNGramsImplCPU, stringSplitImpl: stringSplitImplCPU, stringToHashBucketFastImpl: stringToHashBucketFastImplCPU, subImpl: subImplCPU, tileImpl: tileImplCPU, topKImpl: topKImplCPU, transposeImpl: transposeImplCPU, uniqueImpl: uniqueImplCPU } = shared;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getVecChannels(r, e) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, e).map((t) => `${r}.${t}`);
}
function getChannels(r, e) {
  return e === 1 ? [r] : getVecChannels(r, e);
}
function getSourceCoords$2(r, e) {
  if (r === 1)
    return "rc";
  let t = "";
  for (let n = 0; n < r; n++)
    t += e[n], n < r - 1 && (t += ",");
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PackProgram {
  constructor(e) {
    if (this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = e, this.rank = e.length, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length), this.rank === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      const t = getChannels("rc", this.rank), n = getCoordsDataType(this.rank), s = this.getOutOfBoundsCondition(t), a = this.getSetup(t), o = this.getOutput(t);
      this.userCode = `
        void main() {
          ${n} rc = getOutputCoords();

          if(${s}) {
            setOutput(vec4(0));
          } else {
            ${a}

            setOutput(vec4(${o}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(e) {
    const t = [];
    for (let n = 0; n <= 1; n++)
      for (let s = 0; s <= 1; s++) {
        let a = `${n === 0 ? "r" : "rp1"}, ${s === 0 ? "c" : "cp1"}`;
        for (let o = 2; o < this.rank; o++)
          a = `${e[e.length - 1 - o]},` + a;
        t.push(a);
      }
    return t;
  }
  getOutOfBoundsCondition(e) {
    if (this.rank === 1)
      return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let t = "";
    for (let n = this.rank - 2; n < this.rank; n++)
      t += `${e[n]} >= ${this.enableShapeUniforms ? `outShape[${n}]` : this.outputShape[n]}`, n < this.rank - 1 && (t += "||");
    return t;
  }
  getSetup(e) {
    if (this.rank === 1)
      return "";
    const t = e.slice(-2), n = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], s = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${n};
      bool rEdge = rp1 >= ${s};
    `;
  }
  getOutput(e) {
    const t = this.getSourceCoordsArr(e);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReshapePackedProgram {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = e, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
    let n = "";
    for (let s = 0; s < 4; s++) {
      let a = "thisRC = rc;";
      s % 2 === 1 && (a += "thisRC.z += 1;"), s > 1 && (a += "thisRC.y += 1;"), n += `
        ${a}
        ${s > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${s}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${s > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${getReshapedInputCoords(t, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? getFlatIndexFrom3DOutput() : getFlatIndexFrom3D(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : e[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : e[2]};

        ${n}

        setOutput(result);
      }
    `;
  }
}
function getReshapedInputCoords(r, e) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e ? getLogicalCoordinatesFromFlatIndexByUniform(["r", "c", "d"], "inputShape") : getLogicalCoordinatesFromFlatIndex(["r", "c", "d"], r)}
      return ivec3(r, c, d);
    }
  `;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TextureManager {
  constructor(e) {
    this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.usedTextures = {}, this.logEnabled = !1;
  }
  acquireTexture(e, t, n) {
    const s = getPhysicalFromLogicalTextureType(t, n), a = getKeyFromTextureShape(e, s, n);
    a in this.freeTextures || (this.freeTextures[a] = []), a in this.usedTextures || (this.usedTextures[a] = []);
    const o = computeBytes(e, s, this.gpgpu.gl, this.gpgpu.textureConfig, n);
    if (this.freeTextures[a].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= o, this.log();
      const l = this.freeTextures[a].pop();
      return this.usedTextures[a].push(l), l;
    }
    let u;
    return s === PhysicalTextureType.PACKED_2X2_FLOAT32 ? u = this.gpgpu.createPackedMatrixTexture(e[0], e[1]) : s === PhysicalTextureType.PACKED_2X2_FLOAT16 ? u = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]) : s === PhysicalTextureType.UNPACKED_FLOAT32 ? u = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : s === PhysicalTextureType.UNPACKED_FLOAT16 ? u = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : s === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE && (u = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[a].push(u), this.numUsedTextures++, this._numBytesAllocated += o, this.log(), u;
  }
  releaseTexture(e, t, n, s) {
    if (this.freeTextures == null)
      return;
    const a = getPhysicalFromLogicalTextureType(n, s), o = getKeyFromTextureShape(t, a, s);
    o in this.freeTextures || (this.freeTextures[o] = []);
    const u = computeBytes(t, a, this.gpgpu.gl, this.gpgpu.textureConfig, s), l = env().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");
    l !== -1 && this._numBytesAllocated > l ? (this.gpgpu.deleteMatrixTexture(e.texture), this._numBytesAllocated -= u) : (this.freeTextures[o].push(e), this.numFreeTextures++, this._numBytesFree += u), this.numUsedTextures--;
    const f = this.usedTextures[o], c = f && f.indexOf(e);
    if (c == null || c < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    f[c] = f[f.length - 1], f.pop(), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    const e = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${e})`);
    const t = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * t)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (const e in this.freeTextures)
        this.freeTextures[e].forEach((t) => {
          this.gpgpu.deleteMatrixTexture(t.texture);
        });
      for (const e in this.usedTextures)
        this.usedTextures[e].forEach((t) => {
          this.gpgpu.deleteMatrixTexture(t.texture);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
}
function numBytesForInternalFormat(r, e) {
  const t = r;
  if (e === t.R32F)
    return 4;
  if (e === t.R16F)
    return 2;
  if (e === t.RGBA32F)
    return 16;
  if (e === r.RGBA)
    return 16;
  if (e === t.RGBA16F)
    return 8;
  if (e === t.RGBA8)
    return 4;
  throw new Error(`Unknown internal format ${e}`);
}
function computeBytes(r, e, t, n, s) {
  const a = internalFormatForPhysicalTexType(e, n);
  let o;
  if (s) {
    const [l, f] = getPackedMatrixTextureShapeWidthHeight(r[0], r[1]);
    o = l * f;
  } else {
    const [l, f] = getUnpackedMatrixTextureShapeWidthHeight(r[0], r[1]);
    o = l * f;
  }
  const u = numBytesForInternalFormat(t, a);
  return o * u;
}
function internalFormatForPhysicalTexType(r, e) {
  switch (r) {
    case PhysicalTextureType.PACKED_2X2_FLOAT32:
      return getInternalFormatForPackedMatrixTexture(e);
    case PhysicalTextureType.PACKED_2X2_FLOAT16:
      return getInternalFormatForFloat16PackedMatrixTexture(e);
    case PhysicalTextureType.UNPACKED_FLOAT32:
      return getInternalFormatForFloat32MatrixTexture(e);
    case PhysicalTextureType.UNPACKED_FLOAT16:
      return getInternalFormatForFloat16MatrixTexture(e);
    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:
      return getInternalFormatForUnsignedBytesMatrixTexture(e);
    default:
      throw new Error(`Unknown physical texture type ${r}`);
  }
}
function getPhysicalTextureForRendering(r) {
  return env().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? r ? PhysicalTextureType.PACKED_2X2_FLOAT32 : PhysicalTextureType.UNPACKED_FLOAT32 : r ? PhysicalTextureType.PACKED_2X2_FLOAT16 : PhysicalTextureType.UNPACKED_FLOAT16;
}
function getPhysicalFromLogicalTextureType(r, e) {
  if (r === TextureUsage.UPLOAD)
    return PhysicalTextureType.PACKED_2X2_FLOAT32;
  if (r === TextureUsage.RENDER || r == null)
    return getPhysicalTextureForRendering(e);
  if (r === TextureUsage.DOWNLOAD || r === TextureUsage.PIXELS)
    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${r}`);
}
function getKeyFromTextureShape(r, e, t) {
  return `${r[0]}_${r[1]}_${e}_${t}`;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UnaryOpProgram {
  constructor(e, t) {
    this.variableNames = ["A"], this.outputShape = e, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
const CHECK_NAN_SNIPPET$1 = "if (isnan(x)) return x;", LINEAR$1 = "return x;", ABS$1 = "return abs(x);", ELU$2 = "return (x >= 0.0) ? x : (exp(x) - 1.0);", RELU$2 = CHECK_NAN_SNIPPET$1 + `
  return (x < 0.0) ? 0.0 : x;
`, RELU6$2 = CHECK_NAN_SNIPPET$1 + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, CLONE = "return x;", SIGMOID$2 = "return 1.0 / (1.0 + exp(-1.0 * x));";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LINEAR = "return x;", ELU$1 = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, RELU$1 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, RELU6$1 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, SIGMOID$1 = "return 1.0 / (1.0 + exp(-1.0 * x));";
class UnaryOpPackedProgram {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UnpackProgram {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = e, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
    const t = e.length, n = getChannels("rc", t), s = getCoordsDataType(t), a = getSourceCoords$2(t, n), o = n.slice(-2), u = t <= 1 ? "rc" : `vec2(${o.join(",")})`;
    this.userCode = `
      void main() {
        ${s} rc = getOutputCoords();
        vec4 packedInput = getA(${a});

        setOutput(getChannel(packedInput, ${u}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const whereImpl = whereImpl$2, EPSILON_FLOAT32 = 1e-7, EPSILON_FLOAT16 = 1e-4, binaryCaches = {};
function getBinaryCache(r) {
  return r in binaryCaches || (binaryCaches[r] = {}), binaryCaches[r];
}
const CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"), BEFORE_PAGING_CONSTANT = 600;
function numMBBeforeWarning() {
  return env().global.screen == null ? 1024 : env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;
}
class MathBackendWebGL extends KernelBackend {
  nextDataId() {
    return MathBackendWebGL.nextDataId++;
  }
  constructor(e) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = !1, this.pendingDeletes = 0, this.disposed = !1, !env().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    let t;
    if (e != null) {
      if (e instanceof GPGPUContext)
        t = e;
      else {
        const n = getWebGLContext(env().getNumber("WEBGL_VERSION"), e);
        t = new GPGPUContext(n);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = !1;
    } else {
      const n = getWebGLContext(env().getNumber("WEBGL_VERSION"));
      t = new GPGPUContext(n), this.binaryCache = getBinaryCache(env().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = !0;
    }
    this.gpgpu = t, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new TextureManager(this.gpgpu), this.numMBBeforeWarning = numMBBeforeWarning(), this.texData = new DataStorage(this, engine());
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  // Writes a new entry to the data store with a WebGL texture, and registers it
  // to the texture manager.
  writeTexture(e, t, n, s, a, o) {
    const u = this.makeTensorInfo(t, n), l = this.texData.get(u.dataId);
    l.isPacked = !1, l.texture = { texture: e, texShape: [s, a] }, l.texShape = [s, a];
    const f = getShapeAs3D(t), c = new EncodeMatrixProgram(f, !1, o), h = this.runWebGLProgram(c, [u], n, [[s, a]]);
    return h.shape = t, l.texture = null, this.disposeIntermediateTensorInfo(u), h.dataId;
  }
  write(e, t, n) {
    if ((env().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || env().getBool("DEBUG")) && this.checkNumericalProblems(e), n === "complex64" && e != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    const s = { id: this.nextDataId() };
    return this.texData.set(s, { shape: t, dtype: n, values: e, usage: TextureUsage.UPLOAD, refCount: 1 }), s;
  }
  /** Return refCount of a `TensorData`. */
  refCount(e) {
    return this.texData.has(e) ? this.texData.get(e).refCount : 0;
  }
  /** Increase refCount of a `TextureData`. */
  incRef(e) {
    const t = this.texData.get(e);
    t.refCount++;
  }
  /** Decrease refCount of a `TextureData`. */
  decRef(e) {
    if (this.texData.has(e)) {
      const t = this.texData.get(e);
      t.refCount--;
    }
  }
  move(e, t, n, s, a) {
    if (env().getBool("DEBUG") && this.checkNumericalProblems(t), s === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(e, { shape: n, dtype: s, values: t, usage: TextureUsage.UPLOAD, refCount: a });
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  readSync(e) {
    const t = this.texData.get(e), { values: n, dtype: s, complexTensorInfos: a, slice: o, shape: u, isPacked: l } = t;
    if (o != null) {
      let d;
      l ? d = new UnaryOpPackedProgram(u, CLONE) : d = new UnaryOpProgram(u, CLONE);
      const m = this.runWebGLProgram(d, [{ dataId: e, shape: u, dtype: s }], s), g = this.readSync(m.dataId);
      return this.disposeIntermediateTensorInfo(m), g;
    }
    if (n != null)
      return this.convertAndCacheOnCPU(e);
    if (s === "string")
      return n;
    const f = this.activeTimers != null;
    let c;
    f && (c = now());
    let h;
    if (s === "complex64") {
      const d = this.readSync(a.real.dataId), m = this.readSync(a.imag.dataId);
      h = mergeRealAndImagArrays(d, m);
    } else
      h = this.getValuesFromTexture(e);
    return f && (this.downloadWaitMs += now() - c), this.convertAndCacheOnCPU(e, h);
  }
  async read(e) {
    if (this.pendingRead.has(e)) {
      const g = this.pendingRead.get(e);
      return new Promise((y) => g.push(y));
    }
    const t = this.texData.get(e), { values: n, shape: s, slice: a, dtype: o, complexTensorInfos: u, isPacked: l } = t;
    if (a != null) {
      let g;
      l ? g = new UnaryOpPackedProgram(s, CLONE) : g = new UnaryOpProgram(s, CLONE);
      const y = this.runWebGLProgram(g, [{ dataId: e, shape: s, dtype: o }], o), b = this.read(y.dataId);
      return this.disposeIntermediateTensorInfo(y), b;
    }
    if (n != null)
      return this.convertAndCacheOnCPU(e);
    if (env().getBool("DEBUG") && !env().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && env().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let f = null, c;
    if (o !== "complex64" && env().get("WEBGL_BUFFER_SUPPORTED")) {
      c = this.decode(e);
      const g = this.texData.get(c.dataId);
      f = this.gpgpu.createBufferFromTexture(g.texture.texture, ...getDenseTexShape(s));
    }
    this.pendingRead.set(e, []), o !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let h;
    if (o === "complex64") {
      const g = await Promise.all([
        this.read(u.real.dataId),
        this.read(u.imag.dataId)
      ]), y = g[0], b = g[1];
      h = mergeRealAndImagArrays(y, b);
    } else if (f == null)
      h = this.getValuesFromTexture(e);
    else {
      const g = sizeFromShape(s);
      h = this.gpgpu.downloadFloat32MatrixFromBuffer(f, g);
    }
    if (c != null && this.disposeIntermediateTensorInfo(c), f != null) {
      const g = this.gpgpu.gl;
      callAndCheck(g, () => g.deleteBuffer(f));
    }
    const d = this.convertAndCacheOnCPU(e, h), m = this.pendingRead.get(e);
    return this.pendingRead.delete(e), m.forEach((g) => g(d)), this.pendingDisposal.has(e) && (this.pendingDisposal.delete(e), this.disposeData(e) && engine().removeDataId(e, this), this.pendingDeletes--), d;
  }
  /**
   * Read tensor to a new texture that is densely packed for ease of use.
   * @param dataId The source tensor.
   * @param options
   *     customTexShape: Optional. If set, will use the user defined texture
   *     shape to create the texture.
   */
  readToGPU(e, t = {}) {
    const n = this.texData.get(e), { values: s, shape: a, slice: o, dtype: u, isPacked: l, texture: f } = n;
    if (u === "complex64")
      throw new Error("Does not support reading texture for complex64 dtype.");
    if (o != null) {
      let m;
      l ? m = new UnaryOpPackedProgram(a, CLONE) : m = new UnaryOpProgram(a, CLONE);
      const g = this.runWebGLProgram(m, [{ dataId: e, shape: a, dtype: u }], u), y = this.readToGPU(g, t);
      return this.disposeIntermediateTensorInfo(g), y;
    }
    if (f == null)
      throw s != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    const c = this.decode(e, t.customTexShape), h = engine().makeTensorFromTensorInfo(c), d = this.texData.get(c.dataId);
    return Object.assign({ tensorRef: h }, d.texture);
  }
  bufferSync(e) {
    const t = this.readSync(e.dataId);
    if (e.dtype === "string")
      try {
        const n = t.map((s) => decodeString(s));
        return buffer$1(e.shape, e.dtype, n);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return buffer$1(e.shape, e.dtype, t);
  }
  checkNumericalProblems(e) {
    if (e != null)
      for (let t = 0; t < e.length; t++) {
        const n = e[t];
        if (!canBeRepresented(n))
          throw env().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${n} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(e) {
    const { shape: t, dtype: n, isPacked: s } = this.texData.get(e), a = sizeFromShape(t);
    if (env().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      const d = this.decode(e), m = this.texData.get(d.dataId), g = this.gpgpu.downloadMatrixFromPackedTexture(m.texture.texture, ...getDenseTexShape(t)).subarray(0, a);
      return this.disposeIntermediateTensorInfo(d), g;
    }
    const o = env().getBool("WEBGL_PACK") && s === !0, u = o ? getShapeAs3D(t) : t, l = o ? new EncodeFloatPackedProgram(u) : new EncodeFloatProgram(u), f = this.runWebGLProgram(l, [{ shape: u, dtype: n, dataId: e }], "float32"), c = this.texData.get(f.dataId), h = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture, c.texShape[0], c.texShape[1]).subarray(0, a);
    return this.disposeIntermediateTensorInfo(f), h;
  }
  timerAvailable() {
    return env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(e) {
    const t = this.activeTimers, n = [];
    let s = !1;
    this.programTimersStack == null ? (this.programTimersStack = n, s = !0) : this.activeTimers.push(n), this.activeTimers = n, e();
    const a = flatten$2(this.activeTimers.map((l) => l.query)).filter((l) => l != null), o = flatten$2(this.activeTimers.map((l) => l.name)).filter((l) => l != null);
    this.activeTimers = t, s && (this.programTimersStack = null);
    const u = {
      uploadWaitMs: this.uploadWaitMs,
      downloadWaitMs: this.downloadWaitMs,
      kernelMs: null,
      wallMs: null
      // will be filled by the engine
    };
    return (async () => {
      if (env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        const l = await Promise.all(a);
        u.kernelMs = sum$3(l), u.getExtraProfileInfo = () => l.map((f, c) => ({ name: o[c], ms: f })).map((f) => `${f.name}: ${f.ms}`).join(", ");
      } else
        u.kernelMs = {
          error: "WebGL query timers are not supported in this environment."
        };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, u;
    })();
  }
  memory() {
    return {
      unreliable: !1,
      numBytesInGPU: this.numBytesInGPU,
      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
      numBytesInGPUFree: this.textureManager.numBytesFree
    };
  }
  startTimer() {
    return env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: now(), endMs: null };
  }
  endTimer(e) {
    return env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = now(), e);
  }
  async getQueryTime(e) {
    if (env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(e);
    const t = e;
    return t.endMs - t.startMs;
  }
  /**
   * Decrease the RefCount on the dataId and dispose the memory if the dataId
   * has 0 refCount. If there are pending read on the data, the disposal would
   * added to the pending delete queue. Return true if the dataId is removed
   * from backend or the backend does not contain the dataId, false if the
   * dataId is not removed. Memory may or may not be released even when dataId
   * is removed, which also depends on dataRefCount, see `releaseGPU`.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */
  disposeData(e, t = !1) {
    if (this.pendingDisposal.has(e))
      return !1;
    if (!this.texData.has(e))
      return !0;
    if (t ? this.texData.get(e).refCount = 0 : this.texData.get(e).refCount--, !t && this.texData.get(e).refCount > 0)
      return !1;
    if (this.pendingRead.has(e))
      return this.pendingDisposal.add(e), this.pendingDeletes++, !1;
    this.releaseGPUData(e);
    const { complexTensorInfos: n } = this.texData.get(e);
    return n != null && (this.disposeData(n.real.dataId, t), this.disposeData(n.imag.dataId, t)), this.texData.delete(e), !0;
  }
  releaseGPUData(e) {
    const { texture: t, dtype: n, texShape: s, usage: a, isPacked: o, slice: u } = this.texData.get(e), l = u && u.origDataId || e, f = this.dataRefCount.get(l);
    f > 1 ? this.dataRefCount.set(l, f - 1) : (this.dataRefCount.delete(l), t != null && (this.numBytesInGPU -= this.computeBytes(s, n), this.textureManager.releaseTexture(t, s, a, o)));
    const c = this.texData.get(e);
    c.texture = null, c.texShape = null, c.isPacked = !1, c.slice = null;
  }
  getTexture(e) {
    return this.uploadToGPU(e), this.texData.get(e).texture.texture;
  }
  /**
   * Returns internal information for the specific data bucket. Used in unit
   * tests.
   */
  getDataInfo(e) {
    return this.texData.get(e);
  }
  /*
  Tests whether all the inputs to an op are small and on the CPU. This heuristic
  determines when it would be faster to execute a kernel on the CPU. WebGL
  kernels opt into running this check and forwarding when appropriate.
  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
  sustainable strategy for optimizing backend execution of ops.
   */
  shouldExecuteOnCPU(e, t = CPU_HANDOFF_SIZE_THRESHOLD) {
    return env().getBool("WEBGL_CPU_FORWARD") && e.every((n) => this.texData.get(n.dataId).texture == null && sizeFromShape(n.shape) < t);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(e) {
    warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    const t = e.dataSync();
    return whereImpl(e.shape, t);
  }
  packedUnaryOp(e, t, n) {
    const s = new UnaryOpPackedProgram(e.shape, t), a = this.compileAndRun(s, [e], n);
    return engine().makeTensorFromTensorInfo(a);
  }
  // TODO(msoulanille) remove this once the backend has been modularized
  // a copy is needed here to break a circular dependency.
  // Also remove the op from unary_op.
  abs(e) {
    if (this.shouldExecuteOnCPU([e]) && e.dtype !== "complex64") {
      const s = simpleAbsImplCPU(this.texData.get(e.dataId).values);
      return this.makeOutput(e.shape, e.dtype, s);
    }
    if (env().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(e, ABS$1, e.dtype);
    const t = new UnaryOpProgram(e.shape, ABS$1), n = this.compileAndRun(t, [e]);
    return engine().makeTensorFromTensorInfo(n);
  }
  makeTensorInfo(e, t, n) {
    let s;
    if (t === "string" && n != null && n.length > 0 && isString(n[0])) {
      const a = n.map((o) => encodeString(o));
      s = this.write(a, e, t);
    } else
      s = this.write(n, e, t);
    return this.texData.get(s).usage = null, { dataId: s, shape: e, dtype: t };
  }
  makeOutput(e, t, n) {
    return engine().makeTensorFromTensorInfo(this.makeTensorInfo(e, t, n), this);
  }
  unpackTensor(e) {
    const t = new UnpackProgram(e.shape);
    return this.runWebGLProgram(t, [e], e.dtype);
  }
  packTensor(e) {
    const t = new PackProgram(e.shape);
    return this.runWebGLProgram(t, [e], e.dtype, null, !0);
  }
  packedReshape(e, t) {
    const n = [
      getBatchDim(e.shape),
      ...getRowsCols(e.shape)
    ], s = {
      dtype: e.dtype,
      shape: n,
      dataId: e.dataId
    }, a = [
      getBatchDim(t),
      ...getRowsCols(t)
    ], o = new ReshapePackedProgram(a, n), u = !0, l = [n], f = this.runWebGLProgram(o, [s], e.dtype, l, u);
    return { dataId: f.dataId, shape: t, dtype: f.dtype };
  }
  decode(e, t) {
    const n = this.texData.get(e), { isPacked: s, shape: a, dtype: o } = n;
    if (t != null) {
      const d = sizeFromShape(a), m = t[0] * t[1] * 4;
      assert$1(d <= m, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    const u = getShapeAs3D(a);
    let l;
    s ? l = new DecodeMatrixPackedProgram(u) : l = new DecodeMatrixProgram(u);
    const f = !0, c = [t ?? getDenseTexShape(u)], h = this.runWebGLProgram(l, [{ shape: u, dtype: o, dataId: e }], o, c, f, t);
    return { dtype: o, shape: a, dataId: h.dataId };
  }
  runWebGLProgram(e, t, n, s, a = !1, o) {
    const u = this.makeTensorInfo(e.outputShape, n), l = this.texData.get(u.dataId);
    if (e.packedOutput && (l.isPacked = !0), e.outPackingScheme === PackingScheme.DENSE) {
      const v = o ?? getDenseTexShape(e.outputShape);
      l.texShape = v.map((w) => w * 2);
    }
    if (e.outTexUsage != null && (l.usage = e.outTexUsage), sizeFromShape(u.shape) === 0)
      return l.values = getTypedArrayFromDType(u.dtype, 0), u;
    const f = [], c = t.map((v) => {
      if (v.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let w = this.texData.get(v.dataId);
      if (w.texture == null) {
        if (!e.packedInputs && sizeFromShape(v.shape) <= env().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return {
            shape: v.shape,
            texData: null,
            isUniform: !0,
            uniformValues: w.values
          };
        e.packedInputs && (w.isPacked = !0, w.shape = v.shape);
      }
      if (this.uploadToGPU(v.dataId), !!w.isPacked != !!e.packedInputs)
        v = w.isPacked ? this.unpackTensor(v) : this.packTensor(v), f.push(v), w = this.texData.get(v.dataId);
      else if (w.isPacked && !isReshapeFree(w.shape, v.shape)) {
        const I = v, T = v.shape;
        v.shape = w.shape, v = this.packedReshape(v, T), f.push(v), w = this.texData.get(v.dataId), I.shape = T;
      }
      return { shape: v.shape, texData: w, isUniform: !1 };
    });
    this.uploadToGPU(u.dataId);
    const h = { shape: u.shape, texData: l, isUniform: !1 }, d = makeShaderKey(e, c, h), m = this.getAndSaveBinary(d, () => compileProgram(this.gpgpu, e, c, h)), g = this.activeTimers != null;
    let y;
    g && (y = this.startTimer()), env().get("ENGINE_COMPILE_ONLY") || runProgram(this.gpgpu, m, c, h, s), f.forEach((v) => this.disposeIntermediateTensorInfo(v)), g && (y = this.endTimer(y), this.activeTimers.push({ name: e.constructor.name, query: this.getQueryTime(y) }));
    const b = env().getNumber("WEBGL_FLUSH_THRESHOLD");
    if (b > 0) {
      const v = now();
      v - this.lastGlFlushTime > b && (this.gpgpu.gl.flush(), this.lastGlFlushTime = v);
    }
    if (!env().getBool("WEBGL_LAZILY_UNPACK") && l.isPacked && a === !1) {
      const v = this.unpackTensor(u);
      return this.disposeIntermediateTensorInfo(u), v;
    }
    return u;
  }
  compileAndRun(e, t, n, s, a = !1) {
    return n = n || t[0].dtype, this.runWebGLProgram(e, t, n, s, a);
  }
  getAndSaveBinary(e, t) {
    return e in this.binaryCache || (this.binaryCache[e] = t()), this.binaryCache[e];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (env().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((t) => {
      this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram), delete this.binaryCache[t];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement < "u" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = tidy(() => {
      if (!env().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        const e = env().getBool("DEBUG");
        env().set("DEBUG", !1);
        const t = this.abs(scalar(1e-8)).dataSync()[0];
        if (env().set("DEBUG", e), t > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
  }
  uploadToGPU(e) {
    const t = this.texData.get(e), { shape: n, dtype: s, values: a, texture: o, usage: u, isPacked: l } = t;
    if (o != null)
      return;
    const f = this.activeTimers != null;
    let c;
    f && (c = now());
    let h = t.texShape;
    if (h == null && (h = getTextureShapeFromLogicalShape(n, l), t.texShape = h), a != null) {
      const d = getShapeAs3D(n);
      let m, g = h[1], y = h[0];
      const b = a instanceof Uint8Array || a instanceof Uint8ClampedArray;
      (l || !b) && ([g, y] = getPackedMatrixTextureShapeWidthHeight(h[0], h[1])), l ? m = new EncodeMatrixPackedProgram(d, b) : m = new EncodeMatrixProgram(d, b);
      const v = b ? [y, g] : h, w = this.makeTensorInfo(v, s), I = this.texData.get(w.dataId);
      b ? I.usage = TextureUsage.PIXELS : I.usage = TextureUsage.UPLOAD, I.texShape = v, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(w.dataId), g, y, a);
      const T = [[y, g]], F = this.runWebGLProgram(m, [w], s, T, !0), O = this.texData.get(F.dataId);
      t.texShape = O.texShape, t.isPacked = O.isPacked, t.usage = O.usage, env().get("ENGINE_COMPILE_ONLY") ? this.disposeData(F.dataId) : (t.texture = O.texture, t.values = null, this.texData.delete(F.dataId)), this.disposeIntermediateTensorInfo(w), f && (this.uploadWaitMs += now() - c);
    } else {
      const d = this.acquireTexture(h, u, s, l);
      t.texture = d;
    }
  }
  convertAndCacheOnCPU(e, t) {
    const n = this.texData.get(e), { dtype: s } = n;
    return t != null && (n.values = float32ToTypedArray(t, s)), n.values;
  }
  acquireTexture(e, t, n, s) {
    if (this.numBytesInGPU += this.computeBytes(e, n), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      const a = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = !0, console.warn(`High memory usage in GPU: ${a} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(e, t, s);
  }
  computeBytes(e, t) {
    return e[0] * e[1] * bytesPerElement(t);
  }
  checkCompileCompletion() {
    for (const [, e] of Object.entries(this.binaryCache))
      this.checkCompletion_(e);
  }
  async checkCompileCompletionAsync() {
    const e = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (const [, t] of Object.entries(this.binaryCache))
        e.push(this.checkCompletionAsync_(t));
      return Promise.all(e);
    } else {
      for (const [, t] of Object.entries(this.binaryCache)) {
        const n = new Promise((s) => {
          try {
            this.checkCompletion_(t), s(!0);
          } catch (a) {
            throw a;
          }
        });
        e.push(n);
      }
      return Promise.all(e);
    }
  }
  async checkCompletionAsync_(e) {
    return this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(e) : (await nextFrame(), this.checkCompletionAsync_(e));
  }
  checkCompletion_(e) {
    if (this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.gl.LINK_STATUS) === !1)
      throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)), this.gpgpu.gl.getShaderParameter(e.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === !1 ? (logShaderSourceAndInfoLog(e.source, this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return !0;
  }
  getUniformLocations() {
    for (const e of Object.values(this.binaryCache)) {
      this.gpgpu.buildVao(e.webGLProgram);
      const { variablesLocations: t, customUniformLocations: n, infLoc: s, nanLoc: a, outShapeLocation: o, outShapeStridesLocation: u, outTexShapeLocation: l } = getUniformLocations(this.gpgpu, e.program, e.webGLProgram);
      e.variablesLocations = t, e.customUniformLocations = n, e.infLoc = s, e.nanLoc = a, e.outShapeLocation = o, e.outShapeStridesLocation = u, e.outTexShapeLocation = l;
    }
  }
  /**
   * Create a TF.js tensor out of an existing WebGL texture. A new texture will
   * be created.
   */
  createTensorFromGPUData(e, t, n) {
    e.channels = e.channels || "RGBA";
    const { texture: s, height: a, width: o, channels: u } = e, l = engine().backend;
    if (!l.gpgpu.gl.isTexture(s))
      throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");
    const f = l.writeTexture(s, t, n, a, o, u);
    return engine().makeTensorFromDataId(f, t, n, l);
  }
}
MathBackendWebGL.nextDataId = 0;
function float32ToTypedArray(r, e) {
  if (e === "float32" || e === "complex64")
    return r;
  if (e === "int32" || e === "bool") {
    const t = e === "int32" ? new Int32Array(r.length) : new Uint8Array(r.length);
    for (let n = 0; n < t.length; ++n)
      t[n] = Math.round(r[n]);
    return t;
  } else
    throw new Error(`Unknown dtype ${e}`);
}
/** @license See the LICENSE file. */
const version$2 = "4.22.0";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function forceHalfFloat() {
  env().set("WEBGL_FORCE_F16_TEXTURES", !0);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
isBrowser() && registerBackend(
  "webgl",
  () => new MathBackendWebGL(),
  2
  /* priority */
);
const webgl = { forceHalfFloat };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CHECK_NAN_SNIPPET = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
class BinaryOpProgram {
  constructor(e, t, n) {
    this.variableNames = ["A", "B"], this.outputShape = assertAndGetBroadcastShape(t, n), this.enableShapeUniforms = useShapeUniforms(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CHECK_NAN_SNIPPET_PACKED = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
class BinaryOpPackedProgram {
  constructor(e, t, n, s = !1) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = assertAndGetBroadcastShape(t, n);
    const a = this.outputShape.length;
    this.enableShapeUniforms = useShapeUniforms(a);
    let o = "";
    if (s)
      if (a === 0 || sizeFromShape(this.outputShape) === 1)
        o = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (o = `
          ${getCoordsDataType(a)} coords = getOutputCoords();
        `, a === 1)
        this.enableShapeUniforms ? o += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : o += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        const l = getChannels("coords", a);
        this.enableShapeUniforms ? o += `
            bool nextRowOutOfBounds =
              (${l[a - 2]} + 1) >= outShape[${a} - 2];
            bool nextColOutOfBounds =
              (${l[a - 1]} + 1) >= outShape[${a} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : o += `
            bool nextRowOutOfBounds =
              (${l[a - 2]} + 1) >= ${this.outputShape[a - 2]};
            bool nextColOutOfBounds =
              (${l[a - 1]} + 1) >= ${this.outputShape[a - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${o}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function identity(r) {
  const { inputs: e, backend: t } = r, { x: n } = e;
  return t.incRef(n.dataId), { dataId: n.dataId, shape: n.shape, dtype: n.dtype };
}
const identityConfig = {
  kernelName: Identity$1,
  backendName: "webgl",
  kernelFunc: identity
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function complex(r) {
  const { inputs: e, backend: t } = r, { real: n, imag: s } = e, a = t.makeTensorInfo(n.shape, "complex64"), o = t.texData.get(a.dataId), u = identity({ inputs: { x: n }, backend: t }), l = identity({ inputs: { x: s }, backend: t });
  return o.complexTensorInfos = { real: u, imag: l }, a;
}
const complexConfig = {
  kernelName: Complex,
  backendName: "webgl",
  kernelFunc: complex
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LEAKYRELU = "return (a < 0.) ? b * a : a;", LEAKYRELU_PACKED = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function leakyRelu(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { alpha: a } = n, o = t.makeTensorInfo([], "float32", createScalarValue(a, "float32")), u = env().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new BinaryOpPackedProgram(LEAKYRELU_PACKED, s.shape, o.shape) : new BinaryOpProgram(LEAKYRELU, s.shape, o.shape), l = t.runWebGLProgram(u, [s, o], "float32");
  return t.disposeIntermediateTensorInfo(o), l;
}
const leakyReluConfig = {
  kernelName: LeakyRelu,
  backendName: "webgl",
  kernelFunc: leakyRelu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PRELU = "return (a < 0.) ? b * a : a;", PRELU_PACKED = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function prelu(r) {
  const { inputs: e, backend: t } = r, { x: n, alpha: s } = e, a = env().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new BinaryOpPackedProgram(PRELU_PACKED, n.shape, s.shape) : new BinaryOpProgram(PRELU, n.shape, s.shape);
  return t.runWebGLProgram(a, [n, s], "float32");
}
const preluConfig = {
  kernelName: Prelu,
  backendName: "webgl",
  kernelFunc: prelu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CHECK_NAN_SNIPPET_UNARY = "if (isnan(x)) return x;";
function unaryKernelFunc({ opSnippet: r, packedOpSnippet: e, cpuKernelImpl: t, dtype: n }) {
  return ({ inputs: s, backend: a }) => {
    const { x: o } = s, u = a, l = n || o.dtype;
    if (u.shouldExecuteOnCPU([o]) && t != null) {
      const h = u.texData.get(o.dataId), d = t(h.values, l);
      return u.makeTensorInfo(o.shape, l, d);
    }
    const f = env().getBool("WEBGL_PACK_UNARY_OPERATIONS") && e != null;
    let c;
    return f ? c = new UnaryOpPackedProgram(o.shape, e) : c = new UnaryOpProgram(o.shape, r), u.runWebGLProgram(c, [o], l);
  };
}
function binaryKernelFunc({ opSnippet: r, packedOpSnippet: e, checkOutOfBounds: t = !1, supportsComplex: n = !1, cpuKernelImpl: s, dtype: a }) {
  return ({ inputs: o, backend: u }) => {
    const { a: l, b: f } = o, c = u;
    if (n && l.dtype === "complex64") {
      const g = c.texData.get(l.dataId), y = c.texData.get(f.dataId), [b, v] = [
        [g.complexTensorInfos.real, y.complexTensorInfos.real],
        [g.complexTensorInfos.imag, y.complexTensorInfos.imag]
      ].map((I) => {
        const [T, _] = I, F = {
          dataId: T.dataId,
          dtype: T.dtype,
          shape: l.shape
        }, O = {
          dataId: _.dataId,
          dtype: _.dtype,
          shape: f.shape
        }, q = new BinaryOpProgram(r, l.shape, f.shape);
        return c.runWebGLProgram(q, [F, O], upcastType(T.dtype, _.dtype));
      }), w = complex({ inputs: { real: b, imag: v }, backend: c });
      return c.disposeIntermediateTensorInfo(b), c.disposeIntermediateTensorInfo(v), w;
    }
    const h = a || upcastType(l.dtype, f.dtype);
    if ((l.dtype === "string" || f.dtype === "string" || c.shouldExecuteOnCPU([l, f])) && s != null) {
      const g = c.texData.get(l.dataId).values, y = c.texData.get(f.dataId).values, b = l.dtype === "string" ? (
        // tslint:disable-next-line: no-any
        fromUint8ToStringArray(g)
      ) : g, v = l.dtype === "string" ? (
        // tslint:disable-next-line: no-any
        fromUint8ToStringArray(y)
      ) : y, [w, I] = s(l.shape, f.shape, b, v, h), T = c.makeTensorInfo(I, h), _ = c.texData.get(T.dataId);
      return _.values = w, T;
    }
    const d = env().getBool("WEBGL_PACK_BINARY_OPERATIONS") && e != null;
    let m;
    return d ? m = new BinaryOpPackedProgram(e, l.shape, f.shape, t) : m = new BinaryOpProgram(r, l.shape, f.shape), c.runWebGLProgram(m, [l, f], h);
  };
}
function mapActivationToShaderProgram(r, e = !1) {
  if (r === "linear")
    return e ? LINEAR : LINEAR$1;
  if (r === "relu")
    return e ? RELU$1 : RELU$2;
  if (r === "elu")
    return e ? ELU$1 : ELU$2;
  if (r === "relu6")
    return e ? RELU6$1 : RELU6$2;
  if (r === "prelu")
    return e ? PRELU_PACKED : PRELU;
  if (r === "leakyrelu")
    return e ? LEAKYRELU_PACKED : LEAKYRELU;
  if (r === "sigmoid")
    return e ? SIGMOID$1 : SIGMOID$2;
  throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MatMulPackedProgram {
  constructor(e, t, n, s = !1, a = !1, o = !1, u = null, l = !1, f = !1) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = n, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
    const c = s ? e[1] : e[2], h = Math.ceil(c / 2), d = s ? "i * 2, rc.y" : "rc.y, i * 2", m = a ? "rc.z, i * 2" : "i * 2, rc.z", g = s ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], y = a ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"];
    let b = "", v = "";
    u && (l ? b = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${u}
        }` : f ? b = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${u}
        }` : b = `vec4 activation(vec4 x) {
          ${u}
        }`, v = "result = activation(result);");
    const w = o ? "result += getBiasAtOutCoords();" : "";
    o && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), f && this.variableNames.push("leakyreluAlpha");
    let I = "rc.x", T = "rc.x";
    e[0] < t[0] ? I = `imod(rc.x, ${e[0]})` : t[0] < e[0] && (T = `imod(rc.x, ${t[0]})`), this.userCode = `
      ${b}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${h}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${I};
        int batchB = ${T};
        for (int i = 0; i < ${h}; i++) {
          vec4 a = getMatrixA(batchA, ${d});
          vec4 b = getMatrixB(batchB, ${m});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${g[0]} * ${y[0]});
          result += (${g[1]} * ${y[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${w}

        ${v}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const COMPLEX_MULTIPLY = {
  REAL: "return areal * breal - aimag * bimag;",
  IMAG: "return areal * bimag + aimag * breal;"
};
class BinaryOpComplexProgram {
  constructor(e, t, n) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = assertAndGetBroadcastShape(t, n), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MUL = "return a * b;";
function multiply(r) {
  const { inputs: e, backend: t } = r, { a: n, b: s } = e, a = upcastType(n.dtype, s.dtype);
  if (n.dtype === "complex64") {
    const u = t.texData.get(n.dataId), l = t.texData.get(s.dataId), f = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.REAL, n.shape, s.shape), c = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.IMAG, n.shape, s.shape), h = [
      {
        dataId: u.complexTensorInfos.real.dataId,
        dtype: u.complexTensorInfos.real.dtype,
        shape: n.shape
      },
      {
        dataId: u.complexTensorInfos.imag.dataId,
        dtype: u.complexTensorInfos.imag.dtype,
        shape: n.shape
      },
      {
        dataId: l.complexTensorInfos.real.dataId,
        dtype: l.complexTensorInfos.real.dtype,
        shape: s.shape
      },
      {
        dataId: l.complexTensorInfos.imag.dataId,
        dtype: l.complexTensorInfos.imag.dtype,
        shape: s.shape
      }
    ], d = t.runWebGLProgram(f, h, "float32"), m = t.runWebGLProgram(c, h, "float32"), g = complex({ inputs: { real: d, imag: m }, backend: t });
    return t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(m), g;
  }
  if (t.shouldExecuteOnCPU([n, s])) {
    const u = t.texData.get(n.dataId), l = t.texData.get(s.dataId), [f, c] = multiplyImplCPU(n.shape, s.shape, u.values, l.values, a), h = t.makeTensorInfo(c, a), d = t.texData.get(h.dataId);
    return d.values = f, h;
  }
  let o;
  return env().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? o = new BinaryOpPackedProgram(MUL, n.shape, s.shape) : o = new BinaryOpProgram(MUL, n.shape, s.shape), t.runWebGLProgram(o, [n, s], a);
}
const multiplyConfig = {
  kernelName: Multiply$1,
  backendName: "webgl",
  kernelFunc: multiply
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function packedReshape(r, e, t) {
  const n = [
    getBatchDim(r.shape),
    ...getRowsCols(r.shape)
  ], s = {
    dtype: r.dtype,
    shape: n,
    dataId: r.dataId
  }, a = [
    getBatchDim(e),
    ...getRowsCols(e)
  ], o = new ReshapePackedProgram(a, n), u = !0, l = [n], f = t.runWebGLProgram(o, [s], r.dtype, l, u);
  return { dataId: f.dataId, shape: e, dtype: f.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reshape(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { shape: a } = n, o = t, u = sizeFromShape(s.shape), l = inferFromImplicitShape(a, u), f = sizeFromShape(l);
  assert$1(u === f, () => `The new shape (${l}) has ${f} elements and the old shape (${s.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`);
  const c = o.texData.get(s.dataId);
  return c.isPacked && !isReshapeFree(s.shape, l) && !(c.texture !== null && isReshapeFree(c.shape, l)) ? packedReshape(s, l, o) : (o.incRef(s.dataId), { dataId: s.dataId, shape: l, dtype: s.dtype });
}
const reshapeConfig = {
  kernelName: Reshape$1,
  backendName: "webgl",
  kernelFunc: reshape
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MeanProgram {
  constructor(e, t) {
    this.variableNames = ["x"];
    const { windowSize: n, batchSize: s, inSize: a, outSize: o } = e;
    this.outputShape = [s, o];
    const u = Math.floor(n / 4) * 4, l = n % 4;
    let f = "sumValue += dot(values, ones);";
    if (t != null) {
      const h = 1 / t;
      f = `sumValue += dot(values * ${isInt(h) ? h.toPrecision(2) : h}, ones);`;
    }
    let c = "";
    a % n > 0 && (c = `
        if (inIdx < 0 || inIdx >= ${a}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${f}
        }

        int inIdx = inOffset + ${u};
        if (${l === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${f}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${f}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${f}
        }
        setOutput(sumValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReduceProgram {
  constructor(e, t) {
    this.variableNames = ["x"];
    const { windowSize: n, batchSize: s, inSize: a, outSize: o } = e;
    this.outputShape = [s, o];
    let u = "0.0", l = "";
    t === "prod" ? u = "1.0" : t === "min" ? (u = "1.0 / 1e-20", l = "min") : t === "max" && (u = "-1.0 / 1e-20", l = "max");
    let f = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "sum" ? f = "sumValue" : t === "prod" ? f = "prodValue" : t === "all" ? f = "allValue" : t === "any" && (f = "anyValue");
    const c = Math.floor(n / 4) * 4, h = n % 4;
    let d = `
      if (${t === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${t === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${t === "min"} || ${t === "max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, m = "vec4";
    t === "all" ? (u = "1.0", d = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, m = "bvec4") : t === "any" && (u = "0.0", d = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, m = "bvec4");
    let g = "";
    a % n > 0 && (g = `
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${u};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${g}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        vec4 minMaxValue = vec4(${u});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${m} values = ${m}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${d}
        }

        int inIdx = inOffset + ${c};
        if (${h === 1}) {
          ${m} values = ${m}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 2}) {
          ${m} values = ${m}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 3}) {
          ${m} values = ${m}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${d}
        }
        setOutput(${f});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getReductionStages(r) {
  const e = [];
  for (; e.length === 0 || e[e.length - 1].outSize !== 1; ) {
    const t = e.length ? e[e.length - 1].outSize : r[1], n = computeOptimalWindowSize(t);
    e.push({
      inSize: t,
      windowSize: n,
      outSize: Math.ceil(t / n)
    });
  }
  return e;
}
function reduce(r, e, t, n) {
  const s = getReductionStages(r.shape);
  let a = r;
  for (let o = 0; o < s.length; o++) {
    const { inSize: u, windowSize: l, outSize: f } = s[o];
    let c, h;
    t === "mean" ? c = o === 0 ? new MeanProgram({ windowSize: l, inSize: u, batchSize: r.shape[0], outSize: f }, u) : new MeanProgram({ windowSize: l, inSize: u, batchSize: r.shape[0], outSize: f }) : c = new ReduceProgram({ windowSize: l, inSize: u, batchSize: r.shape[0], outSize: f }, t), h = a, a = n.runWebGLProgram(c, [a], e), h.dataId !== r.dataId && n.disposeIntermediateTensorInfo(h);
  }
  return a;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TransposeProgram {
  constructor(e, t) {
    this.variableNames = ["A"];
    const n = new Array(e.length);
    for (let o = 0; o < n.length; o++)
      n[o] = e[t[o]];
    this.outputShape = n, this.rank = n.length;
    const s = getCoordsDataType(this.rank), a = getSwitchedCoords(t);
    this.userCode = `
    void main() {
      ${s} resRC = getOutputCoords();
      setOutput(getA(${a}));
    }
    `;
  }
}
function getSwitchedCoords(r) {
  const e = r.length;
  if (e > 6)
    throw Error(`Transpose for rank ${e} is not yet supported`);
  const t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], n = new Array(e);
  for (let s = 0; s < r.length; s++)
    n[r[s]] = t[s];
  return n.join();
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TransposePackedProgram {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0;
    const n = new Array(e.length);
    for (let c = 0; c < n.length; c++)
      n[c] = e[t[c]];
    if (this.outputShape = n, this.rank = n.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    const s = getCoordsDataType(this.rank), a = getVecChannels("rc", this.rank), o = new Array(this.rank);
    for (let c = 0; c < t.length; c++)
      o[t[c]] = a[c];
    const u = `vec2(${o.slice(-2).join()})`, l = `++${a[this.rank - 1]} < ${n[this.rank - 1]}`, f = `getChannel(getA(${o.join()}), ${u})`;
    this.userCode = `
    void main() {
      ${s} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${f};
      if(${l}) {
        result[1] = ${f};
      }
      --${a[this.rank - 1]};
      if(++${a[this.rank - 2]} < ${n[this.rank - 2]}) {
        result[2] = ${f};
        if(${l}) {
          result[3] = ${f};
        }
      }
      setOutput(result);
    }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transposeImpl(r, e, t) {
  const n = env().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new TransposePackedProgram(r.shape, e) : new TransposeProgram(r.shape, e);
  return t.runWebGLProgram(n, [r], r.dtype);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sumImpl(r, e, t, n) {
  const s = e, a = r.shape.length, o = parseAxisParam(s, r.shape);
  let u = o;
  const l = getAxesPermutation(u, a), f = l != null;
  let c = r;
  f && (c = transposeImpl(r, l, n), u = getInnerMostAxes(u.length, a)), assertAxesAreInnerMostDims("sum", u, a);
  const [h, d] = computeOutAndReduceShapes(c.shape, u);
  let m = h;
  t && (m = expandShapeToKeepDim(h, o));
  const g = sizeFromShape(d), b = sizeFromShape(r.shape) / g, v = reshape({ inputs: { x: c }, attrs: { shape: [b, g] }, backend: n }), w = sumOutType(r.dtype), I = reduce(v, w, "sum", n), T = reshape({ inputs: { x: I }, attrs: { shape: m }, backend: n });
  return n.disposeIntermediateTensorInfo(v), n.disposeIntermediateTensorInfo(I), f && n.disposeIntermediateTensorInfo(c), T;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sum(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n;
  return sumImpl(s, a, o, t);
}
const sumConfig = {
  kernelName: Sum,
  backendName: "webgl",
  kernelFunc: sum
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transpose(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { perm: a } = n, o = t, u = s.shape.length, l = new Array(u);
  for (let c = 0; c < l.length; c++)
    l[c] = s.shape[a[c]];
  let f;
  if (o.shouldExecuteOnCPU([s])) {
    const h = o.texData.get(s.dataId).values, d = transposeImplCPU(h, s.shape, s.dtype, a, l);
    f = o.makeTensorInfo(l, s.dtype);
    const m = o.texData.get(f.dataId);
    m.values = d;
  } else
    f = transposeImpl(s, a, o);
  return f;
}
const transposeConfig = {
  kernelName: Transpose,
  backendName: "webgl",
  kernelFunc: transpose
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MATMUL_SHARED_DIM_THRESHOLD = 1e3;
function batchMatMulImpl({ a: r, b: e, transposeA: t, transposeB: n, backend: s, bias: a = null, preluActivationWeights: o = null, leakyreluAlpha: u = 0, activation: l = null }) {
  const f = r.shape.length, c = e.shape.length, h = t ? r.shape[f - 2] : r.shape[f - 1], d = n ? e.shape[c - 1] : e.shape[c - 2], m = t ? r.shape[f - 1] : r.shape[f - 2], g = n ? e.shape[c - 2] : e.shape[c - 1], y = r.shape.slice(0, -2), b = e.shape.slice(0, -2), v = sizeFromShape(y), w = sizeFromShape(b), T = assertAndGetBroadcastShape(r.shape.slice(0, -2), e.shape.slice(0, -2)).concat([m, g]);
  assert$1(h === d, () => `Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${r.shape} and ${e.shape} and transposeA=${t} and transposeB=${n} must match.`);
  const _ = t ? [v, h, m] : [v, m, h], F = n ? [w, g, d] : [w, d, g], O = reshape({ inputs: { x: r }, backend: s, attrs: { shape: _ } }), q = reshape({ inputs: { x: e }, backend: s, attrs: { shape: F } }), V = [O, q], H = Math.max(v, w), R = t ? O.shape[1] : O.shape[2], $ = a != null, S = o != null, x = l === "leakyrelu", C = l != null ? mapActivationToShaderProgram(l, !0) : null, A = $ || S || x || C != null;
  let N;
  if ((m === 1 || g === 1) && R > MATMUL_SHARED_DIM_THRESHOLD && A === !1) {
    let D = O, E = q;
    t && (D = transpose({ inputs: { x: O }, backend: s, attrs: { perm: [0, 2, 1] } }), V.push(D)), n && (E = transpose({ inputs: { x: q }, backend: s, attrs: { perm: [0, 2, 1] } }), V.push(E));
    const M = g !== 1, P = g === 1;
    let z = D;
    M && (z = reshape({
      inputs: { x: D },
      backend: s,
      attrs: { shape: [H, R, 1] }
    }), V.push(z));
    const J = g === 1 ? 2 : 1;
    let re = E;
    P && (re = reshape({
      inputs: { x: E },
      backend: s,
      attrs: { shape: [H, 1, R] }
    }), V.push(re));
    const Q = multiply({ inputs: { a: z, b: re }, backend: s });
    N = sum({ inputs: { x: Q }, backend: s, attrs: { axis: J, keepDims: !0 } }), V.push(Q);
  } else {
    const D = upcastType(r.dtype, e.dtype), E = new MatMulPackedProgram(_, F, [H, m, g], t, n, $, C, S, x), M = [O, q];
    if (a != null && M.push(a), S && M.push(o), x) {
      const P = s.makeTensorInfo([], "float32", createScalarValue(u, "float32"));
      M.push(P), V.push(P);
    }
    N = s.runWebGLProgram(E, M, D);
  }
  const k = reshape({ inputs: { x: N }, backend: s, attrs: { shape: T } });
  V.push(N);
  for (const D of V)
    s.disposeIntermediateTensorInfo(D);
  return k;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _fusedMatMul(r) {
  const { inputs: e, backend: t, attrs: n } = r, { a: s, b: a, bias: o, preluActivationWeights: u } = e, { transposeA: l, transposeB: f, activation: c, leakyreluAlpha: h } = n;
  return batchMatMulImpl({
    a: s,
    b: a,
    transposeA: l,
    transposeB: f,
    backend: t,
    bias: o,
    preluActivationWeights: u,
    leakyreluAlpha: h,
    activation: c
  });
}
const _fusedMatMulConfig = {
  kernelName: _FusedMatMul,
  backendName: "webgl",
  kernelFunc: _fusedMatMul
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ABS = "return abs(x);";
function abs(r) {
  const { inputs: e, backend: t } = r, { x: n } = e;
  if (t.shouldExecuteOnCPU([n]) && n.dtype !== "complex64") {
    const a = t.texData.get(n.dataId), o = simpleAbsImplCPU(a.values);
    return t.makeTensorInfo(n.shape, n.dtype, o);
  }
  let s;
  return env().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? s = new UnaryOpPackedProgram(n.shape, ABS) : s = new UnaryOpProgram(n.shape, ABS), t.runWebGLProgram(s, [n], n.dtype);
}
const absConfig = {
  kernelName: Abs,
  backendName: "webgl",
  kernelFunc: abs
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ACOS = CHECK_NAN_SNIPPET$1 + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`, acos = unaryKernelFunc({ opSnippet: ACOS }), acosConfig = {
  kernelName: Acos,
  backendName: "webgl",
  kernelFunc: acos
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ACOSH = CHECK_NAN_SNIPPET$1 + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`, acosh = unaryKernelFunc({ opSnippet: ACOSH }), acoshConfig = {
  kernelName: Acosh,
  backendName: "webgl",
  kernelFunc: acosh
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ADD = "return a + b;", addKernelFunc = binaryKernelFunc({
  opSnippet: ADD,
  packedOpSnippet: ADD,
  supportsComplex: !0,
  cpuKernelImpl: addImplCPU
}), addConfig = {
  kernelName: Add$1,
  backendName: "webgl",
  kernelFunc: addKernelFunc
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AddNProgram {
  constructor(e, t) {
    this.outputShape = [], this.outputShape = e, this.variableNames = t.map((a, o) => `T${o}`);
    const n = [];
    this.variableNames.forEach((a) => {
      n.push(`float v${a} = get${a}AtOutCoords();`);
    });
    const s = this.variableNames.map((a) => `v${a}`).join(" + ");
    this.userCode = `
      void main() {
        ${n.join(`
        `)}

        float result = ${s};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AddNPackedProgram {
  constructor(e, t) {
    this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e, this.variableNames = t.map((a, o) => `T${o}`);
    const n = [];
    this.variableNames.forEach((a) => {
      n.push(`vec4 v${a} = get${a}AtOutCoords();`);
    });
    const s = this.variableNames.map((a) => `v${a}`).join(" + ");
    this.userCode = `
      void main() {
        ${n.join(`
        `)}

        vec4 result = ${s};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function addN(r) {
  const { inputs: e, backend: t } = r, n = e;
  if (n.length === 1)
    return identity({ inputs: { x: n[0] }, backend: t });
  if (n.length > env().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    const l = Math.floor(n.length / 2), f = addN({ inputs: n.slice(0, l), backend: t }), c = addN({ inputs: n.slice(l), backend: t });
    return addN({ inputs: [f, c], backend: t });
  }
  const s = n.map((l) => l.dtype).reduce((l, f) => upcastType(l, f)), a = n.map((l) => l.shape), u = env().getBool("WEBGL_PACK") ? new AddNPackedProgram(n[0].shape, a) : new AddNProgram(n[0].shape, a);
  return t.runWebGLProgram(u, n, s);
}
const addNConfig = {
  kernelName: AddN,
  backendName: "webgl",
  kernelFunc: addN
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function all(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n, u = s.shape.length, l = parseAxisParam(a, s.shape);
  let f = l;
  const c = getAxesPermutation(f, u);
  let h = s;
  c != null && (h = transpose({ inputs: { x: s }, backend: t, attrs: { perm: c } }), f = getInnerMostAxes(f.length, u)), assertAxesAreInnerMostDims("all", f, u);
  const [d, m] = computeOutAndReduceShapes(h.shape, f), g = sizeFromShape(m), y = reshape({ inputs: { x: h }, backend: t, attrs: { shape: [-1, g] } }), b = reduce(y, y.dtype, "all", t);
  let v;
  if (o) {
    const w = expandShapeToKeepDim(d, l);
    v = reshape({ inputs: { x: b }, backend: t, attrs: { shape: w } });
  } else
    v = reshape({ inputs: { x: b }, backend: t, attrs: { shape: d } });
  return t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(b), c != null && t.disposeIntermediateTensorInfo(h), v;
}
const allConfig = {
  kernelName: All,
  backendName: "webgl",
  kernelFunc: all
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function any(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n, u = s.shape.length, l = parseAxisParam(a, s.shape);
  let f = l;
  const c = getAxesPermutation(f, u);
  let h = s;
  c != null && (h = transpose({ inputs: { x: s }, backend: t, attrs: { perm: c } }), f = getInnerMostAxes(f.length, u)), assertAxesAreInnerMostDims("any", f, u);
  const [d, m] = computeOutAndReduceShapes(h.shape, f), g = sizeFromShape(m), y = reshape({ inputs: { x: h }, backend: t, attrs: { shape: [-1, g] } }), b = reduce(y, y.dtype, "any", t);
  let v;
  if (o) {
    const w = expandShapeToKeepDim(d, l);
    v = reshape({ inputs: { x: b }, backend: t, attrs: { shape: w } });
  } else
    v = reshape({ inputs: { x: b }, backend: t, attrs: { shape: d } });
  return t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(b), c != null && t.disposeIntermediateTensorInfo(h), v;
}
const anyConfig = {
  kernelName: Any,
  backendName: "webgl",
  kernelFunc: any
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ArgMinMaxProgram {
  constructor(e, t, n) {
    this.variableNames = ["A"];
    const { windowSize: s, batchSize: a, outSize: o } = e;
    n || this.variableNames.push("bestIndicesA"), this.outputShape = [a, o];
    const u = t === "max" ? ">" : "<", l = n ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${s}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${u} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ArgMinMaxPackedProgram {
  constructor(e, t, n, s) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, assert$1(e.length > 2, () => `Packed arg${n.charAt(0).toUpperCase() + n.slice(1)} supports only inputs with rank above 2.`);
    const a = e[e.length - 1], o = Math.ceil(a / t);
    this.outputShape = e.slice(0, -1), o > 1 && this.outputShape.push(o), s || this.variableNames.push("bestIndicesA");
    const u = this.outputShape, l = u.length, f = getCoordsDataType(l), c = getChannels("coords", l);
    let h, d;
    if (o === 1) {
      d = l + 1;
      const q = getCoordsDataType(d);
      h = `
        ${q} sourceLocR = ${q}(${c.join()}, 0);
        ++${c[l - 1]};
        ${q} sourceLocG = ${q}(${c.join()}, 0);
        ++${c[l - 2]};
        ${q} sourceLocA = ${q}(${c.join()}, 0);
        --${c[l - 1]};
        ${q} sourceLocB = ${q}(${c.join()}, 0);
        --${c[l - 2]};`;
    } else
      d = l, h = `
        ${f} sourceLocR = coords;
        ++${c[l - 1]};
        ${f} sourceLocG = coords;
        ++${c[l - 2]};
        ${f} sourceLocA = coords;
        --${c[l - 1]};
        ${f} sourceLocB = coords;
        --${c[l - 2]};`;
    const m = ["x", "y", "z", "w", "u", "v"].slice(0, d), g = "." + m[d - 1], y = m.map((q) => "int " + q), b = getChannels("sourceLocR", d - 1).concat("inIdx.r"), v = getChannels("sourceLocG", d - 1).concat("inIdx.g"), w = getChannels("sourceLocB", d - 1).concat("inIdx.b"), I = getChannels("sourceLocA", d - 1).concat("inIdx.a"), T = n === "max" ? "greaterThan" : "lessThan", _ = s ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${v.join()}),
                             getBestIndicesAChannel(${w.join()}),
                             getBestIndicesAChannel(${I.join()})));`, F = `vec4(
            getAChannel(${b.join()}),
            hasNextCol ? getAChannel(${v.join()}) : 0.,
            hasNextRow ? getAChannel(${w.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${I.join()}) : 0.)`, O = s ? "" : `
      float getBestIndicesAChannel(${y.join()}) {
        return getChannel(getBestIndicesA(${m.join()}),
                                          vec2(${m.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${y.join()}) {
        return getChannel(getA(${m.join()}),
                               vec2(${m.slice(-2).join()}));
      }
      ${O}
      void main() {
        ${f} coords = getOutputCoords();
        bool hasNextCol = ${c[l - 1]} < ${u[l - 1] - 1};
        bool hasNextRow = ${c[l - 2]} < ${u[l - 2] - 1};
        ${h}
        ivec4 srcIdx = ivec4(sourceLocR${g}, sourceLocG${g},
          sourceLocB${g}, sourceLocA${g}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${F};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${_}
          vec4 candidate = ${F};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${T}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function argReduce(r, e, t, n = null) {
  let s = e.shape[0], a = e.shape[1];
  n != null && (s = n.shape[0], a = n.shape[1]);
  const o = computeOptimalWindowSize(a), u = { windowSize: o, inSize: a, batchSize: s, outSize: Math.ceil(a / o) }, l = new ArgMinMaxProgram(u, t, n == null), f = [e];
  n != null && f.push(n);
  const c = r.runWebGLProgram(l, f, "int32");
  if (c.shape[1] === 1)
    return c;
  const h = argReduce(r, e, t, c);
  return r.disposeIntermediateTensorInfo(c), h;
}
function argReducePacked(r, e, t, n = null) {
  const s = n != null ? n.shape : e.shape, a = s[s.length - 1], o = computeOptimalWindowSize(a), u = new ArgMinMaxPackedProgram(s, o, t, n == null), l = n == null ? [e] : [e, n], f = r.runWebGLProgram(u, l, "int32");
  if (f.shape.length === e.shape.length) {
    const c = argReducePacked(r, e, t, f);
    return r.disposeIntermediateTensorInfo(f), c;
  }
  return f;
}
function argMinMaxReduce(r, e, t, n) {
  const s = [t];
  if (assertAxesAreInnerMostDims("arg" + n.charAt(0).toUpperCase() + n.slice(1), s, e.shape.length), !env().getBool("WEBGL_PACK_REDUCE") || e.shape.length <= 2) {
    const a = [], o = r.texData.get(e.dataId), u = o !== null && o.isPacked;
    let l = e;
    u && (l = r.unpackTensor(e), a.push(l));
    const [f, c] = computeOutAndReduceShapes(l.shape, s), h = sizeFromShape(c), d = reshape({ inputs: { x: l }, backend: r, attrs: { shape: [-1, h] } });
    a.push(d);
    const m = argReduce(r, d, n);
    a.push(m);
    const g = reshape({ inputs: { x: m }, backend: r, attrs: { shape: f } });
    return a.forEach((y) => r.disposeIntermediateTensorInfo(y)), g;
  }
  return argReducePacked(r, e, n);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function argMax(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a } = n;
  let o = parseAxisParam(a, s.shape);
  const u = getAxesPermutation(o, s.shape.length);
  let l = s;
  const f = [];
  u != null && (l = transpose({ inputs: { x: s }, backend: t, attrs: { perm: u } }), f.push(l), o = getInnerMostAxes(o.length, l.shape.length)), assertAxesAreInnerMostDims("argMax", [o[0]], l.shape.length);
  const c = argMinMaxReduce(t, l, o[0], "max");
  return f.forEach((h) => t.disposeIntermediateTensorInfo(h)), c;
}
const argMaxConfig = {
  kernelName: ArgMax,
  backendName: "webgl",
  kernelFunc: argMax
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function argMin(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a } = n;
  let o = parseAxisParam(a, s.shape);
  const u = getAxesPermutation(o, s.shape.length);
  let l = s;
  const f = [];
  u != null && (l = transpose({ inputs: { x: s }, backend: t, attrs: { perm: u } }), f.push(l), o = getInnerMostAxes(o.length, l.shape.length)), assertAxesAreInnerMostDims("argMin", [o[0]], l.shape.length);
  const c = argMinMaxReduce(t, l, o[0], "min");
  return f.forEach((h) => t.disposeIntermediateTensorInfo(h)), c;
}
const argMinConfig = {
  kernelName: ArgMin,
  backendName: "webgl",
  kernelFunc: argMin
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ASIN = CHECK_NAN_SNIPPET$1 + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`, asin = unaryKernelFunc({ opSnippet: ASIN }), asinConfig = {
  kernelName: Asin,
  backendName: "webgl",
  kernelFunc: asin
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ASINH = CHECK_NAN_SNIPPET$1 + "return log(x + sqrt(x * x + 1.0));", asinh = unaryKernelFunc({ opSnippet: ASINH }), asinhConfig = {
  kernelName: Asinh,
  backendName: "webgl",
  kernelFunc: asinh
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ATAN = CHECK_NAN_SNIPPET$1 + `
  return atan(x);
`, atan = unaryKernelFunc({ opSnippet: ATAN }), atanConfig = {
  kernelName: Atan,
  backendName: "webgl",
  kernelFunc: atan
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ATAN2 = CHECK_NAN_SNIPPET + `
  return atan(a, b);
`, ATAN2_PACKED = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + CHECK_NAN_SNIPPET_PACKED + `
  return result;
`, atan2 = binaryKernelFunc({ opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED }), atan2Config = {
  kernelName: Atan2,
  backendName: "webgl",
  kernelFunc: atan2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ATANH = CHECK_NAN_SNIPPET$1 + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`, atanh = unaryKernelFunc({ opSnippet: ATANH }), atanhConfig = {
  kernelName: Atanh,
  backendName: "webgl",
  kernelFunc: atanh
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Pool2DProgram {
  constructor(e, t, n, s = !1, a = !1) {
    if (this.variableNames = ["x"], t === "avg" && n)
      throw new Error("Cannot compute positions for average pool.");
    const o = e.filterWidth, u = e.strideHeight, l = e.strideWidth, f = e.dilationHeight, c = e.dilationWidth, h = e.effectiveFilterHeight, d = e.effectiveFilterWidth, m = e.padInfo.top, g = e.padInfo.left;
    this.outputShape = e.outShape;
    const y = t === "avg", b = `((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`, v = `(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;
    let w = "0.0";
    if (y || (w = "-1.0 / 1e-20"), n) {
      const q = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${u}, ${l});
        const ivec2 pads = ivec2(${m}, ${g});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${f}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${q} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${s ? a ? b : v : `wR * ${d} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const I = "max";
    let T = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (T = "avgValue / max(count, 1.0)");
    const _ = Math.floor(o / 4) * 4, F = o % 4, O = `
      if (${y}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${I}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${u}, ${l});
      const ivec2 pads = ivec2(${m}, ${g});
      const float initializationValue = ${w};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${w});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${f}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${_}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${O}
          }

          int xC = xCCorner + ${_};
          if (${F === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${O}
          } else if (${F === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${O}
          } else if (${F === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${O}
          }
        }
        setOutput(${T});
      }
    `;
  }
}
class Pool3DProgram {
  constructor(e, t, n, s = !1, a = !1) {
    if (this.variableNames = ["x"], t === "avg" && n)
      throw new Error("Cannot compute positions for average pool.");
    const o = e.filterWidth, u = e.strideDepth, l = e.strideHeight, f = e.strideWidth, c = e.dilationDepth, h = e.dilationHeight, d = e.dilationWidth, m = e.effectiveFilterDepth, g = e.effectiveFilterHeight, y = e.effectiveFilterWidth, b = e.padInfo.front, v = e.padInfo.top, w = e.padInfo.left;
    this.outputShape = e.outShape;
    const I = t === "avg";
    let T = "0.0";
    if (I || (T = "-1.0 / 1e-20"), n) {
      const H = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${u}, ${l}, ${f});
        const ivec3 pads = ivec3(${b}, ${v}, ${w});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${m};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${g};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${y};
                  wC += ${d}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${H} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${s ? a ? `(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `wD * ${g} * ${y} +
                      wR * ${y} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const _ = "max";
    let F = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (F = "avgValue / max(count, 1.0)");
    const O = Math.floor(o / 4) * 4, q = o % 4, V = `
      if (${I}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${_}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${u}, ${l}, ${f});
      const ivec3 pads = ivec3(${b}, ${v}, ${w});
      const float initializationValue = ${T};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${T});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${m};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${g};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${O}; wC += 4) {
              int xC = xCCorner + wC * ${d};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                getValue(batch, xD, xR, xC + 3 * ${d}, ch)
              );

              ${V}
            }

            int xC = xCCorner + ${O};
            if (${q === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${V}
            } else if (${q === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                initializationValue,
                initializationValue
              );

              ${V}
            } else if (${q === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                initializationValue
              );

              ${V}
            }
          }
        }
        setOutput(${F});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e;
  assertNotComplex(s, "avgPool");
  const { filterSize: a, strides: o, pad: u, dimRoundingMode: l } = n, f = 1;
  assert$1(eitherStridesOrDilationsAreOne(o, f), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${f}'`);
  const c = computePool2DInfo(s.shape, a, o, f, u, l);
  if (c.filterWidth === 1 && c.filterHeight === 1 && arraysEqual(c.inShape, c.outShape))
    return identity({ inputs: { x: s }, backend: t });
  const h = new Pool2DProgram(c, "avg", !1);
  return t.runWebGLProgram(h, [s], "float32");
}
const avgPoolConfig = {
  kernelName: AvgPool,
  backendName: "webgl",
  kernelFunc: avgPool
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool3D(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { filterSize: a, strides: o, pad: u, dimRoundingMode: l, dataFormat: f } = n, c = [1, 1, 1], h = computePool3DInfo(s.shape, a, o, c, u, l, f), d = new Pool3DProgram(h, "avg", !1);
  return t.runWebGLProgram(d, [s], "float32");
}
const avgPool3DConfig = {
  kernelName: AvgPool3D,
  backendName: "webgl",
  kernelFunc: avgPool3D
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AvgPool2DBackpropProgram {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    const t = e.filterHeight, n = e.filterWidth, s = e.strideHeight, a = e.strideWidth, o = e.dilationHeight, u = e.dilationWidth, l = e.effectiveFilterHeight, f = e.effectiveFilterWidth, c = l - 1 - e.padInfo.top, h = f - 1 - e.padInfo.left, d = 1 / (t * n);
    this.userCode = `
      const ivec2 pads = ivec2(${c}, ${h});
      const float avgMultiplier = float(${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${o}) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${f};
            wC+= ${u}) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class AvgPool3DBackpropProgram {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    const t = e.filterDepth, n = e.filterHeight, s = e.filterWidth, a = e.strideDepth, o = e.strideHeight, u = e.strideWidth, l = e.dilationDepth, f = e.dilationHeight, c = e.dilationWidth, h = e.effectiveFilterDepth, d = e.effectiveFilterHeight, m = e.effectiveFilterWidth, g = h - 1 - e.padInfo.front, y = d - 1 - e.padInfo.top, b = m - 1 - e.padInfo.left, v = 1 / (t * n * s);
    this.userCode = `
      const ivec3 pads = ivec3(${g}, ${y}, ${b});
      const float avgMultiplier = float(${v});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${a}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${d};
              wR += ${f}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${u}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool3DGrad(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, input: a } = e, o = a, { filterSize: u, strides: l, pad: f, dimRoundingMode: c } = n, h = [1, 1, 1], d = computePool3DInfo(o.shape, u, l, h, f, c), m = new AvgPool3DBackpropProgram(d);
  return t.runWebGLProgram(m, [s], o.dtype);
}
const avgPool3DGradConfig = {
  kernelName: AvgPool3DGrad,
  backendName: "webgl",
  kernelFunc: avgPool3DGrad
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPoolGrad(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, input: a } = e, o = a;
  assertNotComplex([s, a], "avgPoolGrad");
  const { filterSize: u, strides: l, pad: f } = n, c = computePool2DInfo(o.shape, u, l, 1, f), h = new AvgPool2DBackpropProgram(c);
  return t.runWebGLProgram(h, [s], o.dtype);
}
const avgPoolGradConfig = {
  kernelName: AvgPoolGrad,
  backendName: "webgl",
  kernelFunc: avgPoolGrad
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function batchMatMul(r) {
  const { inputs: e, backend: t, attrs: n } = r, { a: s, b: a } = e, { transposeA: o, transposeB: u } = n;
  return batchMatMulImpl({ a: s, b: a, transposeA: o, transposeB: u, backend: t });
}
const batchMatMulConfig = {
  kernelName: BatchMatMul,
  backendName: "webgl",
  kernelFunc: batchMatMul
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BatchNormProgram {
  constructor(e, t, n, s, a, o) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], assertAndGetBroadcastShape(e, t), assertAndGetBroadcastShape(e, n);
    let u = "0.0";
    s != null && (assertAndGetBroadcastShape(e, s), this.variableNames.push("offset"), u = "getOffsetAtOutCoords()");
    let l = "1.0";
    a != null && (assertAndGetBroadcastShape(e, a), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${u};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${o}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BatchNormPackedProgram {
  constructor(e, t, n, s, a, o) {
    this.packedInputs = !0, this.packedOutput = !0, this.variableNames = ["x", "mean", "variance"], assertAndGetBroadcastShape(e, t), assertAndGetBroadcastShape(e, n);
    let u = "vec4(0.0)";
    s != null && (assertAndGetBroadcastShape(e, s), this.variableNames.push("offset"), u = "getOffsetAtOutCoords()");
    let l = "vec4(1.0)";
    a != null && (assertAndGetBroadcastShape(e, a), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        vec4 offset = ${u};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${o}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const batchNorm = ({ inputs: r, backend: e, attrs: t }) => {
  const { x: n, mean: s, variance: a, offset: o, scale: u } = r;
  assert$1(s.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), assert$1(o == null || s.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), assert$1(u == null || s.shape.length === u.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: l } = t;
  l == null && (l = 1e-3);
  const f = [n, s, a];
  let c = null;
  o != null && (c = o.shape, f.push(o));
  let h = null;
  u != null && (h = u.shape, f.push(u));
  const d = env().getBool("WEBGL_PACK_NORMALIZATION") ? new BatchNormPackedProgram(n.shape, s.shape, a.shape, c, h, l) : new BatchNormProgram(n.shape, s.shape, a.shape, c, h, l);
  return e.runWebGLProgram(d, f, f[0].dtype);
}, batchNormConfig = {
  kernelName: FusedBatchNorm,
  backendName: "webgl",
  kernelFunc: batchNorm
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SliceProgram {
  constructor(e) {
    this.variableNames = ["source"], this.outputShape = e, this.rank = e.length;
    const t = getCoordsDataType(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const n = getCoords$1(this.rank);
    let s;
    const a = e.map((o, u) => `sourceLoc.${coords[u]} = start[${u}] + coords.${coords[u]};`);
    s = `
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${a.join(`
`)}
      `, this.userCode = `
      void main() {
        ${s}
        setOutput(getSource(${n}));
      }
    `;
  }
}
const coords = ["x", "y", "z", "w", "u", "v"];
function getCoords$1(r) {
  if (r === 1)
    return "sourceLoc";
  if (r <= 6)
    return coords.slice(0, r).map((e) => "sourceLoc." + e).join(",");
  throw Error(`Slicing for rank ${r} is not yet supported`);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SlicePackedProgram {
  constructor(e) {
    this.variableNames = ["source"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e, this.rank = e.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const t = getCoordsDataType(this.rank), n = getChannels("coords", this.rank), s = getChannels("sourceLoc", this.rank), a = this.rank === 1 ? "sourceLoc" : `vec2(${s.slice(-2).join()})`, o = `getChannel(getSource(${s.join()}), ${a})`, u = `
      result.x = ${o};
      if (++${n[this.rank - 1]} < ${e[this.rank - 1]}) {
        ++${s[this.rank - 1]};
        result.y = ${o};
        --${s[this.rank - 1]};
      }
    `, l = this.rank === 1 ? "" : `
      --${n[this.rank - 1]};
      if (++${n[this.rank - 2]} < ${e[this.rank - 2]}) {
        ++${s[this.rank - 2]};
        result.z = ${o};
        if (++${n[this.rank - 1]} < ${e[this.rank - 1]}) {
          ++${s[this.rank - 1]};
          result.w = ${o};
        }
      }
    `, f = this.rank <= 4 ? `sourceLoc = coords +
            ${t}(${e.map((c, h) => `start[${h}]`).join()});` : e.map((c, h) => `${s[h]} = ${n[h]} + start[${h}];`).join(`
`);
    this.userCode = `
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${f}
        vec4 result = vec4(0.);
        ${u}
        ${l}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function shallowSlice(r, e, t, n) {
  const s = n.texData.get(r.dataId), a = n.makeTensorInfo(t, r.dtype), o = n.texData.get(a.dataId);
  Object.assign(o, s), o.refCount = 1, o.shape = t, o.dtype = r.dtype;
  let u = computeFlatOffset(e, computeStrides(r.shape));
  s.slice && (u += s.slice.flatOffset), o.slice = {
    flatOffset: u,
    // Point to the original dataId, which is used to do ref counting.
    origDataId: s.slice && s.slice.origDataId || r.dataId
  };
  const l = n.dataRefCount.get(o.slice.origDataId) || 1;
  return n.dataRefCount.set(o.slice.origDataId, l + 1), a;
}
function slice(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { begin: a, size: o } = n, [u, l] = parseSliceParams(s, a, o);
  if (assertParamsValid(s, u, l), sizeFromShape(l) === 0)
    return t.makeTensorInfo(l, s.dtype, []);
  if (t.shouldExecuteOnCPU([s]) || s.dtype === "string") {
    const h = t.texData.get(s.dataId), d = sliceImplCPU(h.values, u, l, s.shape, s.dtype);
    return t.makeTensorInfo(l, s.dtype, d);
  }
  const { isPacked: f } = t.texData.get(s.dataId), c = isSliceContinous(s.shape, u, l);
  if (f || !c) {
    const h = env().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new SlicePackedProgram(l) : new SliceProgram(l), d = [u];
    return t.runWebGLProgram(h, [s], s.dtype, d);
  }
  return t.uploadToGPU(s.dataId), shallowSlice(s, u, l, t);
}
const sliceConfig = {
  kernelName: Slice,
  backendName: "webgl",
  kernelFunc: slice
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const batchToSpaceND = (r) => {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { blockShape: a, crops: o } = n;
  assert$1(s.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  const u = a.reduce((w, I) => w * I), l = getReshaped(s.shape, a, u), f = getPermuted(l.length, a.length), c = getReshapedPermuted(s.shape, a, u), h = getSliceBeginCoords(o, a.length), d = getSliceSize(c, o, a.length), m = [], g = reshape({ inputs: { x: s }, backend: t, attrs: { shape: l } }), y = transpose({ inputs: { x: g }, backend: t, attrs: { perm: f } }), b = reshape({
    inputs: { x: y },
    backend: t,
    attrs: { shape: c }
  }), v = slice({
    inputs: { x: b },
    backend: t,
    attrs: { begin: h, size: d }
  });
  return m.push(g), m.push(y), m.push(b), m.forEach((w) => t.disposeIntermediateTensorInfo(w)), v;
}, batchToSpaceNDConfig = {
  kernelName: BatchToSpaceND,
  backendName: "webgl",
  kernelFunc: batchToSpaceND
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bincount(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, weights: a } = e, { size: o } = n, u = t.readSync(s.dataId), l = t.readSync(a.dataId), f = bincountImplCPU(u, l, a.dtype, a.shape, o);
  return t.makeTensorInfo([o], a.dtype, f);
}
const bincountConfig = {
  kernelName: Bincount,
  backendName: "webgl",
  kernelFunc: bincount
};
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BITWISEAND = `
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`, BITWISEAND_UNPACKED = `
  return float(int(a.r) & int(b.r));
`;
function bitwiseAnd(r) {
  const { inputs: e, backend: t } = r, { a: n, b: s } = e, a = env().getBool("WEBGL_PACK_BINARY_OPERATIONS"), o = env().getNumber("WEBGL_VERSION");
  if (t.shouldExecuteOnCPU([n, s]) || o === 1) {
    const l = t.texData.get(n.dataId).values, f = t.texData.get(s.dataId).values, [c, h] = bitwiseAndImplCPU(n.shape, s.shape, l, f, n.dtype), d = t.makeTensorInfo(h, n.dtype), m = t.texData.get(d.dataId);
    return m.values = c, d;
  }
  let u;
  return a ? u = new BinaryOpPackedProgram(BITWISEAND, n.shape, s.shape, !1) : u = new BinaryOpProgram(BITWISEAND_UNPACKED, n.shape, s.shape), t.runWebGLProgram(u, [n, s], n.dtype);
}
const bitwiseAndConfig = {
  kernelName: BitwiseAnd,
  backendName: "webgl",
  kernelFunc: bitwiseAnd
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function broadcastArgs(r) {
  const { inputs: e, backend: t } = r, { s0: n, s1: s } = e, a = t.readSync(n.dataId), o = t.readSync(s.dataId), u = assertAndGetBroadcastShape(Array.from(a), Array.from(o));
  return t.makeTensorInfo([u.length], "int32", Int32Array.from(u));
}
const broadcastArgsConfig = {
  kernelName: BroadcastArgs,
  backendName: "webgl",
  kernelFunc: broadcastArgs
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NOT_EQUAL = "return float(a != b);", notEqual = binaryKernelFunc({ opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: "bool" }), notEqualConfig = {
  kernelName: NotEqual,
  backendName: "webgl",
  kernelFunc: notEqual
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function real(r) {
  const { inputs: e, backend: t } = r, { input: n } = e, s = t.texData.get(n.dataId);
  return identity({ inputs: { x: s.complexTensorInfos.real }, backend: t });
}
const realConfig = {
  kernelName: Real,
  backendName: "webgl",
  kernelFunc: real
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TO_INT = "return float(int(x));";
function int(r, e) {
  const t = new UnaryOpProgram(r.shape, TO_INT), n = e.runWebGLProgram(t, [r], "int32");
  return { dataId: n.dataId, shape: n.shape, dtype: n.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cast(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { dtype: a } = n;
  if (a === "complex64") {
    if (s.dtype === "complex64")
      return identity({ inputs: { x: s }, backend: t });
    const o = zeros$2(s.shape), u = cast({ inputs: { x: s }, backend: t, attrs: { dtype: "float32" } }), l = complex({ inputs: { real: u, imag: o }, backend: t });
    return o.dispose(), t.disposeIntermediateTensorInfo(u), l;
  }
  if (s.dtype === "complex64") {
    const o = real({ inputs: { input: s }, backend: t }), u = cast({ inputs: { x: o }, backend: t, attrs: { dtype: a } });
    return t.disposeIntermediateTensorInfo(o), u;
  }
  if (!hasEncodingLoss(s.dtype, a)) {
    const o = identity({ inputs: { x: s }, backend: t });
    return { dataId: o.dataId, shape: o.shape, dtype: a };
  }
  if (t.shouldExecuteOnCPU([s])) {
    const o = t.texData.get(s.dataId).values, [u, l, f] = castImplCPU(o, s.shape, s.dtype, a);
    return t.makeTensorInfo(u, l, f);
  }
  if (a === "int32")
    return int(s, t);
  if (a === "bool") {
    const o = t.makeTensorInfo([], "bool", getTypedArrayFromDType("bool", 1)), l = notEqual({ inputs: { a: s, b: o }, backend: t });
    return t.disposeIntermediateTensorInfo(o), l;
  }
  throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${a}`);
}
const castConfig = {
  kernelName: Cast,
  backendName: "webgl",
  kernelFunc: cast
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CEIL = "return ceil(x);", ceil = unaryKernelFunc({ opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU }), ceilConfig = {
  kernelName: Ceil,
  backendName: "webgl",
  kernelFunc: ceil
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ClipProgram {
  constructor(e) {
    this.variableNames = ["A"], this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = e, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ClipPackedProgram {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = e, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function clipByValue(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { clipValueMin: a, clipValueMax: o } = n;
  let u;
  env().getBool("WEBGL_PACK_CLIP") ? u = new ClipPackedProgram(s.shape) : u = new ClipProgram(s.shape);
  const l = [[a], [o]];
  return t.runWebGLProgram(u, [s], s.dtype, l);
}
const clipByValueConfig = {
  kernelName: ClipByValue,
  backendName: "webgl",
  kernelFunc: clipByValue
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ComplexAbsProgram {
  constructor(e) {
    this.variableNames = ["real", "imag"], this.outputShape = e, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function makeComplexComponentTensorInfo(r, e) {
  return {
    dataId: e.dataId,
    dtype: e.dtype,
    shape: r.shape
  };
}
function complexAbs(r) {
  const { inputs: e, backend: t } = r, { x: n } = e, s = t.texData.get(n.dataId), a = new ComplexAbsProgram(n.shape), o = [
    makeComplexComponentTensorInfo(n, s.complexTensorInfos.real),
    makeComplexComponentTensorInfo(n, s.complexTensorInfos.imag)
  ];
  return t.runWebGLProgram(a, o, o[0].dtype);
}
const complexAbsConfig = {
  kernelName: ComplexAbs,
  backendName: "webgl",
  kernelFunc: complexAbs
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ConcatProgram {
  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
  constructor(e) {
    this.outputShape = [], this.outputShape = computeOutShape$1(
      e,
      1
      /* axis */
    ), this.variableNames = e.map((o, u) => `T${u}`);
    const t = new Array(e.length - 1);
    t[0] = e[0][1];
    for (let o = 1; o < t.length; o++)
      t[o] = t[o - 1] + e[o][1];
    const n = [`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];
    for (let o = 1; o < t.length; o++) {
      const u = t[o - 1];
      n.push(`else if (yC < ${t[o]}) setOutput(getT${o}(yR, yC-${u}));`);
    }
    const s = t.length, a = t[t.length - 1];
    n.push(`else setOutput(getT${s}(yR, yC-${a}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${n.join(`
        `)}
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ConcatPackedProgram {
  constructor(e, t) {
    this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = computeOutShape$1(e, t);
    const n = this.outputShape, s = n.length, a = getCoordsDataType(s), o = getChannels("coords", s), u = ["x", "y", "z", "w", "u", "v"].slice(0, s);
    this.variableNames = e.map((y, b) => `T${b}`);
    const l = new Array(e.length - 1);
    l[0] = e[0][t];
    for (let y = 1; y < l.length; y++)
      l[y] = l[y - 1] + e[y][t];
    const f = u[t], c = u.slice(-2), h = u.join();
    let d = `if (${f} < ${l[0]}) {
        return getChannel(
            getT0(${h}), vec2(${c.join()}));
        }`;
    for (let y = 1; y < l.length; y++) {
      const b = l[y - 1];
      d += `
        if (${f} < ${l[y]}  && ${f} >= ${l[y - 1]}) {
          return getChannel(
            getT${y}(${shiftedChannels(u, f, b)}),
            vec2(${shiftedChannels(c, f, b)}));
        }`;
    }
    const m = l.length, g = l[l.length - 1];
    d += `
        return getChannel(
          getT${m}(${shiftedChannels(u, f, g)}),
          vec2(${shiftedChannels(c, f, g)}));`, this.userCode = `
      float getValue(${u.map((y) => "int " + y)}) {
        ${d}
      }

      void main() {
        ${a} coords = getOutputCoords();
        vec4 result = vec4(getValue(${o}), 0., 0., 0.);

        ${o[s - 1]} = ${o[s - 1]} + 1;
        if (${o[s - 1]} < ${n[s - 1]}) {
          result.g = getValue(${o});
        }

        ${o[s - 2]} = ${o[s - 2]} + 1;
        if (${o[s - 2]} < ${n[s - 2]}) {
          result.a = getValue(${o});
        }

        ${o[s - 1]} = ${o[s - 1]} - 1;
        if (${o[s - 2]} < ${n[s - 2]} &&
            ${o[s - 1]} < ${n[s - 1]}) {
          result.b = getValue(${o});
        }
        setOutput(result);
      }
    `;
  }
}
function shiftedChannels(r, e, t) {
  const n = r.indexOf(e);
  return r.map((a, o) => o === n ? `${a} - ${t}` : a).join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function imag(r) {
  const { inputs: e, backend: t } = r, { input: n } = e, s = t.texData.get(n.dataId);
  return identity({ inputs: { x: s.complexTensorInfos.imag }, backend: t });
}
const imagConfig = {
  kernelName: Imag,
  backendName: "webgl",
  kernelFunc: imag
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function concatImpl(r, e, t) {
  const n = r[0].dtype;
  if (n === "complex64") {
    const m = r.map((w) => real({ inputs: { input: w }, backend: t })), g = r.map((w) => imag({ inputs: { input: w }, backend: t })), y = concatImpl(m, e, t), b = concatImpl(g, e, t), v = complex({ inputs: { real: y, imag: b }, backend: t });
    return m.forEach((w) => t.disposeIntermediateTensorInfo(w)), g.forEach((w) => t.disposeIntermediateTensorInfo(w)), t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(b), v;
  }
  let s = t.shouldExecuteOnCPU(r);
  if (n === "string" && (s = !0), s) {
    const m = r.map((T) => {
      const F = [-1, sizeFromShape(T.shape.slice(e))];
      return reshape({ inputs: { x: T }, backend: t, attrs: { shape: F } });
    }), g = m.map((T) => ({ vals: t.readSync(T.dataId), shape: T.shape })), y = computeOutShape$1(
      m.map((T) => T.shape),
      1
      /* axis */
    ), b = m[0].shape[0] === 1, v = concatImplCPU(g, y, n, b), w = computeOutShape$1(r.map((T) => T.shape), e), I = t.makeTensorInfo(w, n, v);
    return m.forEach((T) => t.disposeIntermediateTensorInfo(T)), I;
  }
  const a = r.filter((m) => sizeFromShape(m.shape) > 0), o = env().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && a[0].shape.length > 1;
  if (a.length === 1) {
    const m = o ? new UnaryOpProgram(r[0].shape, CLONE) : new UnaryOpPackedProgram(r[0].shape, CLONE);
    return t.runWebGLProgram(m, r, n);
  }
  const u = env().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (a.length > u) {
    const m = [];
    for (let y = 0; y < a.length; y += u) {
      const b = a.slice(y, y + u);
      m.push(concatImpl(b, e, t));
    }
    const g = concatImpl(m, e, t);
    for (const y of m)
      t.disposeIntermediateTensorInfo(y);
    return g;
  }
  if (o) {
    const m = new ConcatPackedProgram(a.map((g) => g.shape), e);
    return t.runWebGLProgram(m, a, n);
  }
  const { tensors2D: l, outShape: f } = computeTensors2D(a, e, t), c = new ConcatProgram(l.map((m) => m.shape)), h = t.runWebGLProgram(c, l, n);
  l.forEach((m) => t.disposeIntermediateTensorInfo(m));
  const d = reshape({ inputs: { x: h }, attrs: { shape: f }, backend: t });
  return t.disposeIntermediateTensorInfo(h), d;
}
function computeTensors2D(r, e, t) {
  const n = computeOutShape$1(r.map((a) => a.shape), e);
  return { tensors2D: r.map((a) => reshape({
    inputs: { x: a },
    attrs: { shape: [-1, sizeFromShape(a.shape.slice(e))] },
    backend: t
  })), outShape: n };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function concat(r) {
  const { inputs: e, backend: t, attrs: n } = r, { axis: s } = n, a = parseAxisParam(s, e[0].shape)[0], o = e.map((f) => f.shape);
  assertParamsConsistent(o, a);
  const u = computeOutShape$1(e.map((f) => f.shape), a);
  if (sizeFromShape(u) === 0)
    return t.makeTensorInfo(u, e[0].dtype, []);
  const l = e.filter((f) => sizeFromShape(f.shape) > 0);
  return l.length === 1 ? identity({ inputs: { x: l[0] }, backend: t }) : concatImpl(l, a, t);
}
const concatConfig = {
  kernelName: Concat,
  backendName: "webgl",
  kernelFunc: concat
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Conv2DProgram {
  constructor(e, t = !1, n = null, s = !1, a = !1) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    const o = e.padInfo.top, u = e.padInfo.left, l = e.strideHeight, f = e.strideWidth, c = e.dilationHeight, h = e.dilationWidth, d = e.filterHeight, m = e.filterWidth, g = Math.floor(e.inChannels / 4) * 4, y = e.inChannels % 4, b = e.dataFormat === "channelsLast", v = b ? 1 : 2, w = b ? 2 : 3, I = b ? 3 : 1;
    let T = "", _ = "";
    n && (s ? T = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : a ? T = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : T = `
          float activation(float x) {
            ${n}
          }
        `, _ = "result = activation(result);");
    const F = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), a && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${T}

      const ivec2 strides = ivec2(${l}, ${f});
      const ivec2 pads = ivec2(${o}, ${u});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${I}];

        ivec2 xRCCorner =
            ivec2(coords[${v}], coords[${w}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${d}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${m}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${g}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${b}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${y === 1}) {

              if (${b}) {
                dotProd +=
                    getX(batch, xR, xC, ${g}) *
                    getW(wR, wC, ${g}, d2);
              } else {
                dotProd +=
                    getX(batch, ${g}, xR, xC) *
                    getW(wR, wC, ${g}, d2);
              }

            } else if (${y === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${g}, d2),
                getW(wR, wC, ${g} + 1, d2)
              );

              if (${b}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${g}),
                  getX(batch, xR, xC, ${g} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${g}, xR, xC),
                  getX(batch, ${g} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${y === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${g}, d2),
                getW(wR, wC, ${g} + 1, d2),
                getW(wR, wC, ${g} + 2, d2)
              );

              if (${b}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${g}),
                  getX(batch, xR, xC, ${g} + 1),
                  getX(batch, xR, xC, ${g} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${g}, xR, xC),
                  getX(batch, ${g} + 1, xR, xC),
                  getX(batch, ${g} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${F}
        ${_}
        setOutput(result);
      }
    `;
  }
}
class Conv3DProgram {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    const t = e.padInfo.front, n = e.padInfo.top, s = e.padInfo.left, a = e.strideDepth, o = e.strideHeight, u = e.strideWidth, l = e.dilationDepth, f = e.dilationHeight, c = e.dilationWidth, h = e.filterDepth, d = e.filterHeight, m = e.filterWidth, g = Math.floor(e.inChannels / 4) * 4, y = e.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${a}, ${o}, ${u});
      const ivec3 pads = ivec3(${t}, ${n}, ${s});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d}; wR++) {
            int xR = xRCorner + wR * ${f};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${g}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${y === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${g}) *
                  getW(wF, wR, wC, ${g}, d2);
              } else if (${y === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${g}),
                  getX(batch, xF, xR, xC, ${g} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${g}, d2),
                  getW(wF, wR, wC, ${g} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${y === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${g}),
                  getX(batch, xF, xR, xC, ${g} + 1),
                  getX(batch, xF, xR, xC, ${g} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${g}, d2),
                  getW(wF, wR, wC, ${g} + 1, d2),
                  getW(wF, wR, wC, ${g} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Conv2DPackedProgram {
  constructor(e, t = !1, n = null, s = !1, a = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = e.outShape, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
    const o = e.padInfo.left, u = e.strideWidth, l = e.dilationWidth, f = e.filterHeight, c = e.filterWidth, h = c;
    let d = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let b = 0; b < c; b++)
      d += `
           vec4 xTexelC${b * 2};
           int xTexelC${b * 2}Ready;
           vec4 xTexelC${b * 2 + 1};
           int xTexelC${b * 2 + 1}Ready;
           vec4 xC${b};`;
    d += `
     for (int r = 0; r < ${f}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;
    for (let b = 0; b < c; b++)
      d += `
           xTexelC${b * 2} = vec4(0.0);
           xTexelC${b * 2}Ready = 0;
           xTexelC${b * 2 + 1} = vec4(0.0);
           xTexelC${b * 2 + 1}Ready = 0;
           xC${b} = vec4(0.0);`;
    d += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let b = 0; b < (h + 1) / 2; b++) {
      const v = b * 2;
      if (d += `
           xC = xCCorner + ${v * l};
           `, u === 1) {
        if (v < c && (o % 2 === 1 ? (d += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${v}Ready == 0) {
                   xTexelC${v} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${v}.zw = vec2(0.0);
                   }
                   xTexelC${v}Ready = 1;
                 }
               `, l === 1 && v > 0 ? d += `
                 xC${v} = vec4(xTexelC${v - 2}.zw, xTexelC${v}.xy);
                 ` : d += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${v} = vec4(previous.zw, xTexelC${v}.xy);
                   } else {
                     xC${v} = vec4(0.0, 0.0, xTexelC${v}.xy);
                   }
                   `) : d += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${v}Ready == 0) {
                   xTexelC${v} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${v}.zw = vec2(0.0);
                   }
                   xTexelC${v}Ready = 1;
                 }

                 xC${v} = xTexelC${v};
                 `, v + 1 < c)) {
          const w = o % 2 === 0 ? nearestLargerEven(l) : l;
          l % 2 === 0 && o % 2 === 1 || l % 2 !== 0 && o % 2 !== 1 ? (d += `
                   xCOffset = xC + imod(pads[1], 2) + ${w};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${v + 1}Ready == 0) {
                     xTexelC${v + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${v + 1}.zw = vec2(0.0);
                     }
                     xTexelC${v + 1}Ready = 1;
                   }
                   `, l > 1 ? d += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${v + 1} = vec4(previous.zw, xTexelC${v + 1}.xy);
                     } else {
                      xC${v + 1} = vec4(0.0, 0.0, xTexelC${v + 1}.xy);
                     }
                     ` : d += `
                     xC${v + 1} = vec4(xTexelC${v}.zw, xTexelC${v + 1}.xy);
                     `) : w === 1 ? d += `
                     xC${v + 1} = xTexelC${v};
                     ` : d += `
                     xCOffset = xC + ${w};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${v + 1}Ready == 0) {
                       xTexelC${v + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${v + 1}.zw = vec2(0.0);
                       }
                       xTexelC${v + 1}Ready = 1;
                     }

                     xC${v + 1} = xTexelC${v + 1};
                     `;
        }
      } else
        v < c && (o % 2 === 1 ? (d += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${v}Ready == 0) {
                   xTexelC${v} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${v}.zw = vec2(0.0);
                   }
                   xTexelC${v}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${v + 1}Ready == 0) {
                   xTexelC${v + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${v + 1}.zw = vec2(0.0);
                   }
                   xTexelC${v + 1}Ready = 1;
                 }

                 xC${v} = vec4(xTexelC${v}.zw, xTexelC${v + 1}.zw);
               `, v + 1 < c && (d += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${v + 1} = vec4(xTexelC${v + 1}.xy, final.xy);
                 `)) : (d += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${v}Ready == 0) {
                   xTexelC${v} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${v}.zw = vec2(0.0);
                   }
                   xTexelC${v}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${v + 1}Ready == 0) {
                   xTexelC${v + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${v + 1}.zw = vec2(0.);
                   }
                   xTexelC${v + 1}Ready = 1;
                 }

                 xC${v} = vec4(
                   xTexelC${v}.xy, xTexelC${v + 1}.xy);
               `, v + 1 < c && (d += `
                   xC${v + 1} = vec4(xTexelC${v}.zw, xTexelC${v + 1}.zw);
                 `)));
      v < c && (d += `
             wTexel = getW(r, ${v}, d1, d2);
             dotProd += xC${v}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${v}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, v + 1 < c && (d += `
               wTexel = getW(r, ${v + 1}, d1, d2);
               dotProd += xC${v + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${v + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    d += `
     }
   `, d += `
     }
   `, d += `
     }
   `;
    let m = "", g = "";
    n && (s ? m = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${n}
         }` : a ? m = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${n}
         }` : m = `vec4 activation(vec4 x) {
           ${n}
         }`, g = "result = activation(result);");
    const y = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), a && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${m}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${y}
         ${g}
         setOutput(result);
       }
     `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Im2ColPackedProgram {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "inputShape", type: "ivec4" },
      { name: "pad", type: "ivec2" },
      { name: "stride", type: "ivec2" },
      { name: "dilation", type: "ivec2" },
      { name: "inChannels", type: "int" },
      { name: "itemsPerBlockRow", type: "int" },
      { name: "outWidth", type: "int" }
    ], this.outputShape = e, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
    const { dataFormat: n } = t, s = getGlslDifferences(), a = n === "channelsLast", o = a ? 1 : 2, u = a ? 2 : 3, l = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;
    let f = "";
    for (let c = 0; c <= 1; c++)
      for (let h = 0; h <= 1; h++)
        f += `
          blockIndex = rc.z + ${h};
          pos = rc.y + ${c};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${o}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${u}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${a}) {
                  innerDims = vec2(d1, ch);
                  result[${c * 2 + h}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c * 2 + h}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${f}

        ${s.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getShapeForBatchMatMul(r, e) {
  const t = r.length;
  return t >= 3 ? e ? [
    ...r.slice(0, -3),
    r[t - 3] * r[t - 2],
    r[t - 1]
    /* channel */
  ] : [
    ...r.slice(0, -3),
    r[t - 3],
    r[t - 2] * r[t - 1]
    /* height * width */
  ] : !e && t === 1 && r[0] > 1 ? [r[0], 1] : null;
}
function conv2dByMatMul({ x: r, filter: e, convInfo: t, backend: n, bias: s = null, preluActivationWeights: a = null, leakyreluAlpha: o = 0, activation: u = null }) {
  const l = r.shape, f = n.texData.get(r.dataId), c = t.inChannels, h = l[0] * l[1] * l[2], d = t.outChannels, m = t.dataFormat === "channelsLast", g = !1, y = !1;
  let b;
  const v = [];
  if (a != null) {
    const T = getShapeForBatchMatMul(a.shape, m);
    T != null && (a = reshape({
      inputs: { x: a },
      backend: n,
      attrs: { shape: T }
    }), v.push(a));
  }
  if (s != null) {
    const T = getShapeForBatchMatMul(s.shape, m);
    T != null && (s = reshape({ inputs: { x: s }, backend: n, attrs: { shape: T } }), v.push(s));
  }
  if (!((h === 1 || d === 1) && c > MATMUL_SHARED_DIM_THRESHOLD) && f.isPacked && m && f.texture != null && l[2] % 2 !== 0 && arraysEqual(f.shape.slice(-3), l.slice(-3))) {
    const T = l[0] * l[1] * (l[2] + 1), _ = {
      dataId: r.dataId,
      shape: [1, T, t.inChannels],
      dtype: r.dtype
    }, F = f.shape;
    f.shape = f.shape.slice(), f.shape[f.shape.length - 2]++, assert$1(isReshapeFree(f.shape, _.shape), () => `packed reshape ${f.shape} to ${_.shape} isn't free`);
    const O = reshape({
      inputs: { x: e },
      backend: n,
      attrs: { shape: [1, t.inChannels, t.outChannels] }
    });
    v.push(O);
    const q = batchMatMulImpl({
      a: _,
      b: O,
      backend: n,
      transposeA: g,
      transposeB: y,
      bias: s,
      activation: u,
      preluActivationWeights: a,
      leakyreluAlpha: o
    }), V = n.texData.get(q.dataId);
    assert$1(V.isPacked, () => "batchMatMul result is expected to be packed"), f.shape = F, V.shape = t.outShape, b = identity({ inputs: { x: q }, backend: n }), b.shape = t.outShape, v.push(q);
  } else {
    const T = t.outHeight * t.outWidth, _ = reshape({
      inputs: { x: r },
      backend: n,
      attrs: {
        shape: m ? [t.batchSize, T, t.inChannels] : [t.batchSize, t.inChannels, T]
      }
    }), F = reshape({
      inputs: { x: e },
      backend: n,
      attrs: { shape: [1, t.inChannels, t.outChannels] }
    }), O = batchMatMulImpl({
      a: m ? _ : F,
      b: m ? F : _,
      transposeA: !m,
      transposeB: y,
      backend: n,
      bias: s,
      activation: u,
      preluActivationWeights: a,
      leakyreluAlpha: o
    });
    b = reshape({ inputs: { x: O }, backend: n, attrs: { shape: t.outShape } }), v.push(_), v.push(F), v.push(O);
  }
  for (const T of v)
    n.disposeIntermediateTensorInfo(T);
  return b;
}
function conv2dWithIm2Row({ x: r, filter: e, convInfo: t, backend: n, bias: s = null, preluActivationWeights: a = null, leakyreluAlpha: o = 0, activation: u = null }) {
  const { filterWidth: l, filterHeight: f, inChannels: c, outWidth: h, outHeight: d, dataFormat: m } = t, g = m === "channelsLast", y = l * f * c, b = d * h, v = [t.batchSize, y, b], w = !0, I = !1, T = [];
  if (a != null) {
    const k = getShapeForBatchMatMul(a.shape, g);
    k != null && (a = reshape({
      inputs: { x: a },
      backend: n,
      attrs: { shape: k }
    }), T.push(a));
  }
  if (s != null) {
    const k = getShapeForBatchMatMul(s.shape, g);
    k != null && (s = reshape({ inputs: { x: s }, backend: n, attrs: { shape: k } }), T.push(s));
  }
  const _ = reshape({
    inputs: { x: e },
    backend: n,
    attrs: { shape: [1, y, sizeFromShape(e.shape) / y] }
  });
  T.push(_);
  const F = new Im2ColPackedProgram(v, t), O = [
    r.shape,
    [t.padInfo.top, t.padInfo.left],
    [t.strideHeight, t.strideWidth],
    [t.dilationHeight, t.dilationWidth],
    [t.inChannels],
    [t.filterWidth * t.inChannels],
    [t.outWidth]
  ], q = n.runWebGLProgram(F, [r], "float32", O), V = reshape({ inputs: { x: q }, backend: n, attrs: { shape: v } });
  T.push(q), T.push(V);
  const H = s != null, R = a != null, $ = u === "leakyrelu", S = u ? mapActivationToShaderProgram(u, !0) : null, x = new MatMulPackedProgram(g ? V.shape : _.shape, g ? _.shape : V.shape, g ? [t.batchSize, b, t.outChannels] : [t.batchSize, t.outChannels, b], w, I, H, S, R, $), C = g ? [V, _] : [_, V];
  if (s && C.push(s), R && C.push(a), $) {
    const k = n.makeTensorInfo([], "float32", createScalarValue(o, "float32"));
    C.push(k), T.push(k);
  }
  const A = n.runWebGLProgram(x, C, "float32"), N = reshape({ inputs: { x: A }, backend: n, attrs: { shape: t.outShape } });
  T.push(A);
  for (const k of T)
    n.disposeIntermediateTensorInfo(k);
  return N;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2d(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a } = e, { strides: o, pad: u, dataFormat: l, dilations: f, dimRoundingMode: c } = n, h = convertConv2DDataFormat(l), d = computeConv2DInfo(s.shape, a.shape, o, f, u, c, !1, h);
  let m;
  if (d.filterHeight === 1 && d.filterWidth === 1 && d.dilationHeight === 1 && d.dilationWidth === 1 && d.strideHeight === 1 && d.strideWidth === 1 && (d.padInfo.type === "SAME" || d.padInfo.type === "VALID"))
    m = conv2dByMatMul({ x: s, filter: a, convInfo: d, backend: t });
  else if (d.strideWidth <= 2 && h === "channelsLast" && env().getBool("WEBGL_EXP_CONV")) {
    const y = new Conv2DPackedProgram(d), b = [
      [d.padInfo.top, d.padInfo.left],
      [d.strideHeight, d.strideWidth],
      [d.dilationHeight, d.dilationWidth],
      [d.inHeight, d.inWidth]
    ];
    m = t.runWebGLProgram(y, [s, a], "float32", b);
  } else if (env().getBool("WEBGL_CONV_IM2COL"))
    m = conv2dWithIm2Row({ x: s, filter: a, convInfo: d, backend: t });
  else {
    const y = new Conv2DProgram(d);
    m = t.runWebGLProgram(y, [s, a], "float32");
  }
  const g = reshape({ inputs: { x: m }, backend: t, attrs: { shape: d.outShape } });
  return t.disposeIntermediateTensorInfo(m), g;
}
const conv2DConfig = {
  kernelName: Conv2D$1,
  backendName: "webgl",
  kernelFunc: conv2d
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Conv2DDerFilterProgram {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    const t = e.strideHeight, n = e.strideWidth, s = e.padInfo.top, a = e.padInfo.left, o = e.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${s};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              ${o ? `float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);` : `float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class Conv2DDerInputProgram {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    const t = e.filterHeight, n = e.filterWidth, s = e.strideHeight, a = e.strideWidth, o = e.dataFormat === "channelsLast", u = t - 1 - e.padInfo.top, l = n - 1 - e.padInfo.left, f = o ? 1 : 2, c = o ? 2 : 3, h = o ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${u}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${h}];

        ivec2 dyCorner = ivec2(coords[${f}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${o}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class Conv3DDerFilterProgram {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    const t = e.strideDepth, n = e.strideHeight, s = e.strideWidth, a = e.padInfo.front, o = e.padInfo.top, u = e.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${a};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${n} - ${o};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${s} - ${u};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class Conv3DDerInputProgram {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    const t = e.filterDepth, n = e.filterHeight, s = e.filterWidth, a = e.strideDepth, o = e.strideHeight, u = e.strideWidth, l = t - 1 - e.padInfo.front, f = n - 1 - e.padInfo.top, c = s - 1 - e.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${l}, ${f}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${a}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${n}; wR++) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${n} - 1 - wR;

            for (int wC = 0; wC < ${s}; wC++) {
              float dyC = float(dyCCorner + wC) / ${u}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${s} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2DBackpropFilter(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, dy: a } = e, { strides: o, pad: u, dataFormat: l, dimRoundingMode: f, filterShape: c } = n, h = convertConv2DDataFormat(l), d = computeConv2DInfo(s.shape, c, o, 1, u, f, !1, h), m = new Conv2DDerFilterProgram(d);
  return t.runWebGLProgram(m, [s, a], "float32");
}
const conv2DBackpropFilterConfig = {
  kernelName: Conv2DBackpropFilter,
  backendName: "webgl",
  kernelFunc: conv2DBackpropFilter
};
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Conv2DDerInputPackedProgram {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "strides", type: "vec2" }
    ], this.outputShape = e.inShape, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
    const t = e.filterHeight, n = e.filterWidth, s = t - 1 - e.padInfo.top, a = n - 1 - e.padInfo.left;
    this.userCode = `
      const ivec2 pads = ivec2(${s}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            int wCPerm = ${n} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2DBackpropInput(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, filter: a } = e, { inputShape: o, strides: u, pad: l, dataFormat: f, dimRoundingMode: c } = n, h = convertConv2DDataFormat(f), d = computeConv2DInfo(o, a.shape, u, 1, l, c, !1, h);
  if (env().getBool("WEBGL_PACK_CONV2DTRANSPOSE") && h === "channelsLast") {
    const m = [
      [d.strideHeight, d.strideWidth]
    ], g = new Conv2DDerInputPackedProgram(d);
    return t.runWebGLProgram(g, [s, a], "float32", m);
  } else {
    const m = new Conv2DDerInputProgram(d);
    return t.runWebGLProgram(m, [s, a], "float32");
  }
}
const conv2DBackpropInputConfig = {
  kernelName: Conv2DBackpropInput,
  backendName: "webgl",
  kernelFunc: conv2DBackpropInput
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3D(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a } = e, { strides: o, pad: u, dilations: l } = n, f = computeConv3DInfo(s.shape, a.shape, o, l, u), c = new Conv3DProgram(f);
  return t.runWebGLProgram(c, [s, a], "float32");
}
const conv3DConfig = {
  kernelName: Conv3D$1,
  backendName: "webgl",
  kernelFunc: conv3D
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3DBackpropFilterV2(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, dy: a } = e, { strides: o, pad: u, filterShape: l } = n, f = computeConv3DInfo(s.shape, l, o, 1, u), c = new Conv3DDerFilterProgram(f);
  return t.runWebGLProgram(c, [s, a], "float32");
}
const conv3DBackpropFilterV2Config = {
  kernelName: Conv3DBackpropFilterV2,
  backendName: "webgl",
  kernelFunc: conv3DBackpropFilterV2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3DBackpropInput(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, filter: a } = e, { pad: o, strides: u, inputShape: l } = n, f = computeConv3DInfo(l, a.shape, u, 1, o), c = new Conv3DDerInputProgram(f);
  return t.runWebGLProgram(c, [s, a], "float32");
}
const conv3DBackpropInputConfig = {
  kernelName: Conv3DBackpropInputV2,
  backendName: "webgl",
  kernelFunc: conv3DBackpropInput
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const COS = CHECK_NAN_SNIPPET_UNARY + `
  return cos(x);
`, COS_PACKED = `
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${CHECK_NAN_SNIPPET_PACKED}
  return result;
`, cos = unaryKernelFunc({ opSnippet: COS, packedOpSnippet: COS_PACKED }), cosConfig = {
  kernelName: Cos,
  backendName: "webgl",
  kernelFunc: cos
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const COSH = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`, cosh = unaryKernelFunc({ opSnippet: COSH }), coshConfig = {
  kernelName: Cosh,
  backendName: "webgl",
  kernelFunc: cosh
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class CropAndResizeProgram {
  constructor(e, t, n, s, a) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    const [o, u, l, f] = e, [c] = t, [h, d] = n;
    this.outputShape = [c, h, d, f];
    const m = s === "bilinear" ? 1 : 0, [g, y] = [`${u - 1}.0`, `${l - 1}.0`], [b, v, w] = h > 1 ? [
      `${(u - 1) / (h - 1)}`,
      "(y2-y1) * height_ratio",
      `y1*${g} + float(y)*(height_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (y1+y2) * ${g}`
    ], [I, T, _] = d > 1 ? [
      `${(l - 1) / (d - 1)}`,
      "(x2-x1) * width_ratio",
      `x1*${y} + float(x)*(width_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (x1+x2) * ${y}`
    ];
    this.userCode = `
      const float height_ratio = float(${b});
      const float width_ratio = float(${I});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${o}) {
          return;
        }

        float height_scale = ${v};
        float width_scale = ${T};

        float in_y = ${w};
        if( in_y < 0.0 || in_y > ${g} ) {
          setOutput(float(${a}));
          return;
        }
        float in_x = ${_};
        if( in_x < 0.0 || in_x > ${y} ) {
          setOutput(float(${a}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${m} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cropAndResize = (r) => {
  const { inputs: e, backend: t, attrs: n } = r, { image: s, boxes: a, boxInd: o } = e, { cropSize: u, method: l, extrapolationValue: f } = n, c = new CropAndResizeProgram(s.shape, a.shape, u, l, f);
  return t.runWebGLProgram(c, [s, a, o], "float32");
}, cropAndResizeConfig = {
  kernelName: CropAndResize,
  backendName: "webgl",
  kernelFunc: cropAndResize
};
var CumOpType;
(function(r) {
  r.Prod = "*", r.Sum = "+";
})(CumOpType || (CumOpType = {}));
class CumProgram {
  constructor(e, t, n, s) {
    this.op = e, this.outputShape = t, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    const a = this.outputShape.length, o = this.op === CumOpType.Prod ? "1.0" : "0.0", u = n ? o : `getX(${getCoords(a, "coords", this.op)})`, l = this.outputShape[this.outputShape.length - 1];
    let f = "", c = "";
    n ? (f = s ? `end != ${l - 1}` : "end != 0", c = s ? "end + 1" : "end - 1") : (f = s ? `end + pow2 < ${l}` : "end >= pow2", c = s ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${getCoordsDataType(a)} coords = getOutputCoords();
        int end = ${getFinalCoord(a, "coords", this.op)};
        float val = ${u};
        int pow2 = int(pow(2.0, index));
        if (${f}) {
          int idx = ${c};
          ${getFinalCoord(a, "coords", this.op)} = idx;
          val ${this.op}= getX(${getCoords(a, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
}
function getCoords(r, e, t) {
  if (r === 1)
    return `${e}`;
  if (r === 2)
    return `${e}.x, ${e}.y`;
  if (r === 3)
    return `${e}.x, ${e}.y, ${e}.z`;
  if (r === 4)
    return `${e}.x, ${e}.y, ${e}.z, ${e}.w`;
  throw new Error(`Cumulative ${t} for rank ${r} is not yet supported`);
}
function getFinalCoord(r, e, t) {
  if (r === 1)
    return `${e}`;
  if (r === 2)
    return `${e}.y`;
  if (r === 3)
    return `${e}.z`;
  if (r === 4)
    return `${e}.w`;
  throw new Error(`Cumulative ${t} for rank ${r} is not yet supported`);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cumImpl(r, e, t, n, s, a) {
  const o = e.shape.length, u = getAxesPermutation([n], o);
  let l = e;
  u != null && (l = transpose({ inputs: { x: e }, backend: t, attrs: { perm: u } }));
  const f = getInnerMostAxes(1, o)[0];
  if (f !== o - 1)
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${e.shape.length - 1} but got axis=${n}`);
  const c = l.shape[f];
  let h = identity({ inputs: { x: l }, backend: t });
  for (let d = 0; d <= Math.ceil(Math.log2(c)) - 1; d++) {
    const m = new CumProgram(r, l.shape, !1, a), g = [[d]], y = h;
    h = t.runWebGLProgram(m, [h], h.dtype, g), t.disposeIntermediateTensorInfo(y);
  }
  if (s) {
    const d = new CumProgram(r, l.shape, s, a), m = h;
    h = t.runWebGLProgram(d, [h], h.dtype), t.disposeIntermediateTensorInfo(m);
  }
  if (u != null) {
    const d = getUndoAxesPermutation(u), m = transpose({ inputs: { x: h }, backend: t, attrs: { perm: d } });
    return t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(l), m;
  }
  return h;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cumprod(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, exclusive: o, reverse: u } = n;
  return cumImpl(CumOpType.Prod, s, t, a, o, u);
}
const cumprodConfig = {
  kernelName: Cumprod,
  backendName: "webgl",
  kernelFunc: cumprod
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cumsum(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, exclusive: o, reverse: u } = n;
  return cumImpl(CumOpType.Sum, s, t, a, o, u);
}
const cumsumConfig = {
  kernelName: Cumsum,
  backendName: "webgl",
  kernelFunc: cumsum
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function denseBincount(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, weights: a } = e, { size: o, binaryOutput: u } = n;
  if (s.shape.length === 1) {
    const l = t.readSync(s.dataId), f = t.readSync(a.dataId), c = bincountImplCPU(l, f, a.dtype, a.shape, o);
    return t.makeTensorInfo([o], a.dtype, c);
  } else if (s.shape.length === 2) {
    const l = t.bufferSync(s), f = t.bufferSync(a), c = bincountReduceImplCPU(l, f, o, u);
    return t.makeTensorInfo(c.shape, a.dtype, c.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`);
}
const denseBincountConfig = {
  kernelName: DenseBincount,
  backendName: "webgl",
  kernelFunc: denseBincount
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthToSpaceProgram {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = e, this.blockSize = t, this.dataFormat = n, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthToSpace(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { blockSize: a, dataFormat: o } = n, u = s.shape[0], l = o === "NHWC" ? s.shape[1] : s.shape[2], f = o === "NHWC" ? s.shape[2] : s.shape[3], c = o === "NHWC" ? s.shape[3] : s.shape[1], h = l * a, d = f * a, m = c / (a * a), g = o === "NHWC" ? [u, h, d, m] : [u, m, h, d], y = new DepthToSpaceProgram(g, a, o);
  return t.runWebGLProgram(y, [s], s.dtype);
}
const depthToSpaceConfig = {
  kernelName: DepthToSpace,
  backendName: "webgl",
  kernelFunc: depthToSpace
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthwiseConv2DProgram {
  constructor(e, t = !1, n = null, s = !1, a = !1) {
    this.variableNames = ["x", "W"], this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = e.outShape, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
    const o = e.filterHeight, u = e.filterWidth, l = e.outChannels / e.inChannels;
    let f = "", c = "";
    n && (s ? f = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : a ? f = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : f = `
          float activation(float x) {
            ${n}
          }
        `, c = "result = activation(result);");
    const h = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), a && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${o}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${u}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${h}
        ${c}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthwiseConvPacked2DProgram {
  constructor(e, t = !1, n = null, s = !1, a = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = e.outShape, this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
    const o = e.outChannels / e.inChannels, u = e.padInfo.left, l = e.strideWidth, f = e.dilationWidth, c = e.filterHeight, h = e.filterWidth, d = h;
    let m = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let v = 0; v < h; v++)
      m += `
          vec4 xTexelC${v * 2};
          int xTexelC${v * 2}Ready;
          vec4 xTexelC${v * 2 + 1};
          int xTexelC${v * 2 + 1}Ready;
          vec4 xC${v};`;
    m += `
    for (int r = 0; r < ${c}; r++) {
      `;
    for (let v = 0; v < h; v++)
      m += `
          xTexelC${v * 2} = vec4(0.0);
          xTexelC${v * 2}Ready = 0;
          xTexelC${v * 2 + 1} = vec4(0.0);
          xTexelC${v * 2 + 1}Ready = 0;
          xC${v} = vec4(0.0);`;
    m += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let v = 0; v < (d + 1) / 2; v++) {
      const w = v * 2;
      if (m += `
          xC = xCCorner + ${w * f};
          `, l === 1) {
        if (w < h && (u % 2 === 1 ? (m += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${w}Ready == 0) {
                  xTexelC${w} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${w}.zw = vec2(0.0);
                  }
                  xTexelC${w}Ready = 1;
                }
              `, f === 1 && w > 0 ? m += `
                xC${w} = vec4(xTexelC${w - 2}.zw, xTexelC${w}.xy);
                ` : m += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${w} = vec4(previous.zw, xTexelC${w}.xy);
                  } else {
                    xC${w} = vec4(0.0, 0.0, xTexelC${w}.xy);
                  }
                  `) : m += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${w}Ready == 0) {
                  xTexelC${w} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${w}.zw = vec2(0.0);
                  }
                  xTexelC${w}Ready = 1;
                }

                xC${w} = xTexelC${w};
                `, w + 1 < h)) {
          const I = u % 2 === 0 ? nearestLargerEven(f) : f;
          f % 2 === 0 && u % 2 === 1 || f % 2 !== 0 && u % 2 !== 1 ? (m += `
                  xCOffset = xC + imod(pads[1], 2) + ${I};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${w + 1}Ready == 0) {
                    xTexelC${w + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${w + 1}.zw = vec2(0.0);
                    }
                    xTexelC${w + 1}Ready = 1;
                  }
                  `, f > 1 ? m += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${w + 1} = vec4(previous.zw, xTexelC${w + 1}.xy);
                    } else {
                     xC${w + 1} = vec4(0.0, 0.0, xTexelC${w + 1}.xy);
                    }
                    ` : m += `
                    xC${w + 1} = vec4(xTexelC${w}.zw, xTexelC${w + 1}.xy);
                    `) : I === 1 ? m += `
                    xC${w + 1} = xTexelC${w};
                    ` : m += `
                    xCOffset = xC + ${I};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${w + 1}Ready == 0) {
                      xTexelC${w + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${w + 1}.zw = vec2(0.0);
                      }
                      xTexelC${w + 1}Ready = 1;
                    }

                    xC${w + 1} = xTexelC${w + 1};
                    `;
        }
      } else
        w < h && (u % 2 === 1 ? (m += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${w}Ready == 0) {
                  xTexelC${w} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${w}.zw = vec2(0.0);
                  }
                  xTexelC${w}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${w + 1}Ready == 0) {
                  xTexelC${w + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${w + 1}.zw = vec2(0.0);
                  }
                  xTexelC${w + 1}Ready = 1;
                }

                xC${w} = vec4(xTexelC${w}.zw, xTexelC${w + 1}.zw);
              `, w + 1 < h && (m += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${w + 1} = vec4(xTexelC${w + 1}.xy, final.xy);
                `)) : (m += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${w}Ready == 0) {
                  xTexelC${w} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${w}.zw = vec2(0.0);
                  }
                  xTexelC${w}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${w + 1}Ready == 0) {
                  xTexelC${w + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${w + 1}.zw = vec2(0.);
                  }
                  xTexelC${w + 1}Ready = 1;
                }

                xC${w} = vec4(
                  xTexelC${w}.xy, xTexelC${w + 1}.xy);
              `, w + 1 < h && (m += `
                  xC${w + 1} = vec4(xTexelC${w}.zw, xTexelC${w + 1}.zw);
                `)));
      w < h && (m += `
            wTexel = getW(r, ${w}, d1, q);
            dotProd += xC${w} * vec4(wTexel.xz, wTexel.xz);
          `, w + 1 < h && (m += `
              wTexel = getW(r, ${w + 1}, d1, q);
              dotProd += xC${w + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    m += `
    }
  `, m += `
      }
    `;
    let g = "", y = "";
    n && (s ? g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : a ? g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : g = `vec4 activation(vec4 x) {
          ${n}
        }`, y = "result = activation(result);");
    const b = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), a && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${g}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${m}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${b}
        ${y}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNative(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a } = e, { strides: o, pad: u, dilations: l, dimRoundingMode: f } = n;
  let c = l;
  c == null && (c = [1, 1]), assert$1(eitherStridesOrDilationsAreOne(o, c), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);
  const h = computeConv2DInfo(
    s.shape,
    a.shape,
    o,
    c,
    u,
    f,
    !0
    /* depthwise */
  );
  let d;
  env().getBool("WEBGL_PACK_DEPTHWISECONV") && h.strideWidth <= 2 && h.outChannels / h.inChannels === 1 ? d = new DepthwiseConvPacked2DProgram(h) : d = new DepthwiseConv2DProgram(h);
  const m = [
    [h.padInfo.top, h.padInfo.left],
    [h.strideHeight, h.strideWidth],
    [h.dilationHeight, h.dilationWidth],
    [h.inHeight, h.inWidth]
  ];
  return t.runWebGLProgram(d, [s, a], "float32", m);
}
const depthwiseConv2dNativeConfig = {
  kernelName: DepthwiseConv2dNative,
  backendName: "webgl",
  kernelFunc: depthwiseConv2dNative
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthwiseConv2DDerFilterProgram {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    const t = e.strideHeight, n = e.strideWidth, s = e.padInfo.top, a = e.padInfo.left, o = e.outChannels / e.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${o} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${s};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class DepthwiseConv2DDerInputProgram {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    const t = e.filterHeight, n = e.filterWidth, s = e.strideHeight, a = e.strideWidth, o = t - 1 - e.padInfo.top, u = n - 1 - e.padInfo.left, l = e.outChannels / e.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${o}, ${u});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropFilter(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, dy: a } = e, { strides: o, dilations: u, pad: l, dimRoundingMode: f, filterShape: c } = n, h = computeConv2DInfo(
    s.shape,
    c,
    o,
    u,
    l,
    f,
    !0
    /* depthwise */
  ), d = new DepthwiseConv2DDerFilterProgram(h);
  return t.runWebGLProgram(d, [s, a], "float32");
}
const depthwiseConv2dNativeBackpropFilterConfig = {
  kernelName: DepthwiseConv2dNativeBackpropFilter,
  backendName: "webgl",
  kernelFunc: depthwiseConv2dNativeBackpropFilter
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropInput(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, filter: a } = e, { strides: o, dilations: u, pad: l, dimRoundingMode: f, inputShape: c } = n, h = computeConv2DInfo(
    c,
    a.shape,
    o,
    u,
    l,
    f,
    !0
    /* depthwise */
  ), d = new DepthwiseConv2DDerInputProgram(h);
  return t.runWebGLProgram(d, [s, a], "float32");
}
const depthwiseConv2dNativeBackpropInputConfig = {
  kernelName: DepthwiseConv2dNativeBackpropInput,
  backendName: "webgl",
  kernelFunc: depthwiseConv2dNativeBackpropInput
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DiagProgram {
  constructor(e) {
    this.variableNames = ["X"], this.outputShape = [e, e], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function diag(r) {
  const { inputs: e, backend: t } = r, { x: n } = e, s = [...n.shape, ...n.shape], a = sizeFromShape(n.shape), o = reshape({ inputs: { x: n }, backend: t, attrs: { shape: [a] } }), u = new DiagProgram(a), l = t.runWebGLProgram(u, [o], o.dtype), f = reshape({ inputs: { x: l }, backend: t, attrs: { shape: s } });
  return t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(l), f;
}
const diagConfig = {
  kernelName: Diag,
  backendName: "webgl",
  kernelFunc: diag
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Dilation2DProgram {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    const { inHeight: t, inWidth: n, padInfo: s, strideHeight: a, strideWidth: o, filterHeight: u, filterWidth: l, dilationHeight: f, dilationWidth: c } = e, { top: h, left: d } = s;
    this.userCode = `
      const ivec2 strides = ivec2(${a}, ${o});
      const ivec2 pads = ivec2(${h}, ${d});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${u}; h++) {
          int hIn = hBeg + h * ${f};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${n}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dilation2D(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a } = e, { strides: o, pad: u, dilations: l } = n, f = computeDilation2DInfo(s.shape, a.shape, o, u, "NHWC", l);
  let c;
  const h = new Dilation2DProgram(f);
  c = t.runWebGLProgram(h, [s, a], "float32");
  const d = reshape({ inputs: { x: c }, backend: t, attrs: { shape: f.outShape } });
  return t.disposeIntermediateTensorInfo(c), d;
}
const dilation2DConfig = {
  kernelName: Dilation2D,
  backendName: "webgl",
  kernelFunc: dilation2D
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function einsum(r) {
  const { inputs: e, backend: t, attrs: n } = r, { equation: s } = n, a = e, { allDims: o, summedDims: u, idDims: l } = decodeEinsumEquation(s, a.length);
  checkEinsumDimSizes(o.length, l, a);
  const { path: f, steps: c } = getEinsumComputePath(u, l), h = c.length;
  let d = null, m = o.length;
  const g = [];
  for (let y = 0; y < h; ++y) {
    for (const b of c[y]) {
      const { permutationIndices: v, expandDims: w } = getEinsumPermutation(m, l[b]);
      let I;
      isIdentityPermutation(v) ? I = a[b] : (I = transpose({ inputs: { x: a[b] }, backend: t, attrs: { perm: v } }), g.push(I));
      const T = I.shape.slice();
      for (let _ = 0; _ < w.length; ++_)
        T.splice(w[_], 0, 1);
      arraysEqual(I.shape, T) || (I = reshape({ inputs: { x: I }, backend: t, attrs: { shape: T } }), g.push(I)), d === null ? d = I : (d = multiply({ inputs: { a: I, b: d }, backend: t }), g.push(d));
    }
    y < h - 1 && (f[y] >= 0 && (d = sum({
      inputs: { x: d },
      backend: t,
      attrs: {
        axis: f[y] - (o.length - m),
        keepDims: !1
      }
    }), g.push(d)), m--);
  }
  for (const y of g)
    y !== d && t.disposeIntermediateTensorInfo(y);
  return d;
}
const einsumConfig = {
  kernelName: Einsum,
  backendName: "webgl",
  kernelFunc: einsum
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ELU = "return (x >= 0.0) ? x : (exp(x) - 1.0);", ELU_PACKED = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, elu = unaryKernelFunc({ opSnippet: ELU, packedOpSnippet: ELU_PACKED }), eluConfig = {
  kernelName: Elu$1,
  backendName: "webgl",
  kernelFunc: elu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ELU_DER = "return (b >= 0.0) ? a : a * (b + 1.0);", ELU_DER_PACKED = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`, eluGrad = (r) => {
  const { inputs: e, backend: t } = r, { dy: n, y: s } = e, a = env().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new BinaryOpPackedProgram(ELU_DER_PACKED, n.shape, s.shape) : new BinaryOpProgram(ELU_DER, n.shape, s.shape);
  return t.runWebGLProgram(a, [n, s], n.dtype);
}, eluGradConfig = {
  kernelName: EluGrad,
  backendName: "webgl",
  kernelFunc: eluGrad
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PACKED_EQUAL = `
  return vec4(equal(a, b));
`, EQUAL = "return float(a == b);", equal = binaryKernelFunc({
  opSnippet: EQUAL,
  packedOpSnippet: PACKED_EQUAL,
  dtype: "bool",
  cpuKernelImpl: equalImplCPU
}), equalConfig = {
  kernelName: Equal,
  backendName: "webgl",
  kernelFunc: equal
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ERF = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${ERF_P};
  float a1 = ${ERF_A1};
  float a2 = ${ERF_A2};
  float a3 = ${ERF_A3};
  float a4 = ${ERF_A4};
  float a5 = ${ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`, erf = unaryKernelFunc({ opSnippet: ERF }), erfConfig = {
  kernelName: Erf,
  backendName: "webgl",
  kernelFunc: erf
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EXP = CHECK_NAN_SNIPPET_UNARY + `
  return exp(x);
`, EXP_PACKED = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, exp = unaryKernelFunc({
  opSnippet: EXP,
  packedOpSnippet: EXP_PACKED,
  cpuKernelImpl: expImplCPU,
  dtype: "float32"
}), expConfig = {
  kernelName: Exp,
  backendName: "webgl",
  kernelFunc: exp
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function expandDims(r) {
  const { inputs: e, attrs: t, backend: n } = r, { dim: s } = t, { input: a } = e, o = a.shape.length, u = a.shape.slice();
  let l = s;
  return s < 0 && (assert$1(-(o + 1) <= s, () => `Axis must be in the interval [${-(o + 1)}, ${o}]`), l = o + s + 1), u.splice(l, 0, 1), reshape({ inputs: { x: a }, backend: n, attrs: { shape: u } });
}
const expandDimsConfig = {
  kernelName: ExpandDims,
  backendName: "webgl",
  kernelFunc: expandDims
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EXPM1 = "return exp(x) - 1.0;", expm1 = unaryKernelFunc({ opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU }), expm1Config = {
  kernelName: Expm1,
  backendName: "webgl",
  kernelFunc: expm1
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FFTProgram {
  constructor(e, t, n) {
    this.variableNames = ["real", "imag"];
    const s = t[1];
    this.outputShape = t;
    const a = n ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, o = n ? `${s}.0` : "1.0";
    let u;
    if (e === "real")
      u = "return real * expR - imag * expI;";
    else if (e === "imag")
      u = "return real * expI + imag * expR;";
    else
      throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);
    this.userCode = `
      const float exponentMultiplier = ${a};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${u}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${s});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${s}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${o};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fftImpl(r, e, t) {
  const n = t.texData.get(r.dataId), s = sizeFromShape(r.shape), a = r.shape[r.shape.length - 1], o = s / a, u = reshape({ inputs: { x: r }, backend: t, attrs: { shape: [o, a] } }), l = u.shape, f = new FFTProgram("real", l, e), c = new FFTProgram("imag", l, e), h = [
    {
      dataId: n.complexTensorInfos.real.dataId,
      dtype: n.complexTensorInfos.real.dtype,
      shape: l
    },
    {
      dataId: n.complexTensorInfos.imag.dataId,
      dtype: n.complexTensorInfos.imag.dtype,
      shape: l
    }
  ], d = t.runWebGLProgram(f, h, "float32"), m = t.runWebGLProgram(c, h, "float32"), g = complex({ inputs: { real: d, imag: m }, backend: t });
  t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(m);
  const y = reshape({ inputs: { x: g }, backend: t, attrs: { shape: r.shape } });
  return t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(g), y;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fft(r) {
  const { inputs: e, backend: t } = r, { input: n } = e;
  return fftImpl(n, !1, t);
}
const fftConfig = {
  kernelName: FFT,
  backendName: "webgl",
  kernelFunc: fft
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FillProgram {
  constructor(e, t) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = e, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fill(r) {
  const { backend: e, attrs: t } = r, { shape: n, value: s } = t;
  let { dtype: a } = t;
  if (a = a || inferDtype(s), a === "string") {
    const o = getArrayFromDType(a, sizeFromShape(n));
    return o.fill(s), e.makeTensorInfo(n, a, o);
  } else {
    const o = new FillProgram(n, s), u = [[s]];
    return e.runWebGLProgram(o, [], a, u);
  }
}
const fillConfig = {
  kernelName: Fill,
  backendName: "webgl",
  kernelFunc: fill
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FlipLeftRightProgram {
  constructor(e) {
    this.variableNames = ["Image"], this.outputShape = [];
    const t = e[2];
    this.outputShape = e, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const flipLeftRightConfig = {
  kernelName: FlipLeftRight,
  backendName: "webgl",
  kernelFunc: ({ inputs: r, backend: e }) => {
    const { image: t } = r, n = e, s = new FlipLeftRightProgram(t.shape);
    return n.runWebGLProgram(s, [t], t.dtype);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FLOOR = "return floor(x);", floor = unaryKernelFunc({ opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU }), floorConfig = {
  kernelName: Floor,
  backendName: "webgl",
  kernelFunc: floor
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const INT_DIV = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`, INT_DIV_PACKED = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`, floorDiv = binaryKernelFunc({ opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: "int32" }), floorDivConfig = {
  kernelName: FloorDiv,
  backendName: "webgl",
  kernelFunc: floorDiv
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FromPixelsProgram {
  constructor(e) {
    this.variableNames = ["A"];
    const t = getGlslDifferences(), [n, s] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FromPixelsPackedProgram {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0;
    const t = getGlslDifferences(), [n, s] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${s}.0, ${n}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fromPixelsConfig = {
  kernelName: FromPixels,
  backendName: "webgl",
  kernelFunc: fromPixels
};
let fromPixels2DContext, willReadFrequently = env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function fromPixels(r) {
  const { inputs: e, backend: t, attrs: n } = r;
  let { pixels: s } = e;
  const { numChannels: a } = n, o = typeof HTMLVideoElement < "u" && s instanceof HTMLVideoElement, u = typeof HTMLImageElement < "u" && s instanceof HTMLImageElement, [l, f] = o ? [
    s.videoWidth,
    s.videoHeight
  ] : [s.width, s.height], c = [f, l], h = [f, l, a];
  if (u || o) {
    const y = env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    (fromPixels2DContext == null || y !== willReadFrequently) && (willReadFrequently = y, fromPixels2DContext = document.createElement("canvas").getContext("2d", { willReadFrequently })), fromPixels2DContext.canvas.width = l, fromPixels2DContext.canvas.height = f, fromPixels2DContext.drawImage(s, 0, 0, l, f), s = fromPixels2DContext.canvas;
  }
  const d = t.makeTensorInfo(c, "int32");
  t.texData.get(d.dataId).usage = TextureUsage.PIXELS, t.gpgpu.uploadPixelDataToTexture(t.getTexture(d.dataId), s);
  const m = env().getBool("WEBGL_PACK") ? new FromPixelsPackedProgram(h) : new FromPixelsProgram(h), g = t.runWebGLProgram(m, [d], "int32");
  return t.disposeData(d.dataId), g;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fusedConv2d(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a, bias: o, preluActivationWeights: u } = e, { strides: l, pad: f, dataFormat: c, dilations: h, dimRoundingMode: d, activation: m, leakyreluAlpha: g } = n, y = convertConv2DDataFormat(c), b = computeConv2DInfo(s.shape, a.shape, l, h, f, d, !1, y);
  let v;
  const w = [], I = o != null, T = u != null, _ = m === "leakyrelu", F = () => {
    const q = [s, a], V = (H, R) => {
      if (R === "NCHW" && H.shape.length === 1 && H.shape[0] !== 1) {
        const $ = reshape({
          inputs: { x: H },
          backend: t,
          attrs: { shape: [H.shape[0], 1, 1] }
        });
        return w.push($), $;
      }
      return H;
    };
    if (I && q.push(V(o, c)), T && q.push(V(u, c)), _) {
      const H = t.makeTensorInfo([], "float32", createScalarValue(g, "float32"));
      q.push(H), w.push(H);
    }
    return q;
  };
  if (b.filterHeight === 1 && b.filterWidth === 1 && b.dilationHeight === 1 && b.dilationWidth === 1 && b.strideHeight === 1 && b.strideWidth === 1 && (b.padInfo.type === "SAME" || b.padInfo.type === "VALID"))
    v = conv2dByMatMul({
      x: s,
      filter: a,
      convInfo: b,
      backend: t,
      bias: o,
      activation: m,
      preluActivationWeights: u,
      leakyreluAlpha: g
    });
  else if (b.strideWidth <= 2 && y === "channelsLast" && env().getBool("WEBGL_EXP_CONV")) {
    const q = m ? mapActivationToShaderProgram(m, !0) : null, V = new Conv2DPackedProgram(b, I, q, T, _), H = [
      [b.padInfo.top, b.padInfo.left],
      [b.strideHeight, b.strideWidth],
      [b.dilationHeight, b.dilationWidth],
      [b.inHeight, b.inWidth]
    ], R = F();
    v = t.runWebGLProgram(V, R, "float32", H);
  } else if (env().getBool("WEBGL_CONV_IM2COL"))
    v = conv2dWithIm2Row({
      x: s,
      filter: a,
      convInfo: b,
      backend: t,
      bias: o,
      activation: m,
      preluActivationWeights: u,
      leakyreluAlpha: g
    });
  else {
    const q = m ? mapActivationToShaderProgram(m, !1) : null, V = new Conv2DProgram(b, I, q, T, _), H = F();
    v = t.runWebGLProgram(V, H, "float32");
  }
  const O = reshape({ inputs: { x: v }, backend: t, attrs: { shape: b.outShape } });
  return w.push(v), w.forEach((q) => t.disposeIntermediateTensorInfo(q)), O;
}
const fusedConv2DConfig = {
  kernelName: FusedConv2D,
  backendName: "webgl",
  kernelFunc: fusedConv2d
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fusedDepthwiseConv2D(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, filter: a, bias: o, preluActivationWeights: u } = e, { strides: l, pad: f, dilations: c, dimRoundingMode: h, activation: d, leakyreluAlpha: m } = n, g = [];
  let y = c;
  y == null && (y = [1, 1]), assert$1(eitherStridesOrDilationsAreOne(l, y), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${y}'`);
  const b = computeConv2DInfo(
    s.shape,
    a.shape,
    l,
    y,
    f,
    h,
    !0
    /* depthwise */
  ), v = env().getBool("WEBGL_PACK_DEPTHWISECONV") && b.strideWidth <= 2 && b.outChannels / b.inChannels === 1, w = d ? mapActivationToShaderProgram(d, v) : null, I = [s, a], T = o != null, _ = u != null, F = d === "leakyrelu";
  if (T && I.push(o), _ && I.push(u), F) {
    const H = t.makeTensorInfo([], "float32", createScalarValue(m, "float32"));
    I.push(H), g.push(H);
  }
  let O;
  v ? O = new DepthwiseConvPacked2DProgram(b, T, w, _, F) : O = new DepthwiseConv2DProgram(b, T, w, _, F);
  const q = [
    [b.padInfo.top, b.padInfo.left],
    [b.strideHeight, b.strideWidth],
    [b.dilationHeight, b.dilationWidth],
    [b.inHeight, b.inWidth]
  ], V = t.runWebGLProgram(O, I, "float32", q);
  return g.forEach((H) => t.disposeIntermediateTensorInfo(H)), V;
}
const fusedDepthwiseConv2DConfig = {
  kernelName: FusedDepthwiseConv2D,
  backendName: "webgl",
  kernelFunc: fusedDepthwiseConv2D
};
class GatherNDProgram {
  constructor(e, t, n, s) {
    this.sliceDim = e, this.strides = t, this.paramsShape = s, this.variableNames = ["x", "indices"], this.outputShape = n;
    const a = getCoordsDataType(n.length);
    let o = `
    int index;`;
    for (let u = 0; u < this.sliceDim; u++)
      o += `
          index = round(getIndices(coords[0], ${u}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[u]};
          flattenIndex += index * ${this.strides[u]};`;
    this.userCode = `
         void main() {
          ${a} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${o}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherNd(r) {
  const { inputs: e, backend: t } = r, { params: n, indices: s } = e, a = s.shape, o = a[a.length - 1], u = sizeFromShape(n.shape), [l, f, c, h] = prepareAndValidate(n, s), d = reshape({ inputs: { x: s }, backend: t, attrs: { shape: [f, o] } }), m = reshape({
    inputs: { x: n },
    backend: t,
    attrs: { shape: [sizeFromShape(n.shape) / c, c] }
  });
  if (t.shouldExecuteOnCPU([n, s]) || n.dtype === "string") {
    const v = t.readSync(s.dataId), w = t.bufferSync(n), I = gatherNdImplCPU(v, w, n.dtype, f, o, c, h, n.shape, u);
    return t.makeTensorInfo(l, n.dtype, I.values);
  }
  const g = new GatherNDProgram(o, h, [f, c], n.shape), y = t.runWebGLProgram(g, [m, d], m.dtype), b = reshape({ inputs: { x: y }, backend: t, attrs: { shape: l } });
  return t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(y), b;
}
const gatherNdConfig = {
  kernelName: GatherNd,
  backendName: "webgl",
  kernelFunc: gatherNd
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GatherProgram {
  constructor(e, t) {
    this.variableNames = ["A", "indices"], this.outputShape = t, this.rank = t.length;
    const n = getCoordsDataType(this.rank), s = getSourceCoords$1(e);
    this.userCode = `
      void main() {
        ${n} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${s}));
      }
    `;
  }
}
function getSourceCoords$1(r, e) {
  const t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], n = [];
  for (let s = 0; s < r.length; s++)
    s === 2 ? n.push("index") : n.push(`${t[s]}`);
  return n.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherV2(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, indices: a } = e, { axis: o, batchDims: u } = n, l = parseAxisParam(o, s.shape)[0];
  if (env().get("DEBUG")) {
    const w = t.readSync(a.dataId), I = s.shape[l];
    for (let T = 0; T < w.length; ++T) {
      const _ = w[T];
      assert$1(_ <= I - 1 && _ >= 0, () => `GatherV2: the index value ${_} is not in [0, ${I - 1}]`);
    }
  }
  const f = collectGatherOpShapeInfo(s, a, l, u), c = sizeFromShape(a.shape), h = [], d = reshape({
    inputs: { x: s },
    backend: t,
    attrs: {
      shape: [
        f.batchSize,
        f.outerSize,
        f.dimSize,
        f.sliceSize
      ]
    }
  }), m = reshape({
    inputs: { x: a },
    backend: t,
    attrs: { shape: [f.batchSize, c / f.batchSize] }
  });
  h.push(d), h.push(m);
  const g = [
    f.batchSize,
    f.outerSize,
    c / f.batchSize,
    f.sliceSize
  ];
  if (t.shouldExecuteOnCPU([s, a]) || s.dtype === "string") {
    const w = t.bufferSync(m), I = t.bufferSync(d), T = gatherV2ImplCPU(I, w, g);
    return h.forEach((_) => t.disposeIntermediateTensorInfo(_)), t.makeTensorInfo(f.outputShape, T.dtype, T.values);
  }
  const y = new GatherProgram(d.shape, g), b = t.runWebGLProgram(y, [d, m], d.dtype);
  h.push(b);
  const v = reshape({ inputs: { x: b }, backend: t, attrs: { shape: f.outputShape } });
  return h.forEach((w) => t.disposeIntermediateTensorInfo(w)), v;
}
const gatherV2Config = {
  kernelName: GatherV2,
  backendName: "webgl",
  kernelFunc: gatherV2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GREATER = "return float(a > b);", GREATER_PACKED = `
  return vec4(greaterThan(a, b));
`, greater = binaryKernelFunc({
  opSnippet: GREATER,
  packedOpSnippet: GREATER_PACKED,
  cpuKernelImpl: greaterImplCPU,
  dtype: "bool"
}), greaterConfig = {
  kernelName: Greater,
  backendName: "webgl",
  kernelFunc: greater
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GREATER_EQUAL = "return float(a >= b);", GREATER_EQUAL_PACKED = `
  return vec4(greaterThanEqual(a, b));
`, greaterEqual = binaryKernelFunc({
  opSnippet: GREATER_EQUAL,
  packedOpSnippet: GREATER_EQUAL_PACKED,
  dtype: "bool",
  cpuKernelImpl: greaterEqualImplCPU
}), greaterEqualConfig = {
  kernelName: GreaterEqual,
  backendName: "webgl",
  kernelFunc: greaterEqual
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ifft(r) {
  const { inputs: e, backend: t } = r, { input: n } = e;
  return fftImpl(n, !0, t);
}
const ifftConfig = {
  kernelName: IFFT,
  backendName: "webgl",
  kernelFunc: ifft
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IS_FINITE = "return float(!isnan(x) && !isinf(x));", isFinite$1 = unaryKernelFunc({ opSnippet: IS_FINITE, dtype: "bool" }), isFiniteConfig = {
  kernelName: IsFinite,
  backendName: "webgl",
  kernelFunc: isFinite$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IS_INF = "return float(isinf(x));", isInf = unaryKernelFunc({ opSnippet: IS_INF, dtype: "bool" }), isInfConfig = {
  kernelName: IsInf,
  backendName: "webgl",
  kernelFunc: isInf
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IS_NAN = "return float(isnan(x));", isNaN$1 = unaryKernelFunc({ opSnippet: IS_NAN, dtype: "bool" }), isNaNConfig = {
  kernelName: IsNan,
  backendName: "webgl",
  kernelFunc: isNaN$1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LESS = "return float(a < b);", LESS_PACKED = `
  return vec4(lessThan(a, b));
`, less = binaryKernelFunc({
  opSnippet: LESS,
  packedOpSnippet: LESS_PACKED,
  cpuKernelImpl: lessImplCPU,
  dtype: "bool"
}), lessConfig = {
  kernelName: Less,
  backendName: "webgl",
  kernelFunc: less
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LESS_EQUAL = "return float(a <= b);", LESS_EQUAL_PACKED = `
  return vec4(lessThanEqual(a, b));
`, lessEqual = binaryKernelFunc({
  opSnippet: LESS_EQUAL,
  packedOpSnippet: LESS_EQUAL_PACKED,
  cpuKernelImpl: lessEqualImplCPU,
  dtype: "bool"
}), lessEqualConfig = {
  kernelName: LessEqual,
  backendName: "webgl",
  kernelFunc: lessEqual
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function linSpace(r) {
  const { backend: e, attrs: t } = r, { start: n, stop: s, num: a } = t, o = linSpaceImplCPU(n, s, a);
  return e.makeTensorInfo([o.length], "float32", o);
}
const linSpaceConfig = {
  kernelName: LinSpace,
  backendName: "webgl",
  kernelFunc: linSpace
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LOG = CHECK_NAN_SNIPPET_UNARY + `
  return x < 0.0 ? 0./0. : log(x);
`, LOG_PACKED = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`, log = unaryKernelFunc({ opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU }), logConfig = {
  kernelName: Log,
  backendName: "webgl",
  kernelFunc: log
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LOG1P = CHECK_NAN_SNIPPET_UNARY + `
  return log(1.0 + x);
`, log1p = unaryKernelFunc({ opSnippet: LOG1P }), log1pConfig = {
  kernelName: Log1p,
  backendName: "webgl",
  kernelFunc: log1p
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LOGICAL_AND = "return float(a >= 1.0 && b >= 1.0);", LOGICAL_AND_PACKED = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`, logicalAnd = binaryKernelFunc({
  opSnippet: LOGICAL_AND,
  packedOpSnippet: LOGICAL_AND_PACKED,
  dtype: "bool"
}), logicalAndConfig = {
  kernelName: LogicalAnd,
  backendName: "webgl",
  kernelFunc: logicalAnd
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LOGICAL_NOT = "return float(!(x >= 1.0));", logicalNot = unaryKernelFunc({ opSnippet: LOGICAL_NOT }), logicalNotConfig = {
  kernelName: LogicalNot,
  backendName: "webgl",
  kernelFunc: logicalNot
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LOGICAL_OR = "return float(a >= 1.0 || b >= 1.0);", LOGICAL_OR_PACKED = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`, logicalOr = binaryKernelFunc({ opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: "bool" }), logicalOrConfig = {
  kernelName: LogicalOr,
  backendName: "webgl",
  kernelFunc: logicalOr
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNProgram {
  constructor(e, t, n, s, a) {
    this.variableNames = ["x"], this.outputShape = [];
    const o = t, u = e[3] - 1;
    this.outputShape = e;
    let l;
    const f = `float(${n}) + float(${s}) * sum`;
    a === 0.5 ? l = `inversesqrt(${f})` : a === 1 ? l = `1.0/(${f})` : l = `exp(log(${f}) * float(-${a}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${o}; j <= ${o}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${u}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNPackedProgram {
  constructor(e, t, n, s, a) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0;
    const o = t, u = e[3] - 1;
    this.outputShape = e;
    let l;
    const f = `float(${n}) + float(${s}) * sum`;
    a === 0.5 ? l = `inversesqrt(${f})` : a === 1 ? l = `1.0/(${f})` : l = `exp(log(${f}) * float(-${a}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${o};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${o}; j <= ${o}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${u}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lrn = (r) => {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { depthRadius: a, bias: o, alpha: u, beta: l } = n, f = env().getBool("WEBGL_PACK_NORMALIZATION") ? new LRNPackedProgram(s.shape, a, o, u, l) : new LRNProgram(s.shape, a, o, u, l);
  return t.runWebGLProgram(f, [s], s.dtype);
}, LRNConfig = {
  kernelName: LRN,
  backendName: "webgl",
  kernelFunc: lrn
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNGradProgram {
  constructor(e, t, n, s, a) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = e, this.depth = e[3], this.depthRadius = t, this.bias = n, this.alpha = s, this.beta = a, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${s}) * norm + float(${n});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${s})
                * float(${a})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${a});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lrnGrad = (r) => {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, y: a, dy: o } = e, { depthRadius: u, bias: l, alpha: f, beta: c } = n, h = new LRNGradProgram(s.shape, u, l, f, c);
  return t.runWebGLProgram(h, [s, a, o], s.dtype);
}, LRNGradConfig = {
  kernelName: LRNGrad,
  backendName: "webgl",
  kernelFunc: lrnGrad
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxImpl(r, e, t, n) {
  const s = sizeFromShape(e), o = sizeFromShape(r.shape) / s, u = reshape({ inputs: { x: r }, attrs: { shape: [o, s] }, backend: n }), l = reduce(u, r.dtype, "max", n), f = reshape({ inputs: { x: l }, attrs: { shape: t }, backend: n });
  return n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(l), f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function max(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { reductionIndices: a, keepDims: o } = n, u = s.shape.length, l = parseAxisParam(a, s.shape);
  let f = l;
  const c = getAxesPermutation(f, u), h = c != null, d = t.shouldExecuteOnCPU([s]);
  let m = s;
  if (h) {
    if (d) {
      const I = t.texData.get(m.dataId).values, T = new Array(u);
      for (let O = 0; O < T.length; O++)
        T[O] = s.shape[c[O]];
      const _ = transposeImplCPU(I, s.shape, s.dtype, c, T);
      m = t.makeTensorInfo(T, s.dtype);
      const F = t.texData.get(m.dataId);
      F.values = _;
    } else
      m = transposeImpl(s, c, t);
    f = getInnerMostAxes(f.length, u);
  }
  assertAxesAreInnerMostDims("max", f, u);
  const [g, y] = computeOutAndReduceShapes(m.shape, f);
  let b = g;
  o && (b = expandShapeToKeepDim(g, l));
  let v;
  if (d) {
    const I = t.texData.get(m.dataId).values, T = maxImplCPU(I, sizeFromShape(y), b, s.dtype);
    v = t.makeTensorInfo(b, s.dtype);
    const _ = t.texData.get(v.dataId);
    _.values = T;
  } else
    v = maxImpl(m, y, b, t);
  return h && t.disposeIntermediateTensorInfo(m), v;
}
const maxConfig = {
  kernelName: Max,
  backendName: "webgl",
  kernelFunc: max
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MAXIMUM = CHECK_NAN_SNIPPET + `
  return max(a, b);
`, MAXIMUM_PACKED = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + CHECK_NAN_SNIPPET_PACKED + `
  return result;
`, maximum = binaryKernelFunc({
  opSnippet: MAXIMUM,
  packedOpSnippet: MAXIMUM_PACKED,
  cpuKernelImpl: maximumImplCPU
}), maximumConfig = {
  kernelName: Maximum$1,
  backendName: "webgl",
  kernelFunc: maximum
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e;
  assertNotComplex(s, "maxPool");
  const { filterSize: a, strides: o, pad: u, dimRoundingMode: l } = n, f = 1;
  assert$1(eitherStridesOrDilationsAreOne(o, f), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${f}'`);
  const c = computePool2DInfo(s.shape, a, o, f, u, l);
  if (c.filterWidth === 1 && c.filterHeight === 1 && arraysEqual(c.inShape, c.outShape))
    return identity({ inputs: { x: s }, backend: t });
  const h = new Pool2DProgram(c, "max", !1);
  return t.runWebGLProgram(h, [s], s.dtype);
}
const maxPoolConfig = {
  kernelName: MaxPool,
  backendName: "webgl",
  kernelFunc: maxPool
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool3d(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { filterSize: a, strides: o, pad: u, dataFormat: l, dimRoundingMode: f } = n, c = [1, 1, 1], h = computePool3DInfo(s.shape, a, o, c, u, f, l), d = new Pool3DProgram(h, "max", !1);
  return t.runWebGLProgram(d, [s], s.dtype);
}
const maxPool3DConfig = {
  kernelName: MaxPool3D,
  backendName: "webgl",
  kernelFunc: maxPool3d
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MaxPool2DBackpropProgram {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    const t = e.strideHeight, n = e.strideWidth, s = e.dilationHeight, a = e.effectiveFilterHeight, o = e.effectiveFilterWidth, u = a - 1 - e.padInfo.top, l = o - 1 - e.padInfo.left, f = a * o - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${u}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${a};
          wR += ${s}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${n}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${f} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${o} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class MaxPool3DBackpropProgram {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    const t = e.strideDepth, n = e.strideHeight, s = e.strideWidth, a = e.dilationDepth, o = e.dilationHeight, u = e.dilationWidth, l = e.effectiveFilterDepth, f = e.effectiveFilterHeight, c = e.effectiveFilterWidth, h = l - 1 - e.padInfo.front, d = f - 1 - e.padInfo.top, m = c - 1 - e.padInfo.left, g = l * f * c - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${h}, ${d}, ${m});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${a}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${f};
              wR += ${o}) {
            float dyR = float(dyRCorner + wR) / ${n}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${s}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${g} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${f} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool3DGrad(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, input: a } = e, o = a, { filterSize: u, strides: l, pad: f, dimRoundingMode: c } = n, h = [1, 1, 1], d = computePool3DInfo(o.shape, u, l, h, f, c), m = new Pool3DProgram(
    d,
    "max",
    !0
    /* get positions */
  ), g = t.runWebGLProgram(m, [o], o.dtype), y = new MaxPool3DBackpropProgram(d), b = t.runWebGLProgram(y, [s, g], o.dtype);
  return t.disposeIntermediateTensorInfo(g), b;
}
const maxPool3DGradConfig = {
  kernelName: MaxPool3DGrad,
  backendName: "webgl",
  kernelFunc: maxPool3DGrad
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPoolGrad(r) {
  const { inputs: e, backend: t, attrs: n } = r, { dy: s, input: a, output: o } = e, u = a;
  assertNotComplex([a, o], "maxPoolGrad");
  const { filterSize: l, strides: f, pad: c, dimRoundingMode: h } = n, d = computePool2DInfo(u.shape, l, f, 1, c, h), m = !0, g = new Pool2DProgram(d, "max", m), y = t.runWebGLProgram(g, [u], u.dtype), b = new MaxPool2DBackpropProgram(d), v = t.runWebGLProgram(b, [s, y], u.dtype);
  return t.disposeIntermediateTensorInfo(y), v;
}
const maxPoolGradConfig = {
  kernelName: MaxPoolGrad,
  backendName: "webgl",
  kernelFunc: maxPoolGrad
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPoolWithArgmaxImpl(r, e, t, n) {
  let s = new Pool2DProgram(t, "max", !1);
  const a = n.runWebGLProgram(s, [r], "float32");
  s = new Pool2DProgram(t, "max", !0, !0, e);
  const o = n.runWebGLProgram(s, [r], "float32");
  return [a, o];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxPoolWithArgmaxConfig = {
  kernelName: MaxPoolWithArgmax,
  backendName: "webgl",
  kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
    const { x: n } = r, { filterSize: s, strides: a, pad: o, includeBatchInIndex: u } = e, l = t;
    assert$1(n.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${n.shape.length}.`);
    const f = [1, 1];
    assert$1(eitherStridesOrDilationsAreOne(a, f), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${f}'`);
    const c = computePool2DInfo(n.shape, s, a, f, o), [h, d] = maxPoolWithArgmaxImpl(n, u, c, l);
    return [h, d];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function meanImpl(r, e, t, n) {
  const s = sizeFromShape(e), o = sizeFromShape(r.shape) / s, u = reshape({ inputs: { x: r }, attrs: { shape: [o, s] }, backend: n }), l = reduce(u, "float32", "mean", n), f = reshape({ inputs: { x: l }, attrs: { shape: t }, backend: n });
  return n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(l), f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const meanConfig = {
  kernelName: Mean,
  backendName: "webgl",
  kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
    const { x: n } = r, { keepDims: s, axis: a } = e, o = t, u = n.shape.length, l = parseAxisParam(a, n.shape);
    let f = l;
    const c = getAxesPermutation(f, u), h = c != null, d = o.shouldExecuteOnCPU([n]), m = [];
    let g = n;
    if (h) {
      if (d) {
        const T = o.texData.get(g.dataId).values, _ = new Array(u);
        for (let q = 0; q < _.length; q++)
          _[q] = n.shape[c[q]];
        const F = transposeImplCPU(T, n.shape, n.dtype, c, _);
        g = o.makeTensorInfo(_, n.dtype);
        const O = o.texData.get(g.dataId);
        O.values = F;
      } else
        g = transposeImpl(n, c, o);
      m.push(g), f = getInnerMostAxes(f.length, u);
    }
    assertAxesAreInnerMostDims("sum", f, u);
    const [y, b] = computeOutAndReduceShapes(g.shape, f);
    let v = y;
    s && (v = expandShapeToKeepDim(y, l));
    const w = meanImpl(g, b, v, o);
    for (const I of m)
      o.disposeIntermediateTensorInfo(I);
    return w;
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function min(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n, u = s.shape.length, l = parseAxisParam(a, s.shape);
  let f = l;
  const c = getAxesPermutation(f, u);
  let h = s;
  c != null && (h = transpose({ inputs: { x: s }, backend: t, attrs: { perm: c } }), f = getInnerMostAxes(f.length, s.shape.length)), assertAxesAreInnerMostDims("min", f, u);
  const [d, m] = computeOutAndReduceShapes(h.shape, f), g = sizeFromShape(m), y = reshape({ inputs: { x: h }, backend: t, attrs: { shape: [-1, g] } }), b = reduce(y, y.dtype, "min", t);
  let v;
  if (o) {
    const w = expandShapeToKeepDim(d, l);
    v = reshape({ inputs: { x: b }, backend: t, attrs: { shape: w } });
  } else
    v = reshape({ inputs: { x: b }, backend: t, attrs: { shape: d } });
  return t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(b), c != null && t.disposeIntermediateTensorInfo(h), v;
}
const minConfig = {
  kernelName: Min,
  backendName: "webgl",
  kernelFunc: min
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MINIMUM = CHECK_NAN_SNIPPET + `
  return min(a, b);
`, MINIMUM_PACKED = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + CHECK_NAN_SNIPPET_PACKED + `
  return result;
`, minimum = binaryKernelFunc({
  opSnippet: MINIMUM,
  packedOpSnippet: MINIMUM_PACKED,
  cpuKernelImpl: minimumImplCPU
}), minimumConfig = {
  kernelName: Minimum$1,
  backendName: "webgl",
  kernelFunc: minimum
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MirrorPadProgram {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.outputShape = t.map(
      (c, h) => c[0] + e[h] + c[1]
      /* afterPad */
    );
    const s = e.length, a = getCoordsDataType(s), o = t.map((c) => c[0]).join(","), u = t.map((c, h) => c[0] + e[h]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, s), f = n === "reflect" ? 0 : 1;
    if (s === 1) {
      this.userCode = `
        int start = ${o};
        int end = ${u};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${f};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${f};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${a} start = ${a}(${o});
      ${a} end = ${a}(${u});

      void main() {
        ${a} outC = getOutputCoords();
        for (int i = 0; i < ${s}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${f};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${f};
          }
        }
        ${a} coords = outC - start;
        setOutput(getX(${l}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MirrorPadPackedProgram {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t.map(
      (g, y) => g[0] + e[y] + g[1]
      /* afterPad */
    );
    const s = e.length, a = getCoordsDataType(s), o = t.map((g) => g[0]).join(","), u = t.map((g, y) => g[0] + e[y]).join(","), l = getChannels("rc", s), f = getChannels("source", s), c = `${l[s - 1]} < ${this.outputShape[s - 1]}`, h = s === 1 ? "source" : `vec2(${f.slice(-2).join()})`, d = n === "reflect" ? 0 : 1;
    let m = "";
    if (s === 1) {
      const g = `
        ${a} source = rc;
        if (source < start) {
          source = start * 2 - source - ${d};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${d};
        }
        source -= start;
      `;
      m = `
        ${a} rc = outputLoc;
        ${g}
        result[0] = getChannel(getX(${f.join()}), ${h});
        ${l[s - 1]} += 1;
        if(${c}) {
          ${g}
          result[1] = getChannel(getX(${f.join()}), ${h});
        }
      `;
    } else {
      const g = `
        ${a} source = rc;
        ${a} lt = ${a}(lessThan(source, start));
        ${a} gte = ${a}(greaterThanEqual(source, end));
        ${a} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${d}) +
                gte * ((end - 1) * 2 - source + ${d});
        source -= start;
      `;
      m = `
        ${a} rc = outputLoc;
        ${g}
        result[0] = getChannel(getX(${f.join()}), ${h});
        ${l[s - 1]} += 1;
        if(${c}) {
          ${g}
          result[1] = getChannel(getX(${f.join()}), ${h});
        }
        rc = outputLoc;
        ${l[s - 2]} += 1;
        if(${l[s - 2]} < ${this.outputShape[s - 2]}) {
          ${g}
          result[2] = getChannel(getX(${f.join()}), ${h});
          ${l[s - 1]} += 1;
          if(${c}) {
            ${g}
            result[3] = getChannel(getX(${f.join()}), ${h});
          }
        }
      `;
    }
    this.userCode = `
      const ${a} start = ${a}(${o});
      const ${a} end = ${a}(${u});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${m}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mirrorPadKernelFunc = ({ inputs: r, backend: e, attrs: t }) => {
  const { x: n } = r, { paddings: s, mode: a } = t, o = env().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new MirrorPadPackedProgram(n.shape, s, a) : new MirrorPadProgram(n.shape, s, a);
  return e.runWebGLProgram(o, [n], n.dtype);
}, mirrorPadConfig = {
  kernelName: MirrorPad,
  backendName: "webgl",
  kernelFunc: mirrorPadKernelFunc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MOD = `if (b == 0.0) return NAN;
  return mod(a, b);`, MOD_PACKED = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + CHECK_NAN_SNIPPET_PACKED + `
  return result;
`, mod = binaryKernelFunc({
  opSnippet: MOD,
  packedOpSnippet: MOD_PACKED
}), modConfig = {
  kernelName: Mod,
  backendName: "webgl",
  kernelFunc: mod
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MultinomialProgram {
  constructor(e, t, n) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [e, n], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t - 1}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DIV = `
if (a == b) {
  return 1.0;
};
return a / b;`, DIV_PACKED = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`, realDiv = binaryKernelFunc({ opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: !0 }), realDivConfig = {
  kernelName: RealDiv,
  backendName: "webgl",
  kernelFunc: realDiv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SUB = "return a - b;", sub = binaryKernelFunc({
  opSnippet: SUB,
  packedOpSnippet: SUB,
  supportsComplex: !0,
  cpuKernelImpl: subImplCPU
}), subConfig = {
  kernelName: Sub,
  backendName: "webgl",
  kernelFunc: sub
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function softmax(r) {
  const { inputs: e, backend: t, attrs: n } = r, { logits: s } = e, { dim: a } = n, o = parseAxisParam([a], s.shape), u = max({
    inputs: { x: s },
    backend: t,
    attrs: { reductionIndices: o, keepDims: !1 }
  }), l = expandShapeToKeepDim(u.shape, o), f = reshape({ inputs: { x: u }, backend: t, attrs: { shape: l } }), c = sub({ inputs: { a: s, b: f }, backend: t }), h = exp({ inputs: { x: c }, backend: t }), d = sum({ inputs: { x: h }, backend: t, attrs: { axis: o, keepDims: !1 } }), m = reshape({ inputs: { x: d }, backend: t, attrs: { shape: l } }), g = realDiv({ inputs: { a: h, b: m }, backend: t });
  return t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(m), g;
}
const softmaxConfig = {
  kernelName: Softmax$2,
  backendName: "webgl",
  kernelFunc: softmax
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function multinomial(r) {
  const { inputs: e, backend: t, attrs: n } = r, { logits: s } = e, { numSamples: a, seed: o, normalized: u } = n, l = u ? s : softmax({ inputs: { logits: s }, backend: t, attrs: { dim: s.shape.length - 1 } }), f = l.shape[0], c = l.shape[1], h = new MultinomialProgram(f, c, a), d = [[o]], m = t.runWebGLProgram(h, [l], "int32", d);
  return u || t.disposeIntermediateTensorInfo(l), m;
}
const multinomialConfig = {
  kernelName: Multinomial,
  backendName: "webgl",
  kernelFunc: multinomial
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NEG = CHECK_NAN_SNIPPET$1 + `
  return -x;
`, NEG_PACKED = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function neg(r) {
  const { inputs: e, backend: t } = r, { x: n } = e;
  if (t.shouldExecuteOnCPU([n])) {
    const a = t.texData.get(n.dataId), [o, u] = negImplCPU(a.values, n.shape, n.dtype);
    return t.makeTensorInfo(u, n.dtype, o);
  }
  let s;
  return env().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? s = new UnaryOpPackedProgram(n.shape, NEG_PACKED) : s = new UnaryOpProgram(n.shape, NEG), t.runWebGLProgram(s, [n], n.dtype);
}
const negConfig = {
  kernelName: Neg,
  backendName: "webgl",
  kernelFunc: neg
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV3Impl = nonMaxSuppressionV3Impl$2;
function nonMaxSuppressionV3(r) {
  warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: n } = r, { boxes: s, scores: a } = e, { maxOutputSize: o, iouThreshold: u, scoreThreshold: l } = n, f = t.readSync(s.dataId), c = t.readSync(a.dataId), { selectedIndices: h } = nonMaxSuppressionV3Impl(f, c, o, u, l);
  return t.makeTensorInfo([h.length], "int32", new Int32Array(h));
}
const nonMaxSuppressionV3Config = {
  kernelName: NonMaxSuppressionV3,
  backendName: "webgl",
  kernelFunc: nonMaxSuppressionV3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV4Impl = nonMaxSuppressionV4Impl$2;
function nonMaxSuppressionV4(r) {
  warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: n } = r, { boxes: s, scores: a } = e, { maxOutputSize: o, iouThreshold: u, scoreThreshold: l, padToMaxOutputSize: f } = n, c = t.readSync(s.dataId), h = t.readSync(a.dataId), { selectedIndices: d, validOutputs: m } = nonMaxSuppressionV4Impl(c, h, o, u, l, f);
  return [
    t.makeTensorInfo([d.length], "int32", new Int32Array(d)),
    t.makeTensorInfo([], "int32", new Int32Array([m]))
  ];
}
const nonMaxSuppressionV4Config = {
  kernelName: NonMaxSuppressionV4,
  backendName: "webgl",
  kernelFunc: nonMaxSuppressionV4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV5Impl = nonMaxSuppressionV5Impl$2;
function nonMaxSuppressionV5(r) {
  warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: n } = r, { boxes: s, scores: a } = e, { maxOutputSize: o, iouThreshold: u, scoreThreshold: l, softNmsSigma: f } = n, c = t.readSync(s.dataId), h = t.readSync(a.dataId), d = o, m = u, g = l, y = f, { selectedIndices: b, selectedScores: v } = nonMaxSuppressionV5Impl(c, h, d, m, g, y);
  return [
    t.makeTensorInfo([b.length], "int32", new Int32Array(b)),
    t.makeTensorInfo([v.length], "float32", new Float32Array(v))
  ];
}
const nonMaxSuppressionV5Config = {
  kernelName: NonMaxSuppressionV5,
  backendName: "webgl",
  kernelFunc: nonMaxSuppressionV5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OneHotProgram {
  constructor(e, t, n, s) {
    this.variableNames = ["indices"], this.outputShape = [e, t], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${s}), float(${n}),
                      float(index == coords.y)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oneHot = (r) => {
  const { inputs: e, backend: t, attrs: n } = r, { indices: s } = e, { dtype: a, depth: o, onValue: u, offValue: l } = n, f = sizeFromShape(s.shape), c = new OneHotProgram(f, o, u, l), h = reshape({ inputs: { x: s }, backend: t, attrs: { shape: [f] } }), d = t.runWebGLProgram(c, [h], a);
  t.disposeIntermediateTensorInfo(h);
  const m = [...s.shape, o], g = reshape({ inputs: { x: d }, backend: t, attrs: { shape: m } });
  return t.disposeIntermediateTensorInfo(d), g;
}, oneHotConfig = {
  kernelName: OneHot,
  backendName: "webgl",
  kernelFunc: oneHot
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zerosLike(r) {
  const { inputs: e, backend: t } = r, { x: n } = e;
  if (n.dtype === "complex64") {
    const s = real({ inputs: { input: n }, backend: t }), a = zerosLike({ inputs: { x: s }, backend: t }), o = imag({ inputs: { input: n }, backend: t }), u = zerosLike({ inputs: { x: o }, backend: t }), l = complex({ inputs: { real: a, imag: u }, backend: t });
    return t.disposeIntermediateTensorInfo(s), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(u), l;
  } else
    return fill({
      attrs: {
        shape: n.shape,
        dtype: n.dtype,
        value: n.dtype === "string" ? "" : 0
      },
      backend: t
    });
}
const zerosLikeConfig = {
  kernelName: ZerosLike,
  backendName: "webgl",
  kernelFunc: zerosLike
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function onesLike(r) {
  const { inputs: e, backend: t } = r, { x: n } = e;
  if (n.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (n.dtype === "complex64") {
    const s = real({ inputs: { input: n }, backend: t }), a = onesLike({ inputs: { x: s }, backend: t }), o = imag({ inputs: { input: n }, backend: t }), u = zerosLike({ inputs: { x: o }, backend: t }), l = complex({ inputs: { real: a, imag: u }, backend: t });
    return t.disposeIntermediateTensorInfo(s), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(u), l;
  } else
    return fill({ attrs: { shape: n.shape, dtype: n.dtype, value: 1 }, backend: t });
}
const onesLikeConfig = {
  kernelName: OnesLike,
  backendName: "webgl",
  kernelFunc: onesLike
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pack(r) {
  const { inputs: e, backend: t, attrs: n } = r, { axis: s } = n;
  if (e.length === 1)
    return expandDims({ inputs: { input: e[0] }, backend: t, attrs: { dim: s } });
  const a = e[0].shape, o = e[0].dtype;
  e.forEach((c) => {
    assertShapesMatch(a, c.shape, "All tensors passed to stack must have matching shapes"), assert$1(o === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const u = [], l = e.map((c) => {
    const h = expandDims({ inputs: { input: c }, backend: t, attrs: { dim: s } });
    return u.push(h), h;
  }), f = concat({ inputs: l, backend: t, attrs: { axis: s } });
  return u.forEach((c) => t.disposeIntermediateTensorInfo(c)), f;
}
const packConfig = {
  kernelName: Pack,
  backendName: "webgl",
  kernelFunc: pack
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PadProgram {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map(
      (f, c) => f[0] + e[c] + f[1]
      /* afterPad */
    );
    const s = e.length, a = getCoordsDataType(s), o = t.map((f) => f[0]).join(","), u = t.map((f, c) => f[0] + e[c]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, s);
    if (s === 1) {
      this.userCode = `
        int start = ${o};
        int end = ${u};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${a} start = ${a}(${o});
      ${a} end = ${a}(${u});

      void main() {
        ${a} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${a} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PadPackedProgram {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map(
      (y, b) => y[0] + e[b] + y[1]
      /* afterPad */
    );
    const s = e.length, a = getCoordsDataType(s), o = t.map((y) => y[0]).join(","), u = t.map((y, b) => y[0] + e[b]).join(","), l = getChannels("rc", s), f = getChannels("source", s), c = `${l[s - 1]} < ${this.outputShape[s - 1]}`, h = s === 1 ? "source" : `vec2(${f.slice(-2).join()})`, d = [
      `${a} rc = outputLoc;`,
      `${l[s - 1]} += 1;
       if(${c}) {
      `,
      s === 1 ? "" : `}
       rc = outputLoc;
       ${l[s - 2]} += 1;
       if(${l[s - 2]} < ${this.outputShape[s - 2]}) {`,
      s === 1 ? "" : `  ${l[s - 1]} += 1;
         if(${c}) {`
    ], m = s === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
    let g = "";
    for (let y = 0, b = s === 1 ? 2 : 4; y < b; y++)
      g += `
        ${d[y]}
        if (${m}) {
          result[${y}] = float(value);
        } else {
          ${a} source = rc - start;
          result[${y}] = getChannel(getX(${f.join()}), ${h});
        }
      `;
    g += s === 1 ? "} " : "}}", this.userCode = `
      const ${a} start = ${a}(${o});
      const ${a} end = ${a}(${u});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${g}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const padV2 = (r) => {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { paddings: a, constantValue: o } = n;
  if (sizeFromShape(s.shape) === 0) {
    const f = a.map(
      (c, h) => c[0] + s.shape[h] + c[1]
      /* afterPad */
    );
    return fill({
      backend: t,
      attrs: { shape: f, value: o, dtype: s.dtype }
    });
  }
  const u = env().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new PadPackedProgram(s.shape, a, o) : new PadProgram(s.shape, a, o), l = [[o]];
  return t.runWebGLProgram(u, [s], s.dtype, l);
}, padV2Config = {
  kernelName: PadV2,
  backendName: "webgl",
  kernelFunc: padV2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const POW = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`, POW_PACKED = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + CHECK_NAN_SNIPPET_PACKED + `
  return result;
`, pow = binaryKernelFunc({ opSnippet: POW, packedOpSnippet: POW_PACKED }), powConfig = {
  kernelName: Pow,
  backendName: "webgl",
  kernelFunc: pow
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function prod(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { axis: a, keepDims: o } = n, u = s.shape.length, l = [], f = parseAxisParam(a, s.shape);
  let c = f;
  const h = getAxesPermutation(c, u);
  let d = s;
  h != null && (d = transpose({ inputs: { x: s }, backend: t, attrs: { perm: h } }), c = getInnerMostAxes(c.length, u), l.push(d)), assertAxesAreInnerMostDims("prod", c, u);
  let m;
  if (t.shouldExecuteOnCPU([d])) {
    const g = t.texData.get(d.dataId).values, { outVals: y, outShape: b, outDtype: v } = prodImplCPU(d.shape, d.dtype, g, c);
    m = t.makeTensorInfo(b, v, y);
  } else {
    const [g, y] = computeOutAndReduceShapes(d.shape, c), b = sizeFromShape(y), v = reshape({ inputs: { x: d }, backend: t, attrs: { shape: [-1, b] } }), w = sumOutType(s.dtype), I = reduce(v, w, "prod", t);
    m = reshape({ inputs: { x: I }, backend: t, attrs: { shape: g } }), l.push(v), l.push(I);
  }
  if (o) {
    l.push(m);
    const g = expandShapeToKeepDim(m.shape, f);
    m = reshape({ inputs: { x: m }, backend: t, attrs: { shape: g } });
  }
  return l.forEach((g) => t.disposeIntermediateTensorInfo(g)), m;
}
const prodConfig = {
  kernelName: Prod,
  backendName: "webgl",
  kernelFunc: prod
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function raggedGather(r) {
  const { inputs: e, backend: t, attrs: n } = r, { paramsNestedSplits: s, paramsDenseValues: a, indices: o } = e, { outputRaggedRank: u } = n, l = s.map((v) => t.readSync(v.dataId)), f = s.map((v) => v.shape), c = t.readSync(a.dataId), h = t.readSync(o.dataId), [d, m, g] = raggedGatherImplCPU(l, f, c, a.shape, a.dtype, h, o.shape, u), y = d.map((v) => t.makeTensorInfo([v.length], "int32", v)), b = t.makeTensorInfo(g, a.dtype, m);
  return y.concat([b]);
}
const raggedGatherConfig = {
  kernelName: RaggedGather,
  backendName: "webgl",
  kernelFunc: raggedGather
};
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function raggedRange(r) {
  const { inputs: e, backend: t } = r, { starts: n, limits: s, deltas: a } = e, o = t.readSync(n.dataId), u = t.readSync(s.dataId), l = t.readSync(a.dataId), [f, c] = raggedRangeImplCPU(o, n.shape, n.dtype, u, s.shape, l, a.shape), h = t.makeTensorInfo([f.length], "int32", f), d = t.makeTensorInfo([c.length], n.dtype, c);
  return [h, d];
}
const raggedRangeConfig = {
  kernelName: RaggedRange,
  backendName: "webgl",
  kernelFunc: raggedRange
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function raggedTensorToTensor(r) {
  const { inputs: e, backend: t, attrs: n } = r, { shape: s, values: a, defaultValue: o, rowPartitionTensors: u } = e, { rowPartitionTypes: l } = n, f = t.readSync(s.dataId), c = t.readSync(a.dataId), h = t.readSync(o.dataId), d = u.map((b) => t.readSync(b.dataId)), m = u.map((b) => b.shape), [g, y] = raggedTensorToTensorImplCPU(f, s.shape, c, a.shape, a.dtype, h, o.shape, d, m, l);
  return t.makeTensorInfo(g, a.dtype, y);
}
const raggedTensorToTensorConfig = {
  kernelName: RaggedTensorToTensor,
  backendName: "webgl",
  kernelFunc: raggedTensorToTensor
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const range = (r) => {
  const { backend: e, attrs: t } = r, { start: n, stop: s, step: a, dtype: o } = t, u = rangeImplCPU(n, s, a, o);
  return e.makeTensorInfo([u.length], o, u);
}, rangeConfig = {
  kernelName: Range,
  backendName: "webgl",
  kernelFunc: range
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RECIPROCAL = "return 1.0 / x;", reciprocal = unaryKernelFunc({ opSnippet: RECIPROCAL }), reciprocalConfig = {
  kernelName: Reciprocal,
  backendName: "webgl",
  kernelFunc: reciprocal
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RELU = CHECK_NAN_SNIPPET$1 + `
  return (x < 0.0) ? 0.0 : x;
`, RELU_PACKED = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, relu = unaryKernelFunc({ opSnippet: RELU, packedOpSnippet: RELU_PACKED }), reluConfig = {
  kernelName: Relu$1,
  backendName: "webgl",
  kernelFunc: relu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RELU6 = CHECK_NAN_SNIPPET$1 + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, RELU6_PACKED = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, relu6 = unaryKernelFunc({ opSnippet: RELU6, packedOpSnippet: RELU6_PACKED }), relu6Config = {
  kernelName: Relu6$1,
  backendName: "webgl",
  kernelFunc: relu6
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearProgram {
  constructor(e, t, n, s, a) {
    this.variableNames = ["A"], this.outputShape = [];
    const [o, u, l, f] = e;
    this.outputShape = [o, t, n, f];
    const c = [
      s && t > 1 ? u - 1 : u,
      s && n > 1 ? l - 1 : l
    ], h = [
      s && t > 1 ? t - 1 : t,
      s && n > 1 ? n - 1 : n
    ];
    let d;
    a ? d = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0] / h[0]},
          ${c[1] / h[1]});
      const vec2 inputShapeRC = vec2(${u}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearPackedProgram {
  constructor(e, t, n, s, a) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [o, u, l, f] = e;
    this.outputShape = [o, t, n, f];
    const c = [
      s && t > 1 ? u - 1 : u,
      s && n > 1 ? l - 1 : l
    ], h = [
      s && t > 1 ? t - 1 : t,
      s && n > 1 ? n - 1 : n
    ];
    let d;
    a ? d = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0] / h[0]},
          ${c[1] / h[1]},
          ${c[1] / h[1]});
      const vec3 inputShapeRC = vec3(${u}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${f - 1};
        bool hasNextRow = coords.z < ${n - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeBilinear(r) {
  const { inputs: e, backend: t, attrs: n } = r, { images: s } = e, { alignCorners: a, halfPixelCenters: o, size: u } = n, [l, f] = u, c = env().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new ResizeBilinearPackedProgram(s.shape, l, f, a, o) : new ResizeBilinearProgram(s.shape, l, f, a, o);
  return t.runWebGLProgram(c, [s], "float32");
}
const resizeBilinearConfig = {
  kernelName: ResizeBilinear,
  backendName: "webgl",
  kernelFunc: resizeBilinear
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearBackpropProgram {
  constructor(e, t, n) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    const [, s, a] = t, [, o, u] = e, l = [
      n && o > 1 ? s - 1 : s,
      n && u > 1 ? a - 1 : a
    ], f = [
      n && o > 1 ? o - 1 : o,
      n && u > 1 ? u - 1 : u
    ], c = l[0] / f[0], h = l[1] / f[1], d = 1 / c, m = 1 / h, g = Math.ceil(d) * 2 + 2, y = Math.ceil(m) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${m});

        const int winHeight = int(${g});
        const int winWidth = int(${y});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${o}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${u}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${s - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${a - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeBilinearGrad(r) {
  const { inputs: e, backend: t, attrs: n } = r, { images: s, dy: a } = e, { alignCorners: o } = n, u = new ResizeBilinearBackpropProgram(a.shape, s.shape, o);
  return t.runWebGLProgram(u, [a], a.dtype);
}
const resizeBilinearGradConfig = {
  kernelName: ResizeBilinearGrad,
  backendName: "webgl",
  kernelFunc: resizeBilinearGrad
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeighborProgram {
  constructor(e, t, n, s, a) {
    this.variableNames = ["A"], this.outputShape = [];
    const [o, u, l, f] = e;
    this.outputShape = [o, t, n, f];
    const c = [
      s && t > 1 ? u - 1 : u,
      s && n > 1 ? l - 1 : l
    ], h = [
      s && t > 1 ? t - 1 : t,
      s && n > 1 ? n - 1 : n
    ], d = s ? "0.5" : "0.0";
    let m;
    a ? m = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : m = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0] / h[0]},
          ${c[1] / h[1]});
      const vec2 inputShapeRC = vec2(${u}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeighborPackedProgram {
  constructor(e, t, n, s, a) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [o, u, l, f] = e;
    this.outputShape = [o, t, n, f];
    const c = [
      s && t > 1 ? u - 1 : u,
      s && n > 1 ? l - 1 : l
    ], h = [
      s && t > 1 ? t - 1 : t,
      s && n > 1 ? n - 1 : n
    ], d = s ? "0.5" : "0.0";
    let m;
    a ? m = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : m = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0] / h[0]},
          ${c[1] / h[1]},
          ${c[1] / h[1]});
      const vec3 inputShapeRC = vec3(${u}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${f - 1};
        bool hasNextRow = coords.z < ${n - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeNearestNeighbor(r) {
  const { inputs: e, backend: t, attrs: n } = r, { images: s } = e, { alignCorners: a, halfPixelCenters: o, size: u } = n, [l, f] = u, c = env().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new ResizeNearestNeighborPackedProgram(s.shape, l, f, a, o) : new ResizeNearestNeighborProgram(s.shape, l, f, a, o);
  return t.runWebGLProgram(c, [s], s.dtype);
}
const resizeNearestNeighborConfig = {
  kernelName: ResizeNearestNeighbor,
  backendName: "webgl",
  kernelFunc: resizeNearestNeighbor
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeigborBackpropProgram {
  constructor(e, t, n) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    const [, s, a] = t, [, o, u] = e, l = [
      n && o > 1 ? s - 1 : s,
      n && u > 1 ? a - 1 : a
    ], f = [
      n && o > 1 ? o - 1 : o,
      n && u > 1 ? u - 1 : u
    ], c = l[0] / f[0], h = l[1] / f[1], d = 1 / c, m = 1 / h, g = Math.ceil(d) * 2 + 2, y = Math.ceil(m) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${m});

        const int winHeight = int(${g});
        const int winWidth = int(${y});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${o}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${u}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${f[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${f[1]}));

            int sourceNearestRow = int(min(
                float(int(${s}) - 1),
                ${n} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${a}) - 1),
                ${n} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeNearestNeighborGrad(r) {
  const { inputs: e, backend: t, attrs: n } = r, { images: s, dy: a } = e, { alignCorners: o } = n, u = new ResizeNearestNeigborBackpropProgram(a.shape, s.shape, o);
  return t.runWebGLProgram(u, [a], a.dtype);
}
const resizeNearestNeighborGradConfig = {
  kernelName: ResizeNearestNeighborGrad,
  backendName: "webgl",
  kernelFunc: resizeNearestNeighborGrad
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReverseProgram {
  constructor(e, t) {
    this.variableNames = ["x"];
    const n = e.length;
    if (n > 4)
      throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);
    if (this.outputShape = e, n === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;
      return;
    }
    const s = (u) => t.indexOf(u) !== -1 && e[u] !== 1 ? `${e[u]} - coords[${u}] - 1` : `coords[${u}]`, a = e.map((u, l) => s(l)).join(","), o = getCoordsDataType(n);
    this.userCode = `
      void main() {
        ${o} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReversePackedProgram {
  constructor(e, t) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0;
    const n = e.length;
    if (n > 4)
      throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);
    this.outputShape = e;
    const s = getChannels("rc", n), a = `${s[n - 1]} + 1 < ${this.outputShape[n - 1]}`, o = `${s[n - 2]} + 1 < ${this.outputShape[n - 2]}`, u = getCoordsDataType(n);
    n === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${a}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${u} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(s.slice())};
          if(${a}){
            result.g = ${f(s.slice())};
          }
          if(${o}) {
            result.b = ${c(s.slice())};
            if(${a}) {
              result.a = ${h(s.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function l(g) {
      return d(g);
    }
    function f(g) {
      return g[n - 1] = "(" + g[n - 1] + " + 1)", d(g);
    }
    function c(g) {
      return g[n - 2] = "(" + g[n - 2] + " + 1)", d(g);
    }
    function h(g) {
      return g[n - 1] = "(" + g[n - 1] + " + 1)", g[n - 2] = "(" + g[n - 2] + " + 1)", d(g);
    }
    function d(g) {
      const y = e.map((w, I) => m(I, g)), b = y.join(","), v = y.slice(-2).join(",");
      return `getChannel(getX(${b}), vec2(${v}))`;
    }
    function m(g, y) {
      return t.indexOf(g) !== -1 && e[g] !== 1 ? `${e[g]} - ${y[g]} - 1` : `${y[g]}`;
    }
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reverse(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { dims: a } = n, o = s.shape.length, u = parseAxisParam(a, s.shape);
  if (o === 0)
    return identity({ inputs: { x: s }, backend: t });
  const l = env().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new ReversePackedProgram(s.shape, u) : new ReverseProgram(s.shape, u);
  return t.runWebGLProgram(l, [s], s.dtype);
}
const reverseConfig = {
  kernelName: Reverse,
  backendName: "webgl",
  kernelFunc: reverse
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RotateProgram {
  constructor(e, t) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    const n = e[1], s = e[2];
    this.outputShape = e;
    let a = "";
    typeof t == "number" ? a = `float outputValue = ${t.toFixed(2)};` : a = `
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${a}
          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rotateWithOffsetConfig = {
  kernelName: RotateWithOffset,
  backendName: "webgl",
  kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
    const { image: n } = r, { radians: s, fillValue: a, center: o } = e, u = t, l = new RotateProgram(n.shape, a), [f, c] = getImageCenter(o, n.shape[1], n.shape[2]), h = [[f, c, Math.sin(s), Math.cos(s)]];
    return u.runWebGLProgram(l, [n], n.dtype, h);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ROUND = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`, round = unaryKernelFunc({ opSnippet: ROUND }), roundConfig = {
  kernelName: Round,
  backendName: "webgl",
  kernelFunc: round
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RSQRT = "return inversesqrt(x);", rsqrt = unaryKernelFunc({ opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU }), rsqrtConfig = {
  kernelName: Rsqrt,
  backendName: "webgl",
  kernelFunc: rsqrt
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ScatterProgram {
  constructor(e, t, n, s, a, o, u = !0, l = !1) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = o;
    const f = getCoordsDataType(a.length), c = getCoordsDataType(o.length);
    let h = "";
    n === 1 ? h = "i" : n === 2 && (h = "i, j");
    const d = `getIndices(${h})`;
    let m = "";
    s === 1 ? m = "i" : s === 2 && (m = "i, coords[1]");
    const g = `getUpdates(${m})`;
    let y = "";
    l && (y = "coords[0], coords[1]");
    const b = `getDefaultValue(${y})`, v = t > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${f} strides = ${f}(${a});

        void main() {
          ${c} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${d});
              flattenedIndex += index * ${v};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${g};
              found = true;
            }
          }
          setOutput(mix(${b}, sum, float(found)));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ScatterPackedProgram {
  constructor(e, t, n, s, a, o, u = !0, l = !1) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = o;
    const f = getCoordsDataType(a.length), c = getCoordsDataType(o.length);
    let h = "";
    n === 1 ? h = "i" : n === 2 && (h = "i, j");
    const d = `getIndices(${h})`;
    let m = "";
    s === 1 ? m = "i" : s === 2 && (m = "i, coords[1]");
    const g = `getUpdates(${m})`;
    let y = "";
    l && (y = "coords[0], coords[1]");
    const b = `getDefaultValue(${y})`, v = t > 1 ? "strides[j]" : "strides", w = t > 1 ? "strides[j + 1]" : "strides";
    this.userCode = `
        ${f} strides = ${f}(${a});

        void main() {
          ${c} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${e}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${t}; j+=2) {
              ivec4 index = round(${d});
              flattenedIndex += index.xz * ${v};
              if (j + 1 < ${t}) {
                flattenedIndex += index.yw * ${w};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${g};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${b}, sum, found));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function scatterNd(r) {
  const { inputs: e, backend: t, attrs: n } = r, { indices: s, updates: a } = e, { shape: o } = n, { sliceRank: u, numUpdates: l, sliceSize: f, strides: c, outputSize: h } = calculateShapes(a, s, o), d = [h / f, f];
  if (h === 0)
    return t.makeTensorInfo(o, s.dtype);
  const m = reshape({ inputs: { x: s }, backend: t, attrs: { shape: [l, u] } }), g = reshape({ inputs: { x: a }, backend: t, attrs: { shape: [l, f] } }), y = t.makeTensorInfo([], "float32", new Float32Array([0]));
  let b;
  env().getBool("WEBGL_PACK") ? b = new ScatterPackedProgram(l, u, m.shape.length, g.shape.length, c, d) : b = new ScatterProgram(l, u, m.shape.length, g.shape.length, c, d);
  const v = t.runWebGLProgram(b, [g, m, y], g.dtype), w = reshape({ inputs: { x: v }, backend: t, attrs: { shape: o } });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), t.disposeIntermediateTensorInfo(v), t.disposeIntermediateTensorInfo(y), w;
}
const scatterNdConfig = {
  kernelName: ScatterNd,
  backendName: "webgl",
  kernelFunc: scatterNd
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SearchSortedProgram {
  constructor(e, t, n, s) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [e, n];
    const a = "while (left < right) {", o = `for (int i = 0; i < ${Math.ceil(Math.log2(t + 1))}; ++i) { if (left >= right) break;`, u = env().getNumber("WEBGL_VERSION") === 2 ? a : o, l = s === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${u}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function searchSorted(r) {
  const { inputs: e, backend: t, attrs: n } = r, { sortedSequence: s, values: a } = e, { side: o } = n, u = new SearchSortedProgram(s.shape[0], s.shape[1], a.shape[1], o), l = [[s.shape[1]]];
  return t.runWebGLProgram(u, [s, a], "int32", l);
}
const searchSortedConfig = {
  kernelName: SearchSorted,
  backendName: "webgl",
  kernelFunc: searchSorted
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SelectProgram {
  constructor(e, t, n) {
    this.variableNames = ["c", "a", "b"], this.outputShape = t;
    let s, a;
    if (n > 4)
      throw Error(`Where for rank ${n} is not yet supported`);
    if (n === 1)
      a = "resRC", s = "resRC";
    else {
      const u = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], l = [], f = [];
      for (let c = 0; c < t.length; c++)
        f.push(`${u[c]}`), c < e && l.push(`${u[c]}`);
      s = l.join(), a = f.join();
    }
    const o = getCoordsDataType(n);
    this.userCode = `
      void main() {
        ${o} resRC = getOutputCoords();
        float cVal = getC(${s});
        if (cVal >= 1.0) {
          setOutput(getA(${a}));
        } else {
          setOutput(getB(${a}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function select(r) {
  const { inputs: e, backend: t } = r, { condition: n, t: s, e: a } = e, o = new SelectProgram(n.shape.length, s.shape, s.shape.length);
  return t.runWebGLProgram(o, [n, s, a], upcastType(s.dtype, a.dtype));
}
const selectConfig = {
  kernelName: Select,
  backendName: "webgl",
  kernelFunc: select
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SELU = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${SELU_SCALEALPHA};
  float scale = ${SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`, selu = unaryKernelFunc({ opSnippet: SELU }), seluConfig = {
  kernelName: Selu$1,
  backendName: "webgl",
  kernelFunc: selu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SIGMOID = CHECK_NAN_SNIPPET_UNARY + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`, SIGMOID_PACKED = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, sigmoid = unaryKernelFunc({
  opSnippet: SIGMOID,
  packedOpSnippet: SIGMOID_PACKED,
  cpuKernelImpl: sigmoidImplCPU
}), sigmoidConfig = {
  kernelName: Sigmoid$1,
  backendName: "webgl",
  kernelFunc: sigmoid
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SIGN = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`, sign = unaryKernelFunc({ opSnippet: SIGN }), signConfig = {
  kernelName: Sign,
  backendName: "webgl",
  kernelFunc: sign
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SIN = CHECK_NAN_SNIPPET_UNARY + `
  return sin(x);
`, SIN_PACKED = `
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${CHECK_NAN_SNIPPET_PACKED}
  return result;
`, sin = unaryKernelFunc({ opSnippet: SIN, packedOpSnippet: SIN_PACKED }), sinConfig = {
  kernelName: Sin,
  backendName: "webgl",
  kernelFunc: sin
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SINH = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`, sinh = unaryKernelFunc({ opSnippet: SINH }), sinhConfig = {
  kernelName: Sinh,
  backendName: "webgl",
  kernelFunc: sinh
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SOFTPLUS = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`, softplus = unaryKernelFunc({ opSnippet: SOFTPLUS }), softplusConfig = {
  kernelName: Softplus$1,
  backendName: "webgl",
  kernelFunc: softplus
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const spaceToBatchND = (r) => {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { blockShape: a, paddings: o } = n;
  assert$1(s.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  const u = a.reduce((v, w) => v * w), l = [[0, 0]];
  l.push(...o);
  for (let v = 1 + a.length; v < s.shape.length; ++v)
    l.push([0, 0]);
  const f = [], c = padV2({
    inputs: { x: s },
    backend: t,
    attrs: { paddings: l, constantValue: 0 }
  }), h = getReshaped(c.shape, a, u, !1), d = getPermuted(h.length, a.length, !1), m = getReshapedPermuted(c.shape, a, u, !1), g = reshape({ inputs: { x: c }, backend: t, attrs: { shape: h } }), y = transpose({
    inputs: { x: g },
    backend: t,
    attrs: { perm: d }
  }), b = reshape({ inputs: { x: y }, backend: t, attrs: { shape: m } });
  return f.push(c), f.push(g), f.push(y), f.forEach((v) => t.disposeIntermediateTensorInfo(v)), b;
}, spaceToBatchNDConfig = {
  kernelName: SpaceToBatchND,
  backendName: "webgl",
  kernelFunc: spaceToBatchND
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseFillEmptyRows(r) {
  const { inputs: e, backend: t } = r, { indices: n, values: s, denseShape: a, defaultValue: o } = e;
  if (a.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${a.shape}`);
  if (n.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${s.shape}`);
  if (o.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${o.shape}`);
  const u = t.readSync(n.dataId), l = t.readSync(s.dataId), f = t.readSync(a.dataId), c = t.readSync(o.dataId)[0], [h, d, m, g, y] = sparseFillEmptyRowsImplCPU(u, n.shape, n.dtype, l, s.dtype, f, c);
  return [
    t.makeTensorInfo(d, n.dtype, h),
    t.makeTensorInfo([d[0]], s.dtype, m),
    t.makeTensorInfo([g.length], "bool", new Uint8Array(g.map((b) => Number(b)))),
    t.makeTensorInfo([y.length], n.dtype, new Int32Array(y))
  ];
}
const sparseFillEmptyRowsConfig = {
  kernelName: SparseFillEmptyRows,
  backendName: "webgl",
  kernelFunc: sparseFillEmptyRows
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseReshape(r) {
  const { inputs: e, backend: t } = r, { inputIndices: n, inputShape: s, newShape: a } = e;
  if (n.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${s.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${a.shape}`);
  const o = Array.from(t.readSync(s.dataId)), u = t.readSync(n.dataId), l = Array.from(t.readSync(a.dataId)), [f, c, h] = sparseReshapeImplCPU(u, n.shape, n.dtype, o, l);
  return [
    t.makeTensorInfo(c, n.dtype, f),
    t.makeTensorInfo([h.length], a.dtype, new Int32Array(h))
  ];
}
const sparseReshapeConfig = {
  kernelName: SparseReshape,
  backendName: "webgl",
  kernelFunc: sparseReshape
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseSegmentMean(r) {
  const { inputs: e, backend: t } = r, { data: n, indices: s, segmentIds: a } = e;
  if (n.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (s.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${s.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${a.shape}`);
  const o = t.readSync(n.dataId), u = t.readSync(s.dataId), l = t.readSync(a.dataId), [f, c] = sparseSegmentReductionImplCPU(o, n.shape, n.dtype, u, l, !0);
  return t.makeTensorInfo(c, n.dtype, f);
}
const sparseSegmentMeanConfig = {
  kernelName: SparseSegmentMean,
  backendName: "webgl",
  kernelFunc: sparseSegmentMean
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseSegmentSum(r) {
  const { inputs: e, backend: t } = r, { data: n, indices: s, segmentIds: a } = e;
  if (n.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (s.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${s.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${a.shape}`);
  const o = t.readSync(n.dataId), u = t.readSync(s.dataId), l = t.readSync(a.dataId), [f, c] = sparseSegmentReductionImplCPU(o, n.shape, n.dtype, u, l);
  return t.makeTensorInfo(c, n.dtype, f);
}
const sparseSegmentSumConfig = {
  kernelName: SparseSegmentSum,
  backendName: "webgl",
  kernelFunc: sparseSegmentSum
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseToDense(r) {
  const { inputs: e, backend: t, attrs: n } = r, { sparseIndices: s, sparseValues: a, defaultValue: o } = e, { outputShape: u } = n, { sliceRank: l, numUpdates: f, sliceSize: c, strides: h, outputSize: d } = calculateShapes(a, s, u), m = !1;
  if (a.dtype === "string") {
    const v = t.bufferSync(s), w = t.bufferSync(a), I = decodeString(t.readSync(o.dataId)[0]), T = scatterImplCPU(v, w, u, d, c, f, l, h, I, m);
    return t.makeTensorInfo(u, T.dtype, T.values);
  }
  const g = new ScatterProgram(f, l, s.shape.length, a.shape.length, h, [d, 1], m), y = t.runWebGLProgram(g, [a, s, o], a.dtype), b = reshape({ inputs: { x: y }, backend: t, attrs: { shape: u } });
  return t.disposeIntermediateTensorInfo(y), b;
}
const sparseToDenseConfig = {
  kernelName: SparseToDense,
  backendName: "webgl",
  kernelFunc: sparseToDense
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function splitV(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { numOrSizeSplits: a, axis: o } = n, u = parseAxisParam(o, s.shape)[0], l = prepareSplitSize(s, a, u), f = s.shape.length, c = new Array(f).fill(0), h = s.shape.slice();
  return l.map((d) => {
    const m = [...h];
    m[u] = d;
    const g = slice({ inputs: { x: s }, backend: t, attrs: { begin: c, size: m } });
    return c[u] += d, g;
  });
}
const splitVConfig = {
  kernelName: SplitV,
  backendName: "webgl",
  kernelFunc: splitV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SQRT = "return sqrt(x);", sqrt = unaryKernelFunc({ opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU }), sqrtConfig = {
  kernelName: Sqrt,
  backendName: "webgl",
  kernelFunc: sqrt
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SQUARE = "return x * x;", square = unaryKernelFunc({ opSnippet: SQUARE }), squareConfig = {
  kernelName: Square,
  backendName: "webgl",
  kernelFunc: square
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SQUARED_DIFFERENCE = "return (a - b) * (a - b);", squaredDifference = binaryKernelFunc({ opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE }), squaredDifferenceConfig = {
  kernelName: SquaredDifference,
  backendName: "webgl",
  kernelFunc: squaredDifference
};
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function staticRegexReplace(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  const a = t.readSync(s.dataId), o = fromUint8ToStringArray(a), u = staticRegexReplaceImplCPU(o, "string", n);
  return t.makeTensorInfo(s.shape, "string", u);
}
const staticRegexReplaceConfig = {
  kernelName: StaticRegexReplace,
  backendName: "webgl",
  kernelFunc: staticRegexReplace
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function step({ inputs: r, attrs: e, backend: t }) {
  const { x: n } = r, s = CHECK_NAN_SNIPPET$1 + `
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `, a = new UnaryOpProgram(n.shape, s);
  return t.runWebGLProgram(a, [n], n.dtype);
}
const stepConfig = {
  kernelName: Step,
  backendName: "webgl",
  kernelFunc: step
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class StridedSliceProgram {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.outputShape = n;
    const s = n.length, a = getCoordsDataType(n.length), o = getCoordsDataType(n.length);
    let u = "";
    if (s === 1)
      u = "coords * strides + begin";
    else {
      let l = 0;
      u = n.map((f, c) => (l++, n.length === 1 ? `coords * strides[${c}] + begin[${c}]` : `coords[${l - 1}] * strides[${c}] + begin[${c}]`)).join(",");
    }
    this.userCode = `
      ${a} begin = ${a}(${e});
      ${a} strides = ${a}(${t});

      void main() {
        ${o} coords = getOutputCoords();
        setOutput(getX(${u}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stridedSlice(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { begin: a, end: o, strides: u, beginMask: l, endMask: f, ellipsisMask: c, newAxisMask: h, shrinkAxisMask: d } = n, { finalShapeSparse: m, finalShape: g, isIdentity: y, sliceDim0: b, isSimpleSlice: v, begin: w, end: I, strides: T } = sliceInfo(s.shape, a, o, u, l, f, c, h, d);
  let _;
  if (y)
    _ = reshape({ inputs: { x: s }, backend: t, attrs: { shape: g } });
  else if (b || v) {
    assert$1(s.shape.length >= 1, () => `Input must have rank at least 1, got: ${s.shape.length}`);
    const O = computeOutShape$2(w, I, T), q = slice({ inputs: { x: s }, backend: t, attrs: { begin: w, size: O } });
    _ = reshape({ inputs: { x: q }, backend: t, attrs: { shape: g } }), t.disposeIntermediateTensorInfo(q);
  } else if (t.shouldExecuteOnCPU([s])) {
    const q = t.readSync(s.dataId), V = buffer$1(s.shape, s.dtype, q), H = stridedSliceImplCPU(m, V, T, w);
    _ = t.makeTensorInfo(g, s.dtype, H.values);
  } else {
    const q = new StridedSliceProgram(w, T, m);
    _ = t.runWebGLProgram(q, [s], s.dtype);
  }
  const F = reshape({ inputs: { x: _ }, backend: t, attrs: { shape: g } });
  return t.disposeIntermediateTensorInfo(_), F;
}
const stridedSliceConfig = {
  kernelName: StridedSlice,
  backendName: "webgl",
  kernelFunc: stridedSlice
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringNGrams(r) {
  const { inputs: e, backend: t, attrs: n } = r, { separator: s, nGramWidths: a, leftPad: o, rightPad: u, padWidth: l, preserveShortSequences: f } = n, { data: c, dataSplits: h } = e, d = t.readSync(c.dataId), m = t.readSync(h.dataId), [g, y] = stringNGramsImplCPU(d, m, s, a, o, u, l, f);
  return [
    t.makeTensorInfo([g.length], "string", g),
    t.makeTensorInfo(h.shape, "int32", y)
  ];
}
const stringNGramsConfig = {
  kernelName: StringNGrams,
  backendName: "webgl",
  kernelFunc: stringNGrams
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringSplit(r) {
  const { inputs: e, backend: t, attrs: n } = r, { skipEmpty: s } = n, { input: a, delimiter: o } = e;
  if (a.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (a.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${a.shape}`);
  if (o.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);
  const u = t.readSync(a.dataId), l = t.readSync(o.dataId)[0], [f, c, h] = stringSplitImplCPU(u, l, s), d = c.length;
  return [
    t.makeTensorInfo([d, 2], "int32", f),
    t.makeTensorInfo([d], "string", c),
    t.makeTensorInfo([2], "int32", new Int32Array(h))
  ];
}
const stringSplitConfig = {
  kernelName: StringSplit,
  backendName: "webgl",
  kernelFunc: stringSplit
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringToHashBucketFast(r) {
  const { inputs: e, backend: t, attrs: n } = r, { numBuckets: s } = n, { input: a } = e;
  if (a.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (s <= 0)
    throw new Error("Number of buckets must be at least 1");
  const o = t.readSync(a.dataId), u = stringToHashBucketFastImplCPU(o, s);
  return t.makeTensorInfo(a.shape, "int32", u);
}
const stringToHashBucketFastConfig = {
  kernelName: StringToHashBucketFast,
  backendName: "webgl",
  kernelFunc: stringToHashBucketFast
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TAN = "return tan(x);", tan = unaryKernelFunc({ opSnippet: TAN }), tanConfig = {
  kernelName: Tan,
  backendName: "webgl",
  kernelFunc: tan
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TANH = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`, tanh = unaryKernelFunc({ opSnippet: TANH }), tanhConfig = {
  kernelName: Tanh$1,
  backendName: "webgl",
  kernelFunc: tanh
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tensorScatterUpdate(r) {
  const { inputs: e, backend: t, attrs: n } = r, { tensor: s, indices: a, updates: o } = e, { sliceRank: u, numUpdates: l, sliceSize: f, strides: c, outputSize: h } = calculateShapes(o, a, s.shape), d = [h / f, f];
  if (h === 0)
    return t.makeTensorInfo(s.shape, a.dtype);
  const m = reshape({ inputs: { x: a }, backend: t, attrs: { shape: [l, u] } }), g = reshape({ inputs: { x: o }, backend: t, attrs: { shape: [l, f] } }), y = reshape({ inputs: { x: s }, backend: t, attrs: { shape: d } }), b = new ScatterProgram(l, u, m.shape.length, g.shape.length, c, d, !1, !0), v = t.runWebGLProgram(b, [g, m, y], y.dtype), w = reshape({ inputs: { x: v }, backend: t, attrs: { shape: s.shape } });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(v), w;
}
const tensorScatterUpdateConfig = {
  kernelName: TensorScatterUpdate,
  backendName: "webgl",
  kernelFunc: tensorScatterUpdate
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TileProgram {
  constructor(e, t) {
    this.variableNames = ["A"];
    const n = new Array(e.length);
    for (let o = 0; o < n.length; o++)
      n[o] = e[o] * t[o];
    this.outputShape = n, this.rank = n.length;
    const s = getCoordsDataType(this.rank), a = getSourceCoords(e);
    this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        setOutput(getA(${a}));
      }
    `;
  }
}
function getSourceCoords(r) {
  const e = r.length;
  if (e > 5)
    throw Error(`Tile for rank ${e} is not yet supported`);
  if (e === 1)
    return `imod(resRC, ${r[0]})`;
  const t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], n = [];
  for (let s = 0; s < r.length; s++)
    n.push(`imod(${t[s]}, ${r[s]})`);
  return n.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tile(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { reps: a } = n;
  if (s.dtype === "string" || s.shape.length > 5) {
    const l = t.readSync(s.dataId), f = s.dtype === "string" ? l.map((d) => decodeString(d)) : l, c = buffer$1(s.shape, s.dtype, f), h = tileImplCPU(c, a);
    return t.makeTensorInfo(h.shape, h.dtype, h.values);
  }
  const o = new TileProgram(s.shape, a);
  return t.runWebGLProgram(o, [s], s.dtype);
}
const tileConfig = {
  kernelName: Tile,
  backendName: "webgl",
  kernelFunc: tile
};
class SwapProgram {
  /**
   * @param shape desired output shape (can be larger than input shape, output
   *                                    will be padded with -Infinity)
   */
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "negativeInf", type: "float" },
      { name: "dir", type: "int" },
      { name: "inc", type: "int" }
    ], this.outputShape = e, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
}
class MergeProgram {
  /**
   * @param shape desired output shape (must be half of the input size)
   */
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "k", type: "int" }
    ], this.outputShape = e, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function disposeIntermediateTensorInfoOrNull(r, e) {
  e !== null && r.disposeIntermediateTensorInfo(e);
}
function roundUpToPow2(r) {
  let e = 1;
  for (; e < r; )
    e *= 2;
  return e;
}
function topK(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s } = e, { k: a, sorted: o } = n, u = env().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), l = env().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), f = s.shape, c = f[f.length - 1];
  if (t.shouldExecuteOnCPU([s]) || c < u || a > l) {
    const H = t.readSync(s.dataId), [R, $] = topKImplCPU(H, f, s.dtype, a, o);
    return [
      t.makeTensorInfo(R.shape, R.dtype, R.values),
      t.makeTensorInfo($.shape, $.dtype, $.values)
    ];
  }
  if (a === 0)
    return f[f.length - 1] = 0, [
      t.makeTensorInfo(f, s.dtype, []),
      t.makeTensorInfo(f, "int32", [])
    ];
  if (c === 1)
    return [
      s,
      fill({ attrs: { shape: f, dtype: "int32", value: 0 }, backend: t })
    ];
  const h = t.texData.get(s.dataId), d = h !== null && h.isPacked, m = d ? t.unpackTensor(s) : s, y = sizeFromShape(f) / c, b = reshape({ inputs: { x: m }, attrs: { shape: [y, c] }, backend: t });
  d && disposeIntermediateTensorInfoOrNull(t, m);
  const v = roundUpToPow2(a), w = roundUpToPow2(c);
  let I = null;
  const T = () => I === null ? [b, b] : [b, I], _ = (H, R, $) => {
    const S = T(), x = new SwapProgram($), A = [[c], [I === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [H], [R]], N = I;
    I = t.runWebGLProgram(x, S, "int32", A), disposeIntermediateTensorInfoOrNull(t, N);
  };
  for (let H = 1; H < v; H *= 2) {
    const R = H * 2;
    for (let $ = H; $ >= 1; $ /= 2)
      _(R, $, [y, w]);
  }
  for (let H = w; H > v; H /= 2) {
    const R = T(), $ = new MergeProgram([y, H / 2]), x = [[c], [I === null ? 1 : 0], [v]], C = I;
    I = t.runWebGLProgram($, R, "int32", x), disposeIntermediateTensorInfoOrNull(t, C);
    const A = v / 2, N = A * 2;
    for (let k = A; k >= 1; k /= 2)
      _(N, k, I.shape);
  }
  let F = I;
  I = slice({ inputs: { x: I }, backend: t, attrs: { begin: 0, size: [y, a] } }), disposeIntermediateTensorInfoOrNull(t, F);
  let O = gatherV2({ inputs: { x: b, indices: I }, backend: t, attrs: { axis: 1, batchDims: 1 } });
  disposeIntermediateTensorInfoOrNull(t, b);
  const q = f.slice(0, -1);
  q.push(a), F = I, I = reshape({ inputs: { x: I }, attrs: { shape: q }, backend: t }), disposeIntermediateTensorInfoOrNull(t, F);
  const V = O;
  return O = reshape({ inputs: { x: O }, attrs: { shape: q }, backend: t }), disposeIntermediateTensorInfoOrNull(t, V), [O, I];
}
const topKConfig = {
  kernelName: TopK,
  backendName: "webgl",
  kernelFunc: topK
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TransformProgram {
  constructor(e, t, n, s, a, o) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = o;
    const u = n === "nearest" ? 1 : 2;
    let l;
    switch (s) {
      case "constant":
        l = 1;
        break;
      case "reflect":
        l = 2;
        break;
      case "wrap":
        l = 3;
        break;
      case "nearest":
        l = 4;
        break;
      default:
        l = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${a});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${a});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${u} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transform(r) {
  const { inputs: e, backend: t, attrs: n } = r, { image: s, transforms: a } = e, { interpolation: o, fillMode: u, fillValue: l, outputShape: f } = n, [c, h, d, m] = s.shape, [g, y] = f ?? [h, d], b = [
    c,
    g,
    y,
    m
  ], v = new TransformProgram(h, d, o, u, l, b);
  return t.runWebGLProgram(v, [s, a], "float32");
}
const transformConfig = {
  kernelName: Transform,
  backendName: "webgl",
  kernelFunc: transform
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unique(r) {
  const { inputs: e, attrs: t, backend: n } = r, { axis: s } = t, { x: a } = e;
  assertNotComplex(a, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  const o = n.readSync(a.dataId), { outputValues: u, outputShape: l, indices: f } = uniqueImplCPU(o, s, a.shape, a.dtype);
  return [
    n.makeTensorInfo(l, a.dtype, u),
    n.makeTensorInfo([f.length], "int32", f)
  ];
}
const uniqueConfig = {
  kernelName: Unique,
  backendName: "webgl",
  kernelFunc: unique
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unpack(r) {
  const { inputs: e, backend: t, attrs: n } = r, { value: s } = e;
  let { axis: a } = n;
  a < 0 && (a += s.shape.length);
  const o = s, u = o.shape.length, l = s.shape[a], f = new Array(u - 1);
  let c = 0;
  for (let y = 0; y < u; y++)
    y !== a && (f[c++] = o.shape[y]);
  const h = [], d = new Array(u).fill(0), m = o.shape.slice();
  m[a] = 1;
  const g = new Array(l);
  for (let y = 0; y < g.length; y++) {
    d[a] = y;
    const b = slice({ inputs: { x: o }, backend: t, attrs: { begin: d, size: m } }), v = reshape({ inputs: { x: b }, backend: t, attrs: { shape: f } });
    g[y] = v, h.push(b);
  }
  return h.forEach((y) => t.disposeIntermediateTensorInfo(y)), g;
}
const unpackConfig = {
  kernelName: Unpack,
  backendName: "webgl",
  kernelFunc: unpack
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SegmentOpProgram {
  constructor(e, t) {
    this.variableNames = ["x", "segmentIds"];
    const n = e.windowSize, s = e.batchSize, a = e.inSize, o = e.numSegments, u = o * Math.ceil(a / n);
    this.outputShape = [s, u];
    const l = "0.0", f = "sumValue", c = Math.floor(n / 4) * 4, h = n % 4, d = `
        sumValue += dot(values, segFilter);
    `;
    let m = "";
    a % n > 0 && (m = `
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `);
    let g = "";
    a % n > 0 && (g = `
        if (inIdx < 0 || inIdx >= ${a}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${m}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${g}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${o})) * float(${n}));
        int currentSeg = int(mod(float(outIdx), float(${o})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${d}
        }

        int inIdx = inOffset + ${c};
        if (${h === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${d}
        } else if (${h === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${d}
        } else if (${h === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${d}
        }
        setOutput(${f});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unsortedSegmentSum(r) {
  const { inputs: e, backend: t, attrs: n } = r, { x: s, segmentIds: a } = e, { numSegments: o } = n, u = s.shape.length, l = [];
  let f = 0;
  const c = getAxesPermutation([f], u);
  let h = s;
  c != null && (h = transpose({ inputs: { x: s }, backend: t, attrs: { perm: c } }), l.push(h), f = getInnerMostAxes(1, u)[0]);
  const d = computeOutShape(h.shape, f, o), m = sizeFromShape([h.shape[f]]), g = reshape({ inputs: { x: h }, backend: t, attrs: { shape: [-1, m] } });
  l.push(g);
  const y = sumOutType(s.dtype), b = (T, _, F, O, q) => {
    const V = T.shape[0], H = T.shape[1], R = segOpComputeOptimalWindowSize(H, q), $ = { windowSize: R, inSize: H, batchSize: V, numSegments: q }, S = new SegmentOpProgram($, _), x = t.compileAndRun(S, [T, F], O);
    if (l.push(x), x.shape[1] === q)
      return x;
    const C = range({
      backend: t,
      attrs: { start: 0, stop: q, step: 1, dtype: "float32" }
    }), A = tile({
      inputs: { x: C },
      backend: t,
      attrs: { reps: [H / R] }
    });
    return l.push(C), l.push(A), b(x, _, A, O, q);
  }, v = b(g, "unsortedSegmentSum", a, y, o), w = reshape({ inputs: { x: v }, backend: t, attrs: { shape: d } });
  let I = w;
  if (c != null) {
    l.push(w);
    const T = getUndoAxesPermutation(c);
    I = transpose({ inputs: { x: I }, backend: t, attrs: { perm: T } });
  }
  return l.forEach((T) => t.disposeIntermediateTensorInfo(T)), I;
}
const unsortedSegmentSumConfig = {
  kernelName: UnsortedSegmentSum,
  backendName: "webgl",
  kernelFunc: unsortedSegmentSum
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kernelConfigs = [
  _fusedMatMulConfig,
  absConfig,
  acosConfig,
  acoshConfig,
  addConfig,
  addNConfig,
  allConfig,
  anyConfig,
  argMaxConfig,
  argMinConfig,
  asinConfig,
  asinhConfig,
  atanConfig,
  atan2Config,
  atanhConfig,
  avgPoolConfig,
  avgPool3DConfig,
  avgPool3DGradConfig,
  avgPoolGradConfig,
  batchMatMulConfig,
  batchNormConfig,
  batchToSpaceNDConfig,
  bincountConfig,
  bitwiseAndConfig,
  broadcastArgsConfig,
  castConfig,
  ceilConfig,
  clipByValueConfig,
  complexConfig,
  complexAbsConfig,
  concatConfig,
  conv2DConfig,
  conv2DBackpropFilterConfig,
  conv2DBackpropInputConfig,
  conv3DConfig,
  conv3DBackpropFilterV2Config,
  conv3DBackpropInputConfig,
  cosConfig,
  coshConfig,
  cropAndResizeConfig,
  cumprodConfig,
  cumsumConfig,
  denseBincountConfig,
  depthToSpaceConfig,
  depthwiseConv2dNativeConfig,
  depthwiseConv2dNativeBackpropFilterConfig,
  depthwiseConv2dNativeBackpropInputConfig,
  diagConfig,
  dilation2DConfig,
  einsumConfig,
  eluConfig,
  eluGradConfig,
  equalConfig,
  erfConfig,
  expConfig,
  expandDimsConfig,
  expm1Config,
  fftConfig,
  fillConfig,
  flipLeftRightConfig,
  floorConfig,
  floorDivConfig,
  fromPixelsConfig,
  fusedConv2DConfig,
  fusedDepthwiseConv2DConfig,
  gatherNdConfig,
  gatherV2Config,
  greaterConfig,
  greaterEqualConfig,
  identityConfig,
  ifftConfig,
  imagConfig,
  isFiniteConfig,
  isInfConfig,
  isNaNConfig,
  leakyReluConfig,
  lessConfig,
  lessEqualConfig,
  linSpaceConfig,
  logConfig,
  log1pConfig,
  logicalAndConfig,
  logicalNotConfig,
  logicalOrConfig,
  LRNConfig,
  LRNGradConfig,
  maxConfig,
  maximumConfig,
  maxPoolConfig,
  maxPool3DConfig,
  maxPool3DGradConfig,
  maxPoolGradConfig,
  maxPoolWithArgmaxConfig,
  meanConfig,
  minConfig,
  minimumConfig,
  mirrorPadConfig,
  modConfig,
  multinomialConfig,
  multiplyConfig,
  negConfig,
  nonMaxSuppressionV3Config,
  nonMaxSuppressionV4Config,
  nonMaxSuppressionV5Config,
  notEqualConfig,
  oneHotConfig,
  onesLikeConfig,
  packConfig,
  padV2Config,
  powConfig,
  preluConfig,
  prodConfig,
  raggedGatherConfig,
  raggedRangeConfig,
  raggedTensorToTensorConfig,
  rangeConfig,
  realConfig,
  realDivConfig,
  reciprocalConfig,
  reluConfig,
  relu6Config,
  reshapeConfig,
  resizeBilinearConfig,
  resizeBilinearGradConfig,
  resizeNearestNeighborConfig,
  resizeNearestNeighborGradConfig,
  reverseConfig,
  rotateWithOffsetConfig,
  roundConfig,
  rsqrtConfig,
  scatterNdConfig,
  searchSortedConfig,
  selectConfig,
  seluConfig,
  sigmoidConfig,
  signConfig,
  sinConfig,
  sinhConfig,
  sliceConfig,
  softmaxConfig,
  softplusConfig,
  spaceToBatchNDConfig,
  sparseFillEmptyRowsConfig,
  sparseReshapeConfig,
  sparseSegmentMeanConfig,
  sparseSegmentSumConfig,
  sparseToDenseConfig,
  splitVConfig,
  sqrtConfig,
  squareConfig,
  squaredDifferenceConfig,
  staticRegexReplaceConfig,
  stepConfig,
  stridedSliceConfig,
  stringNGramsConfig,
  stringSplitConfig,
  stringToHashBucketFastConfig,
  subConfig,
  sumConfig,
  tanConfig,
  tanhConfig,
  tensorScatterUpdateConfig,
  tileConfig,
  topKConfig,
  transformConfig,
  transposeConfig,
  uniqueConfig,
  unpackConfig,
  unsortedSegmentSumConfig,
  zerosLikeConfig
];
for (const r of kernelConfigs)
  registerKernel(r);
/** @license See the LICENSE file. */
const version$1 = "4.22.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const version = {
  "tfjs-core": version$7,
  "tfjs-backend-cpu": version$3,
  "tfjs-backend-webgl": version$2,
  "tfjs-data": version$4,
  "tfjs-layers": version$6,
  "tfjs-converter": version$5,
  tfjs: version$1
}, tf = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Abs,
  Acos,
  Acosh,
  AdadeltaOptimizer,
  AdagradOptimizer,
  AdamOptimizer,
  AdamaxOptimizer,
  Add: Add$1,
  AddN,
  All,
  Any,
  ArgMax,
  ArgMin,
  Asin,
  Asinh,
  Atan,
  Atan2,
  Atanh,
  AvgPool,
  AvgPool3D,
  AvgPool3DGrad,
  AvgPoolGrad,
  BatchMatMul,
  BatchToSpaceND,
  Bincount,
  BitwiseAnd,
  BroadcastArgs,
  BroadcastTo,
  Callback,
  CallbackList,
  Cast,
  Ceil,
  ClipByValue,
  Complex,
  ComplexAbs,
  Concat,
  Conv2D: Conv2D$1,
  Conv2DBackpropFilter,
  Conv2DBackpropInput,
  Conv3D: Conv3D$1,
  Conv3DBackpropFilterV2,
  Conv3DBackpropInputV2,
  Cos,
  Cosh,
  CropAndResize,
  Cumprod,
  Cumsum,
  CustomCallback,
  DataStorage,
  DenseBincount,
  DepthToSpace,
  DepthwiseConv2dNative,
  DepthwiseConv2dNativeBackpropFilter,
  DepthwiseConv2dNativeBackpropInput,
  Diag,
  Dilation2D,
  Dilation2DBackpropFilter,
  Dilation2DBackpropInput,
  Draw,
  get ENV() {
    return ENV$4;
  },
  EarlyStopping,
  Einsum,
  Elu: Elu$1,
  EluGrad,
  Environment,
  Equal,
  Erf,
  Exp,
  ExpandDims,
  Expm1,
  FFT,
  Fill,
  FlipLeftRight,
  Floor,
  FloorDiv,
  FromPixels,
  FusedBatchNorm,
  FusedConv2D,
  FusedDepthwiseConv2D,
  GPGPUContext,
  GatherNd,
  GatherV2,
  GraphModel,
  Greater,
  GreaterEqual,
  History,
  IFFT,
  Identity: Identity$1,
  Imag,
  InputSpec,
  IsFinite,
  IsInf,
  IsNan,
  KernelBackend,
  LRN,
  LRNGrad,
  LayerVariable,
  LayersModel,
  LeakyRelu,
  Less,
  LessEqual,
  LinSpace,
  Log,
  Log1p,
  LogSoftmax: LogSoftmax$1,
  LogicalAnd,
  LogicalNot,
  LogicalOr,
  LogicalXor,
  LowerBound,
  MathBackendCPU,
  MathBackendWebGL,
  MatrixBandPart,
  Max,
  MaxPool,
  MaxPool3D,
  MaxPool3DGrad,
  MaxPoolGrad,
  MaxPoolWithArgmax,
  Maximum: Maximum$1,
  Mean,
  Min,
  Minimum: Minimum$1,
  MirrorPad,
  Mod,
  MomentumOptimizer,
  Multinomial,
  Multiply: Multiply$1,
  Neg,
  NonMaxSuppressionV3,
  NonMaxSuppressionV4,
  NonMaxSuppressionV5,
  NotEqual,
  OP_SCOPE_SUFFIX,
  OneHot,
  OnesLike,
  Optimizer,
  OptimizerConstructors,
  Pack,
  PadV2,
  Pool,
  Pow,
  Prelu,
  Prod,
  RMSPropOptimizer,
  RNN,
  RaggedGather,
  RaggedRange,
  RaggedTensorToTensor,
  Range,
  get Rank() {
    return Rank;
  },
  Real,
  RealDiv,
  Reciprocal,
  get Reduction() {
    return Reduction;
  },
  Relu: Relu$1,
  Relu6: Relu6$1,
  Reshape: Reshape$1,
  ResizeBilinear,
  ResizeBilinearGrad,
  ResizeNearestNeighbor,
  ResizeNearestNeighborGrad,
  Reverse,
  RotateWithOffset,
  Round,
  Rsqrt,
  SGDOptimizer,
  ScatterNd,
  SearchSorted,
  Select,
  Selu: Selu$1,
  Sequential,
  Sigmoid: Sigmoid$1,
  Sign,
  Sin,
  Sinh,
  Slice,
  Softmax: Softmax$2,
  Softplus: Softplus$1,
  SpaceToBatchND,
  SparseFillEmptyRows,
  SparseReshape,
  SparseSegmentMean,
  SparseSegmentSum,
  SparseToDense,
  SplitV,
  Sqrt,
  Square,
  SquaredDifference,
  StaticRegexReplace,
  Step,
  StridedSlice,
  StringNGrams,
  StringSplit,
  StringToHashBucketFast,
  Sub,
  Sum,
  SymbolicTensor,
  Tan,
  Tanh: Tanh$1,
  Tensor,
  TensorBuffer,
  TensorScatterUpdate,
  Tile,
  TopK,
  Transform,
  Transpose,
  Unique,
  Unpack,
  UnsortedSegmentSum,
  UpperBound,
  Variable,
  ZerosLike,
  _FusedMatMul,
  abs: abs$3,
  acos: acos$2,
  acosh: acosh$2,
  add: add$2,
  addN: addN$2,
  all: all$2,
  any: any$2,
  argMax: argMax$2,
  argMin: argMin$2,
  asin: asin$2,
  asinh: asinh$2,
  atan: atan$2,
  atan2: atan2$2,
  atanh: atanh$2,
  avgPool: avgPool$2,
  avgPool3d: avgPool3d$1,
  backend,
  backend_util,
  basicLSTMCell,
  batchNorm: batchNorm$2,
  batchNorm2d,
  batchNorm3d,
  batchNorm4d,
  batchToSpaceND: batchToSpaceND$2,
  bincount: bincount$2,
  bitwiseAnd: bitwiseAnd$2,
  booleanMaskAsync,
  broadcastArgs: broadcastArgs$2,
  broadcastTo,
  broadcast_util,
  browser,
  buffer: buffer$1,
  callbacks,
  cast: cast$3,
  ceil: ceil$2,
  clipByValue: clipByValue$2,
  clone,
  complex: complex$2,
  concat: concat$2,
  concat1d,
  concat2d,
  concat3d,
  concat4d,
  constraints: exports_constraints,
  conv1d: conv1d$1,
  conv2d: conv2d$3,
  conv2dTranspose: conv2dTranspose$1,
  conv3d: conv3d$1,
  conv3dTranspose: conv3dTranspose$1,
  copyRegisteredKernels,
  cos: cos$2,
  cosh: cosh$2,
  cosineWindow,
  cumprod: cumprod$2,
  cumsum: cumsum$2,
  customGrad,
  data: index,
  denseBincount: denseBincount$2,
  deprecationWarn,
  depthToSpace: depthToSpace$2,
  depthwiseConv2d: depthwiseConv2d$3,
  deregisterOp,
  device_util,
  diag: diag$2,
  dilation2d,
  disableDeprecationWarnings,
  dispose,
  disposeVariables,
  div: div$1,
  divNoNan,
  dot: dot$2,
  dropout: dropout$2,
  einsum: einsum$2,
  elu: elu$4,
  enableDebugMode,
  enableProdMode,
  enclosingPowerOfTwo,
  engine,
  ensureShape,
  env,
  equal: equal$2,
  erf: erf$2,
  euclideanNorm,
  exp: exp$2,
  expandDims: expandDims$3,
  expm1: expm1$2,
  eye,
  fft: fft$2,
  fill: fill$2,
  findBackend,
  findBackendFactory,
  floor: floor$3,
  floorDiv: floorDiv$2,
  forceHalfFloat,
  fused: fused_ops,
  gather: gather$1,
  gatherND,
  gather_util: gather_nd_util,
  getBackend,
  getGradient,
  getKernel,
  getKernelsForBackend,
  gpgpu_util,
  grad,
  grads,
  greater: greater$3,
  greaterEqual: greaterEqual$2,
  ifft: ifft$2,
  imag: imag$2,
  image: image$1,
  inTopKAsync,
  initializers: exports_initializers,
  input,
  io,
  irfft,
  isFinite: isFinite$3,
  isInf: isInf$2,
  isNaN: isNaN$3,
  keep,
  kernel_impls,
  layers: exports_layers,
  leakyRelu: leakyRelu$2,
  less: less$3,
  lessEqual: lessEqual$2,
  linalg,
  linspace,
  loadGraphModel,
  loadGraphModelSync,
  loadLayersModel,
  localResponseNormalization,
  log: log$2,
  log1p: log1p$2,
  logSigmoid,
  logSoftmax,
  logSumExp,
  logicalAnd: logicalAnd$2,
  logicalNot: logicalNot$2,
  logicalOr: logicalOr$2,
  logicalXor,
  losses,
  lowerBound: lowerBound$1,
  matMul: matMul$1,
  math,
  max: max$4,
  maxPool: maxPool$2,
  maxPool3d: maxPool3d$1,
  maxPoolWithArgmax,
  maximum: maximum$3,
  mean: mean$1,
  memory,
  meshgrid,
  metrics: exports_metrics,
  min: min$4,
  minimum: minimum$3,
  mirrorPad: mirrorPad$1,
  mod: mod$2,
  model: model$1,
  models: exports_models,
  moments,
  movingAverage,
  mul,
  multiRNNCell,
  multinomial: multinomial$2,
  neg: neg$2,
  nextFrame,
  norm,
  notEqual: notEqual$2,
  oneHot: oneHot$2,
  ones: ones$1,
  onesLike: onesLike$2,
  op,
  outerProduct,
  pad,
  pad1d,
  pad2d,
  pad3d,
  pad4d,
  pool: pool$1,
  pow: pow$3,
  prelu: prelu$3,
  print,
  prod: prod$2,
  profile,
  raggedGather: raggedGather$2,
  raggedRange: raggedRange$2,
  raggedTensorToTensor: raggedTensorToTensor$2,
  rand,
  randomGamma,
  randomNormal: randomNormal$2,
  randomStandardNormal,
  randomUniform: randomUniform$1,
  randomUniformInt,
  range: range$3,
  ready,
  real: real$2,
  reciprocal: reciprocal$2,
  registerBackend,
  registerCallbackConstructor,
  registerGradient,
  registerKernel,
  registerOp,
  regularizers: exports_regularizers,
  relu: relu$2,
  relu6: relu6$2,
  removeBackend,
  reshape: reshape$3,
  reverse: reverse$2,
  reverse1d,
  reverse2d,
  reverse3d,
  reverse4d,
  rfft,
  round: round$2,
  rsqrt: rsqrt$2,
  scalar,
  scatterND,
  scatter_util: scatter_nd_util,
  searchSorted: searchSorted$2,
  selu: selu$2,
  separableConv2d: separableConv2d$1,
  sequential,
  serialization,
  setBackend,
  setPlatform,
  setWebGLContext,
  setdiff1dAsync,
  shared,
  sigmoid: sigmoid$2,
  sign: sign$2,
  signal,
  sin: sin$2,
  sinh: sinh$2,
  slice: slice$2,
  slice1d,
  slice2d,
  slice3d,
  slice4d,
  slice_util,
  softmax: softmax$3,
  softplus: softplus$2,
  spaceToBatchND: spaceToBatchND$2,
  sparse: sparse$1,
  sparseToDense: sparseToDense$2,
  spectral: spectral$1,
  split: split$2,
  sqrt: sqrt$2,
  square: square$2,
  squaredDifference: squaredDifference$2,
  squeeze,
  stack,
  step: step$2,
  stridedSlice: stridedSlice$2,
  string: string$1,
  sub: sub$2,
  sum: sum$2,
  sumOutType,
  tan: tan$2,
  tanh: tanh$2,
  tensor,
  tensor1d,
  tensor2d,
  tensor3d,
  tensor4d,
  tensor5d,
  tensor6d,
  tensorScatterUpdate: tensorScatterUpdate$2,
  tensor_util,
  test_util,
  tidy,
  tile: tile$3,
  time,
  topk,
  train,
  transpose: transpose$2,
  truncatedNormal: truncatedNormal$1,
  unique: unique$3,
  unregisterGradient,
  unregisterKernel,
  unsortedSegmentSum: unsortedSegmentSum$2,
  unstack,
  upcastType,
  upperBound: upperBound$1,
  util: util$2,
  valueAndGrad,
  valueAndGrads,
  variable,
  variableGrads,
  version,
  version_converter: version$5,
  version_core: version$7,
  version_cpu: version$3,
  version_layers: version$6,
  version_webgl: version$2,
  webgl,
  webgl_util,
  where,
  whereAsync,
  zeros: zeros$2,
  zerosLike: zerosLike$2
}, Symbol.toStringTag, { value: "Module" }));
var NSFW_CLASSES = {
  0: "Drawing",
  1: "Hentai",
  2: "Neutral",
  3: "Porn",
  4: "Sexy"
}, __awaiter = function(r, e, t, n) {
  function s(a) {
    return a instanceof t ? a : new t(function(o) {
      o(a);
    });
  }
  return new (t || (t = Promise))(function(a, o) {
    function u(c) {
      try {
        f(n.next(c));
      } catch (h) {
        o(h);
      }
    }
    function l(c) {
      try {
        f(n.throw(c));
      } catch (h) {
        o(h);
      }
    }
    function f(c) {
      c.done ? a(c.value) : s(c.value).then(u, l);
    }
    f((n = n.apply(r, e || [])).next());
  });
}, __generator = function(r, e) {
  var t = { label: 0, sent: function() {
    if (a[0] & 1) throw a[1];
    return a[1];
  }, trys: [], ops: [] }, n, s, a, o = Object.create((typeof Iterator == "function" ? Iterator : Object).prototype);
  return o.next = u(0), o.throw = u(1), o.return = u(2), typeof Symbol == "function" && (o[Symbol.iterator] = function() {
    return this;
  }), o;
  function u(f) {
    return function(c) {
      return l([f, c]);
    };
  }
  function l(f) {
    if (n) throw new TypeError("Generator is already executing.");
    for (; o && (o = 0, f[0] && (t = 0)), t; ) try {
      if (n = 1, s && (a = f[0] & 2 ? s.return : f[0] ? s.throw || ((a = s.return) && a.call(s), 0) : s.next) && !(a = a.call(s, f[1])).done) return a;
      switch (s = 0, a && (f = [f[0] & 2, a.value]), f[0]) {
        case 0:
        case 1:
          a = f;
          break;
        case 4:
          return t.label++, { value: f[1], done: !1 };
        case 5:
          t.label++, s = f[1], f = [0];
          continue;
        case 7:
          f = t.ops.pop(), t.trys.pop();
          continue;
        default:
          if (a = t.trys, !(a = a.length > 0 && a[a.length - 1]) && (f[0] === 6 || f[0] === 2)) {
            t = 0;
            continue;
          }
          if (f[0] === 3 && (!a || f[1] > a[0] && f[1] < a[3])) {
            t.label = f[1];
            break;
          }
          if (f[0] === 6 && t.label < a[1]) {
            t.label = a[1], a = f;
            break;
          }
          if (a && t.label < a[2]) {
            t.label = a[2], t.ops.push(f);
            break;
          }
          a[2] && t.ops.pop(), t.trys.pop();
          continue;
      }
      f = e.call(r, t);
    } catch (c) {
      f = [6, c], s = 0;
    } finally {
      n = a = 0;
    }
    if (f[0] & 5) throw f[1];
    return { value: f[0] ? f[1] : void 0, done: !0 };
  }
}, __spreadArray = function(r, e, t) {
  if (t || arguments.length === 2) for (var n = 0, s = e.length, a; n < s; n++)
    (a || !(n in e)) && (a || (a = Array.prototype.slice.call(e, 0, n)), a[n] = e[n]);
  return r.concat(a || Array.prototype.slice.call(e));
}, availableModels = {
  MobileNetV2: { numOfWeightBundles: 1 },
  MobileNetV2Mid: {
    numOfWeightBundles: 2,
    options: { type: "graph" }
  },
  InceptionV3: {
    numOfWeightBundles: 6,
    options: { size: 299 }
  }
}, DEFAULT_MODEL_NAME = "MobileNetV2", IMAGE_SIZE = 224, getGlobal = function() {
  if (typeof globalThis < "u")
    return globalThis;
  if (typeof global$1 < "u")
    return global$1;
  if (typeof window < "u")
    return window;
  if (typeof self < "u")
    return self;
  throw new Error("Unable to locate global object");
};
function isModelName(r) {
  return !!r && r in availableModels;
}
var getModelJson = function(r) {
  return __awaiter(void 0, void 0, void 0, function() {
    var e, t;
    return __generator(this, function(n) {
      switch (n.label) {
        case 0:
          return e = getGlobal().model, e ? [2, e] : r !== "MobileNetV2" ? [3, 2] : [4, import("./mobilenet_v2-BTbtiywC.js")];
        case 1:
          return t = n.sent().modelJson, [3, 6];
        case 2:
          return r !== "MobileNetV2Mid" ? [3, 4] : [4, import("./mobilenet_v2_mid-Bex7tFUo.js")];
        case 3:
          return t = n.sent().modelJson, [3, 6];
        case 4:
          return r !== "InceptionV3" ? [3, 6] : [4, import("./inception_v3-6-1iRf4W.js")];
        case 5:
          t = n.sent().modelJson, n.label = 6;
        case 6:
          return [4, t()];
        case 7:
          return [2, n.sent().default];
      }
    });
  });
}, getWeightData = function(r) {
  return __awaiter(void 0, void 0, void 0, function() {
    var e, t, n, s, a, o, u, l, f, c;
    return __generator(this, function(h) {
      switch (h.label) {
        case 0:
          e = availableModels[r].numOfWeightBundles, t = [], n = 0, h.label = 1;
        case 1:
          return n < e ? (s = "group1-shard".concat(n + 1, "of").concat(e), a = s.replace(/-/g, "_"), o = getGlobal()[a], o ? (t.push((f = {}, f[s] = o, f)), [3, 10]) : [3, 2]) : [3, 11];
        case 2:
          return u = void 0, r !== "MobileNetV2" ? [3, 4] : [4, import("./mobilenet_v2-BTbtiywC.js")];
        case 3:
          return u = h.sent().weightBundles, [3, 8];
        case 4:
          return r !== "MobileNetV2Mid" ? [3, 6] : [4, import("./mobilenet_v2_mid-Bex7tFUo.js")];
        case 5:
          return u = h.sent().weightBundles, [3, 8];
        case 6:
          return r !== "InceptionV3" ? [3, 8] : [4, import("./inception_v3-6-1iRf4W.js")];
        case 7:
          u = h.sent().weightBundles, h.label = 8;
        case 8:
          return [4, u[n]()];
        case 9:
          l = h.sent().default, t.push((c = {}, c[s] = l, c)), h.label = 10;
        case 10:
          return n++, [3, 1];
        case 11:
          return [2, Object.assign.apply(Object, __spreadArray([{}], t, !1))];
      }
    });
  });
};
function loadWeights(r) {
  return __awaiter(this, void 0, void 0, function() {
    var e;
    return __generator(this, function(t) {
      switch (t.label) {
        case 0:
          return t.trys.push([0, 2, , 3]), [4, getWeightData(r)];
        case 1:
          return e = t.sent(), [2, e];
        case 2:
          throw t.sent(), new Error("Could not load the weight data. Make sure you are importing the correct shard files from the models directory. Ref: https://github.com/infinitered/nsfwjs?tab=readme-ov-file#browserify");
        case 3:
          return [2];
      }
    });
  });
}
function loadModel(r) {
  return __awaiter(this, void 0, void 0, function() {
    var e, t, n;
    return __generator(this, function(s) {
      switch (s.label) {
        case 0:
          if (!isModelName(r))
            return [2, r];
          s.label = 1;
        case 1:
          return s.trys.push([1, 4, , 5]), [4, getModelJson(r)];
        case 2:
          return e = s.sent(), [4, loadWeights(r)];
        case 3:
          return t = s.sent(), n = new JSONHandler(e, t), [2, n];
        case 4:
          throw s.sent(), new Error("Could not load the model. Make sure you are importing the model.min.js bundle. Ref: https://github.com/infinitered/nsfwjs?tab=readme-ov-file#browserify");
        case 5:
          return [2];
      }
    });
  });
}
function load(r) {
  return __awaiter(this, arguments, void 0, function(e, t) {
    var n, s, a;
    return t === void 0 && (t = { size: IMAGE_SIZE }), __generator(this, function(o) {
      switch (o.label) {
        case 0:
          if (tf == null)
            throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.");
          return e === void 0 ? (e = DEFAULT_MODEL_NAME, console.info("%cBy not specifying 'modelOrUrl' parameter, you're using the default model: '".concat(e, "'. See NSFWJS docs for instructions on hosting your own model (https://github.com/infinitered/nsfwjs?tab=readme-ov-file#host-your-own-model)."), "color: lightblue")) : isModelName(e) && (console.info("%cYou're using the model: '".concat(e, "'. See NSFWJS docs for instructions on hosting your own model (https://github.com/infinitered/nsfwjs?tab=readme-ov-file#host-your-own-model)."), "color: lightblue"), t = (a = availableModels[e].options) !== null && a !== void 0 ? a : t), t.size = (t == null ? void 0 : t.size) || IMAGE_SIZE, [4, loadModel(e)];
        case 1:
          return n = o.sent(), s = new NSFWJS(n, t), [4, s.load()];
        case 2:
          return o.sent(), [2, s];
      }
    });
  });
}
var JSONHandler = function() {
  function r(e, t) {
    this.modelJson = e, this.weightDataBase64 = t;
  }
  return r.prototype.arrayBufferFromBase64 = function(e) {
    for (var t = Buffer$1.from(e, "base64").toString("binary"), n = t.length, s = new Uint8Array(n), a = 0; a < n; a++)
      s[a] = t.charCodeAt(a);
    return s.buffer;
  }, r.prototype.load = function() {
    return __awaiter(this, void 0, void 0, function() {
      var e, t, n, s, a, o, u, l, f, c, h, d, m, g;
      return __generator(this, function(y) {
        if (e = {
          modelTopology: this.modelJson.modelTopology,
          format: this.modelJson.format,
          generatedBy: this.modelJson.generatedBy,
          convertedBy: this.modelJson.convertedBy
        }, this.modelJson.weightsManifest != null) {
          for (t = [], n = [], s = 0, a = this.modelJson.weightsManifest; s < a.length; s++) {
            for (o = a[s], u = 0, l = o.paths; u < l.length; u++) {
              if (f = l[u], c = this.weightDataBase64[f], !c)
                throw new Error("Could not find the weight data. Make sure you are importing the correct weight bundle for the model: ".concat(f, ".min.js."));
              h = this.arrayBufferFromBase64(c), n.push(new Uint8Array(h));
            }
            t.push.apply(t, o.weights);
          }
          for (e.weightSpecs = t, d = new Uint8Array(n.reduce(function(b, v) {
            return b + v.length;
          }, 0)), m = 0, g = 0; g < n.length; g++)
            d.set(n[g], m), m += n[g].byteLength;
          e.weightData = d.buffer;
        }
        return this.modelJson.trainingConfig != null && (e.trainingConfig = this.modelJson.trainingConfig), this.modelJson.userDefinedMetadata != null && (e.userDefinedMetadata = this.modelJson.userDefinedMetadata), [2, e];
      });
    });
  }, r;
}(), NSFWJS = function() {
  function r(e, t) {
    this.intermediateModels = {}, this.options = t, this.normalizationOffset = scalar(255), this.urlOrIOHandler = e, typeof e == "string" && !e.startsWith("indexeddb://") && !e.startsWith("localstorage://") && !e.endsWith("model.json") ? this.urlOrIOHandler = "".concat(e, "model.json") : this.urlOrIOHandler = e;
  }
  return r.prototype.load = function() {
    return __awaiter(this, void 0, void 0, function() {
      var e, t, n, s, a, o, u = this;
      return __generator(this, function(l) {
        switch (l.label) {
          case 0:
            return e = this.options, t = e.size, n = e.type, n !== "graph" ? [3, 2] : (s = this, [4, loadGraphModel(this.urlOrIOHandler)]);
          case 1:
            return s.model = l.sent(), [3, 4];
          case 2:
            return a = this, [4, loadLayersModel(this.urlOrIOHandler)];
          case 3:
            a.model = l.sent(), this.endpoints = this.model.layers.map(function(f) {
              return f.name;
            }), l.label = 4;
          case 4:
            return o = tidy(function() {
              return u.model.predict(zeros$2([1, t, t, 3]));
            }), [4, o.data()];
          case 5:
            return l.sent(), o.dispose(), [2];
        }
      });
    });
  }, r.prototype.infer = function(e, t) {
    var n = this;
    if (t != null && this.endpoints.indexOf(t) === -1)
      throw new Error("Unknown endpoint ".concat(t, ". Available endpoints: ").concat(this.endpoints, "."));
    return tidy(function() {
      e instanceof Tensor || (e = fromPixels$1(e));
      var s = e.toFloat().div(n.normalizationOffset), a = s, o = n.options.size;
      if (e.shape[0] !== o || e.shape[1] !== o) {
        var u = !0;
        a = image$1.resizeBilinear(s, [o, o], u);
      }
      var l = a.reshape([1, o, o, 3]), f;
      if (t == null)
        f = n.model;
      else {
        if (n.model.hasOwnProperty("layers") && n.intermediateModels[t] == null) {
          var c = n.model.layers.find(function(h) {
            return h.name === t;
          });
          n.intermediateModels[t] = model$1({
            inputs: n.model.inputs,
            outputs: c.output
          });
        }
        f = n.intermediateModels[t];
      }
      return f.predict(l);
    });
  }, r.prototype.classify = function(e) {
    return __awaiter(this, arguments, void 0, function(t, n) {
      var s, a;
      return n === void 0 && (n = 5), __generator(this, function(o) {
        switch (o.label) {
          case 0:
            return s = this.infer(t), [4, getTopKClasses(s, n)];
          case 1:
            return a = o.sent(), s.dispose(), [2, a];
        }
      });
    });
  }, r;
}();
function getTopKClasses(r, e) {
  return __awaiter(this, void 0, void 0, function() {
    var t, n, u, s, a, u, o, u;
    return __generator(this, function(l) {
      switch (l.label) {
        case 0:
          return [4, r.data()];
        case 1:
          for (t = l.sent(), n = [], u = 0; u < t.length; u++)
            n.push({ value: t[u], index: u });
          for (n.sort(function(f, c) {
            return c.value - f.value;
          }), s = new Float32Array(e), a = new Int32Array(e), u = 0; u < e; u++)
            s[u] = n[u].value, a[u] = n[u].index;
          for (o = [], u = 0; u < a.length; u++)
            o.push({
              className: NSFW_CLASSES[a[u]],
              probability: s[u]
            });
          return [2, o];
      }
    });
  });
}
var StorageEnum;
(function(r) {
  r.Local = "local", r.Sync = "sync", r.Managed = "managed", r.Session = "session";
})(StorageEnum || (StorageEnum = {}));
var SessionAccessLevelEnum;
(function(r) {
  r.ExtensionPagesOnly = "TRUSTED_CONTEXTS", r.ExtensionPagesAndContentScripts = "TRUSTED_AND_UNTRUSTED_CONTEXTS";
})(SessionAccessLevelEnum || (SessionAccessLevelEnum = {}));
const chrome$1 = globalThis.chrome, updateCache = async (r, e) => {
  const t = (s) => typeof s == "function", n = (s) => s instanceof Promise;
  return t(r) ? (n(r), r(e)) : r;
};
let globalSessionAccessLevelFlag = !1;
function checkStoragePermission(r) {
  if (chrome$1 && chrome$1.storage[r] === void 0)
    throw new Error(`Check your storage permission in manifest.json: ${r} is not defined`);
}
function createStorage(r, e, t) {
  var y, b;
  let n = null, s = !1, a = [];
  const o = (t == null ? void 0 : t.storageEnum) ?? StorageEnum.Local, u = ((y = t == null ? void 0 : t.serialization) == null ? void 0 : y.serialize) ?? ((v) => v), l = ((b = t == null ? void 0 : t.serialization) == null ? void 0 : b.deserialize) ?? ((v) => v);
  globalSessionAccessLevelFlag === !1 && o === StorageEnum.Session && (t == null ? void 0 : t.sessionAccessForContentScripts) === !0 && (checkStoragePermission(o), chrome$1 == null || chrome$1.storage[o].setAccessLevel({
    accessLevel: SessionAccessLevelEnum.ExtensionPagesAndContentScripts
  }).catch((v) => {
    console.warn(v), console.warn("Please call setAccessLevel into different context, like a background script.");
  }), globalSessionAccessLevelFlag = !0);
  const f = async () => {
    checkStoragePermission(o);
    const v = await (chrome$1 == null ? void 0 : chrome$1.storage[o].get([r]));
    return v ? l(v[r]) ?? e : e;
  }, c = () => {
    a.forEach((v) => v());
  }, h = async (v) => {
    s || (n = await f()), n = await updateCache(v, n), await (chrome$1 == null ? void 0 : chrome$1.storage[o].set({ [r]: u(n) })), c();
  }, d = (v) => (a = [...a, v], () => {
    a = a.filter((w) => w !== v);
  }), m = () => n;
  f().then((v) => {
    n = v, s = !0, c();
  });
  async function g(v) {
    if (v[r] === void 0)
      return;
    const w = l(v[r].newValue);
    n !== w && (n = await updateCache(w, n), c());
  }
  return chrome$1 == null || chrome$1.storage[o].onChanged.addListener(g), {
    get: f,
    set: h,
    getSnapshot: m,
    subscribe: d
  };
}
const storage = createStorage("theme-storage-key", "light", {
  storageEnum: StorageEnum.Local
}), exampleThemeStorage = {
  ...storage,
  toggle: async () => {
    await storage.set((r) => r === "light" ? "dark" : "light");
  }
};
let model = null;
const loadModelPromise = loadNsfwModel();
async function loadNsfwModel() {
  try {
    console.log("Loading NSFWJS model (local)..."), await ready(), model = await load("/nsfw_model/", { size: 224 }), console.log("NSFWJS model loaded successfully.");
  } catch (r) {
    console.error("Error loading NSFWJS model:", r), model = null;
  }
}
chrome.runtime.onMessage.addListener((r, e, t) => {
  var n;
  return r.type === "classifyImage" && r.imageUrl ? (handleImageClassification(r.imageUrl).then((s) => {
    t({ status: "success", result: s });
  }).catch((s) => {
    console.error("Error classifying image:", s.message), t({ status: "error", message: s.message });
  }), !0) : r.type === "openSidePanel" && (console.log("[Background] Opening side panel"), (n = e.tab) != null && n.windowId) ? (chrome.sidePanel.open({ windowId: e.tab.windowId }).then(() => {
    console.log("[Background] Side panel opened successfully"), t({ status: "success" });
  }).catch((s) => {
    console.error("[Background] Error opening side panel:", s), t({ status: "error", message: s.message });
  }), !0) : !1;
});
async function handleImageClassification(r) {
  if (!model && (await loadModelPromise, !model))
    throw new Error("NSFWJS model failed to load and is unavailable.");
  try {
    const e = await fetch(r);
    if (!e.ok)
      throw new Error(`Failed to fetch image: ${e.statusText}`);
    const t = await e.blob(), n = await createImageBitmap(t), s = new OffscreenCanvas(n.width, n.height), a = s.getContext("2d");
    if (!a)
      throw new Error("Failed to get OffscreenCanvas context");
    a.drawImage(n, 0, 0);
    const o = a.getImageData(0, 0, s.width, s.height);
    return n.close(), await model.classify(o);
  } catch (e) {
    throw console.error("Error classifying image:", e), e instanceof Error ? e : new Error(`Classification error: ${String(e)}`);
  }
}
chrome.sidePanel.setPanelBehavior({ openPanelOnActionClick: !0 }).catch((r) => console.error("Error setting side panel behavior:", r));
console.log("Side panel configured to open on action click.");
exampleThemeStorage.get().then((r) => {
  console.log("Initial theme:", r);
});
console.log("Background service worker loaded.");
console.log("Edit 'chrome-extension/src/background/index.ts' and save to reload.");
